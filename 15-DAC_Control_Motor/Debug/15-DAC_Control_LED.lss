
15-DAC_Control_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00004542  000045d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080019a  0080019a  00004710  2**0
                  ALLOC
  3 .stab         00004c20  00000000  00000000  00004710  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d02  00000000  00000000  00009330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000b032  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000b383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000d393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000e4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000f4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000f698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000f956  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__vector_9>
      28:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_10>
      2c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <main>
      8a:	0c 94 9f 22 	jmp	0x453e	; 0x453e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 22 	jmp	0x4508	; 0x4508 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 22 	jmp	0x4508	; 0x4508 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 94 22 	jmp	0x4528	; 0x4528 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e6 57       	subi	r30, 0x76	; 118
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     ca8:	a3 e5       	ldi	r26, 0x53	; 83
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e3 e5       	ldi	r30, 0x53	; 83
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 7f       	andi	r24, 0xF8	; 248
     cb4:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     cb6:	a3 e5       	ldi	r26, 0x53	; 83
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e3 e5       	ldi	r30, 0x53	; 83
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	83 60       	ori	r24, 0x03	; 3
     cc2:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     cc4:	a3 e5       	ldi	r26, 0x53	; 83
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e3 e5       	ldi	r30, 0x53	; 83
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     cd2:	a3 e5       	ldi	r26, 0x53	; 83
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e3 e5       	ldi	r30, 0x53	; 83
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     ce0:	a3 e5       	ldi	r26, 0x53	; 83
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e3 e5       	ldi	r30, 0x53	; 83
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	80 62       	ori	r24, 0x20	; 32
     cec:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     cee:	a3 e5       	ldi	r26, 0x53	; 83
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e3 e5       	ldi	r30, 0x53	; 83
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8f 7e       	andi	r24, 0xEF	; 239
     cfa:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	0f 92       	push	r0
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     d0e:	e2 e5       	ldi	r30, 0x52	; 82
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	80 83       	st	Z, r24
}
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     d2a:	ec e5       	ldi	r30, 0x5C	; 92
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	80 83       	st	Z, r24
}
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <MTIMER0_VidOVF_SetCallBack+0x6>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	90 93 9c 01 	sts	0x019C, r25
     d50:	80 93 9b 01 	sts	0x019B, r24
}
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	00 d0       	rcall	.+0      	; 0xd64 <MTIMER0_VidCTC_SetCallBack+0x6>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	90 93 9c 01 	sts	0x019C, r25
     d74:	80 93 9b 01 	sts	0x019B, r24
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     dac:	e0 91 9b 01 	lds	r30, 0x019B
     db0:	f0 91 9c 01 	lds	r31, 0x019C
     db4:	09 95       	icall
}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	bf 91       	pop	r27
     dc0:	af 91       	pop	r26
     dc2:	9f 91       	pop	r25
     dc4:	8f 91       	pop	r24
     dc6:	7f 91       	pop	r23
     dc8:	6f 91       	pop	r22
     dca:	5f 91       	pop	r21
     dcc:	4f 91       	pop	r20
     dce:	3f 91       	pop	r19
     dd0:	2f 91       	pop	r18
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     e06:	e0 91 9b 01 	lds	r30, 0x019B
     e0a:	f0 91 9c 01 	lds	r31, 0x019C
     e0e:	09 95       	icall
}
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	ff 91       	pop	r31
     e16:	ef 91       	pop	r30
     e18:	bf 91       	pop	r27
     e1a:	af 91       	pop	r26
     e1c:	9f 91       	pop	r25
     e1e:	8f 91       	pop	r24
     e20:	7f 91       	pop	r23
     e22:	6f 91       	pop	r22
     e24:	5f 91       	pop	r21
     e26:	4f 91       	pop	r20
     e28:	3f 91       	pop	r19
     e2a:	2f 91       	pop	r18
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     e3e:	ae e4       	ldi	r26, 0x4E	; 78
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	ee e4       	ldi	r30, 0x4E	; 78
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 7f       	andi	r24, 0xF8	; 248
     e4a:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     e4c:	ae e4       	ldi	r26, 0x4E	; 78
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	ee e4       	ldi	r30, 0x4E	; 78
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	81 60       	ori	r24, 0x01	; 1
     e58:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);

#elif TIMER1_SET_MODE == TIMER1_ICU_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     e5a:	ae e4       	ldi	r26, 0x4E	; 78
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ee e4       	ldi	r30, 0x4E	; 78
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8f 7e       	andi	r24, 0xEF	; 239
     e66:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     e68:	ae e4       	ldi	r26, 0x4E	; 78
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ee e4       	ldi	r30, 0x4E	; 78
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     e76:	af e4       	ldi	r26, 0x4F	; 79
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	ef e4       	ldi	r30, 0x4F	; 79
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8d 7f       	andi	r24, 0xFD	; 253
     e82:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
     e84:	af e4       	ldi	r26, 0x4F	; 79
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ef e4       	ldi	r30, 0x4F	; 79
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
     e92:	a9 e5       	ldi	r26, 0x59	; 89
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e9 e5       	ldi	r30, 0x59	; 89
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	84 60       	ori	r24, 0x04	; 4
     e9e:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
     ea0:	a9 e5       	ldi	r26, 0x59	; 89
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e9 e5       	ldi	r30, 0x59	; 89
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 62       	ori	r24, 0x20	; 32
     eac:	8c 93       	st	X, r24
	/*ICU Edge Select-->Rising edge*/
#if TIMER1_ICU_EDGE_SELECT == TIMER1_ICU_RISING_EDGE
	SET_BIT(TCCR1B,6);
     eae:	ae e4       	ldi	r26, 0x4E	; 78
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ee e4       	ldi	r30, 0x4E	; 78
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 64       	ori	r24, 0x40	; 64
     eba:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <MTIMER1_VidSetPreload+0x6>
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
     ed0:	ec e4       	ldi	r30, 0x4C	; 76
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	91 83       	std	Z+1, r25	; 0x01
     eda:	80 83       	st	Z, r24
}
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
     eee:	ec e4       	ldi	r30, 0x4C	; 76
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
     f04:	e6 e4       	ldi	r30, 0x46	; 70
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	88 23       	and	r24, r24
     f22:	41 f4       	brne	.+16     	; 0xf34 <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
     f24:	ae e4       	ldi	r26, 0x4E	; 78
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ee e4       	ldi	r30, 0x4E	; 78
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7b       	andi	r24, 0xBF	; 191
     f30:	8c 93       	st	X, r24
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	39 f4       	brne	.+14     	; 0xf48 <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
     f3a:	ae e4       	ldi	r26, 0x4E	; 78
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ee e4       	ldi	r30, 0x4E	; 78
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 64       	ori	r24, 0x40	; 64
     f46:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <MTIMER1_VidOVF_SetCallBack+0x6>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	90 93 9e 01 	sts	0x019E, r25
     f66:	80 93 9d 01 	sts	0x019D, r24
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <MTIMER1_VidICF_SetCallBack+0x6>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	90 93 a0 01 	sts	0x01A0, r25
     f8a:	80 93 9f 01 	sts	0x019F, r24
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	2f 93       	push	r18
     fa4:	3f 93       	push	r19
     fa6:	4f 93       	push	r20
     fa8:	5f 93       	push	r21
     faa:	6f 93       	push	r22
     fac:	7f 93       	push	r23
     fae:	8f 93       	push	r24
     fb0:	9f 93       	push	r25
     fb2:	af 93       	push	r26
     fb4:	bf 93       	push	r27
     fb6:	ef 93       	push	r30
     fb8:	ff 93       	push	r31
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
     fc2:	e0 91 9d 01 	lds	r30, 0x019D
     fc6:	f0 91 9e 01 	lds	r31, 0x019E
     fca:	09 95       	icall
}
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
    101c:	e0 91 9f 01 	lds	r30, 0x019F
    1020:	f0 91 a0 01 	lds	r31, 0x01A0
    1024:	09 95       	icall
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1054:	af e5       	ldi	r26, 0x5F	; 95
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ef e5       	ldi	r30, 0x5F	; 95
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 68       	ori	r24, 0x80	; 128
    1060:	8c 93       	st	X, r24
}
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1070:	af e5       	ldi	r26, 0x5F	; 95
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ef e5       	ldi	r30, 0x5F	; 95
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 77       	andi	r24, 0x7F	; 127
    107c:	8c 93       	st	X, r24
}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    108c:	a5 e5       	ldi	r26, 0x55	; 85
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e5       	ldi	r30, 0x55	; 85
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    109a:	a5 e5       	ldi	r26, 0x55	; 85
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e5       	ldi	r30, 0x55	; 85
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	82 60       	ori	r24, 0x02	; 2
    10a6:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    10a8:	ab e5       	ldi	r26, 0x5B	; 91
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	eb e5       	ldi	r30, 0x5B	; 91
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	8c 93       	st	X, r24
}
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    10c4:	a5 e5       	ldi	r26, 0x55	; 85
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e5 e5       	ldi	r30, 0x55	; 85
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	84 60       	ori	r24, 0x04	; 4
    10d0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    10d2:	a5 e5       	ldi	r26, 0x55	; 85
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e5       	ldi	r30, 0x55	; 85
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	88 60       	ori	r24, 0x08	; 8
    10de:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    10e0:	ab e5       	ldi	r26, 0x5B	; 91
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	eb e5       	ldi	r30, 0x5B	; 91
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 68       	ori	r24, 0x80	; 128
    10ec:	8c 93       	st	X, r24
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    10fc:	a4 e5       	ldi	r26, 0x54	; 84
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e4 e5       	ldi	r30, 0x54	; 84
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    110a:	ab e5       	ldi	r26, 0x5B	; 91
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	eb e5       	ldi	r30, 0x5B	; 91
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 62       	ori	r24, 0x20	; 32
    1116:	8c 93       	st	X, r24
}
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <MEXTI_VidSenseControl+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <MEXTI_VidSenseControl+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3c 83       	std	Y+4, r19	; 0x04
    1136:	2b 83       	std	Y+3, r18	; 0x03
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <MEXTI_VidSenseControl+0x26>
    1142:	54 c0       	rjmp	.+168    	; 0x11ec <MEXTI_VidSenseControl+0xce>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <MEXTI_VidSenseControl+0x32>
    114e:	96 c0       	rjmp	.+300    	; 0x127c <MEXTI_VidSenseControl+0x15e>
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	09 f0       	breq	.+2      	; 0x115a <MEXTI_VidSenseControl+0x3c>
    1158:	a6 c0       	rjmp	.+332    	; 0x12a6 <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	88 23       	and	r24, r24
    115e:	79 f4       	brne	.+30     	; 0x117e <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    1160:	a5 e5       	ldi	r26, 0x55	; 85
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e5       	ldi	r30, 0x55	; 85
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8e 7f       	andi	r24, 0xFE	; 254
    116c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    116e:	a5 e5       	ldi	r26, 0x55	; 85
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e5       	ldi	r30, 0x55	; 85
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8d 7f       	andi	r24, 0xFD	; 253
    117a:	8c 93       	st	X, r24
    117c:	94 c0       	rjmp	.+296    	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	79 f4       	brne	.+30     	; 0x11a2 <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e5       	ldi	r30, 0x55	; 85
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	81 60       	ori	r24, 0x01	; 1
    1190:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1192:	a5 e5       	ldi	r26, 0x55	; 85
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e5 e5       	ldi	r30, 0x55	; 85
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	8c 93       	st	X, r24
    11a0:	82 c0       	rjmp	.+260    	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	79 f4       	brne	.+30     	; 0x11c6 <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    11a8:	a5 e5       	ldi	r26, 0x55	; 85
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e5       	ldi	r30, 0x55	; 85
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8e 7f       	andi	r24, 0xFE	; 254
    11b4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    11b6:	a5 e5       	ldi	r26, 0x55	; 85
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e5       	ldi	r30, 0x55	; 85
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	82 60       	ori	r24, 0x02	; 2
    11c2:	8c 93       	st	X, r24
    11c4:	70 c0       	rjmp	.+224    	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	09 f0       	breq	.+2      	; 0x11ce <MEXTI_VidSenseControl+0xb0>
    11cc:	6c c0       	rjmp	.+216    	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    11ce:	a5 e5       	ldi	r26, 0x55	; 85
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e5       	ldi	r30, 0x55	; 85
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	81 60       	ori	r24, 0x01	; 1
    11da:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    11dc:	a5 e5       	ldi	r26, 0x55	; 85
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e5 e5       	ldi	r30, 0x55	; 85
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	82 60       	ori	r24, 0x02	; 2
    11e8:	8c 93       	st	X, r24
    11ea:	5d c0       	rjmp	.+186    	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	88 23       	and	r24, r24
    11f0:	79 f4       	brne	.+30     	; 0x1210 <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    11f2:	a5 e5       	ldi	r26, 0x55	; 85
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e5 e5       	ldi	r30, 0x55	; 85
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8b 7f       	andi	r24, 0xFB	; 251
    11fe:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1200:	a5 e5       	ldi	r26, 0x55	; 85
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e5       	ldi	r30, 0x55	; 85
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	87 7f       	andi	r24, 0xF7	; 247
    120c:	8c 93       	st	X, r24
    120e:	4b c0       	rjmp	.+150    	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	79 f4       	brne	.+30     	; 0x1234 <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    1216:	a5 e5       	ldi	r26, 0x55	; 85
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e5 e5       	ldi	r30, 0x55	; 85
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	84 60       	ori	r24, 0x04	; 4
    1222:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1224:	a5 e5       	ldi	r26, 0x55	; 85
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e5       	ldi	r30, 0x55	; 85
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	87 7f       	andi	r24, 0xF7	; 247
    1230:	8c 93       	st	X, r24
    1232:	39 c0       	rjmp	.+114    	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	79 f4       	brne	.+30     	; 0x1258 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    123a:	a5 e5       	ldi	r26, 0x55	; 85
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e5       	ldi	r30, 0x55	; 85
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8b 7f       	andi	r24, 0xFB	; 251
    1246:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1248:	a5 e5       	ldi	r26, 0x55	; 85
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e5       	ldi	r30, 0x55	; 85
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	88 60       	ori	r24, 0x08	; 8
    1254:	8c 93       	st	X, r24
    1256:	27 c0       	rjmp	.+78     	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	21 f5       	brne	.+72     	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    125e:	a5 e5       	ldi	r26, 0x55	; 85
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e5       	ldi	r30, 0x55	; 85
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 60       	ori	r24, 0x08	; 8
    1278:	8c 93       	st	X, r24
    127a:	15 c0       	rjmp	.+42     	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	41 f4       	brne	.+16     	; 0x1292 <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    1282:	a4 e5       	ldi	r26, 0x54	; 84
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e4 e5       	ldi	r30, 0x54	; 84
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8f 7b       	andi	r24, 0xBF	; 191
    128e:	8c 93       	st	X, r24
    1290:	0a c0       	rjmp	.+20     	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	39 f4       	brne	.+14     	; 0x12a6 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    1298:	a4 e5       	ldi	r26, 0x54	; 84
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e4 e5       	ldi	r30, 0x54	; 84
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 64       	ori	r24, 0x40	; 64
    12a4:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <MEXTI0_Set_CallBackFunction+0x6>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	9a 81       	ldd	r25, Y+2	; 0x02
    12c6:	90 93 a2 01 	sts	0x01A2, r25
    12ca:	80 93 a1 01 	sts	0x01A1, r24
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	4f 93       	push	r20
    12e8:	5f 93       	push	r21
    12ea:	6f 93       	push	r22
    12ec:	7f 93       	push	r23
    12ee:	8f 93       	push	r24
    12f0:	9f 93       	push	r25
    12f2:	af 93       	push	r26
    12f4:	bf 93       	push	r27
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    1302:	e0 91 a1 01 	lds	r30, 0x01A1
    1306:	f0 91 a2 01 	lds	r31, 0x01A2
    130a:	09 95       	icall
}
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	ff 91       	pop	r31
    1312:	ef 91       	pop	r30
    1314:	bf 91       	pop	r27
    1316:	af 91       	pop	r26
    1318:	9f 91       	pop	r25
    131a:	8f 91       	pop	r24
    131c:	7f 91       	pop	r23
    131e:	6f 91       	pop	r22
    1320:	5f 91       	pop	r21
    1322:	4f 91       	pop	r20
    1324:	3f 91       	pop	r19
    1326:	2f 91       	pop	r18
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	0f 90       	pop	r0
    132e:	1f 90       	pop	r1
    1330:	18 95       	reti

00001332 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <MDIO_Error_State_SetPinDirection+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <MDIO_Error_State_SetPinDirection+0x8>
    133a:	00 d0       	rcall	.+0      	; 0x133c <MDIO_Error_State_SetPinDirection+0xa>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	6b 83       	std	Y+3, r22	; 0x03
    1344:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	08 f0       	brcs	.+2      	; 0x1352 <MDIO_Error_State_SetPinDirection+0x20>
    1350:	e8 c0       	rjmp	.+464    	; 0x1522 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3e 83       	std	Y+6, r19	; 0x06
    135a:	2d 83       	std	Y+5, r18	; 0x05
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <MDIO_Error_State_SetPinDirection+0x36>
    1366:	48 c0       	rjmp	.+144    	; 0x13f8 <MDIO_Error_State_SetPinDirection+0xc6>
    1368:	2d 81       	ldd	r18, Y+5	; 0x05
    136a:	3e 81       	ldd	r19, Y+6	; 0x06
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	2c f4       	brge	.+10     	; 0x137c <MDIO_Error_State_SetPinDirection+0x4a>
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	71 f0       	breq	.+28     	; 0x1396 <MDIO_Error_State_SetPinDirection+0x64>
    137a:	d1 c0       	rjmp	.+418    	; 0x151e <MDIO_Error_State_SetPinDirection+0x1ec>
    137c:	2d 81       	ldd	r18, Y+5	; 0x05
    137e:	3e 81       	ldd	r19, Y+6	; 0x06
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <MDIO_Error_State_SetPinDirection+0x56>
    1386:	69 c0       	rjmp	.+210    	; 0x145a <MDIO_Error_State_SetPinDirection+0x128>
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <MDIO_Error_State_SetPinDirection+0x62>
    1392:	94 c0       	rjmp	.+296    	; 0x14bc <MDIO_Error_State_SetPinDirection+0x18a>
    1394:	c4 c0       	rjmp	.+392    	; 0x151e <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	a1 f4       	brne	.+40     	; 0x13c4 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    139c:	aa e3       	ldi	r26, 0x3A	; 58
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ea e3       	ldi	r30, 0x3A	; 58
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <MDIO_Error_State_SetPinDirection+0x88>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <MDIO_Error_State_SetPinDirection+0x84>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	b0 c0       	rjmp	.+352    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	88 23       	and	r24, r24
    13c8:	a9 f4       	brne	.+42     	; 0x13f4 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    13ca:	aa e3       	ldi	r26, 0x3A	; 58
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ea e3       	ldi	r30, 0x3A	; 58
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <MDIO_Error_State_SetPinDirection+0xb6>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <MDIO_Error_State_SetPinDirection+0xb2>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	98 c0       	rjmp	.+304    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    13f4:	19 82       	std	Y+1, r1	; 0x01
    13f6:	96 c0       	rjmp	.+300    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	a1 f4       	brne	.+40     	; 0x1426 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    13fe:	a7 e3       	ldi	r26, 0x37	; 55
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e7 e3       	ldi	r30, 0x37	; 55
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <MDIO_Error_State_SetPinDirection+0xea>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <MDIO_Error_State_SetPinDirection+0xe6>
    1420:	84 2b       	or	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	7f c0       	rjmp	.+254    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	88 23       	and	r24, r24
    142a:	a9 f4       	brne	.+42     	; 0x1456 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    142c:	a7 e3       	ldi	r26, 0x37	; 55
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e7 e3       	ldi	r30, 0x37	; 55
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <MDIO_Error_State_SetPinDirection+0x118>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <MDIO_Error_State_SetPinDirection+0x114>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	67 c0       	rjmp	.+206    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1456:	19 82       	std	Y+1, r1	; 0x01
    1458:	65 c0       	rjmp	.+202    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	a1 f4       	brne	.+40     	; 0x1488 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1460:	a4 e3       	ldi	r26, 0x34	; 52
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e4 e3       	ldi	r30, 0x34	; 52
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <MDIO_Error_State_SetPinDirection+0x14c>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <MDIO_Error_State_SetPinDirection+0x148>
    1482:	84 2b       	or	r24, r20
    1484:	8c 93       	st	X, r24
    1486:	4e c0       	rjmp	.+156    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	88 23       	and	r24, r24
    148c:	a9 f4       	brne	.+42     	; 0x14b8 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    148e:	a4 e3       	ldi	r26, 0x34	; 52
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e4 e3       	ldi	r30, 0x34	; 52
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <MDIO_Error_State_SetPinDirection+0x17a>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <MDIO_Error_State_SetPinDirection+0x176>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	36 c0       	rjmp	.+108    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    14b8:	19 82       	std	Y+1, r1	; 0x01
    14ba:	34 c0       	rjmp	.+104    	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	a1 f4       	brne	.+40     	; 0x14ea <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    14c2:	a1 e3       	ldi	r26, 0x31	; 49
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <MDIO_Error_State_SetPinDirection+0x1ae>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <MDIO_Error_State_SetPinDirection+0x1aa>
    14e4:	84 2b       	or	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	1d c0       	rjmp	.+58     	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	88 23       	and	r24, r24
    14ee:	a9 f4       	brne	.+42     	; 0x151a <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    14f0:	a1 e3       	ldi	r26, 0x31	; 49
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e1 e3       	ldi	r30, 0x31	; 49
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <MDIO_Error_State_SetPinDirection+0x1dc>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <MDIO_Error_State_SetPinDirection+0x1d8>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	05 c0       	rjmp	.+10     	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    151a:	19 82       	std	Y+1, r1	; 0x01
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    151e:	19 82       	std	Y+1, r1	; 0x01
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1522:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    1524:	89 81       	ldd	r24, Y+1	; 0x01

}
    1526:	26 96       	adiw	r28, 0x06	; 6
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <MDIO_Error_State_SetPortDirection+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <MDIO_Error_State_SetPortDirection+0x8>
    1540:	0f 92       	push	r0
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	8a 83       	std	Y+2, r24	; 0x02
    1548:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	8f 3f       	cpi	r24, 0xFF	; 255
    1552:	19 f0       	breq	.+6      	; 0x155a <MDIO_Error_State_SetPortDirection+0x22>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 23       	and	r24, r24
    1558:	a9 f5       	brne	.+106    	; 0x15c4 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3d 83       	std	Y+5, r19	; 0x05
    1562:	2c 83       	std	Y+4, r18	; 0x04
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	91 05       	cpc	r25, r1
    156c:	d1 f0       	breq	.+52     	; 0x15a2 <MDIO_Error_State_SetPortDirection+0x6a>
    156e:	2c 81       	ldd	r18, Y+4	; 0x04
    1570:	3d 81       	ldd	r19, Y+5	; 0x05
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	2c f4       	brge	.+10     	; 0x1582 <MDIO_Error_State_SetPortDirection+0x4a>
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	61 f0       	breq	.+24     	; 0x1598 <MDIO_Error_State_SetPortDirection+0x60>
    1580:	1f c0       	rjmp	.+62     	; 0x15c0 <MDIO_Error_State_SetPortDirection+0x88>
    1582:	2c 81       	ldd	r18, Y+4	; 0x04
    1584:	3d 81       	ldd	r19, Y+5	; 0x05
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	81 f0       	breq	.+32     	; 0x15ac <MDIO_Error_State_SetPortDirection+0x74>
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	91 05       	cpc	r25, r1
    1594:	81 f0       	breq	.+32     	; 0x15b6 <MDIO_Error_State_SetPortDirection+0x7e>
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    1598:	ea e3       	ldi	r30, 0x3A	; 58
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	80 83       	st	Z, r24
    15a0:	12 c0       	rjmp	.+36     	; 0x15c6 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    15a2:	e7 e3       	ldi	r30, 0x37	; 55
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	80 83       	st	Z, r24
    15aa:	0d c0       	rjmp	.+26     	; 0x15c6 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	80 83       	st	Z, r24
    15b4:	08 c0       	rjmp	.+16     	; 0x15c6 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    15b6:	e1 e3       	ldi	r30, 0x31	; 49
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	80 83       	st	Z, r24
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    15c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <MDIO_Error_State_SetPinValue+0x6>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <MDIO_Error_State_SetPinValue+0x8>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <MDIO_Error_State_SetPinValue+0xa>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	8a 83       	std	Y+2, r24	; 0x02
    15e8:	6b 83       	std	Y+3, r22	; 0x03
    15ea:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	88 30       	cpi	r24, 0x08	; 8
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <MDIO_Error_State_SetPinValue+0x20>
    15f6:	e8 c0       	rjmp	.+464    	; 0x17c8 <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3e 83       	std	Y+6, r19	; 0x06
    1600:	2d 83       	std	Y+5, r18	; 0x05
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	91 05       	cpc	r25, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <MDIO_Error_State_SetPinValue+0x36>
    160c:	48 c0       	rjmp	.+144    	; 0x169e <MDIO_Error_State_SetPinValue+0xc6>
    160e:	2d 81       	ldd	r18, Y+5	; 0x05
    1610:	3e 81       	ldd	r19, Y+6	; 0x06
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <MDIO_Error_State_SetPinValue+0x4a>
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	71 f0       	breq	.+28     	; 0x163c <MDIO_Error_State_SetPinValue+0x64>
    1620:	d1 c0       	rjmp	.+418    	; 0x17c4 <MDIO_Error_State_SetPinValue+0x1ec>
    1622:	2d 81       	ldd	r18, Y+5	; 0x05
    1624:	3e 81       	ldd	r19, Y+6	; 0x06
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <MDIO_Error_State_SetPinValue+0x56>
    162c:	69 c0       	rjmp	.+210    	; 0x1700 <MDIO_Error_State_SetPinValue+0x128>
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <MDIO_Error_State_SetPinValue+0x62>
    1638:	94 c0       	rjmp	.+296    	; 0x1762 <MDIO_Error_State_SetPinValue+0x18a>
    163a:	c4 c0       	rjmp	.+392    	; 0x17c4 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	a1 f4       	brne	.+40     	; 0x166a <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    1642:	ab e3       	ldi	r26, 0x3B	; 59
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e3       	ldi	r30, 0x3B	; 59
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <MDIO_Error_State_SetPinValue+0x88>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <MDIO_Error_State_SetPinValue+0x84>
    1664:	84 2b       	or	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	b0 c0       	rjmp	.+352    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	88 23       	and	r24, r24
    166e:	a9 f4       	brne	.+42     	; 0x169a <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1670:	ab e3       	ldi	r26, 0x3B	; 59
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	eb e3       	ldi	r30, 0x3B	; 59
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <MDIO_Error_State_SetPinValue+0xb6>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <MDIO_Error_State_SetPinValue+0xb2>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	98 c0       	rjmp	.+304    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	96 c0       	rjmp	.+300    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    16a4:	a8 e3       	ldi	r26, 0x38	; 56
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e3       	ldi	r30, 0x38	; 56
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <MDIO_Error_State_SetPinValue+0xea>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <MDIO_Error_State_SetPinValue+0xe6>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	7f c0       	rjmp	.+254    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	88 23       	and	r24, r24
    16d0:	a9 f4       	brne	.+42     	; 0x16fc <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    16d2:	a8 e3       	ldi	r26, 0x38	; 56
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e8 e3       	ldi	r30, 0x38	; 56
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <MDIO_Error_State_SetPinValue+0x118>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <MDIO_Error_State_SetPinValue+0x114>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	67 c0       	rjmp	.+206    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    16fc:	19 82       	std	Y+1, r1	; 0x01
    16fe:	65 c0       	rjmp	.+202    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	a1 f4       	brne	.+40     	; 0x172e <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    1706:	a5 e3       	ldi	r26, 0x35	; 53
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e3       	ldi	r30, 0x35	; 53
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <MDIO_Error_State_SetPinValue+0x14c>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <MDIO_Error_State_SetPinValue+0x148>
    1728:	84 2b       	or	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	4e c0       	rjmp	.+156    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	88 23       	and	r24, r24
    1732:	a9 f4       	brne	.+42     	; 0x175e <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    1734:	a5 e3       	ldi	r26, 0x35	; 53
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e3       	ldi	r30, 0x35	; 53
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <MDIO_Error_State_SetPinValue+0x17a>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <MDIO_Error_State_SetPinValue+0x176>
    1756:	80 95       	com	r24
    1758:	84 23       	and	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	36 c0       	rjmp	.+108    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    175e:	19 82       	std	Y+1, r1	; 0x01
    1760:	34 c0       	rjmp	.+104    	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	a1 f4       	brne	.+40     	; 0x1790 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    1768:	a2 e3       	ldi	r26, 0x32	; 50
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e2 e3       	ldi	r30, 0x32	; 50
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <MDIO_Error_State_SetPinValue+0x1ae>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <MDIO_Error_State_SetPinValue+0x1aa>
    178a:	84 2b       	or	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	1d c0       	rjmp	.+58     	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	88 23       	and	r24, r24
    1794:	a9 f4       	brne	.+42     	; 0x17c0 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    1796:	a2 e3       	ldi	r26, 0x32	; 50
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e2 e3       	ldi	r30, 0x32	; 50
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <MDIO_Error_State_SetPinValue+0x1dc>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <MDIO_Error_State_SetPinValue+0x1d8>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    17c0:	19 82       	std	Y+1, r1	; 0x01
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    17c8:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    17ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    17cc:	26 96       	adiw	r28, 0x06	; 6
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <MDIO_Error_State_SetPortValue+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <MDIO_Error_State_SetPortValue+0x8>
    17e6:	0f 92       	push	r0
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	8a 83       	std	Y+2, r24	; 0x02
    17ee:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	3d 83       	std	Y+5, r19	; 0x05
    17fc:	2c 83       	std	Y+4, r18	; 0x04
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	d1 f0       	breq	.+52     	; 0x183c <MDIO_Error_State_SetPortValue+0x5e>
    1808:	2c 81       	ldd	r18, Y+4	; 0x04
    180a:	3d 81       	ldd	r19, Y+5	; 0x05
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	2c f4       	brge	.+10     	; 0x181c <MDIO_Error_State_SetPortValue+0x3e>
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	61 f0       	breq	.+24     	; 0x1832 <MDIO_Error_State_SetPortValue+0x54>
    181a:	1f c0       	rjmp	.+62     	; 0x185a <MDIO_Error_State_SetPortValue+0x7c>
    181c:	2c 81       	ldd	r18, Y+4	; 0x04
    181e:	3d 81       	ldd	r19, Y+5	; 0x05
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	81 f0       	breq	.+32     	; 0x1846 <MDIO_Error_State_SetPortValue+0x68>
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	83 30       	cpi	r24, 0x03	; 3
    182c:	91 05       	cpc	r25, r1
    182e:	81 f0       	breq	.+32     	; 0x1850 <MDIO_Error_State_SetPortValue+0x72>
    1830:	14 c0       	rjmp	.+40     	; 0x185a <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1832:	eb e3       	ldi	r30, 0x3B	; 59
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	80 83       	st	Z, r24
    183a:	10 c0       	rjmp	.+32     	; 0x185c <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    183c:	e8 e3       	ldi	r30, 0x38	; 56
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	80 83       	st	Z, r24
    1844:	0b c0       	rjmp	.+22     	; 0x185c <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    1846:	e5 e3       	ldi	r30, 0x35	; 53
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	80 83       	st	Z, r24
    184e:	06 c0       	rjmp	.+12     	; 0x185c <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1850:	e2 e3       	ldi	r30, 0x32	; 50
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	80 83       	st	Z, r24
    1858:	01 c0       	rjmp	.+2      	; 0x185c <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    185a:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	27 97       	sbiw	r28, 0x07	; 7
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	6b 83       	std	Y+3, r22	; 0x03
    1886:	5d 83       	std	Y+5, r21	; 0x05
    1888:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	88 30       	cpi	r24, 0x08	; 8
    1892:	08 f0       	brcs	.+2      	; 0x1896 <MDIO_Error_State_GetPinValue+0x28>
    1894:	79 c0       	rjmp	.+242    	; 0x1988 <MDIO_Error_State_GetPinValue+0x11a>
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <MDIO_Error_State_GetPinValue+0x34>
    18a0:	73 c0       	rjmp	.+230    	; 0x1988 <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3f 83       	std	Y+7, r19	; 0x07
    18aa:	2e 83       	std	Y+6, r18	; 0x06
    18ac:	4e 81       	ldd	r20, Y+6	; 0x06
    18ae:	5f 81       	ldd	r21, Y+7	; 0x07
    18b0:	41 30       	cpi	r20, 0x01	; 1
    18b2:	51 05       	cpc	r21, r1
    18b4:	59 f1       	breq	.+86     	; 0x190c <MDIO_Error_State_GetPinValue+0x9e>
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	91 05       	cpc	r25, r1
    18be:	34 f4       	brge	.+12     	; 0x18cc <MDIO_Error_State_GetPinValue+0x5e>
    18c0:	2e 81       	ldd	r18, Y+6	; 0x06
    18c2:	3f 81       	ldd	r19, Y+7	; 0x07
    18c4:	21 15       	cp	r18, r1
    18c6:	31 05       	cpc	r19, r1
    18c8:	69 f0       	breq	.+26     	; 0x18e4 <MDIO_Error_State_GetPinValue+0x76>
    18ca:	5c c0       	rjmp	.+184    	; 0x1984 <MDIO_Error_State_GetPinValue+0x116>
    18cc:	4e 81       	ldd	r20, Y+6	; 0x06
    18ce:	5f 81       	ldd	r21, Y+7	; 0x07
    18d0:	42 30       	cpi	r20, 0x02	; 2
    18d2:	51 05       	cpc	r21, r1
    18d4:	79 f1       	breq	.+94     	; 0x1934 <MDIO_Error_State_GetPinValue+0xc6>
    18d6:	8e 81       	ldd	r24, Y+6	; 0x06
    18d8:	9f 81       	ldd	r25, Y+7	; 0x07
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <MDIO_Error_State_GetPinValue+0x74>
    18e0:	3d c0       	rjmp	.+122    	; 0x195c <MDIO_Error_State_GetPinValue+0xee>
    18e2:	50 c0       	rjmp	.+160    	; 0x1984 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    18e4:	e9 e3       	ldi	r30, 0x39	; 57
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a9 01       	movw	r20, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <MDIO_Error_State_GetPinValue+0x8e>
    18f8:	55 95       	asr	r21
    18fa:	47 95       	ror	r20
    18fc:	8a 95       	dec	r24
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <MDIO_Error_State_GetPinValue+0x8a>
    1900:	ca 01       	movw	r24, r20
    1902:	81 70       	andi	r24, 0x01	; 1
    1904:	ec 81       	ldd	r30, Y+4	; 0x04
    1906:	fd 81       	ldd	r31, Y+5	; 0x05
    1908:	80 83       	st	Z, r24
    190a:	3f c0       	rjmp	.+126    	; 0x198a <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    190c:	e6 e3       	ldi	r30, 0x36	; 54
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <MDIO_Error_State_GetPinValue+0xb6>
    1920:	55 95       	asr	r21
    1922:	47 95       	ror	r20
    1924:	8a 95       	dec	r24
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <MDIO_Error_State_GetPinValue+0xb2>
    1928:	ca 01       	movw	r24, r20
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	ec 81       	ldd	r30, Y+4	; 0x04
    192e:	fd 81       	ldd	r31, Y+5	; 0x05
    1930:	80 83       	st	Z, r24
    1932:	2b c0       	rjmp	.+86     	; 0x198a <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1934:	e3 e3       	ldi	r30, 0x33	; 51
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a9 01       	movw	r20, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <MDIO_Error_State_GetPinValue+0xde>
    1948:	55 95       	asr	r21
    194a:	47 95       	ror	r20
    194c:	8a 95       	dec	r24
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <MDIO_Error_State_GetPinValue+0xda>
    1950:	ca 01       	movw	r24, r20
    1952:	81 70       	andi	r24, 0x01	; 1
    1954:	ec 81       	ldd	r30, Y+4	; 0x04
    1956:	fd 81       	ldd	r31, Y+5	; 0x05
    1958:	80 83       	st	Z, r24
    195a:	17 c0       	rjmp	.+46     	; 0x198a <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    195c:	e0 e3       	ldi	r30, 0x30	; 48
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a9 01       	movw	r20, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <MDIO_Error_State_GetPinValue+0x106>
    1970:	55 95       	asr	r21
    1972:	47 95       	ror	r20
    1974:	8a 95       	dec	r24
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <MDIO_Error_State_GetPinValue+0x102>
    1978:	ca 01       	movw	r24, r20
    197a:	81 70       	andi	r24, 0x01	; 1
    197c:	ec 81       	ldd	r30, Y+4	; 0x04
    197e:	fd 81       	ldd	r31, Y+5	; 0x05
    1980:	80 83       	st	Z, r24
    1982:	03 c0       	rjmp	.+6      	; 0x198a <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1984:	19 82       	std	Y+1, r1	; 0x01
    1986:	01 c0       	rjmp	.+2      	; 0x198a <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1988:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    198a:	89 81       	ldd	r24, Y+1	; 0x01

}
    198c:	27 96       	adiw	r28, 0x07	; 7
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <MDIO_Error_State_SetNippleValue+0x6>
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <MDIO_Error_State_SetNippleValue+0x8>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <MDIO_Error_State_SetNippleValue+0xa>
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	8a 83       	std	Y+2, r24	; 0x02
    19ae:	6b 83       	std	Y+3, r22	; 0x03
    19b0:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	85 30       	cpi	r24, 0x05	; 5
    19ba:	08 f0       	brcs	.+2      	; 0x19be <MDIO_Error_State_SetNippleValue+0x20>
    19bc:	c9 c0       	rjmp	.+402    	; 0x1b50 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3e 83       	std	Y+6, r19	; 0x06
    19c6:	2d 83       	std	Y+5, r18	; 0x05
    19c8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ca:	7e 81       	ldd	r23, Y+6	; 0x06
    19cc:	61 30       	cpi	r22, 0x01	; 1
    19ce:	71 05       	cpc	r23, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <MDIO_Error_State_SetNippleValue+0x36>
    19d2:	41 c0       	rjmp	.+130    	; 0x1a56 <MDIO_Error_State_SetNippleValue+0xb8>
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	82 30       	cpi	r24, 0x02	; 2
    19da:	91 05       	cpc	r25, r1
    19dc:	34 f4       	brge	.+12     	; 0x19ea <MDIO_Error_State_SetNippleValue+0x4c>
    19de:	2d 81       	ldd	r18, Y+5	; 0x05
    19e0:	3e 81       	ldd	r19, Y+6	; 0x06
    19e2:	21 15       	cp	r18, r1
    19e4:	31 05       	cpc	r19, r1
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <MDIO_Error_State_SetNippleValue+0x66>
    19e8:	b1 c0       	rjmp	.+354    	; 0x1b4c <MDIO_Error_State_SetNippleValue+0x1ae>
    19ea:	6d 81       	ldd	r22, Y+5	; 0x05
    19ec:	7e 81       	ldd	r23, Y+6	; 0x06
    19ee:	62 30       	cpi	r22, 0x02	; 2
    19f0:	71 05       	cpc	r23, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <MDIO_Error_State_SetNippleValue+0x58>
    19f4:	59 c0       	rjmp	.+178    	; 0x1aa8 <MDIO_Error_State_SetNippleValue+0x10a>
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <MDIO_Error_State_SetNippleValue+0x64>
    1a00:	7c c0       	rjmp	.+248    	; 0x1afa <MDIO_Error_State_SetNippleValue+0x15c>
    1a02:	a4 c0       	rjmp	.+328    	; 0x1b4c <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1a04:	ab e3       	ldi	r26, 0x3B	; 59
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	eb e3       	ldi	r30, 0x3B	; 59
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	8f e0       	ldi	r24, 0x0F	; 15
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <MDIO_Error_State_SetNippleValue+0x82>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	2a 95       	dec	r18
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <MDIO_Error_State_SetNippleValue+0x7e>
    1a24:	80 95       	com	r24
    1a26:	84 23       	and	r24, r20
    1a28:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1a2a:	ab e3       	ldi	r26, 0x3B	; 59
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	eb e3       	ldi	r30, 0x3B	; 59
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	b9 01       	movw	r22, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <MDIO_Error_State_SetNippleValue+0xac>
    1a46:	66 0f       	add	r22, r22
    1a48:	77 1f       	adc	r23, r23
    1a4a:	8a 95       	dec	r24
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <MDIO_Error_State_SetNippleValue+0xa8>
    1a4e:	cb 01       	movw	r24, r22
    1a50:	84 2b       	or	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	7e c0       	rjmp	.+252    	; 0x1b52 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1a56:	a8 e3       	ldi	r26, 0x38	; 56
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e8 e3       	ldi	r30, 0x38	; 56
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	8f e0       	ldi	r24, 0x0F	; 15
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <MDIO_Error_State_SetNippleValue+0xd4>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	2a 95       	dec	r18
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <MDIO_Error_State_SetNippleValue+0xd0>
    1a76:	80 95       	com	r24
    1a78:	84 23       	and	r24, r20
    1a7a:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1a7c:	a8 e3       	ldi	r26, 0x38	; 56
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e8 e3       	ldi	r30, 0x38	; 56
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	b9 01       	movw	r22, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <MDIO_Error_State_SetNippleValue+0xfe>
    1a98:	66 0f       	add	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	8a 95       	dec	r24
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <MDIO_Error_State_SetNippleValue+0xfa>
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	55 c0       	rjmp	.+170    	; 0x1b52 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1aa8:	a5 e3       	ldi	r26, 0x35	; 53
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e5 e3       	ldi	r30, 0x35	; 53
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	8f e0       	ldi	r24, 0x0F	; 15
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <MDIO_Error_State_SetNippleValue+0x126>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	2a 95       	dec	r18
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <MDIO_Error_State_SetNippleValue+0x122>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1ace:	a5 e3       	ldi	r26, 0x35	; 53
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e5 e3       	ldi	r30, 0x35	; 53
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	b9 01       	movw	r22, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <MDIO_Error_State_SetNippleValue+0x150>
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <MDIO_Error_State_SetNippleValue+0x14c>
    1af2:	cb 01       	movw	r24, r22
    1af4:	84 2b       	or	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	2c c0       	rjmp	.+88     	; 0x1b52 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1afa:	a2 e3       	ldi	r26, 0x32	; 50
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e2 e3       	ldi	r30, 0x32	; 50
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	8f e0       	ldi	r24, 0x0F	; 15
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <MDIO_Error_State_SetNippleValue+0x178>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	2a 95       	dec	r18
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <MDIO_Error_State_SetNippleValue+0x174>
    1b1a:	80 95       	com	r24
    1b1c:	84 23       	and	r24, r20
    1b1e:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1b20:	a2 e3       	ldi	r26, 0x32	; 50
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e2 e3       	ldi	r30, 0x32	; 50
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	b9 01       	movw	r22, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <MDIO_Error_State_SetNippleValue+0x1a2>
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	8a 95       	dec	r24
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <MDIO_Error_State_SetNippleValue+0x19e>
    1b44:	cb 01       	movw	r24, r22
    1b46:	84 2b       	or	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1b4c:	19 82       	std	Y+1, r1	; 0x01
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1b50:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b54:	26 96       	adiw	r28, 0x06	; 6
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <MDIO_VidActivePullUP+0x6>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	6a 81       	ldd	r22, Y+2	; 0x02
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	6a 81       	ldd	r22, Y+2	; 0x02
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>

}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1b9a:	a7 e2       	ldi	r26, 0x27	; 39
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e7 e2       	ldi	r30, 0x27	; 39
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 64       	ori	r24, 0x40	; 64
    1ba6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1ba8:	a7 e2       	ldi	r26, 0x27	; 39
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e7 e2       	ldi	r30, 0x27	; 39
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8f 77       	andi	r24, 0x7F	; 127
    1bb4:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1bb6:	a6 e2       	ldi	r26, 0x26	; 38
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e6 e2       	ldi	r30, 0x26	; 38
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	88 7f       	andi	r24, 0xF8	; 248
    1bc2:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1bc4:	a6 e2       	ldi	r26, 0x26	; 38
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e6 e2       	ldi	r30, 0x26	; 38
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	83 60       	ori	r24, 0x03	; 3
    1bd0:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1bd2:	a7 e2       	ldi	r26, 0x27	; 39
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e7 e2       	ldi	r30, 0x27	; 39
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	8f 7d       	andi	r24, 0xDF	; 223
    1bde:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1be0:	a6 e2       	ldi	r26, 0x26	; 38
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e6 e2       	ldi	r30, 0x26	; 38
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	80 68       	ori	r24, 0x80	; 128
    1bec:	8c 93       	st	X, r24
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	87 70       	andi	r24, 0x07	; 7
    1c04:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1c06:	a7 e2       	ldi	r26, 0x27	; 39
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e7 e2       	ldi	r30, 0x27	; 39
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 7e       	andi	r24, 0xE0	; 224
    1c12:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1c14:	a7 e2       	ldi	r26, 0x27	; 39
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e7 e2       	ldi	r30, 0x27	; 39
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	90 81       	ld	r25, Z
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	89 2b       	or	r24, r25
    1c22:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1c24:	a6 e2       	ldi	r26, 0x26	; 38
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e6 e2       	ldi	r30, 0x26	; 38
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 64       	ori	r24, 0x40	; 64
    1c30:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1c32:	e6 e2       	ldi	r30, 0x26	; 38
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	82 95       	swap	r24
    1c3a:	8f 70       	andi	r24, 0x0F	; 15
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	81 70       	andi	r24, 0x01	; 1
    1c42:	90 70       	andi	r25, 0x00	; 0
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	a9 f3       	breq	.-22     	; 0x1c32 <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1c48:	e4 e2       	ldi	r30, 0x24	; 36
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <HSWITCH_VidInit_PullUP+0x6>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1c66:	e9 81       	ldd	r30, Y+1	; 0x01
    1c68:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6a:	81 81       	ldd	r24, Z+1	; 0x01
    1c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c70:	90 81       	ld	r25, Z
    1c72:	69 2f       	mov	r22, r25
    1c74:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <MDIO_VidActivePullUP>
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <HSWITCH_u8SwitchState+0x6>
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	9b 83       	std	Y+3, r25	; 0x03
    1c90:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1c96:	ea 81       	ldd	r30, Y+2	; 0x02
    1c98:	fb 81       	ldd	r31, Y+3	; 0x03
    1c9a:	81 81       	ldd	r24, Z+1	; 0x01
    1c9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca0:	90 81       	ld	r25, Z
    1ca2:	69 2f       	mov	r22, r25
    1ca4:	9e 01       	movw	r18, r28
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	a9 01       	movw	r20, r18
    1cac:	0e 94 37 0c 	call	0x186e	; 0x186e <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <HSEVEN_SEGMENT_VidInit+0x6>
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	80 81       	ld	r24, Z
    1cd2:	6f ef       	ldi	r22, 0xFF	; 255
    1cd4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <MDIO_Error_State_SetPortDirection>
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <HSEVEN_SEGMENT_VidOff+0x6>
    1ce8:	0f 92       	push	r0
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	81 81       	ldd	r24, Z+1	; 0x01
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	31 f4       	brne	.+12     	; 0x1d0a <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	80 81       	ld	r24, Z
    1d04:	6b 81       	ldd	r22, Y+3	; 0x03
    1d06:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0e:	81 81       	ldd	r24, Z+1	; 0x01
    1d10:	88 23       	and	r24, r24
    1d12:	51 f4       	brne	.+20     	; 0x1d28 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1d14:	e9 81       	ldd	r30, Y+1	; 0x01
    1d16:	fa 81       	ldd	r31, Y+2	; 0x02
    1d18:	20 81       	ld	r18, Z
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	98 2f       	mov	r25, r24
    1d1e:	90 95       	com	r25
    1d20:	82 2f       	mov	r24, r18
    1d22:	69 2f       	mov	r22, r25
    1d24:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
	}
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	27 97       	sbiw	r28, 0x07	; 7
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d50:	fa 81       	ldd	r31, Y+2	; 0x02
    1d52:	81 81       	ldd	r24, Z+1	; 0x01
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1d58:	9b c0       	rjmp	.+310    	; 0x1e90 <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3f 83       	std	Y+7, r19	; 0x07
    1d62:	2e 83       	std	Y+6, r18	; 0x06
    1d64:	8e 81       	ldd	r24, Y+6	; 0x06
    1d66:	9f 81       	ldd	r25, Y+7	; 0x07
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1d6e:	5f c0       	rjmp	.+190    	; 0x1e2e <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1d70:	2e 81       	ldd	r18, Y+6	; 0x06
    1d72:	3f 81       	ldd	r19, Y+7	; 0x07
    1d74:	25 30       	cpi	r18, 0x05	; 5
    1d76:	31 05       	cpc	r19, r1
    1d78:	dc f4       	brge	.+54     	; 0x1db0 <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    1d86:	2e 81       	ldd	r18, Y+6	; 0x06
    1d88:	3f 81       	ldd	r19, Y+7	; 0x07
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1d90:	8e 81       	ldd	r24, Y+6	; 0x06
    1d92:	9f 81       	ldd	r25, Y+7	; 0x07
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	79 f1       	breq	.+94     	; 0x1df6 <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    1d98:	74 c0       	rjmp	.+232    	; 0x1e82 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1d9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	b9 f1       	breq	.+110    	; 0x1e12 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    1da4:	8e 81       	ldd	r24, Y+6	; 0x06
    1da6:	9f 81       	ldd	r25, Y+7	; 0x07
    1da8:	83 30       	cpi	r24, 0x03	; 3
    1daa:	91 05       	cpc	r25, r1
    1dac:	c9 f1       	breq	.+114    	; 0x1e20 <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1dae:	69 c0       	rjmp	.+210    	; 0x1e82 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1db0:	2e 81       	ldd	r18, Y+6	; 0x06
    1db2:	3f 81       	ldd	r19, Y+7	; 0x07
    1db4:	27 30       	cpi	r18, 0x07	; 7
    1db6:	31 05       	cpc	r19, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1dba:	4e c0       	rjmp	.+156    	; 0x1e58 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc0:	88 30       	cpi	r24, 0x08	; 8
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	5c f4       	brge	.+22     	; 0x1ddc <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1dc6:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc8:	3f 81       	ldd	r19, Y+7	; 0x07
    1dca:	25 30       	cpi	r18, 0x05	; 5
    1dcc:	31 05       	cpc	r19, r1
    1dce:	b1 f1       	breq	.+108    	; 0x1e3c <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd4:	86 30       	cpi	r24, 0x06	; 6
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	c1 f1       	breq	.+112    	; 0x1e4a <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1dda:	53 c0       	rjmp	.+166    	; 0x1e82 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1ddc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dde:	3f 81       	ldd	r19, Y+7	; 0x07
    1de0:	28 30       	cpi	r18, 0x08	; 8
    1de2:	31 05       	cpc	r19, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1de8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dea:	9f 81       	ldd	r25, Y+7	; 0x07
    1dec:	89 30       	cpi	r24, 0x09	; 9
    1dee:	91 05       	cpc	r25, r1
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1df2:	40 c0       	rjmp	.+128    	; 0x1e74 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1df4:	46 c0       	rjmp	.+140    	; 0x1e82 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1df6:	e9 81       	ldd	r30, Y+1	; 0x01
    1df8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfa:	80 81       	ld	r24, Z
    1dfc:	6f e3       	ldi	r22, 0x3F	; 63
    1dfe:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e02:	e6 c0       	rjmp	.+460    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1e04:	e9 81       	ldd	r30, Y+1	; 0x01
    1e06:	fa 81       	ldd	r31, Y+2	; 0x02
    1e08:	80 81       	ld	r24, Z
    1e0a:	66 e0       	ldi	r22, 0x06	; 6
    1e0c:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e10:	df c0       	rjmp	.+446    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	80 81       	ld	r24, Z
    1e18:	6b e5       	ldi	r22, 0x5B	; 91
    1e1a:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e1e:	d8 c0       	rjmp	.+432    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    1e20:	e9 81       	ldd	r30, Y+1	; 0x01
    1e22:	fa 81       	ldd	r31, Y+2	; 0x02
    1e24:	80 81       	ld	r24, Z
    1e26:	6f e4       	ldi	r22, 0x4F	; 79
    1e28:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e2c:	d1 c0       	rjmp	.+418    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    1e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e30:	fa 81       	ldd	r31, Y+2	; 0x02
    1e32:	80 81       	ld	r24, Z
    1e34:	66 e6       	ldi	r22, 0x66	; 102
    1e36:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e3a:	ca c0       	rjmp	.+404    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    1e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e40:	80 81       	ld	r24, Z
    1e42:	6d e6       	ldi	r22, 0x6D	; 109
    1e44:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e48:	c3 c0       	rjmp	.+390    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4e:	80 81       	ld	r24, Z
    1e50:	6d e7       	ldi	r22, 0x7D	; 125
    1e52:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e56:	bc c0       	rjmp	.+376    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    1e58:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5c:	80 81       	ld	r24, Z
    1e5e:	67 e0       	ldi	r22, 0x07	; 7
    1e60:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e64:	b5 c0       	rjmp	.+362    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    1e66:	e9 81       	ldd	r30, Y+1	; 0x01
    1e68:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6a:	80 81       	ld	r24, Z
    1e6c:	6f e7       	ldi	r22, 0x7F	; 127
    1e6e:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e72:	ae c0       	rjmp	.+348    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    1e74:	e9 81       	ldd	r30, Y+1	; 0x01
    1e76:	fa 81       	ldd	r31, Y+2	; 0x02
    1e78:	80 81       	ld	r24, Z
    1e7a:	6f e6       	ldi	r22, 0x6F	; 111
    1e7c:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e80:	a7 c0       	rjmp	.+334    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    1e82:	e9 81       	ldd	r30, Y+1	; 0x01
    1e84:	fa 81       	ldd	r31, Y+2	; 0x02
    1e86:	80 81       	ld	r24, Z
    1e88:	69 e7       	ldi	r22, 0x79	; 121
    1e8a:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1e8e:	a0 c0       	rjmp	.+320    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	81 81       	ldd	r24, Z+1	; 0x01
    1e96:	88 23       	and	r24, r24
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    1e9a:	9a c0       	rjmp	.+308    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	3d 83       	std	Y+5, r19	; 0x05
    1ea4:	2c 83       	std	Y+4, r18	; 0x04
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eaa:	84 30       	cpi	r24, 0x04	; 4
    1eac:	91 05       	cpc	r25, r1
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    1eb0:	5f c0       	rjmp	.+190    	; 0x1f70 <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    1eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb6:	25 30       	cpi	r18, 0x05	; 5
    1eb8:	31 05       	cpc	r19, r1
    1eba:	dc f4       	brge	.+54     	; 0x1ef2 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    1ec6:	3f c0       	rjmp	.+126    	; 0x1f46 <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    1ec8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ecc:	22 30       	cpi	r18, 0x02	; 2
    1ece:	31 05       	cpc	r19, r1
    1ed0:	2c f4       	brge	.+10     	; 0x1edc <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	79 f1       	breq	.+94     	; 0x1f38 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1eda:	74 c0       	rjmp	.+232    	; 0x1fc4 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1edc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ede:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee0:	22 30       	cpi	r18, 0x02	; 2
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	b9 f1       	breq	.+110    	; 0x1f54 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    1ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eea:	83 30       	cpi	r24, 0x03	; 3
    1eec:	91 05       	cpc	r25, r1
    1eee:	c9 f1       	breq	.+114    	; 0x1f62 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    1ef0:	69 c0       	rjmp	.+210    	; 0x1fc4 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1ef2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef6:	27 30       	cpi	r18, 0x07	; 7
    1ef8:	31 05       	cpc	r19, r1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    1efc:	4e c0       	rjmp	.+156    	; 0x1f9a <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	9d 81       	ldd	r25, Y+5	; 0x05
    1f02:	88 30       	cpi	r24, 0x08	; 8
    1f04:	91 05       	cpc	r25, r1
    1f06:	5c f4       	brge	.+22     	; 0x1f1e <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    1f08:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0c:	25 30       	cpi	r18, 0x05	; 5
    1f0e:	31 05       	cpc	r19, r1
    1f10:	b1 f1       	breq	.+108    	; 0x1f7e <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	86 30       	cpi	r24, 0x06	; 6
    1f18:	91 05       	cpc	r25, r1
    1f1a:	c1 f1       	breq	.+112    	; 0x1f8c <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    1f1c:	53 c0       	rjmp	.+166    	; 0x1fc4 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	28 30       	cpi	r18, 0x08	; 8
    1f24:	31 05       	cpc	r19, r1
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	89 30       	cpi	r24, 0x09	; 9
    1f30:	91 05       	cpc	r25, r1
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    1f34:	40 c0       	rjmp	.+128    	; 0x1fb6 <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    1f36:	46 c0       	rjmp	.+140    	; 0x1fc4 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    1f38:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3c:	80 81       	ld	r24, Z
    1f3e:	60 ec       	ldi	r22, 0xC0	; 192
    1f40:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1f44:	45 c0       	rjmp	.+138    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    1f46:	e9 81       	ldd	r30, Y+1	; 0x01
    1f48:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4a:	80 81       	ld	r24, Z
    1f4c:	69 ef       	ldi	r22, 0xF9	; 249
    1f4e:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1f52:	3e c0       	rjmp	.+124    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    1f54:	e9 81       	ldd	r30, Y+1	; 0x01
    1f56:	fa 81       	ldd	r31, Y+2	; 0x02
    1f58:	80 81       	ld	r24, Z
    1f5a:	64 ea       	ldi	r22, 0xA4	; 164
    1f5c:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1f60:	37 c0       	rjmp	.+110    	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    1f62:	e9 81       	ldd	r30, Y+1	; 0x01
    1f64:	fa 81       	ldd	r31, Y+2	; 0x02
    1f66:	80 81       	ld	r24, Z
    1f68:	60 eb       	ldi	r22, 0xB0	; 176
    1f6a:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1f6e:	30 c0       	rjmp	.+96     	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	80 81       	ld	r24, Z
    1f76:	69 e9       	ldi	r22, 0x99	; 153
    1f78:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1f7c:	29 c0       	rjmp	.+82     	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    1f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f80:	fa 81       	ldd	r31, Y+2	; 0x02
    1f82:	80 81       	ld	r24, Z
    1f84:	62 e9       	ldi	r22, 0x92	; 146
    1f86:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1f8a:	22 c0       	rjmp	.+68     	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    1f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f90:	80 81       	ld	r24, Z
    1f92:	62 e8       	ldi	r22, 0x82	; 130
    1f94:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1f98:	1b c0       	rjmp	.+54     	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    1f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9e:	80 81       	ld	r24, Z
    1fa0:	68 ef       	ldi	r22, 0xF8	; 248
    1fa2:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    1fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1faa:	fa 81       	ldd	r31, Y+2	; 0x02
    1fac:	80 81       	ld	r24, Z
    1fae:	60 e8       	ldi	r22, 0x80	; 128
    1fb0:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1fb4:	0d c0       	rjmp	.+26     	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    1fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fba:	80 81       	ld	r24, Z
    1fbc:	60 e9       	ldi	r22, 0x90	; 144
    1fbe:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
    1fc2:	06 c0       	rjmp	.+12     	; 0x1fd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    1fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc8:	80 81       	ld	r24, Z
    1fca:	66 e8       	ldi	r22, 0x86	; 134
    1fcc:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
	}
}
}
    1fd0:	27 96       	adiw	r28, 0x07	; 7
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <HLED_VidInit+0x6>
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	81 81       	ldd	r24, Z+1	; 0x01
    1ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffa:	90 81       	ld	r25, Z
    1ffc:	69 2f       	mov	r22, r25
    1ffe:	41 e0       	ldi	r20, 0x01	; 1
    2000:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
}
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <HLED_VidLed_On+0x6>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    201c:	e9 81       	ldd	r30, Y+1	; 0x01
    201e:	fa 81       	ldd	r31, Y+2	; 0x02
    2020:	81 81       	ldd	r24, Z+1	; 0x01
    2022:	e9 81       	ldd	r30, Y+1	; 0x01
    2024:	fa 81       	ldd	r31, Y+2	; 0x02
    2026:	90 81       	ld	r25, Z
    2028:	69 2f       	mov	r22, r25
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <HLED_VidLed_Off+0x6>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    2048:	e9 81       	ldd	r30, Y+1	; 0x01
    204a:	fa 81       	ldd	r31, Y+2	; 0x02
    204c:	81 81       	ldd	r24, Z+1	; 0x01
    204e:	e9 81       	ldd	r30, Y+1	; 0x01
    2050:	fa 81       	ldd	r31, Y+2	; 0x02
    2052:	90 81       	ld	r25, Z
    2054:	69 2f       	mov	r22, r25
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	00 d0       	rcall	.+0      	; 0x206c <HLED_VidLed_Toggle+0x6>
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    2074:	80 91 9a 01 	lds	r24, 0x019A
    2078:	88 23       	and	r24, r24
    207a:	71 f4       	brne	.+28     	; 0x2098 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	81 81       	ldd	r24, Z+1	; 0x01
    2082:	e9 81       	ldd	r30, Y+1	; 0x01
    2084:	fa 81       	ldd	r31, Y+2	; 0x02
    2086:	90 81       	ld	r25, Z
    2088:	69 2f       	mov	r22, r25
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
		Flag=1;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	80 93 9a 01 	sts	0x019A, r24
    2096:	0c c0       	rjmp	.+24     	; 0x20b0 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    2098:	e9 81       	ldd	r30, Y+1	; 0x01
    209a:	fa 81       	ldd	r31, Y+2	; 0x02
    209c:	81 81       	ldd	r24, Z+1	; 0x01
    209e:	e9 81       	ldd	r30, Y+1	; 0x01
    20a0:	fa 81       	ldd	r31, Y+2	; 0x02
    20a2:	90 81       	ld	r25, Z
    20a4:	69 2f       	mov	r22, r25
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
		Flag=0;
    20ac:	10 92 9a 01 	sts	0x019A, r1
	}
}
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	62 e0       	ldi	r22, 0x02	; 2
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	62 e0       	ldi	r22, 0x02	; 2
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	62 e0       	ldi	r22, 0x02	; 2
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    20ea:	84 e0       	ldi	r24, 0x04	; 4
    20ec:	62 e0       	ldi	r22, 0x02	; 2
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    20f4:	85 e0       	ldi	r24, 0x05	; 5
    20f6:	62 e0       	ldi	r22, 0x02	; 2
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    20fe:	86 e0       	ldi	r24, 0x06	; 6
    2100:	62 e0       	ldi	r22, 0x02	; 2
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    2108:	87 e0       	ldi	r24, 0x07	; 7
    210a:	62 e0       	ldi	r22, 0x02	; 2
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	62 e0       	ldi	r22, 0x02	; 2
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	62 e0       	ldi	r22, 0x02	; 2
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	62 e0       	ldi	r22, 0x02	; 2
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	62 e0       	ldi	r22, 0x02	; 2
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    213a:	84 e0       	ldi	r24, 0x04	; 4
    213c:	62 e0       	ldi	r22, 0x02	; 2
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    2144:	85 e0       	ldi	r24, 0x05	; 5
    2146:	62 e0       	ldi	r22, 0x02	; 2
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    214e:	86 e0       	ldi	r24, 0x06	; 6
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    2158:	87 e0       	ldi	r24, 0x07	; 7
    215a:	62 e0       	ldi	r22, 0x02	; 2
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>

}
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	62 97       	sbiw	r28, 0x12	; 18
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2180:	84 e0       	ldi	r24, 0x04	; 4
    2182:	88 8b       	std	Y+16, r24	; 0x10
    2184:	b5 c0       	rjmp	.+362    	; 0x22f0 <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    2186:	88 89       	ldd	r24, Y+16	; 0x10
    2188:	62 e0       	ldi	r22, 0x02	; 2
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2190:	19 8a       	std	Y+17, r1	; 0x11
    2192:	a2 c0       	rjmp	.+324    	; 0x22d8 <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2194:	9e 01       	movw	r18, r28
    2196:	2e 5e       	subi	r18, 0xEE	; 238
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	62 e0       	ldi	r22, 0x02	; 2
    219e:	a9 01       	movw	r20, r18
    21a0:	0e 94 37 0c 	call	0x186e	; 0x186e <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    21a4:	8a 89       	ldd	r24, Y+18	; 0x12
    21a6:	88 23       	and	r24, r24
    21a8:	09 f0       	breq	.+2      	; 0x21ac <HKPD_U8GetKeyPressed+0x44>
    21aa:	93 c0       	rjmp	.+294    	; 0x22d2 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    21ac:	88 89       	ldd	r24, Y+16	; 0x10
    21ae:	88 2f       	mov	r24, r24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	ac 01       	movw	r20, r24
    21b4:	44 50       	subi	r20, 0x04	; 4
    21b6:	50 40       	sbci	r21, 0x00	; 0
    21b8:	89 89       	ldd	r24, Y+17	; 0x11
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	ca 01       	movw	r24, r20
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	82 0f       	add	r24, r18
    21ca:	93 1f       	adc	r25, r19
    21cc:	fc 01       	movw	r30, r24
    21ce:	e6 57       	subi	r30, 0x76	; 118
    21d0:	fe 4f       	sbci	r31, 0xFE	; 254
    21d2:	80 81       	ld	r24, Z
    21d4:	8f 87       	std	Y+15, r24	; 0x0f
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    21d8:	9e 01       	movw	r18, r28
    21da:	2e 5e       	subi	r18, 0xEE	; 238
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	89 89       	ldd	r24, Y+17	; 0x11
    21e0:	62 e0       	ldi	r22, 0x02	; 2
    21e2:	a9 01       	movw	r20, r18
    21e4:	0e 94 37 0c 	call	0x186e	; 0x186e <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    21e8:	8a 89       	ldd	r24, Y+18	; 0x12
    21ea:	88 23       	and	r24, r24
    21ec:	a9 f3       	breq	.-22     	; 0x21d8 <HKPD_U8GetKeyPressed+0x70>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 e2       	ldi	r26, 0x20	; 32
    21f4:	b1 e4       	ldi	r27, 0x41	; 65
    21f6:	8b 87       	std	Y+11, r24	; 0x0b
    21f8:	9c 87       	std	Y+12, r25	; 0x0c
    21fa:	ad 87       	std	Y+13, r26	; 0x0d
    21fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2200:	7c 85       	ldd	r23, Y+12	; 0x0c
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a ef       	ldi	r20, 0xFA	; 250
    220c:	54 e4       	ldi	r21, 0x44	; 68
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8f 83       	std	Y+7, r24	; 0x07
    2218:	98 87       	std	Y+8, r25	; 0x08
    221a:	a9 87       	std	Y+9, r26	; 0x09
    221c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	2c f4       	brge	.+10     	; 0x2240 <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	3f c0       	rjmp	.+126    	; 0x22be <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	4c f5       	brge	.+82     	; 0x22aa <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	6b 85       	ldd	r22, Y+11	; 0x0b
    225a:	7c 85       	ldd	r23, Y+12	; 0x0c
    225c:	8d 85       	ldd	r24, Y+13	; 0x0d
    225e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <HKPD_U8GetKeyPressed+0x138>
    2282:	88 ec       	ldi	r24, 0xC8	; 200
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <HKPD_U8GetKeyPressed+0x126>
    2292:	9c 83       	std	Y+4, r25	; 0x04
    2294:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	69 f7       	brne	.-38     	; 0x2282 <HKPD_U8GetKeyPressed+0x11a>
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	78 85       	ldd	r23, Y+8	; 0x08
    22ae:	89 85       	ldd	r24, Y+9	; 0x09
    22b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <HKPD_U8GetKeyPressed+0x162>
    22ce:	9a 83       	std	Y+2, r25	; 0x02
    22d0:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    22d2:	89 89       	ldd	r24, Y+17	; 0x11
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	89 8b       	std	Y+17, r24	; 0x11
    22d8:	89 89       	ldd	r24, Y+17	; 0x11
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	08 f4       	brcc	.+2      	; 0x22e0 <HKPD_U8GetKeyPressed+0x178>
    22de:	5a cf       	rjmp	.-332    	; 0x2194 <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    22e0:	88 89       	ldd	r24, Y+16	; 0x10
    22e2:	62 e0       	ldi	r22, 0x02	; 2
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    22ea:	88 89       	ldd	r24, Y+16	; 0x10
    22ec:	8f 5f       	subi	r24, 0xFF	; 255
    22ee:	88 8b       	std	Y+16, r24	; 0x10
    22f0:	88 89       	ldd	r24, Y+16	; 0x10
    22f2:	88 30       	cpi	r24, 0x08	; 8
    22f4:	08 f4       	brcc	.+2      	; 0x22f8 <HKPD_U8GetKeyPressed+0x190>
    22f6:	47 cf       	rjmp	.-370    	; 0x2186 <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    22f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fa:	8f 3f       	cpi	r24, 0xFF	; 255
    22fc:	09 f4       	brne	.+2      	; 0x2300 <HKPD_U8GetKeyPressed+0x198>
    22fe:	40 cf       	rjmp	.-384    	; 0x2180 <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    2300:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    2302:	62 96       	adiw	r28, 0x12	; 18
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	6d 97       	sbiw	r28, 0x1d	; 29
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	62 e0       	ldi	r22, 0x02	; 2
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2342:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	62 e0       	ldi	r22, 0x02	; 2
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e0       	ldi	r26, 0x00	; 0
    2356:	b0 e4       	ldi	r27, 0x40	; 64
    2358:	89 8f       	std	Y+25, r24	; 0x19
    235a:	9a 8f       	std	Y+26, r25	; 0x1a
    235c:	ab 8f       	std	Y+27, r26	; 0x1b
    235e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	69 8d       	ldd	r22, Y+25	; 0x19
    2362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a ef       	ldi	r20, 0xFA	; 250
    236e:	54 e4       	ldi	r21, 0x44	; 68
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8d 8b       	std	Y+21, r24	; 0x15
    237a:	9e 8b       	std	Y+22, r25	; 0x16
    237c:	af 8b       	std	Y+23, r26	; 0x17
    237e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	2c f4       	brge	.+10     	; 0x23a2 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13
    23a0:	3f c0       	rjmp	.+126    	; 0x2420 <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    23a2:	6d 89       	ldd	r22, Y+21	; 0x15
    23a4:	7e 89       	ldd	r23, Y+22	; 0x16
    23a6:	8f 89       	ldd	r24, Y+23	; 0x17
    23a8:	98 8d       	ldd	r25, Y+24	; 0x18
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	3f ef       	ldi	r19, 0xFF	; 255
    23ae:	4f e7       	ldi	r20, 0x7F	; 127
    23b0:	57 e4       	ldi	r21, 0x47	; 71
    23b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b6:	18 16       	cp	r1, r24
    23b8:	4c f5       	brge	.+82     	; 0x240c <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ba:	69 8d       	ldd	r22, Y+25	; 0x19
    23bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	0f c0       	rjmp	.+30     	; 0x2402 <HCLCD_Vid8Bits_SendCommand+0xee>
    23e4:	88 ec       	ldi	r24, 0xC8	; 200
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9a 8b       	std	Y+18, r25	; 0x12
    23ea:	89 8b       	std	Y+17, r24	; 0x11
    23ec:	89 89       	ldd	r24, Y+17	; 0x11
    23ee:	9a 89       	ldd	r25, Y+18	; 0x12
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <HCLCD_Vid8Bits_SendCommand+0xdc>
    23f4:	9a 8b       	std	Y+18, r25	; 0x12
    23f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f8:	8b 89       	ldd	r24, Y+19	; 0x13
    23fa:	9c 89       	ldd	r25, Y+20	; 0x14
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	9c 8b       	std	Y+20, r25	; 0x14
    2400:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	69 f7       	brne	.-38     	; 0x23e4 <HCLCD_Vid8Bits_SendCommand+0xd0>
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240c:	6d 89       	ldd	r22, Y+21	; 0x15
    240e:	7e 89       	ldd	r23, Y+22	; 0x16
    2410:	8f 89       	ldd	r24, Y+23	; 0x17
    2412:	98 8d       	ldd	r25, Y+24	; 0x18
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	8b 89       	ldd	r24, Y+19	; 0x13
    2422:	9c 89       	ldd	r25, Y+20	; 0x14
    2424:	98 8b       	std	Y+16, r25	; 0x10
    2426:	8f 87       	std	Y+15, r24	; 0x0f
    2428:	8f 85       	ldd	r24, Y+15	; 0x0f
    242a:	98 89       	ldd	r25, Y+16	; 0x10
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <HCLCD_Vid8Bits_SendCommand+0x118>
    2430:	98 8b       	std	Y+16, r25	; 0x10
    2432:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	62 e0       	ldi	r22, 0x02	; 2
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e0       	ldi	r26, 0x00	; 0
    2444:	b0 e4       	ldi	r27, 0x40	; 64
    2446:	8b 87       	std	Y+11, r24	; 0x0b
    2448:	9c 87       	std	Y+12, r25	; 0x0c
    244a:	ad 87       	std	Y+13, r26	; 0x0d
    244c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2450:	7c 85       	ldd	r23, Y+12	; 0x0c
    2452:	8d 85       	ldd	r24, Y+13	; 0x0d
    2454:	9e 85       	ldd	r25, Y+14	; 0x0e
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a ef       	ldi	r20, 0xFA	; 250
    245c:	54 e4       	ldi	r21, 0x44	; 68
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	8f 83       	std	Y+7, r24	; 0x07
    2468:	98 87       	std	Y+8, r25	; 0x08
    246a:	a9 87       	std	Y+9, r26	; 0x09
    246c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f e3       	ldi	r21, 0x3F	; 63
    247e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	3f c0       	rjmp	.+126    	; 0x250e <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <HCLCD_Vid8Bits_SendCommand+0x1dc>
    24d2:	88 ec       	ldi	r24, 0xC8	; 200
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9c 83       	std	Y+4, r25	; 0x04
    24d8:	8b 83       	std	Y+3, r24	; 0x03
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <HCLCD_Vid8Bits_SendCommand+0x1ca>
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <HCLCD_Vid8Bits_SendCommand+0x1be>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	9e 81       	ldd	r25, Y+6	; 0x06
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <HCLCD_Vid8Bits_SendCommand+0x206>
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	62 e0       	ldi	r22, 0x02	; 2
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
}
    252c:	6d 96       	adiw	r28, 0x1d	; 29
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	e8 97       	sbiw	r28, 0x38	; 56
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	6f ef       	ldi	r22, 0xFF	; 255
    2556:	0e 94 9c 0a 	call	0x1538	; 0x1538 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	62 e0       	ldi	r22, 0x02	; 2
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	62 e0       	ldi	r22, 0x02	; 2
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	62 e0       	ldi	r22, 0x02	; 2
    2572:	41 e0       	ldi	r20, 0x01	; 1
    2574:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	a0 ef       	ldi	r26, 0xF0	; 240
    257e:	b1 e4       	ldi	r27, 0x41	; 65
    2580:	8d ab       	std	Y+53, r24	; 0x35
    2582:	9e ab       	std	Y+54, r25	; 0x36
    2584:	af ab       	std	Y+55, r26	; 0x37
    2586:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2588:	6d a9       	ldd	r22, Y+53	; 0x35
    258a:	7e a9       	ldd	r23, Y+54	; 0x36
    258c:	8f a9       	ldd	r24, Y+55	; 0x37
    258e:	98 ad       	ldd	r25, Y+56	; 0x38
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4a ef       	ldi	r20, 0xFA	; 250
    2596:	54 e4       	ldi	r21, 0x44	; 68
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	89 ab       	std	Y+49, r24	; 0x31
    25a2:	9a ab       	std	Y+50, r25	; 0x32
    25a4:	ab ab       	std	Y+51, r26	; 0x33
    25a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25a8:	69 a9       	ldd	r22, Y+49	; 0x31
    25aa:	7a a9       	ldd	r23, Y+50	; 0x32
    25ac:	8b a9       	ldd	r24, Y+51	; 0x33
    25ae:	9c a9       	ldd	r25, Y+52	; 0x34
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	2c f4       	brge	.+10     	; 0x25ca <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	98 ab       	std	Y+48, r25	; 0x30
    25c6:	8f a7       	std	Y+47, r24	; 0x2f
    25c8:	3f c0       	rjmp	.+126    	; 0x2648 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    25ca:	69 a9       	ldd	r22, Y+49	; 0x31
    25cc:	7a a9       	ldd	r23, Y+50	; 0x32
    25ce:	8b a9       	ldd	r24, Y+51	; 0x33
    25d0:	9c a9       	ldd	r25, Y+52	; 0x34
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	3f ef       	ldi	r19, 0xFF	; 255
    25d6:	4f e7       	ldi	r20, 0x7F	; 127
    25d8:	57 e4       	ldi	r21, 0x47	; 71
    25da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25de:	18 16       	cp	r1, r24
    25e0:	4c f5       	brge	.+82     	; 0x2634 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e2:	6d a9       	ldd	r22, Y+53	; 0x35
    25e4:	7e a9       	ldd	r23, Y+54	; 0x36
    25e6:	8f a9       	ldd	r24, Y+55	; 0x37
    25e8:	98 ad       	ldd	r25, Y+56	; 0x38
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e2       	ldi	r20, 0x20	; 32
    25f0:	51 e4       	ldi	r21, 0x41	; 65
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	98 ab       	std	Y+48, r25	; 0x30
    2608:	8f a7       	std	Y+47, r24	; 0x2f
    260a:	0f c0       	rjmp	.+30     	; 0x262a <HCLCD_Vid8Bits_Init+0xec>
    260c:	88 ec       	ldi	r24, 0xC8	; 200
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9e a7       	std	Y+46, r25	; 0x2e
    2612:	8d a7       	std	Y+45, r24	; 0x2d
    2614:	8d a5       	ldd	r24, Y+45	; 0x2d
    2616:	9e a5       	ldd	r25, Y+46	; 0x2e
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <HCLCD_Vid8Bits_Init+0xda>
    261c:	9e a7       	std	Y+46, r25	; 0x2e
    261e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2620:	8f a5       	ldd	r24, Y+47	; 0x2f
    2622:	98 a9       	ldd	r25, Y+48	; 0x30
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	98 ab       	std	Y+48, r25	; 0x30
    2628:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262a:	8f a5       	ldd	r24, Y+47	; 0x2f
    262c:	98 a9       	ldd	r25, Y+48	; 0x30
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	69 f7       	brne	.-38     	; 0x260c <HCLCD_Vid8Bits_Init+0xce>
    2632:	14 c0       	rjmp	.+40     	; 0x265c <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2634:	69 a9       	ldd	r22, Y+49	; 0x31
    2636:	7a a9       	ldd	r23, Y+50	; 0x32
    2638:	8b a9       	ldd	r24, Y+51	; 0x33
    263a:	9c a9       	ldd	r25, Y+52	; 0x34
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	98 ab       	std	Y+48, r25	; 0x30
    2646:	8f a7       	std	Y+47, r24	; 0x2f
    2648:	8f a5       	ldd	r24, Y+47	; 0x2f
    264a:	98 a9       	ldd	r25, Y+48	; 0x30
    264c:	9c a7       	std	Y+44, r25	; 0x2c
    264e:	8b a7       	std	Y+43, r24	; 0x2b
    2650:	8b a5       	ldd	r24, Y+43	; 0x2b
    2652:	9c a5       	ldd	r25, Y+44	; 0x2c
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <HCLCD_Vid8Bits_Init+0x116>
    2658:	9c a7       	std	Y+44, r25	; 0x2c
    265a:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    265c:	88 e2       	ldi	r24, 0x28	; 40
    265e:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a0 e8       	ldi	r26, 0x80	; 128
    2668:	bf e3       	ldi	r27, 0x3F	; 63
    266a:	8f a3       	std	Y+39, r24	; 0x27
    266c:	98 a7       	std	Y+40, r25	; 0x28
    266e:	a9 a7       	std	Y+41, r26	; 0x29
    2670:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2672:	6f a1       	ldd	r22, Y+39	; 0x27
    2674:	78 a5       	ldd	r23, Y+40	; 0x28
    2676:	89 a5       	ldd	r24, Y+41	; 0x29
    2678:	9a a5       	ldd	r25, Y+42	; 0x2a
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	4a ef       	ldi	r20, 0xFA	; 250
    2680:	54 e4       	ldi	r21, 0x44	; 68
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	8b a3       	std	Y+35, r24	; 0x23
    268c:	9c a3       	std	Y+36, r25	; 0x24
    268e:	ad a3       	std	Y+37, r26	; 0x25
    2690:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2692:	6b a1       	ldd	r22, Y+35	; 0x23
    2694:	7c a1       	ldd	r23, Y+36	; 0x24
    2696:	8d a1       	ldd	r24, Y+37	; 0x25
    2698:	9e a1       	ldd	r25, Y+38	; 0x26
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e8       	ldi	r20, 0x80	; 128
    26a0:	5f e3       	ldi	r21, 0x3F	; 63
    26a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a6:	88 23       	and	r24, r24
    26a8:	2c f4       	brge	.+10     	; 0x26b4 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9a a3       	std	Y+34, r25	; 0x22
    26b0:	89 a3       	std	Y+33, r24	; 0x21
    26b2:	3f c0       	rjmp	.+126    	; 0x2732 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    26b4:	6b a1       	ldd	r22, Y+35	; 0x23
    26b6:	7c a1       	ldd	r23, Y+36	; 0x24
    26b8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ba:	9e a1       	ldd	r25, Y+38	; 0x26
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	3f ef       	ldi	r19, 0xFF	; 255
    26c0:	4f e7       	ldi	r20, 0x7F	; 127
    26c2:	57 e4       	ldi	r21, 0x47	; 71
    26c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c8:	18 16       	cp	r1, r24
    26ca:	4c f5       	brge	.+82     	; 0x271e <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26cc:	6f a1       	ldd	r22, Y+39	; 0x27
    26ce:	78 a5       	ldd	r23, Y+40	; 0x28
    26d0:	89 a5       	ldd	r24, Y+41	; 0x29
    26d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e2       	ldi	r20, 0x20	; 32
    26da:	51 e4       	ldi	r21, 0x41	; 65
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	bc 01       	movw	r22, r24
    26e6:	cd 01       	movw	r24, r26
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9a a3       	std	Y+34, r25	; 0x22
    26f2:	89 a3       	std	Y+33, r24	; 0x21
    26f4:	0f c0       	rjmp	.+30     	; 0x2714 <HCLCD_Vid8Bits_Init+0x1d6>
    26f6:	88 ec       	ldi	r24, 0xC8	; 200
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	98 a3       	std	Y+32, r25	; 0x20
    26fc:	8f 8f       	std	Y+31, r24	; 0x1f
    26fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2700:	98 a1       	ldd	r25, Y+32	; 0x20
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <HCLCD_Vid8Bits_Init+0x1c4>
    2706:	98 a3       	std	Y+32, r25	; 0x20
    2708:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270a:	89 a1       	ldd	r24, Y+33	; 0x21
    270c:	9a a1       	ldd	r25, Y+34	; 0x22
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	9a a3       	std	Y+34, r25	; 0x22
    2712:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2714:	89 a1       	ldd	r24, Y+33	; 0x21
    2716:	9a a1       	ldd	r25, Y+34	; 0x22
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	69 f7       	brne	.-38     	; 0x26f6 <HCLCD_Vid8Bits_Init+0x1b8>
    271c:	14 c0       	rjmp	.+40     	; 0x2746 <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271e:	6b a1       	ldd	r22, Y+35	; 0x23
    2720:	7c a1       	ldd	r23, Y+36	; 0x24
    2722:	8d a1       	ldd	r24, Y+37	; 0x25
    2724:	9e a1       	ldd	r25, Y+38	; 0x26
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9a a3       	std	Y+34, r25	; 0x22
    2730:	89 a3       	std	Y+33, r24	; 0x21
    2732:	89 a1       	ldd	r24, Y+33	; 0x21
    2734:	9a a1       	ldd	r25, Y+34	; 0x22
    2736:	9e 8f       	std	Y+30, r25	; 0x1e
    2738:	8d 8f       	std	Y+29, r24	; 0x1d
    273a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <HCLCD_Vid8Bits_Init+0x200>
    2742:	9e 8f       	std	Y+30, r25	; 0x1e
    2744:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    2746:	8f e0       	ldi	r24, 0x0F	; 15
    2748:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e8       	ldi	r26, 0x80	; 128
    2752:	bf e3       	ldi	r27, 0x3F	; 63
    2754:	89 8f       	std	Y+25, r24	; 0x19
    2756:	9a 8f       	std	Y+26, r25	; 0x1a
    2758:	ab 8f       	std	Y+27, r26	; 0x1b
    275a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	69 8d       	ldd	r22, Y+25	; 0x19
    275e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a ef       	ldi	r20, 0xFA	; 250
    276a:	54 e4       	ldi	r21, 0x44	; 68
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	8d 8b       	std	Y+21, r24	; 0x15
    2776:	9e 8b       	std	Y+22, r25	; 0x16
    2778:	af 8b       	std	Y+23, r26	; 0x17
    277a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    277c:	6d 89       	ldd	r22, Y+21	; 0x15
    277e:	7e 89       	ldd	r23, Y+22	; 0x16
    2780:	8f 89       	ldd	r24, Y+23	; 0x17
    2782:	98 8d       	ldd	r25, Y+24	; 0x18
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9c 8b       	std	Y+20, r25	; 0x14
    279a:	8b 8b       	std	Y+19, r24	; 0x13
    279c:	3f c0       	rjmp	.+126    	; 0x281c <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    279e:	6d 89       	ldd	r22, Y+21	; 0x15
    27a0:	7e 89       	ldd	r23, Y+22	; 0x16
    27a2:	8f 89       	ldd	r24, Y+23	; 0x17
    27a4:	98 8d       	ldd	r25, Y+24	; 0x18
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	4c f5       	brge	.+82     	; 0x2808 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b6:	69 8d       	ldd	r22, Y+25	; 0x19
    27b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9c 8b       	std	Y+20, r25	; 0x14
    27dc:	8b 8b       	std	Y+19, r24	; 0x13
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <HCLCD_Vid8Bits_Init+0x2c0>
    27e0:	88 ec       	ldi	r24, 0xC8	; 200
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	9a 8b       	std	Y+18, r25	; 0x12
    27e6:	89 8b       	std	Y+17, r24	; 0x11
    27e8:	89 89       	ldd	r24, Y+17	; 0x11
    27ea:	9a 89       	ldd	r25, Y+18	; 0x12
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <HCLCD_Vid8Bits_Init+0x2ae>
    27f0:	9a 8b       	std	Y+18, r25	; 0x12
    27f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f4:	8b 89       	ldd	r24, Y+19	; 0x13
    27f6:	9c 89       	ldd	r25, Y+20	; 0x14
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	9c 8b       	std	Y+20, r25	; 0x14
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2800:	9c 89       	ldd	r25, Y+20	; 0x14
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	69 f7       	brne	.-38     	; 0x27e0 <HCLCD_Vid8Bits_Init+0x2a2>
    2806:	14 c0       	rjmp	.+40     	; 0x2830 <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	6d 89       	ldd	r22, Y+21	; 0x15
    280a:	7e 89       	ldd	r23, Y+22	; 0x16
    280c:	8f 89       	ldd	r24, Y+23	; 0x17
    280e:	98 8d       	ldd	r25, Y+24	; 0x18
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9c 8b       	std	Y+20, r25	; 0x14
    281a:	8b 8b       	std	Y+19, r24	; 0x13
    281c:	8b 89       	ldd	r24, Y+19	; 0x13
    281e:	9c 89       	ldd	r25, Y+20	; 0x14
    2820:	98 8b       	std	Y+16, r25	; 0x10
    2822:	8f 87       	std	Y+15, r24	; 0x0f
    2824:	8f 85       	ldd	r24, Y+15	; 0x0f
    2826:	98 89       	ldd	r25, Y+16	; 0x10
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <HCLCD_Vid8Bits_Init+0x2ea>
    282c:	98 8b       	std	Y+16, r25	; 0x10
    282e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e4       	ldi	r27, 0x40	; 64
    283e:	8b 87       	std	Y+11, r24	; 0x0b
    2840:	9c 87       	std	Y+12, r25	; 0x0c
    2842:	ad 87       	std	Y+13, r26	; 0x0d
    2844:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	6b 85       	ldd	r22, Y+11	; 0x0b
    2848:	7c 85       	ldd	r23, Y+12	; 0x0c
    284a:	8d 85       	ldd	r24, Y+13	; 0x0d
    284c:	9e 85       	ldd	r25, Y+14	; 0x0e
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	4a ef       	ldi	r20, 0xFA	; 250
    2854:	54 e4       	ldi	r21, 0x44	; 68
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8f 83       	std	Y+7, r24	; 0x07
    2860:	98 87       	std	Y+8, r25	; 0x08
    2862:	a9 87       	std	Y+9, r26	; 0x09
    2864:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <HCLCD_Vid8Bits_Init+0x3aa>
    28ca:	88 ec       	ldi	r24, 0xC8	; 200
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9c 83       	std	Y+4, r25	; 0x04
    28d0:	8b 83       	std	Y+3, r24	; 0x03
    28d2:	8b 81       	ldd	r24, Y+3	; 0x03
    28d4:	9c 81       	ldd	r25, Y+4	; 0x04
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <HCLCD_Vid8Bits_Init+0x398>
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	69 f7       	brne	.-38     	; 0x28ca <HCLCD_Vid8Bits_Init+0x38c>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6f 81       	ldd	r22, Y+7	; 0x07
    28f4:	78 85       	ldd	r23, Y+8	; 0x08
    28f6:	89 85       	ldd	r24, Y+9	; 0x09
    28f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9e 83       	std	Y+6, r25	; 0x06
    2904:	8d 83       	std	Y+5, r24	; 0x05
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <HCLCD_Vid8Bits_Init+0x3d4>
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    291a:	86 e0       	ldi	r24, 0x06	; 6
    291c:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
}
    2920:	e8 96       	adiw	r28, 0x38	; 56
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	6d 97       	sbiw	r28, 0x1d	; 29
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	62 e0       	ldi	r22, 0x02	; 2
    294c:	41 e0       	ldi	r20, 0x01	; 1
    294e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	62 e0       	ldi	r22, 0x02	; 2
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2960:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	62 e0       	ldi	r22, 0x02	; 2
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	a0 e0       	ldi	r26, 0x00	; 0
    2974:	b0 e4       	ldi	r27, 0x40	; 64
    2976:	89 8f       	std	Y+25, r24	; 0x19
    2978:	9a 8f       	std	Y+26, r25	; 0x1a
    297a:	ab 8f       	std	Y+27, r26	; 0x1b
    297c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297e:	69 8d       	ldd	r22, Y+25	; 0x19
    2980:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a ef       	ldi	r20, 0xFA	; 250
    298c:	54 e4       	ldi	r21, 0x44	; 68
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	8d 8b       	std	Y+21, r24	; 0x15
    2998:	9e 8b       	std	Y+22, r25	; 0x16
    299a:	af 8b       	std	Y+23, r26	; 0x17
    299c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    299e:	6d 89       	ldd	r22, Y+21	; 0x15
    29a0:	7e 89       	ldd	r23, Y+22	; 0x16
    29a2:	8f 89       	ldd	r24, Y+23	; 0x17
    29a4:	98 8d       	ldd	r25, Y+24	; 0x18
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b2:	88 23       	and	r24, r24
    29b4:	2c f4       	brge	.+10     	; 0x29c0 <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9c 8b       	std	Y+20, r25	; 0x14
    29bc:	8b 8b       	std	Y+19, r24	; 0x13
    29be:	3f c0       	rjmp	.+126    	; 0x2a3e <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    29c0:	6d 89       	ldd	r22, Y+21	; 0x15
    29c2:	7e 89       	ldd	r23, Y+22	; 0x16
    29c4:	8f 89       	ldd	r24, Y+23	; 0x17
    29c6:	98 8d       	ldd	r25, Y+24	; 0x18
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	57 e4       	ldi	r21, 0x47	; 71
    29d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d4:	18 16       	cp	r1, r24
    29d6:	4c f5       	brge	.+82     	; 0x2a2a <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d8:	69 8d       	ldd	r22, Y+25	; 0x19
    29da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9c 8b       	std	Y+20, r25	; 0x14
    29fe:	8b 8b       	std	Y+19, r24	; 0x13
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2a02:	88 ec       	ldi	r24, 0xC8	; 200
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	9a 8b       	std	Y+18, r25	; 0x12
    2a08:	89 8b       	std	Y+17, r24	; 0x11
    2a0a:	89 89       	ldd	r24, Y+17	; 0x11
    2a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2a12:	9a 8b       	std	Y+18, r25	; 0x12
    2a14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a16:	8b 89       	ldd	r24, Y+19	; 0x13
    2a18:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	9c 8b       	std	Y+20, r25	; 0x14
    2a1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a20:	8b 89       	ldd	r24, Y+19	; 0x13
    2a22:	9c 89       	ldd	r25, Y+20	; 0x14
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	69 f7       	brne	.-38     	; 0x2a02 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2a28:	14 c0       	rjmp	.+40     	; 0x2a52 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a30:	98 8d       	ldd	r25, Y+24	; 0x18
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
    2a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a40:	9c 89       	ldd	r25, Y+20	; 0x14
    2a42:	98 8b       	std	Y+16, r25	; 0x10
    2a44:	8f 87       	std	Y+15, r24	; 0x0f
    2a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a48:	98 89       	ldd	r25, Y+16	; 0x10
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2a4e:	98 8b       	std	Y+16, r25	; 0x10
    2a50:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	62 e0       	ldi	r22, 0x02	; 2
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a0 e0       	ldi	r26, 0x00	; 0
    2a62:	b0 e4       	ldi	r27, 0x40	; 64
    2a64:	8b 87       	std	Y+11, r24	; 0x0b
    2a66:	9c 87       	std	Y+12, r25	; 0x0c
    2a68:	ad 87       	std	Y+13, r26	; 0x0d
    2a6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	4a ef       	ldi	r20, 0xFA	; 250
    2a7a:	54 e4       	ldi	r21, 0x44	; 68
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	8f 83       	std	Y+7, r24	; 0x07
    2a86:	98 87       	std	Y+8, r25	; 0x08
    2a88:	a9 87       	std	Y+9, r26	; 0x09
    2a8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8e:	78 85       	ldd	r23, Y+8	; 0x08
    2a90:	89 85       	ldd	r24, Y+9	; 0x09
    2a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e8       	ldi	r20, 0x80	; 128
    2a9a:	5f e3       	ldi	r21, 0x3F	; 63
    2a9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa0:	88 23       	and	r24, r24
    2aa2:	2c f4       	brge	.+10     	; 0x2aae <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
    2aac:	3f c0       	rjmp	.+126    	; 0x2b2c <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2aae:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab0:	78 85       	ldd	r23, Y+8	; 0x08
    2ab2:	89 85       	ldd	r24, Y+9	; 0x09
    2ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	3f ef       	ldi	r19, 0xFF	; 255
    2aba:	4f e7       	ldi	r20, 0x7F	; 127
    2abc:	57 e4       	ldi	r21, 0x47	; 71
    2abe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac2:	18 16       	cp	r1, r24
    2ac4:	4c f5       	brge	.+82     	; 0x2b18 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e2       	ldi	r20, 0x20	; 32
    2ad4:	51 e4       	ldi	r21, 0x41	; 65
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
    2aee:	0f c0       	rjmp	.+30     	; 0x2b0e <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2af0:	88 ec       	ldi	r24, 0xC8	; 200
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	9c 83       	std	Y+4, r25	; 0x04
    2af6:	8b 83       	std	Y+3, r24	; 0x03
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	9c 81       	ldd	r25, Y+4	; 0x04
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2b00:	9c 83       	std	Y+4, r25	; 0x04
    2b02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	69 f7       	brne	.-38     	; 0x2af0 <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2b16:	14 c0       	rjmp	.+40     	; 0x2b40 <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b18:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1a:	78 85       	ldd	r23, Y+8	; 0x08
    2b1c:	89 85       	ldd	r24, Y+9	; 0x09
    2b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9e 83       	std	Y+6, r25	; 0x06
    2b2a:	8d 83       	std	Y+5, r24	; 0x05
    2b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	9a 81       	ldd	r25, Y+2	; 0x02
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2b40:	82 e0       	ldi	r24, 0x02	; 2
    2b42:	62 e0       	ldi	r22, 0x02	; 2
    2b44:	41 e0       	ldi	r20, 0x01	; 1
    2b46:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
}
    2b4a:	6d 96       	adiw	r28, 0x1d	; 29
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <HCLCD_Vid8Bits_DisplayString+0x6>
    2b62:	0f 92       	push	r0
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	9b 83       	std	Y+3, r25	; 0x03
    2b6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2b6c:	19 82       	std	Y+1, r1	; 0x01
    2b6e:	0e c0       	rjmp	.+28     	; 0x2b8c <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	e2 0f       	add	r30, r18
    2b7e:	f3 1f       	adc	r31, r19
    2b80:	80 81       	ld	r24, Z
    2b82:	0e 94 99 14 	call	0x2932	; 0x2932 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	8f 5f       	subi	r24, 0xFF	; 255
    2b8a:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	9b 81       	ldd	r25, Y+3	; 0x03
    2b96:	fc 01       	movw	r30, r24
    2b98:	e2 0f       	add	r30, r18
    2b9a:	f3 1f       	adc	r31, r19
    2b9c:	80 81       	ld	r24, Z
    2b9e:	88 23       	and	r24, r24
    2ba0:	39 f7       	brne	.-50     	; 0x2b70 <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	60 97       	sbiw	r28, 0x10	; 16
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	6d 87       	std	Y+13, r22	; 0x0d
    2bc8:	7e 87       	std	Y+14, r23	; 0x0e
    2bca:	8f 87       	std	Y+15, r24	; 0x0f
    2bcc:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2bce:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd4:	af 85       	ldd	r26, Y+15	; 0x0f
    2bd6:	b8 89       	ldd	r27, Y+16	; 0x10
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	a1 05       	cpc	r26, r1
    2bdc:	b1 05       	cpc	r27, r1
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2be0:	4f c0       	rjmp	.+158    	; 0x2c80 <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2be2:	2d c0       	rjmp	.+90     	; 0x2c3e <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	08 2f       	mov	r16, r24
    2be8:	10 e0       	ldi	r17, 0x00	; 0
    2bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bee:	af 85       	ldd	r26, Y+15	; 0x0f
    2bf0:	b8 89       	ldd	r27, Y+16	; 0x10
    2bf2:	2a e0       	ldi	r18, 0x0A	; 10
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 46 22 	call	0x448c	; 0x448c <__udivmodsi4>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	28 2f       	mov	r18, r24
    2c08:	ce 01       	movw	r24, r28
    2c0a:	03 96       	adiw	r24, 0x03	; 3
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	e0 0f       	add	r30, r16
    2c10:	f1 1f       	adc	r31, r17
    2c12:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c18:	af 85       	ldd	r26, Y+15	; 0x0f
    2c1a:	b8 89       	ldd	r27, Y+16	; 0x10
    2c1c:	2a e0       	ldi	r18, 0x0A	; 10
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 46 22 	call	0x448c	; 0x448c <__udivmodsi4>
    2c2c:	da 01       	movw	r26, r20
    2c2e:	c9 01       	movw	r24, r18
    2c30:	8d 87       	std	Y+13, r24	; 0x0d
    2c32:	9e 87       	std	Y+14, r25	; 0x0e
    2c34:	af 87       	std	Y+15, r26	; 0x0f
    2c36:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	8f 5f       	subi	r24, 0xFF	; 255
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	af 85       	ldd	r26, Y+15	; 0x0f
    2c44:	b8 89       	ldd	r27, Y+16	; 0x10
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	a1 05       	cpc	r26, r1
    2c4a:	b1 05       	cpc	r27, r1
    2c4c:	59 f6       	brne	.-106    	; 0x2be4 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	81 50       	subi	r24, 0x01	; 1
    2c52:	89 83       	std	Y+1, r24	; 0x01
    2c54:	11 c0       	rjmp	.+34     	; 0x2c78 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	28 2f       	mov	r18, r24
    2c5a:	33 27       	eor	r19, r19
    2c5c:	27 fd       	sbrc	r18, 7
    2c5e:	30 95       	com	r19
    2c60:	ce 01       	movw	r24, r28
    2c62:	03 96       	adiw	r24, 0x03	; 3
    2c64:	fc 01       	movw	r30, r24
    2c66:	e2 0f       	add	r30, r18
    2c68:	f3 1f       	adc	r31, r19
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 5d       	subi	r24, 0xD0	; 208
    2c6e:	0e 94 99 14 	call	0x2932	; 0x2932 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	81 50       	subi	r24, 0x01	; 1
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	88 23       	and	r24, r24
    2c7c:	64 f7       	brge	.-40     	; 0x2c56 <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2c7e:	03 c0       	rjmp	.+6      	; 0x2c86 <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2c80:	80 e3       	ldi	r24, 0x30	; 48
    2c82:	0e 94 99 14 	call	0x2932	; 0x2932 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2c86:	60 96       	adiw	r28, 0x10	; 16
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	08 95       	ret

00002c9c <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <HCLCD_Vid8Bits_SetPosition+0x6>
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	81 30       	cpi	r24, 0x01	; 1
    2cae:	41 f4       	brne	.+16     	; 0x2cc0 <HCLCD_Vid8Bits_SetPosition+0x24>
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	80 31       	cpi	r24, 0x10	; 16
    2cb4:	28 f4       	brcc	.+10     	; 0x2cc0 <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	80 58       	subi	r24, 0x80	; 128
    2cba:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    2cbe:	0a c0       	rjmp	.+20     	; 0x2cd4 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	82 30       	cpi	r24, 0x02	; 2
    2cc4:	39 f4       	brne	.+14     	; 0x2cd4 <HCLCD_Vid8Bits_SetPosition+0x38>
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	80 31       	cpi	r24, 0x10	; 16
    2cca:	20 f4       	brcc	.+8      	; 0x2cd4 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	80 54       	subi	r24, 0x40	; 64
    2cd0:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	8a 83       	std	Y+2, r24	; 0x02
    2cec:	7c 83       	std	Y+4, r23	; 0x04
    2cee:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	88 30       	cpi	r24, 0x08	; 8
    2cf4:	f8 f4       	brcc	.+62     	; 0x2d34 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	88 2f       	mov	r24, r24
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	08 96       	adiw	r24, 0x08	; 8
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2d0e:	19 82       	std	Y+1, r1	; 0x01
    2d10:	0e c0       	rjmp	.+28     	; 0x2d2e <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	e2 0f       	add	r30, r18
    2d20:	f3 1f       	adc	r31, r19
    2d22:	80 81       	ld	r24, Z
    2d24:	0e 94 99 14 	call	0x2932	; 0x2932 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	89 83       	std	Y+1, r24	; 0x01
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	88 30       	cpi	r24, 0x08	; 8
    2d32:	78 f3       	brcs	.-34     	; 0x2d12 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	2e 97       	sbiw	r28, 0x0e	; 14
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	a0 e0       	ldi	r26, 0x00	; 0
    2d62:	b0 e4       	ldi	r27, 0x40	; 64
    2d64:	8b 87       	std	Y+11, r24	; 0x0b
    2d66:	9c 87       	std	Y+12, r25	; 0x0c
    2d68:	ad 87       	std	Y+13, r26	; 0x0d
    2d6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	4a ef       	ldi	r20, 0xFA	; 250
    2d7a:	54 e4       	ldi	r21, 0x44	; 68
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	8f 83       	std	Y+7, r24	; 0x07
    2d86:	98 87       	std	Y+8, r25	; 0x08
    2d88:	a9 87       	std	Y+9, r26	; 0x09
    2d8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8e:	78 85       	ldd	r23, Y+8	; 0x08
    2d90:	89 85       	ldd	r24, Y+9	; 0x09
    2d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e8       	ldi	r20, 0x80	; 128
    2d9a:	5f e3       	ldi	r21, 0x3F	; 63
    2d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da0:	88 23       	and	r24, r24
    2da2:	2c f4       	brge	.+10     	; 0x2dae <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
    2dac:	3f c0       	rjmp	.+126    	; 0x2e2c <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    2dae:	6f 81       	ldd	r22, Y+7	; 0x07
    2db0:	78 85       	ldd	r23, Y+8	; 0x08
    2db2:	89 85       	ldd	r24, Y+9	; 0x09
    2db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	3f ef       	ldi	r19, 0xFF	; 255
    2dba:	4f e7       	ldi	r20, 0x7F	; 127
    2dbc:	57 e4       	ldi	r21, 0x47	; 71
    2dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc2:	18 16       	cp	r1, r24
    2dc4:	4c f5       	brge	.+82     	; 0x2e18 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e2       	ldi	r20, 0x20	; 32
    2dd4:	51 e4       	ldi	r21, 0x41	; 65
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	0f c0       	rjmp	.+30     	; 0x2e0e <HCLCD_Vid8Bits_ClearScreen+0xcc>
    2df0:	88 ec       	ldi	r24, 0xC8	; 200
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	9c 83       	std	Y+4, r25	; 0x04
    2df6:	8b 83       	std	Y+3, r24	; 0x03
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <HCLCD_Vid8Bits_ClearScreen+0xba>
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	9e 81       	ldd	r25, Y+6	; 0x06
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	9e 83       	std	Y+6, r25	; 0x06
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	9e 81       	ldd	r25, Y+6	; 0x06
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	69 f7       	brne	.-38     	; 0x2df0 <HCLCD_Vid8Bits_ClearScreen+0xae>
    2e16:	14 c0       	rjmp	.+40     	; 0x2e40 <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e18:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1a:	78 85       	ldd	r23, Y+8	; 0x08
    2e1c:	89 85       	ldd	r24, Y+9	; 0x09
    2e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	9e 83       	std	Y+6, r25	; 0x06
    2e2a:	8d 83       	std	Y+5, r24	; 0x05
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	9a 83       	std	Y+2, r25	; 0x02
    2e32:	89 83       	std	Y+1, r24	; 0x01
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	9a 81       	ldd	r25, Y+2	; 0x02
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2e40:	2e 96       	adiw	r28, 0x0e	; 14
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	60 97       	sbiw	r28, 0x10	; 16
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2e68:	1f 86       	std	Y+15, r1	; 0x0f
    2e6a:	78 c0       	rjmp	.+240    	; 0x2f5c <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2e6c:	88 e1       	ldi	r24, 0x18	; 24
    2e6e:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	a6 e9       	ldi	r26, 0x96	; 150
    2e78:	b3 e4       	ldi	r27, 0x43	; 67
    2e7a:	8b 87       	std	Y+11, r24	; 0x0b
    2e7c:	9c 87       	std	Y+12, r25	; 0x0c
    2e7e:	ad 87       	std	Y+13, r26	; 0x0d
    2e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	4a ef       	ldi	r20, 0xFA	; 250
    2e90:	54 e4       	ldi	r21, 0x44	; 68
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	8f 83       	std	Y+7, r24	; 0x07
    2e9c:	98 87       	std	Y+8, r25	; 0x08
    2e9e:	a9 87       	std	Y+9, r26	; 0x09
    2ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea4:	78 85       	ldd	r23, Y+8	; 0x08
    2ea6:	89 85       	ldd	r24, Y+9	; 0x09
    2ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e8       	ldi	r20, 0x80	; 128
    2eb0:	5f e3       	ldi	r21, 0x3F	; 63
    2eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb6:	88 23       	and	r24, r24
    2eb8:	2c f4       	brge	.+10     	; 0x2ec4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	3f c0       	rjmp	.+126    	; 0x2f42 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    2ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec6:	78 85       	ldd	r23, Y+8	; 0x08
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	4c f5       	brge	.+82     	; 0x2f2e <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e2       	ldi	r20, 0x20	; 32
    2eea:	51 e4       	ldi	r21, 0x41	; 65
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	bc 01       	movw	r22, r24
    2ef6:	cd 01       	movw	r24, r26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
    2f04:	0f c0       	rjmp	.+30     	; 0x2f24 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    2f06:	88 ec       	ldi	r24, 0xC8	; 200
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9c 83       	std	Y+4, r25	; 0x04
    2f0c:	8b 83       	std	Y+3, r24	; 0x03
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	9c 81       	ldd	r25, Y+4	; 0x04
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    2f16:	9c 83       	std	Y+4, r25	; 0x04
    2f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	9e 83       	std	Y+6, r25	; 0x06
    2f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f24:	8d 81       	ldd	r24, Y+5	; 0x05
    2f26:	9e 81       	ldd	r25, Y+6	; 0x06
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	69 f7       	brne	.-38     	; 0x2f06 <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    2f2c:	14 c0       	rjmp	.+40     	; 0x2f56 <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f30:	78 85       	ldd	r23, Y+8	; 0x08
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	f1 f7       	brne	.-4      	; 0x2f4e <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f58:	8f 5f       	subi	r24, 0xFF	; 255
    2f5a:	8f 87       	std	Y+15, r24	; 0x0f
    2f5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f5e:	88 89       	ldd	r24, Y+16	; 0x10
    2f60:	98 17       	cp	r25, r24
    2f62:	08 f4       	brcc	.+2      	; 0x2f66 <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    2f64:	83 cf       	rjmp	.-250    	; 0x2e6c <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    2f66:	60 96       	adiw	r28, 0x10	; 16
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	60 97       	sbiw	r28, 0x10	; 16
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2f8e:	1f 86       	std	Y+15, r1	; 0x0f
    2f90:	78 c0       	rjmp	.+240    	; 0x3082 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    2f92:	8c e1       	ldi	r24, 0x1C	; 28
    2f94:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	a6 e9       	ldi	r26, 0x96	; 150
    2f9e:	b3 e4       	ldi	r27, 0x43	; 67
    2fa0:	8b 87       	std	Y+11, r24	; 0x0b
    2fa2:	9c 87       	std	Y+12, r25	; 0x0c
    2fa4:	ad 87       	std	Y+13, r26	; 0x0d
    2fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	4a ef       	ldi	r20, 0xFA	; 250
    2fb6:	54 e4       	ldi	r21, 0x44	; 68
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8f 83       	std	Y+7, r24	; 0x07
    2fc2:	98 87       	std	Y+8, r25	; 0x08
    2fc4:	a9 87       	std	Y+9, r26	; 0x09
    2fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fca:	78 85       	ldd	r23, Y+8	; 0x08
    2fcc:	89 85       	ldd	r24, Y+9	; 0x09
    2fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e8       	ldi	r20, 0x80	; 128
    2fd6:	5f e3       	ldi	r21, 0x3F	; 63
    2fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fdc:	88 23       	and	r24, r24
    2fde:	2c f4       	brge	.+10     	; 0x2fea <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	3f c0       	rjmp	.+126    	; 0x3068 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    2fea:	6f 81       	ldd	r22, Y+7	; 0x07
    2fec:	78 85       	ldd	r23, Y+8	; 0x08
    2fee:	89 85       	ldd	r24, Y+9	; 0x09
    2ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	3f ef       	ldi	r19, 0xFF	; 255
    2ff6:	4f e7       	ldi	r20, 0x7F	; 127
    2ff8:	57 e4       	ldi	r21, 0x47	; 71
    2ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ffe:	18 16       	cp	r1, r24
    3000:	4c f5       	brge	.+82     	; 0x3054 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3002:	6b 85       	ldd	r22, Y+11	; 0x0b
    3004:	7c 85       	ldd	r23, Y+12	; 0x0c
    3006:	8d 85       	ldd	r24, Y+13	; 0x0d
    3008:	9e 85       	ldd	r25, Y+14	; 0x0e
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	51 e4       	ldi	r21, 0x41	; 65
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9e 83       	std	Y+6, r25	; 0x06
    3028:	8d 83       	std	Y+5, r24	; 0x05
    302a:	0f c0       	rjmp	.+30     	; 0x304a <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    302c:	88 ec       	ldi	r24, 0xC8	; 200
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9c 83       	std	Y+4, r25	; 0x04
    3032:	8b 83       	std	Y+3, r24	; 0x03
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	9c 81       	ldd	r25, Y+4	; 0x04
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    303c:	9c 83       	std	Y+4, r25	; 0x04
    303e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3040:	8d 81       	ldd	r24, Y+5	; 0x05
    3042:	9e 81       	ldd	r25, Y+6	; 0x06
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	9e 83       	std	Y+6, r25	; 0x06
    3048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304a:	8d 81       	ldd	r24, Y+5	; 0x05
    304c:	9e 81       	ldd	r25, Y+6	; 0x06
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	69 f7       	brne	.-38     	; 0x302c <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    3052:	14 c0       	rjmp	.+40     	; 0x307c <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3054:	6f 81       	ldd	r22, Y+7	; 0x07
    3056:	78 85       	ldd	r23, Y+8	; 0x08
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	9a 85       	ldd	r25, Y+10	; 0x0a
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	9e 83       	std	Y+6, r25	; 0x06
    3066:	8d 83       	std	Y+5, r24	; 0x05
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	9e 81       	ldd	r25, Y+6	; 0x06
    306c:	9a 83       	std	Y+2, r25	; 0x02
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	9a 81       	ldd	r25, Y+2	; 0x02
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    307c:	8f 85       	ldd	r24, Y+15	; 0x0f
    307e:	8f 5f       	subi	r24, 0xFF	; 255
    3080:	8f 87       	std	Y+15, r24	; 0x0f
    3082:	9f 85       	ldd	r25, Y+15	; 0x0f
    3084:	88 89       	ldd	r24, Y+16	; 0x10
    3086:	98 17       	cp	r25, r24
    3088:	08 f4       	brcc	.+2      	; 0x308c <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    308a:	83 cf       	rjmp	.-250    	; 0x2f92 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    308c:	60 96       	adiw	r28, 0x10	; 16
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	60 97       	sbiw	r28, 0x10	; 16
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    30b4:	1f 86       	std	Y+15, r1	; 0x0f
    30b6:	78 c0       	rjmp	.+240    	; 0x31a8 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    30b8:	80 e1       	ldi	r24, 0x10	; 16
    30ba:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	a6 e9       	ldi	r26, 0x96	; 150
    30c4:	b3 e4       	ldi	r27, 0x43	; 67
    30c6:	8b 87       	std	Y+11, r24	; 0x0b
    30c8:	9c 87       	std	Y+12, r25	; 0x0c
    30ca:	ad 87       	std	Y+13, r26	; 0x0d
    30cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	4a ef       	ldi	r20, 0xFA	; 250
    30dc:	54 e4       	ldi	r21, 0x44	; 68
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	8f 83       	std	Y+7, r24	; 0x07
    30e8:	98 87       	std	Y+8, r25	; 0x08
    30ea:	a9 87       	std	Y+9, r26	; 0x09
    30ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ee:	6f 81       	ldd	r22, Y+7	; 0x07
    30f0:	78 85       	ldd	r23, Y+8	; 0x08
    30f2:	89 85       	ldd	r24, Y+9	; 0x09
    30f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e8       	ldi	r20, 0x80	; 128
    30fc:	5f e3       	ldi	r21, 0x3F	; 63
    30fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3102:	88 23       	and	r24, r24
    3104:	2c f4       	brge	.+10     	; 0x3110 <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9e 83       	std	Y+6, r25	; 0x06
    310c:	8d 83       	std	Y+5, r24	; 0x05
    310e:	3f c0       	rjmp	.+126    	; 0x318e <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    3110:	6f 81       	ldd	r22, Y+7	; 0x07
    3112:	78 85       	ldd	r23, Y+8	; 0x08
    3114:	89 85       	ldd	r24, Y+9	; 0x09
    3116:	9a 85       	ldd	r25, Y+10	; 0x0a
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	3f ef       	ldi	r19, 0xFF	; 255
    311c:	4f e7       	ldi	r20, 0x7F	; 127
    311e:	57 e4       	ldi	r21, 0x47	; 71
    3120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3124:	18 16       	cp	r1, r24
    3126:	4c f5       	brge	.+82     	; 0x317a <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3128:	6b 85       	ldd	r22, Y+11	; 0x0b
    312a:	7c 85       	ldd	r23, Y+12	; 0x0c
    312c:	8d 85       	ldd	r24, Y+13	; 0x0d
    312e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e2       	ldi	r20, 0x20	; 32
    3136:	51 e4       	ldi	r21, 0x41	; 65
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9e 83       	std	Y+6, r25	; 0x06
    314e:	8d 83       	std	Y+5, r24	; 0x05
    3150:	0f c0       	rjmp	.+30     	; 0x3170 <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    3152:	88 ec       	ldi	r24, 0xC8	; 200
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	9c 83       	std	Y+4, r25	; 0x04
    3158:	8b 83       	std	Y+3, r24	; 0x03
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	9c 81       	ldd	r25, Y+4	; 0x04
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    3162:	9c 83       	std	Y+4, r25	; 0x04
    3164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	9e 83       	std	Y+6, r25	; 0x06
    316e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	69 f7       	brne	.-38     	; 0x3152 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    3178:	14 c0       	rjmp	.+40     	; 0x31a2 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317a:	6f 81       	ldd	r22, Y+7	; 0x07
    317c:	78 85       	ldd	r23, Y+8	; 0x08
    317e:	89 85       	ldd	r24, Y+9	; 0x09
    3180:	9a 85       	ldd	r25, Y+10	; 0x0a
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9e 83       	std	Y+6, r25	; 0x06
    318c:	8d 83       	std	Y+5, r24	; 0x05
    318e:	8d 81       	ldd	r24, Y+5	; 0x05
    3190:	9e 81       	ldd	r25, Y+6	; 0x06
    3192:	9a 83       	std	Y+2, r25	; 0x02
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	9a 81       	ldd	r25, Y+2	; 0x02
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	f1 f7       	brne	.-4      	; 0x319a <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    31a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a4:	8f 5f       	subi	r24, 0xFF	; 255
    31a6:	8f 87       	std	Y+15, r24	; 0x0f
    31a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    31aa:	88 89       	ldd	r24, Y+16	; 0x10
    31ac:	98 17       	cp	r25, r24
    31ae:	08 f4       	brcc	.+2      	; 0x31b2 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    31b0:	83 cf       	rjmp	.-250    	; 0x30b8 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    31b2:	60 96       	adiw	r28, 0x10	; 16
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	cf 91       	pop	r28
    31c0:	df 91       	pop	r29
    31c2:	08 95       	ret

000031c4 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	60 97       	sbiw	r28, 0x10	; 16
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    31da:	1f 86       	std	Y+15, r1	; 0x0f
    31dc:	78 c0       	rjmp	.+240    	; 0x32ce <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    31de:	84 e1       	ldi	r24, 0x14	; 20
    31e0:	0e 94 8a 11 	call	0x2314	; 0x2314 <HCLCD_Vid8Bits_SendCommand>
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	a6 e9       	ldi	r26, 0x96	; 150
    31ea:	b3 e4       	ldi	r27, 0x43	; 67
    31ec:	8b 87       	std	Y+11, r24	; 0x0b
    31ee:	9c 87       	std	Y+12, r25	; 0x0c
    31f0:	ad 87       	std	Y+13, r26	; 0x0d
    31f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	4a ef       	ldi	r20, 0xFA	; 250
    3202:	54 e4       	ldi	r21, 0x44	; 68
    3204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	8f 83       	std	Y+7, r24	; 0x07
    320e:	98 87       	std	Y+8, r25	; 0x08
    3210:	a9 87       	std	Y+9, r26	; 0x09
    3212:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3214:	6f 81       	ldd	r22, Y+7	; 0x07
    3216:	78 85       	ldd	r23, Y+8	; 0x08
    3218:	89 85       	ldd	r24, Y+9	; 0x09
    321a:	9a 85       	ldd	r25, Y+10	; 0x0a
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3228:	88 23       	and	r24, r24
    322a:	2c f4       	brge	.+10     	; 0x3236 <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9e 83       	std	Y+6, r25	; 0x06
    3232:	8d 83       	std	Y+5, r24	; 0x05
    3234:	3f c0       	rjmp	.+126    	; 0x32b4 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    3236:	6f 81       	ldd	r22, Y+7	; 0x07
    3238:	78 85       	ldd	r23, Y+8	; 0x08
    323a:	89 85       	ldd	r24, Y+9	; 0x09
    323c:	9a 85       	ldd	r25, Y+10	; 0x0a
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	3f ef       	ldi	r19, 0xFF	; 255
    3242:	4f e7       	ldi	r20, 0x7F	; 127
    3244:	57 e4       	ldi	r21, 0x47	; 71
    3246:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    324a:	18 16       	cp	r1, r24
    324c:	4c f5       	brge	.+82     	; 0x32a0 <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3250:	7c 85       	ldd	r23, Y+12	; 0x0c
    3252:	8d 85       	ldd	r24, Y+13	; 0x0d
    3254:	9e 85       	ldd	r25, Y+14	; 0x0e
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	bc 01       	movw	r22, r24
    3268:	cd 01       	movw	r24, r26
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
    3276:	0f c0       	rjmp	.+30     	; 0x3296 <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    3278:	88 ec       	ldi	r24, 0xC8	; 200
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	9c 83       	std	Y+4, r25	; 0x04
    327e:	8b 83       	std	Y+3, r24	; 0x03
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    3288:	9c 83       	std	Y+4, r25	; 0x04
    328a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328c:	8d 81       	ldd	r24, Y+5	; 0x05
    328e:	9e 81       	ldd	r25, Y+6	; 0x06
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	9e 83       	std	Y+6, r25	; 0x06
    3294:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3296:	8d 81       	ldd	r24, Y+5	; 0x05
    3298:	9e 81       	ldd	r25, Y+6	; 0x06
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	69 f7       	brne	.-38     	; 0x3278 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    329e:	14 c0       	rjmp	.+40     	; 0x32c8 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a0:	6f 81       	ldd	r22, Y+7	; 0x07
    32a2:	78 85       	ldd	r23, Y+8	; 0x08
    32a4:	89 85       	ldd	r24, Y+9	; 0x09
    32a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	9e 83       	std	Y+6, r25	; 0x06
    32b2:	8d 83       	std	Y+5, r24	; 0x05
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	9a 83       	std	Y+2, r25	; 0x02
    32ba:	89 83       	std	Y+1, r24	; 0x01
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	9a 81       	ldd	r25, Y+2	; 0x02
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	f1 f7       	brne	.-4      	; 0x32c0 <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    32c4:	9a 83       	std	Y+2, r25	; 0x02
    32c6:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    32c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ca:	8f 5f       	subi	r24, 0xFF	; 255
    32cc:	8f 87       	std	Y+15, r24	; 0x0f
    32ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    32d0:	88 89       	ldd	r24, Y+16	; 0x10
    32d2:	98 17       	cp	r25, r24
    32d4:	08 f4       	brcc	.+2      	; 0x32d8 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    32d6:	83 cf       	rjmp	.-250    	; 0x31de <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    32d8:	60 96       	adiw	r28, 0x10	; 16
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	cd bf       	out	0x3d, r28	; 61
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	08 95       	ret

000032ea <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	2f 97       	sbiw	r28, 0x0f	; 15
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	de bf       	out	0x3e, r29	; 62
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	cd bf       	out	0x3d, r28	; 61
    32fe:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	62 e0       	ldi	r22, 0x02	; 2
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	62 e0       	ldi	r22, 0x02	; 2
    330e:	40 e0       	ldi	r20, 0x00	; 0
    3310:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    3314:	84 e0       	ldi	r24, 0x04	; 4
    3316:	62 e0       	ldi	r22, 0x02	; 2
    3318:	4f 85       	ldd	r20, Y+15	; 0x0f
    331a:	0e 94 cf 0c 	call	0x199e	; 0x199e <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    331e:	82 e0       	ldi	r24, 0x02	; 2
    3320:	62 e0       	ldi	r22, 0x02	; 2
    3322:	41 e0       	ldi	r20, 0x01	; 1
    3324:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	a0 e0       	ldi	r26, 0x00	; 0
    332e:	b0 e4       	ldi	r27, 0x40	; 64
    3330:	8b 87       	std	Y+11, r24	; 0x0b
    3332:	9c 87       	std	Y+12, r25	; 0x0c
    3334:	ad 87       	std	Y+13, r26	; 0x0d
    3336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3338:	6b 85       	ldd	r22, Y+11	; 0x0b
    333a:	7c 85       	ldd	r23, Y+12	; 0x0c
    333c:	8d 85       	ldd	r24, Y+13	; 0x0d
    333e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	4a ef       	ldi	r20, 0xFA	; 250
    3346:	54 e4       	ldi	r21, 0x44	; 68
    3348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	8f 83       	std	Y+7, r24	; 0x07
    3352:	98 87       	std	Y+8, r25	; 0x08
    3354:	a9 87       	std	Y+9, r26	; 0x09
    3356:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3358:	6f 81       	ldd	r22, Y+7	; 0x07
    335a:	78 85       	ldd	r23, Y+8	; 0x08
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e8       	ldi	r20, 0x80	; 128
    3366:	5f e3       	ldi	r21, 0x3F	; 63
    3368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    336c:	88 23       	and	r24, r24
    336e:	2c f4       	brge	.+10     	; 0x337a <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	3f c0       	rjmp	.+126    	; 0x33f8 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    337a:	6f 81       	ldd	r22, Y+7	; 0x07
    337c:	78 85       	ldd	r23, Y+8	; 0x08
    337e:	89 85       	ldd	r24, Y+9	; 0x09
    3380:	9a 85       	ldd	r25, Y+10	; 0x0a
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	3f ef       	ldi	r19, 0xFF	; 255
    3386:	4f e7       	ldi	r20, 0x7F	; 127
    3388:	57 e4       	ldi	r21, 0x47	; 71
    338a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    338e:	18 16       	cp	r1, r24
    3390:	4c f5       	brge	.+82     	; 0x33e4 <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3392:	6b 85       	ldd	r22, Y+11	; 0x0b
    3394:	7c 85       	ldd	r23, Y+12	; 0x0c
    3396:	8d 85       	ldd	r24, Y+13	; 0x0d
    3398:	9e 85       	ldd	r25, Y+14	; 0x0e
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e2       	ldi	r20, 0x20	; 32
    33a0:	51 e4       	ldi	r21, 0x41	; 65
    33a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	0f c0       	rjmp	.+30     	; 0x33da <HCLCD_Vid4Bits_SendCommand+0xf0>
    33bc:	88 ec       	ldi	r24, 0xC8	; 200
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	9c 83       	std	Y+4, r25	; 0x04
    33c2:	8b 83       	std	Y+3, r24	; 0x03
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	9c 81       	ldd	r25, Y+4	; 0x04
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <HCLCD_Vid4Bits_SendCommand+0xde>
    33cc:	9c 83       	std	Y+4, r25	; 0x04
    33ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d0:	8d 81       	ldd	r24, Y+5	; 0x05
    33d2:	9e 81       	ldd	r25, Y+6	; 0x06
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	9e 83       	std	Y+6, r25	; 0x06
    33d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	69 f7       	brne	.-38     	; 0x33bc <HCLCD_Vid4Bits_SendCommand+0xd2>
    33e2:	14 c0       	rjmp	.+40     	; 0x340c <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e4:	6f 81       	ldd	r22, Y+7	; 0x07
    33e6:	78 85       	ldd	r23, Y+8	; 0x08
    33e8:	89 85       	ldd	r24, Y+9	; 0x09
    33ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <HCLCD_Vid4Bits_SendCommand+0x11a>
    3408:	9a 83       	std	Y+2, r25	; 0x02
    340a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	62 e0       	ldi	r22, 0x02	; 2
    3410:	40 e0       	ldi	r20, 0x00	; 0
    3412:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
}
    3416:	2f 96       	adiw	r28, 0x0f	; 15
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	e9 97       	sbiw	r28, 0x39	; 57
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    343c:	87 e0       	ldi	r24, 0x07	; 7
    343e:	89 af       	std	Y+57, r24	; 0x39
    3440:	08 c0       	rjmp	.+16     	; 0x3452 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    3442:	89 ad       	ldd	r24, Y+57	; 0x39
    3444:	62 e0       	ldi	r22, 0x02	; 2
    3446:	41 e0       	ldi	r20, 0x01	; 1
    3448:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    344c:	89 ad       	ldd	r24, Y+57	; 0x39
    344e:	81 50       	subi	r24, 0x01	; 1
    3450:	89 af       	std	Y+57, r24	; 0x39
    3452:	89 ad       	ldd	r24, Y+57	; 0x39
    3454:	84 30       	cpi	r24, 0x04	; 4
    3456:	ac f7       	brge	.-22     	; 0x3442 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	62 e0       	ldi	r22, 0x02	; 2
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	62 e0       	ldi	r22, 0x02	; 2
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	62 e0       	ldi	r22, 0x02	; 2
    3470:	41 e0       	ldi	r20, 0x01	; 1
    3472:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_Error_State_SetPinDirection>
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	a0 ef       	ldi	r26, 0xF0	; 240
    347c:	b1 e4       	ldi	r27, 0x41	; 65
    347e:	8d ab       	std	Y+53, r24	; 0x35
    3480:	9e ab       	std	Y+54, r25	; 0x36
    3482:	af ab       	std	Y+55, r26	; 0x37
    3484:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3486:	6d a9       	ldd	r22, Y+53	; 0x35
    3488:	7e a9       	ldd	r23, Y+54	; 0x36
    348a:	8f a9       	ldd	r24, Y+55	; 0x37
    348c:	98 ad       	ldd	r25, Y+56	; 0x38
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	4a ef       	ldi	r20, 0xFA	; 250
    3494:	54 e4       	ldi	r21, 0x44	; 68
    3496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	89 ab       	std	Y+49, r24	; 0x31
    34a0:	9a ab       	std	Y+50, r25	; 0x32
    34a2:	ab ab       	std	Y+51, r26	; 0x33
    34a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34a6:	69 a9       	ldd	r22, Y+49	; 0x31
    34a8:	7a a9       	ldd	r23, Y+50	; 0x32
    34aa:	8b a9       	ldd	r24, Y+51	; 0x33
    34ac:	9c a9       	ldd	r25, Y+52	; 0x34
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e8       	ldi	r20, 0x80	; 128
    34b4:	5f e3       	ldi	r21, 0x3F	; 63
    34b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	2c f4       	brge	.+10     	; 0x34c8 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	98 ab       	std	Y+48, r25	; 0x30
    34c4:	8f a7       	std	Y+47, r24	; 0x2f
    34c6:	3f c0       	rjmp	.+126    	; 0x3546 <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    34c8:	69 a9       	ldd	r22, Y+49	; 0x31
    34ca:	7a a9       	ldd	r23, Y+50	; 0x32
    34cc:	8b a9       	ldd	r24, Y+51	; 0x33
    34ce:	9c a9       	ldd	r25, Y+52	; 0x34
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	3f ef       	ldi	r19, 0xFF	; 255
    34d4:	4f e7       	ldi	r20, 0x7F	; 127
    34d6:	57 e4       	ldi	r21, 0x47	; 71
    34d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34dc:	18 16       	cp	r1, r24
    34de:	4c f5       	brge	.+82     	; 0x3532 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e0:	6d a9       	ldd	r22, Y+53	; 0x35
    34e2:	7e a9       	ldd	r23, Y+54	; 0x36
    34e4:	8f a9       	ldd	r24, Y+55	; 0x37
    34e6:	98 ad       	ldd	r25, Y+56	; 0x38
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e2       	ldi	r20, 0x20	; 32
    34ee:	51 e4       	ldi	r21, 0x41	; 65
    34f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	98 ab       	std	Y+48, r25	; 0x30
    3506:	8f a7       	std	Y+47, r24	; 0x2f
    3508:	0f c0       	rjmp	.+30     	; 0x3528 <HCLCD_Vid4Bits_Init+0x100>
    350a:	88 ec       	ldi	r24, 0xC8	; 200
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	9e a7       	std	Y+46, r25	; 0x2e
    3510:	8d a7       	std	Y+45, r24	; 0x2d
    3512:	8d a5       	ldd	r24, Y+45	; 0x2d
    3514:	9e a5       	ldd	r25, Y+46	; 0x2e
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <HCLCD_Vid4Bits_Init+0xee>
    351a:	9e a7       	std	Y+46, r25	; 0x2e
    351c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3520:	98 a9       	ldd	r25, Y+48	; 0x30
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	98 ab       	std	Y+48, r25	; 0x30
    3526:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3528:	8f a5       	ldd	r24, Y+47	; 0x2f
    352a:	98 a9       	ldd	r25, Y+48	; 0x30
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	69 f7       	brne	.-38     	; 0x350a <HCLCD_Vid4Bits_Init+0xe2>
    3530:	14 c0       	rjmp	.+40     	; 0x355a <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3532:	69 a9       	ldd	r22, Y+49	; 0x31
    3534:	7a a9       	ldd	r23, Y+50	; 0x32
    3536:	8b a9       	ldd	r24, Y+51	; 0x33
    3538:	9c a9       	ldd	r25, Y+52	; 0x34
    353a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	98 ab       	std	Y+48, r25	; 0x30
    3544:	8f a7       	std	Y+47, r24	; 0x2f
    3546:	8f a5       	ldd	r24, Y+47	; 0x2f
    3548:	98 a9       	ldd	r25, Y+48	; 0x30
    354a:	9c a7       	std	Y+44, r25	; 0x2c
    354c:	8b a7       	std	Y+43, r24	; 0x2b
    354e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3550:	9c a5       	ldd	r25, Y+44	; 0x2c
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <HCLCD_Vid4Bits_Init+0x12a>
    3556:	9c a7       	std	Y+44, r25	; 0x2c
    3558:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    355a:	82 e0       	ldi	r24, 0x02	; 2
    355c:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3560:	82 e0       	ldi	r24, 0x02	; 2
    3562:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    3566:	88 e2       	ldi	r24, 0x28	; 40
    3568:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	a0 e8       	ldi	r26, 0x80	; 128
    3572:	bf e3       	ldi	r27, 0x3F	; 63
    3574:	8f a3       	std	Y+39, r24	; 0x27
    3576:	98 a7       	std	Y+40, r25	; 0x28
    3578:	a9 a7       	std	Y+41, r26	; 0x29
    357a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357c:	6f a1       	ldd	r22, Y+39	; 0x27
    357e:	78 a5       	ldd	r23, Y+40	; 0x28
    3580:	89 a5       	ldd	r24, Y+41	; 0x29
    3582:	9a a5       	ldd	r25, Y+42	; 0x2a
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4a ef       	ldi	r20, 0xFA	; 250
    358a:	54 e4       	ldi	r21, 0x44	; 68
    358c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	8b a3       	std	Y+35, r24	; 0x23
    3596:	9c a3       	std	Y+36, r25	; 0x24
    3598:	ad a3       	std	Y+37, r26	; 0x25
    359a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    359c:	6b a1       	ldd	r22, Y+35	; 0x23
    359e:	7c a1       	ldd	r23, Y+36	; 0x24
    35a0:	8d a1       	ldd	r24, Y+37	; 0x25
    35a2:	9e a1       	ldd	r25, Y+38	; 0x26
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e8       	ldi	r20, 0x80	; 128
    35aa:	5f e3       	ldi	r21, 0x3F	; 63
    35ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b0:	88 23       	and	r24, r24
    35b2:	2c f4       	brge	.+10     	; 0x35be <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	9a a3       	std	Y+34, r25	; 0x22
    35ba:	89 a3       	std	Y+33, r24	; 0x21
    35bc:	3f c0       	rjmp	.+126    	; 0x363c <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    35be:	6b a1       	ldd	r22, Y+35	; 0x23
    35c0:	7c a1       	ldd	r23, Y+36	; 0x24
    35c2:	8d a1       	ldd	r24, Y+37	; 0x25
    35c4:	9e a1       	ldd	r25, Y+38	; 0x26
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	3f ef       	ldi	r19, 0xFF	; 255
    35ca:	4f e7       	ldi	r20, 0x7F	; 127
    35cc:	57 e4       	ldi	r21, 0x47	; 71
    35ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d2:	18 16       	cp	r1, r24
    35d4:	4c f5       	brge	.+82     	; 0x3628 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d6:	6f a1       	ldd	r22, Y+39	; 0x27
    35d8:	78 a5       	ldd	r23, Y+40	; 0x28
    35da:	89 a5       	ldd	r24, Y+41	; 0x29
    35dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e2       	ldi	r20, 0x20	; 32
    35e4:	51 e4       	ldi	r21, 0x41	; 65
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	bc 01       	movw	r22, r24
    35f0:	cd 01       	movw	r24, r26
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9a a3       	std	Y+34, r25	; 0x22
    35fc:	89 a3       	std	Y+33, r24	; 0x21
    35fe:	0f c0       	rjmp	.+30     	; 0x361e <HCLCD_Vid4Bits_Init+0x1f6>
    3600:	88 ec       	ldi	r24, 0xC8	; 200
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	98 a3       	std	Y+32, r25	; 0x20
    3606:	8f 8f       	std	Y+31, r24	; 0x1f
    3608:	8f 8d       	ldd	r24, Y+31	; 0x1f
    360a:	98 a1       	ldd	r25, Y+32	; 0x20
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <HCLCD_Vid4Bits_Init+0x1e4>
    3610:	98 a3       	std	Y+32, r25	; 0x20
    3612:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3614:	89 a1       	ldd	r24, Y+33	; 0x21
    3616:	9a a1       	ldd	r25, Y+34	; 0x22
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	9a a3       	std	Y+34, r25	; 0x22
    361c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361e:	89 a1       	ldd	r24, Y+33	; 0x21
    3620:	9a a1       	ldd	r25, Y+34	; 0x22
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	69 f7       	brne	.-38     	; 0x3600 <HCLCD_Vid4Bits_Init+0x1d8>
    3626:	14 c0       	rjmp	.+40     	; 0x3650 <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3628:	6b a1       	ldd	r22, Y+35	; 0x23
    362a:	7c a1       	ldd	r23, Y+36	; 0x24
    362c:	8d a1       	ldd	r24, Y+37	; 0x25
    362e:	9e a1       	ldd	r25, Y+38	; 0x26
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	9a a3       	std	Y+34, r25	; 0x22
    363a:	89 a3       	std	Y+33, r24	; 0x21
    363c:	89 a1       	ldd	r24, Y+33	; 0x21
    363e:	9a a1       	ldd	r25, Y+34	; 0x22
    3640:	9e 8f       	std	Y+30, r25	; 0x1e
    3642:	8d 8f       	std	Y+29, r24	; 0x1d
    3644:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3646:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	f1 f7       	brne	.-4      	; 0x3648 <HCLCD_Vid4Bits_Init+0x220>
    364c:	9e 8f       	std	Y+30, r25	; 0x1e
    364e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    3656:	8f e0       	ldi	r24, 0x0F	; 15
    3658:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	a0 e8       	ldi	r26, 0x80	; 128
    3662:	bf e3       	ldi	r27, 0x3F	; 63
    3664:	89 8f       	std	Y+25, r24	; 0x19
    3666:	9a 8f       	std	Y+26, r25	; 0x1a
    3668:	ab 8f       	std	Y+27, r26	; 0x1b
    366a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366c:	69 8d       	ldd	r22, Y+25	; 0x19
    366e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	4a ef       	ldi	r20, 0xFA	; 250
    367a:	54 e4       	ldi	r21, 0x44	; 68
    367c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	8d 8b       	std	Y+21, r24	; 0x15
    3686:	9e 8b       	std	Y+22, r25	; 0x16
    3688:	af 8b       	std	Y+23, r26	; 0x17
    368a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    368c:	6d 89       	ldd	r22, Y+21	; 0x15
    368e:	7e 89       	ldd	r23, Y+22	; 0x16
    3690:	8f 89       	ldd	r24, Y+23	; 0x17
    3692:	98 8d       	ldd	r25, Y+24	; 0x18
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 e8       	ldi	r20, 0x80	; 128
    369a:	5f e3       	ldi	r21, 0x3F	; 63
    369c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36a0:	88 23       	and	r24, r24
    36a2:	2c f4       	brge	.+10     	; 0x36ae <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9c 8b       	std	Y+20, r25	; 0x14
    36aa:	8b 8b       	std	Y+19, r24	; 0x13
    36ac:	3f c0       	rjmp	.+126    	; 0x372c <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    36ae:	6d 89       	ldd	r22, Y+21	; 0x15
    36b0:	7e 89       	ldd	r23, Y+22	; 0x16
    36b2:	8f 89       	ldd	r24, Y+23	; 0x17
    36b4:	98 8d       	ldd	r25, Y+24	; 0x18
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	3f ef       	ldi	r19, 0xFF	; 255
    36ba:	4f e7       	ldi	r20, 0x7F	; 127
    36bc:	57 e4       	ldi	r21, 0x47	; 71
    36be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36c2:	18 16       	cp	r1, r24
    36c4:	4c f5       	brge	.+82     	; 0x3718 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c6:	69 8d       	ldd	r22, Y+25	; 0x19
    36c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e2       	ldi	r20, 0x20	; 32
    36d4:	51 e4       	ldi	r21, 0x41	; 65
    36d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	9c 8b       	std	Y+20, r25	; 0x14
    36ec:	8b 8b       	std	Y+19, r24	; 0x13
    36ee:	0f c0       	rjmp	.+30     	; 0x370e <HCLCD_Vid4Bits_Init+0x2e6>
    36f0:	88 ec       	ldi	r24, 0xC8	; 200
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9a 8b       	std	Y+18, r25	; 0x12
    36f6:	89 8b       	std	Y+17, r24	; 0x11
    36f8:	89 89       	ldd	r24, Y+17	; 0x11
    36fa:	9a 89       	ldd	r25, Y+18	; 0x12
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	f1 f7       	brne	.-4      	; 0x36fc <HCLCD_Vid4Bits_Init+0x2d4>
    3700:	9a 8b       	std	Y+18, r25	; 0x12
    3702:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3704:	8b 89       	ldd	r24, Y+19	; 0x13
    3706:	9c 89       	ldd	r25, Y+20	; 0x14
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	9c 8b       	std	Y+20, r25	; 0x14
    370c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370e:	8b 89       	ldd	r24, Y+19	; 0x13
    3710:	9c 89       	ldd	r25, Y+20	; 0x14
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	69 f7       	brne	.-38     	; 0x36f0 <HCLCD_Vid4Bits_Init+0x2c8>
    3716:	14 c0       	rjmp	.+40     	; 0x3740 <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3718:	6d 89       	ldd	r22, Y+21	; 0x15
    371a:	7e 89       	ldd	r23, Y+22	; 0x16
    371c:	8f 89       	ldd	r24, Y+23	; 0x17
    371e:	98 8d       	ldd	r25, Y+24	; 0x18
    3720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	9c 8b       	std	Y+20, r25	; 0x14
    372a:	8b 8b       	std	Y+19, r24	; 0x13
    372c:	8b 89       	ldd	r24, Y+19	; 0x13
    372e:	9c 89       	ldd	r25, Y+20	; 0x14
    3730:	98 8b       	std	Y+16, r25	; 0x10
    3732:	8f 87       	std	Y+15, r24	; 0x0f
    3734:	8f 85       	ldd	r24, Y+15	; 0x0f
    3736:	98 89       	ldd	r25, Y+16	; 0x10
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <HCLCD_Vid4Bits_Init+0x310>
    373c:	98 8b       	std	Y+16, r25	; 0x10
    373e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	a0 e0       	ldi	r26, 0x00	; 0
    3752:	b0 e4       	ldi	r27, 0x40	; 64
    3754:	8b 87       	std	Y+11, r24	; 0x0b
    3756:	9c 87       	std	Y+12, r25	; 0x0c
    3758:	ad 87       	std	Y+13, r26	; 0x0d
    375a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375c:	6b 85       	ldd	r22, Y+11	; 0x0b
    375e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3760:	8d 85       	ldd	r24, Y+13	; 0x0d
    3762:	9e 85       	ldd	r25, Y+14	; 0x0e
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	4a ef       	ldi	r20, 0xFA	; 250
    376a:	54 e4       	ldi	r21, 0x44	; 68
    376c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	8f 83       	std	Y+7, r24	; 0x07
    3776:	98 87       	std	Y+8, r25	; 0x08
    3778:	a9 87       	std	Y+9, r26	; 0x09
    377a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    377c:	6f 81       	ldd	r22, Y+7	; 0x07
    377e:	78 85       	ldd	r23, Y+8	; 0x08
    3780:	89 85       	ldd	r24, Y+9	; 0x09
    3782:	9a 85       	ldd	r25, Y+10	; 0x0a
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e8       	ldi	r20, 0x80	; 128
    378a:	5f e3       	ldi	r21, 0x3F	; 63
    378c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3790:	88 23       	and	r24, r24
    3792:	2c f4       	brge	.+10     	; 0x379e <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	9e 83       	std	Y+6, r25	; 0x06
    379a:	8d 83       	std	Y+5, r24	; 0x05
    379c:	3f c0       	rjmp	.+126    	; 0x381c <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    379e:	6f 81       	ldd	r22, Y+7	; 0x07
    37a0:	78 85       	ldd	r23, Y+8	; 0x08
    37a2:	89 85       	ldd	r24, Y+9	; 0x09
    37a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	3f ef       	ldi	r19, 0xFF	; 255
    37aa:	4f e7       	ldi	r20, 0x7F	; 127
    37ac:	57 e4       	ldi	r21, 0x47	; 71
    37ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37b2:	18 16       	cp	r1, r24
    37b4:	4c f5       	brge	.+82     	; 0x3808 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    37bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e2       	ldi	r20, 0x20	; 32
    37c4:	51 e4       	ldi	r21, 0x41	; 65
    37c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	bc 01       	movw	r22, r24
    37d0:	cd 01       	movw	r24, r26
    37d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	9e 83       	std	Y+6, r25	; 0x06
    37dc:	8d 83       	std	Y+5, r24	; 0x05
    37de:	0f c0       	rjmp	.+30     	; 0x37fe <HCLCD_Vid4Bits_Init+0x3d6>
    37e0:	88 ec       	ldi	r24, 0xC8	; 200
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	9c 83       	std	Y+4, r25	; 0x04
    37e6:	8b 83       	std	Y+3, r24	; 0x03
    37e8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ea:	9c 81       	ldd	r25, Y+4	; 0x04
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <HCLCD_Vid4Bits_Init+0x3c4>
    37f0:	9c 83       	std	Y+4, r25	; 0x04
    37f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f4:	8d 81       	ldd	r24, Y+5	; 0x05
    37f6:	9e 81       	ldd	r25, Y+6	; 0x06
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	9e 83       	std	Y+6, r25	; 0x06
    37fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	69 f7       	brne	.-38     	; 0x37e0 <HCLCD_Vid4Bits_Init+0x3b8>
    3806:	14 c0       	rjmp	.+40     	; 0x3830 <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3808:	6f 81       	ldd	r22, Y+7	; 0x07
    380a:	78 85       	ldd	r23, Y+8	; 0x08
    380c:	89 85       	ldd	r24, Y+9	; 0x09
    380e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	8d 81       	ldd	r24, Y+5	; 0x05
    381e:	9e 81       	ldd	r25, Y+6	; 0x06
    3820:	9a 83       	std	Y+2, r25	; 0x02
    3822:	89 83       	std	Y+1, r24	; 0x01
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	9a 81       	ldd	r25, Y+2	; 0x02
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <HCLCD_Vid4Bits_Init+0x400>
    382c:	9a 83       	std	Y+2, r25	; 0x02
    382e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    3836:	86 e0       	ldi	r24, 0x06	; 6
    3838:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
}
    383c:	e9 96       	adiw	r28, 0x39	; 57
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	cf 91       	pop	r28
    384a:	df 91       	pop	r29
    384c:	08 95       	ret

0000384e <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    384e:	df 93       	push	r29
    3850:	cf 93       	push	r28
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	2f 97       	sbiw	r28, 0x0f	; 15
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	62 e0       	ldi	r22, 0x02	; 2
    3868:	41 e0       	ldi	r20, 0x01	; 1
    386a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	62 e0       	ldi	r22, 0x02	; 2
    3872:	40 e0       	ldi	r20, 0x00	; 0
    3874:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    3878:	84 e0       	ldi	r24, 0x04	; 4
    387a:	62 e0       	ldi	r22, 0x02	; 2
    387c:	4f 85       	ldd	r20, Y+15	; 0x0f
    387e:	0e 94 cf 0c 	call	0x199e	; 0x199e <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3882:	82 e0       	ldi	r24, 0x02	; 2
    3884:	62 e0       	ldi	r22, 0x02	; 2
    3886:	41 e0       	ldi	r20, 0x01	; 1
    3888:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	a0 e0       	ldi	r26, 0x00	; 0
    3892:	b0 e4       	ldi	r27, 0x40	; 64
    3894:	8b 87       	std	Y+11, r24	; 0x0b
    3896:	9c 87       	std	Y+12, r25	; 0x0c
    3898:	ad 87       	std	Y+13, r26	; 0x0d
    389a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389c:	6b 85       	ldd	r22, Y+11	; 0x0b
    389e:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4a ef       	ldi	r20, 0xFA	; 250
    38aa:	54 e4       	ldi	r21, 0x44	; 68
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	8f 83       	std	Y+7, r24	; 0x07
    38b6:	98 87       	std	Y+8, r25	; 0x08
    38b8:	a9 87       	std	Y+9, r26	; 0x09
    38ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38bc:	6f 81       	ldd	r22, Y+7	; 0x07
    38be:	78 85       	ldd	r23, Y+8	; 0x08
    38c0:	89 85       	ldd	r24, Y+9	; 0x09
    38c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e8       	ldi	r20, 0x80	; 128
    38ca:	5f e3       	ldi	r21, 0x3F	; 63
    38cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38d0:	88 23       	and	r24, r24
    38d2:	2c f4       	brge	.+10     	; 0x38de <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	9e 83       	std	Y+6, r25	; 0x06
    38da:	8d 83       	std	Y+5, r24	; 0x05
    38dc:	3f c0       	rjmp	.+126    	; 0x395c <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    38de:	6f 81       	ldd	r22, Y+7	; 0x07
    38e0:	78 85       	ldd	r23, Y+8	; 0x08
    38e2:	89 85       	ldd	r24, Y+9	; 0x09
    38e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	3f ef       	ldi	r19, 0xFF	; 255
    38ea:	4f e7       	ldi	r20, 0x7F	; 127
    38ec:	57 e4       	ldi	r21, 0x47	; 71
    38ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38f2:	18 16       	cp	r1, r24
    38f4:	4c f5       	brge	.+82     	; 0x3948 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    38fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	40 e2       	ldi	r20, 0x20	; 32
    3904:	51 e4       	ldi	r21, 0x41	; 65
    3906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	bc 01       	movw	r22, r24
    3910:	cd 01       	movw	r24, r26
    3912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	9e 83       	std	Y+6, r25	; 0x06
    391c:	8d 83       	std	Y+5, r24	; 0x05
    391e:	0f c0       	rjmp	.+30     	; 0x393e <HCLCD_VidWriteChar_4Bits+0xf0>
    3920:	88 ec       	ldi	r24, 0xC8	; 200
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	9c 83       	std	Y+4, r25	; 0x04
    3926:	8b 83       	std	Y+3, r24	; 0x03
    3928:	8b 81       	ldd	r24, Y+3	; 0x03
    392a:	9c 81       	ldd	r25, Y+4	; 0x04
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	f1 f7       	brne	.-4      	; 0x392c <HCLCD_VidWriteChar_4Bits+0xde>
    3930:	9c 83       	std	Y+4, r25	; 0x04
    3932:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3934:	8d 81       	ldd	r24, Y+5	; 0x05
    3936:	9e 81       	ldd	r25, Y+6	; 0x06
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	9e 83       	std	Y+6, r25	; 0x06
    393c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393e:	8d 81       	ldd	r24, Y+5	; 0x05
    3940:	9e 81       	ldd	r25, Y+6	; 0x06
    3942:	00 97       	sbiw	r24, 0x00	; 0
    3944:	69 f7       	brne	.-38     	; 0x3920 <HCLCD_VidWriteChar_4Bits+0xd2>
    3946:	14 c0       	rjmp	.+40     	; 0x3970 <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3948:	6f 81       	ldd	r22, Y+7	; 0x07
    394a:	78 85       	ldd	r23, Y+8	; 0x08
    394c:	89 85       	ldd	r24, Y+9	; 0x09
    394e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	9e 83       	std	Y+6, r25	; 0x06
    395a:	8d 83       	std	Y+5, r24	; 0x05
    395c:	8d 81       	ldd	r24, Y+5	; 0x05
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	9a 83       	std	Y+2, r25	; 0x02
    3962:	89 83       	std	Y+1, r24	; 0x01
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	9a 81       	ldd	r25, Y+2	; 0x02
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	f1 f7       	brne	.-4      	; 0x3968 <HCLCD_VidWriteChar_4Bits+0x11a>
    396c:	9a 83       	std	Y+2, r25	; 0x02
    396e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3970:	82 e0       	ldi	r24, 0x02	; 2
    3972:	62 e0       	ldi	r22, 0x02	; 2
    3974:	40 e0       	ldi	r20, 0x00	; 0
    3976:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MDIO_Error_State_SetPinValue>
}
    397a:	2f 96       	adiw	r28, 0x0f	; 15
    397c:	0f b6       	in	r0, 0x3f	; 63
    397e:	f8 94       	cli
    3980:	de bf       	out	0x3e, r29	; 62
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	cd bf       	out	0x3d, r28	; 61
    3986:	cf 91       	pop	r28
    3988:	df 91       	pop	r29
    398a:	08 95       	ret

0000398c <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    398c:	df 93       	push	r29
    398e:	cf 93       	push	r28
    3990:	0f 92       	push	r0
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	82 95       	swap	r24
    399c:	8f 70       	andi	r24, 0x0F	; 15
    399e:	0e 94 27 1c 	call	0x384e	; 0x384e <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	0e 94 27 1c 	call	0x384e	; 0x384e <HCLCD_VidWriteChar_4Bits>
}
    39a8:	0f 90       	pop	r0
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret

000039b0 <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <HCLCD_Vid4Bits_DisplayString+0x6>
    39b6:	0f 92       	push	r0
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	9b 83       	std	Y+3, r25	; 0x03
    39be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    39c0:	19 82       	std	Y+1, r1	; 0x01
    39c2:	0e c0       	rjmp	.+28     	; 0x39e0 <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	28 2f       	mov	r18, r24
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	9b 81       	ldd	r25, Y+3	; 0x03
    39ce:	fc 01       	movw	r30, r24
    39d0:	e2 0f       	add	r30, r18
    39d2:	f3 1f       	adc	r31, r19
    39d4:	80 81       	ld	r24, Z
    39d6:	0e 94 c6 1c 	call	0x398c	; 0x398c <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	8f 5f       	subi	r24, 0xFF	; 255
    39de:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	8a 81       	ldd	r24, Y+2	; 0x02
    39e8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ea:	fc 01       	movw	r30, r24
    39ec:	e2 0f       	add	r30, r18
    39ee:	f3 1f       	adc	r31, r19
    39f0:	80 81       	ld	r24, Z
    39f2:	88 23       	and	r24, r24
    39f4:	39 f7       	brne	.-50     	; 0x39c4 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	08 95       	ret

00003a02 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	60 97       	sbiw	r28, 0x10	; 16
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	6d 87       	std	Y+13, r22	; 0x0d
    3a1c:	7e 87       	std	Y+14, r23	; 0x0e
    3a1e:	8f 87       	std	Y+15, r24	; 0x0f
    3a20:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3a22:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a28:	af 85       	ldd	r26, Y+15	; 0x0f
    3a2a:	b8 89       	ldd	r27, Y+16	; 0x10
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	a1 05       	cpc	r26, r1
    3a30:	b1 05       	cpc	r27, r1
    3a32:	09 f4       	brne	.+2      	; 0x3a36 <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3a34:	4f c0       	rjmp	.+158    	; 0x3ad4 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3a36:	2d c0       	rjmp	.+90     	; 0x3a92 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3a38:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3a:	08 2f       	mov	r16, r24
    3a3c:	10 e0       	ldi	r17, 0x00	; 0
    3a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a42:	af 85       	ldd	r26, Y+15	; 0x0f
    3a44:	b8 89       	ldd	r27, Y+16	; 0x10
    3a46:	2a e0       	ldi	r18, 0x0A	; 10
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e0       	ldi	r20, 0x00	; 0
    3a4c:	50 e0       	ldi	r21, 0x00	; 0
    3a4e:	bc 01       	movw	r22, r24
    3a50:	cd 01       	movw	r24, r26
    3a52:	0e 94 46 22 	call	0x448c	; 0x448c <__udivmodsi4>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	28 2f       	mov	r18, r24
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	03 96       	adiw	r24, 0x03	; 3
    3a60:	fc 01       	movw	r30, r24
    3a62:	e0 0f       	add	r30, r16
    3a64:	f1 1f       	adc	r31, r17
    3a66:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a6c:	af 85       	ldd	r26, Y+15	; 0x0f
    3a6e:	b8 89       	ldd	r27, Y+16	; 0x10
    3a70:	2a e0       	ldi	r18, 0x0A	; 10
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	40 e0       	ldi	r20, 0x00	; 0
    3a76:	50 e0       	ldi	r21, 0x00	; 0
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	0e 94 46 22 	call	0x448c	; 0x448c <__udivmodsi4>
    3a80:	da 01       	movw	r26, r20
    3a82:	c9 01       	movw	r24, r18
    3a84:	8d 87       	std	Y+13, r24	; 0x0d
    3a86:	9e 87       	std	Y+14, r25	; 0x0e
    3a88:	af 87       	std	Y+15, r26	; 0x0f
    3a8a:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8e:	8f 5f       	subi	r24, 0xFF	; 255
    3a90:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a96:	af 85       	ldd	r26, Y+15	; 0x0f
    3a98:	b8 89       	ldd	r27, Y+16	; 0x10
    3a9a:	00 97       	sbiw	r24, 0x00	; 0
    3a9c:	a1 05       	cpc	r26, r1
    3a9e:	b1 05       	cpc	r27, r1
    3aa0:	59 f6       	brne	.-106    	; 0x3a38 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa4:	81 50       	subi	r24, 0x01	; 1
    3aa6:	89 83       	std	Y+1, r24	; 0x01
    3aa8:	11 c0       	rjmp	.+34     	; 0x3acc <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3aaa:	89 81       	ldd	r24, Y+1	; 0x01
    3aac:	28 2f       	mov	r18, r24
    3aae:	33 27       	eor	r19, r19
    3ab0:	27 fd       	sbrc	r18, 7
    3ab2:	30 95       	com	r19
    3ab4:	ce 01       	movw	r24, r28
    3ab6:	03 96       	adiw	r24, 0x03	; 3
    3ab8:	fc 01       	movw	r30, r24
    3aba:	e2 0f       	add	r30, r18
    3abc:	f3 1f       	adc	r31, r19
    3abe:	80 81       	ld	r24, Z
    3ac0:	80 5d       	subi	r24, 0xD0	; 208
    3ac2:	0e 94 c6 1c 	call	0x398c	; 0x398c <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	81 50       	subi	r24, 0x01	; 1
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	88 23       	and	r24, r24
    3ad0:	64 f7       	brge	.-40     	; 0x3aaa <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3ad2:	03 c0       	rjmp	.+6      	; 0x3ada <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3ad4:	80 e3       	ldi	r24, 0x30	; 48
    3ad6:	0e 94 c6 1c 	call	0x398c	; 0x398c <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3ada:	60 96       	adiw	r28, 0x10	; 16
    3adc:	0f b6       	in	r0, 0x3f	; 63
    3ade:	f8 94       	cli
    3ae0:	de bf       	out	0x3e, r29	; 62
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	cd bf       	out	0x3d, r28	; 61
    3ae6:	cf 91       	pop	r28
    3ae8:	df 91       	pop	r29
    3aea:	1f 91       	pop	r17
    3aec:	0f 91       	pop	r16
    3aee:	08 95       	ret

00003af0 <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	00 d0       	rcall	.+0      	; 0x3af6 <HCLCD_Vid4Bits_SetPosition+0x6>
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	89 83       	std	Y+1, r24	; 0x01
    3afc:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	81 30       	cpi	r24, 0x01	; 1
    3b02:	b9 f4       	brne	.+46     	; 0x3b32 <HCLCD_Vid4Bits_SetPosition+0x42>
    3b04:	8a 81       	ldd	r24, Y+2	; 0x02
    3b06:	80 31       	cpi	r24, 0x10	; 16
    3b08:	a0 f4       	brcc	.+40     	; 0x3b32 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0c:	88 2f       	mov	r24, r24
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	80 58       	subi	r24, 0x80	; 128
    3b12:	9f 4f       	sbci	r25, 0xFF	; 255
    3b14:	95 95       	asr	r25
    3b16:	87 95       	ror	r24
    3b18:	95 95       	asr	r25
    3b1a:	87 95       	ror	r24
    3b1c:	95 95       	asr	r25
    3b1e:	87 95       	ror	r24
    3b20:	95 95       	asr	r25
    3b22:	87 95       	ror	r24
    3b24:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3b28:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2a:	80 58       	subi	r24, 0x80	; 128
    3b2c:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    3b30:	19 c0       	rjmp	.+50     	; 0x3b64 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	82 30       	cpi	r24, 0x02	; 2
    3b36:	b1 f4       	brne	.+44     	; 0x3b64 <HCLCD_Vid4Bits_SetPosition+0x74>
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	80 31       	cpi	r24, 0x10	; 16
    3b3c:	98 f4       	brcc	.+38     	; 0x3b64 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b40:	88 2f       	mov	r24, r24
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	80 54       	subi	r24, 0x40	; 64
    3b46:	9f 4f       	sbci	r25, 0xFF	; 255
    3b48:	95 95       	asr	r25
    3b4a:	87 95       	ror	r24
    3b4c:	95 95       	asr	r25
    3b4e:	87 95       	ror	r24
    3b50:	95 95       	asr	r25
    3b52:	87 95       	ror	r24
    3b54:	95 95       	asr	r25
    3b56:	87 95       	ror	r24
    3b58:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5e:	80 54       	subi	r24, 0x40	; 64
    3b60:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	00 d0       	rcall	.+0      	; 0x3b74 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
    3b7a:	8a 83       	std	Y+2, r24	; 0x02
    3b7c:	7c 83       	std	Y+4, r23	; 0x04
    3b7e:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	88 30       	cpi	r24, 0x08	; 8
    3b84:	98 f5       	brcc	.+102    	; 0x3bec <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3b86:	8a 81       	ldd	r24, Y+2	; 0x02
    3b88:	88 2f       	mov	r24, r24
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	08 96       	adiw	r24, 0x08	; 8
    3b8e:	88 0f       	add	r24, r24
    3b90:	99 1f       	adc	r25, r25
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	88 0f       	add	r24, r24
    3b98:	99 1f       	adc	r25, r25
    3b9a:	95 95       	asr	r25
    3b9c:	87 95       	ror	r24
    3b9e:	95 95       	asr	r25
    3ba0:	87 95       	ror	r24
    3ba2:	95 95       	asr	r25
    3ba4:	87 95       	ror	r24
    3ba6:	95 95       	asr	r25
    3ba8:	87 95       	ror	r24
    3baa:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3bae:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb0:	88 2f       	mov	r24, r24
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	08 96       	adiw	r24, 0x08	; 8
    3bb6:	88 0f       	add	r24, r24
    3bb8:	99 1f       	adc	r25, r25
    3bba:	88 0f       	add	r24, r24
    3bbc:	99 1f       	adc	r25, r25
    3bbe:	88 0f       	add	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3bc6:	19 82       	std	Y+1, r1	; 0x01
    3bc8:	0e c0       	rjmp	.+28     	; 0x3be6 <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	28 2f       	mov	r18, r24
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	e2 0f       	add	r30, r18
    3bd8:	f3 1f       	adc	r31, r19
    3bda:	80 81       	ld	r24, Z
    3bdc:	0e 94 c6 1c 	call	0x398c	; 0x398c <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	8f 5f       	subi	r24, 0xFF	; 255
    3be4:	89 83       	std	Y+1, r24	; 0x01
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
    3be8:	88 30       	cpi	r24, 0x08	; 8
    3bea:	78 f3       	brcs	.-34     	; 0x3bca <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	08 95       	ret

00003bfa <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3bfa:	df 93       	push	r29
    3bfc:	cf 93       	push	r28
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    3c02:	2e 97       	sbiw	r28, 0x0e	; 14
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	a0 e0       	ldi	r26, 0x00	; 0
    3c20:	b0 e4       	ldi	r27, 0x40	; 64
    3c22:	8b 87       	std	Y+11, r24	; 0x0b
    3c24:	9c 87       	std	Y+12, r25	; 0x0c
    3c26:	ad 87       	std	Y+13, r26	; 0x0d
    3c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	4a ef       	ldi	r20, 0xFA	; 250
    3c38:	54 e4       	ldi	r21, 0x44	; 68
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	8f 83       	std	Y+7, r24	; 0x07
    3c44:	98 87       	std	Y+8, r25	; 0x08
    3c46:	a9 87       	std	Y+9, r26	; 0x09
    3c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	40 e8       	ldi	r20, 0x80	; 128
    3c58:	5f e3       	ldi	r21, 0x3F	; 63
    3c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c5e:	88 23       	and	r24, r24
    3c60:	2c f4       	brge	.+10     	; 0x3c6c <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	9e 83       	std	Y+6, r25	; 0x06
    3c68:	8d 83       	std	Y+5, r24	; 0x05
    3c6a:	3f c0       	rjmp	.+126    	; 0x3cea <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6e:	78 85       	ldd	r23, Y+8	; 0x08
    3c70:	89 85       	ldd	r24, Y+9	; 0x09
    3c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	3f ef       	ldi	r19, 0xFF	; 255
    3c78:	4f e7       	ldi	r20, 0x7F	; 127
    3c7a:	57 e4       	ldi	r21, 0x47	; 71
    3c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c80:	18 16       	cp	r1, r24
    3c82:	4c f5       	brge	.+82     	; 0x3cd6 <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e2       	ldi	r20, 0x20	; 32
    3c92:	51 e4       	ldi	r21, 0x41	; 65
    3c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	bc 01       	movw	r22, r24
    3c9e:	cd 01       	movw	r24, r26
    3ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	9e 83       	std	Y+6, r25	; 0x06
    3caa:	8d 83       	std	Y+5, r24	; 0x05
    3cac:	0f c0       	rjmp	.+30     	; 0x3ccc <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3cae:	88 ec       	ldi	r24, 0xC8	; 200
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9c 83       	std	Y+4, r25	; 0x04
    3cb4:	8b 83       	std	Y+3, r24	; 0x03
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3cbe:	9c 83       	std	Y+4, r25	; 0x04
    3cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	9e 83       	std	Y+6, r25	; 0x06
    3cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cce:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd0:	00 97       	sbiw	r24, 0x00	; 0
    3cd2:	69 f7       	brne	.-38     	; 0x3cae <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3cd4:	14 c0       	rjmp	.+40     	; 0x3cfe <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd8:	78 85       	ldd	r23, Y+8	; 0x08
    3cda:	89 85       	ldd	r24, Y+9	; 0x09
    3cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	9e 83       	std	Y+6, r25	; 0x06
    3ce8:	8d 83       	std	Y+5, r24	; 0x05
    3cea:	8d 81       	ldd	r24, Y+5	; 0x05
    3cec:	9e 81       	ldd	r25, Y+6	; 0x06
    3cee:	9a 83       	std	Y+2, r25	; 0x02
    3cf0:	89 83       	std	Y+1, r24	; 0x01
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
    3cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf6:	01 97       	sbiw	r24, 0x01	; 1
    3cf8:	f1 f7       	brne	.-4      	; 0x3cf6 <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3cfa:	9a 83       	std	Y+2, r25	; 0x02
    3cfc:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3cfe:	2e 96       	adiw	r28, 0x0e	; 14
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	cd bf       	out	0x3d, r28	; 61
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	08 95       	ret

00003d10 <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3d10:	df 93       	push	r29
    3d12:	cf 93       	push	r28
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
    3d18:	60 97       	sbiw	r28, 0x10	; 16
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3d26:	1f 86       	std	Y+15, r1	; 0x0f
    3d28:	7b c0       	rjmp	.+246    	; 0x3e20 <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3d30:	88 e1       	ldi	r24, 0x18	; 24
    3d32:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	a6 e9       	ldi	r26, 0x96	; 150
    3d3c:	b3 e4       	ldi	r27, 0x43	; 67
    3d3e:	8b 87       	std	Y+11, r24	; 0x0b
    3d40:	9c 87       	std	Y+12, r25	; 0x0c
    3d42:	ad 87       	std	Y+13, r26	; 0x0d
    3d44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	4a ef       	ldi	r20, 0xFA	; 250
    3d54:	54 e4       	ldi	r21, 0x44	; 68
    3d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	8f 83       	std	Y+7, r24	; 0x07
    3d60:	98 87       	std	Y+8, r25	; 0x08
    3d62:	a9 87       	std	Y+9, r26	; 0x09
    3d64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d66:	6f 81       	ldd	r22, Y+7	; 0x07
    3d68:	78 85       	ldd	r23, Y+8	; 0x08
    3d6a:	89 85       	ldd	r24, Y+9	; 0x09
    3d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	40 e8       	ldi	r20, 0x80	; 128
    3d74:	5f e3       	ldi	r21, 0x3F	; 63
    3d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d7a:	88 23       	and	r24, r24
    3d7c:	2c f4       	brge	.+10     	; 0x3d88 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	9e 83       	std	Y+6, r25	; 0x06
    3d84:	8d 83       	std	Y+5, r24	; 0x05
    3d86:	3f c0       	rjmp	.+126    	; 0x3e06 <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    3d88:	6f 81       	ldd	r22, Y+7	; 0x07
    3d8a:	78 85       	ldd	r23, Y+8	; 0x08
    3d8c:	89 85       	ldd	r24, Y+9	; 0x09
    3d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	3f ef       	ldi	r19, 0xFF	; 255
    3d94:	4f e7       	ldi	r20, 0x7F	; 127
    3d96:	57 e4       	ldi	r21, 0x47	; 71
    3d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d9c:	18 16       	cp	r1, r24
    3d9e:	4c f5       	brge	.+82     	; 0x3df2 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	40 e2       	ldi	r20, 0x20	; 32
    3dae:	51 e4       	ldi	r21, 0x41	; 65
    3db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	bc 01       	movw	r22, r24
    3dba:	cd 01       	movw	r24, r26
    3dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	9e 83       	std	Y+6, r25	; 0x06
    3dc6:	8d 83       	std	Y+5, r24	; 0x05
    3dc8:	0f c0       	rjmp	.+30     	; 0x3de8 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3dca:	88 ec       	ldi	r24, 0xC8	; 200
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	9c 83       	std	Y+4, r25	; 0x04
    3dd0:	8b 83       	std	Y+3, r24	; 0x03
    3dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd6:	01 97       	sbiw	r24, 0x01	; 1
    3dd8:	f1 f7       	brne	.-4      	; 0x3dd6 <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3dda:	9c 83       	std	Y+4, r25	; 0x04
    3ddc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dde:	8d 81       	ldd	r24, Y+5	; 0x05
    3de0:	9e 81       	ldd	r25, Y+6	; 0x06
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	9e 83       	std	Y+6, r25	; 0x06
    3de6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dea:	9e 81       	ldd	r25, Y+6	; 0x06
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	69 f7       	brne	.-38     	; 0x3dca <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    3df0:	14 c0       	rjmp	.+40     	; 0x3e1a <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df2:	6f 81       	ldd	r22, Y+7	; 0x07
    3df4:	78 85       	ldd	r23, Y+8	; 0x08
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	9e 83       	std	Y+6, r25	; 0x06
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	8d 81       	ldd	r24, Y+5	; 0x05
    3e08:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0a:	9a 83       	std	Y+2, r25	; 0x02
    3e0c:	89 83       	std	Y+1, r24	; 0x01
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
    3e10:	9a 81       	ldd	r25, Y+2	; 0x02
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    3e16:	9a 83       	std	Y+2, r25	; 0x02
    3e18:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e1c:	8f 5f       	subi	r24, 0xFF	; 255
    3e1e:	8f 87       	std	Y+15, r24	; 0x0f
    3e20:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e22:	88 89       	ldd	r24, Y+16	; 0x10
    3e24:	98 17       	cp	r25, r24
    3e26:	08 f4       	brcc	.+2      	; 0x3e2a <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    3e28:	80 cf       	rjmp	.-256    	; 0x3d2a <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3e2a:	60 96       	adiw	r28, 0x10	; 16
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	f8 94       	cli
    3e30:	de bf       	out	0x3e, r29	; 62
    3e32:	0f be       	out	0x3f, r0	; 63
    3e34:	cd bf       	out	0x3d, r28	; 61
    3e36:	cf 91       	pop	r28
    3e38:	df 91       	pop	r29
    3e3a:	08 95       	ret

00003e3c <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3e3c:	df 93       	push	r29
    3e3e:	cf 93       	push	r28
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	60 97       	sbiw	r28, 0x10	; 16
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	de bf       	out	0x3e, r29	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3e52:	1f 86       	std	Y+15, r1	; 0x0f
    3e54:	7b c0       	rjmp	.+246    	; 0x3f4c <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3e5c:	8c e1       	ldi	r24, 0x1C	; 28
    3e5e:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	a6 e9       	ldi	r26, 0x96	; 150
    3e68:	b3 e4       	ldi	r27, 0x43	; 67
    3e6a:	8b 87       	std	Y+11, r24	; 0x0b
    3e6c:	9c 87       	std	Y+12, r25	; 0x0c
    3e6e:	ad 87       	std	Y+13, r26	; 0x0d
    3e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	4a ef       	ldi	r20, 0xFA	; 250
    3e80:	54 e4       	ldi	r21, 0x44	; 68
    3e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	8f 83       	std	Y+7, r24	; 0x07
    3e8c:	98 87       	std	Y+8, r25	; 0x08
    3e8e:	a9 87       	std	Y+9, r26	; 0x09
    3e90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e92:	6f 81       	ldd	r22, Y+7	; 0x07
    3e94:	78 85       	ldd	r23, Y+8	; 0x08
    3e96:	89 85       	ldd	r24, Y+9	; 0x09
    3e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	40 e8       	ldi	r20, 0x80	; 128
    3ea0:	5f e3       	ldi	r21, 0x3F	; 63
    3ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ea6:	88 23       	and	r24, r24
    3ea8:	2c f4       	brge	.+10     	; 0x3eb4 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	9e 83       	std	Y+6, r25	; 0x06
    3eb0:	8d 83       	std	Y+5, r24	; 0x05
    3eb2:	3f c0       	rjmp	.+126    	; 0x3f32 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    3eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3eb6:	78 85       	ldd	r23, Y+8	; 0x08
    3eb8:	89 85       	ldd	r24, Y+9	; 0x09
    3eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	3f ef       	ldi	r19, 0xFF	; 255
    3ec0:	4f e7       	ldi	r20, 0x7F	; 127
    3ec2:	57 e4       	ldi	r21, 0x47	; 71
    3ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ec8:	18 16       	cp	r1, r24
    3eca:	4c f5       	brge	.+82     	; 0x3f1e <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	40 e2       	ldi	r20, 0x20	; 32
    3eda:	51 e4       	ldi	r21, 0x41	; 65
    3edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	bc 01       	movw	r22, r24
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	9e 83       	std	Y+6, r25	; 0x06
    3ef2:	8d 83       	std	Y+5, r24	; 0x05
    3ef4:	0f c0       	rjmp	.+30     	; 0x3f14 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    3ef6:	88 ec       	ldi	r24, 0xC8	; 200
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	9c 83       	std	Y+4, r25	; 0x04
    3efc:	8b 83       	std	Y+3, r24	; 0x03
    3efe:	8b 81       	ldd	r24, Y+3	; 0x03
    3f00:	9c 81       	ldd	r25, Y+4	; 0x04
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	f1 f7       	brne	.-4      	; 0x3f02 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    3f06:	9c 83       	std	Y+4, r25	; 0x04
    3f08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	9e 83       	std	Y+6, r25	; 0x06
    3f12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f14:	8d 81       	ldd	r24, Y+5	; 0x05
    3f16:	9e 81       	ldd	r25, Y+6	; 0x06
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	69 f7       	brne	.-38     	; 0x3ef6 <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    3f1c:	14 c0       	rjmp	.+40     	; 0x3f46 <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f20:	78 85       	ldd	r23, Y+8	; 0x08
    3f22:	89 85       	ldd	r24, Y+9	; 0x09
    3f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	9e 83       	std	Y+6, r25	; 0x06
    3f30:	8d 83       	std	Y+5, r24	; 0x05
    3f32:	8d 81       	ldd	r24, Y+5	; 0x05
    3f34:	9e 81       	ldd	r25, Y+6	; 0x06
    3f36:	9a 83       	std	Y+2, r25	; 0x02
    3f38:	89 83       	std	Y+1, r24	; 0x01
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	f1 f7       	brne	.-4      	; 0x3f3e <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    3f42:	9a 83       	std	Y+2, r25	; 0x02
    3f44:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3f46:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f48:	8f 5f       	subi	r24, 0xFF	; 255
    3f4a:	8f 87       	std	Y+15, r24	; 0x0f
    3f4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f4e:	88 89       	ldd	r24, Y+16	; 0x10
    3f50:	98 17       	cp	r25, r24
    3f52:	08 f4       	brcc	.+2      	; 0x3f56 <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    3f54:	80 cf       	rjmp	.-256    	; 0x3e56 <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    3f56:	60 96       	adiw	r28, 0x10	; 16
    3f58:	0f b6       	in	r0, 0x3f	; 63
    3f5a:	f8 94       	cli
    3f5c:	de bf       	out	0x3e, r29	; 62
    3f5e:	0f be       	out	0x3f, r0	; 63
    3f60:	cd bf       	out	0x3d, r28	; 61
    3f62:	cf 91       	pop	r28
    3f64:	df 91       	pop	r29
    3f66:	08 95       	ret

00003f68 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    3f68:	df 93       	push	r29
    3f6a:	cf 93       	push	r28
    3f6c:	cd b7       	in	r28, 0x3d	; 61
    3f6e:	de b7       	in	r29, 0x3e	; 62
    3f70:	60 97       	sbiw	r28, 0x10	; 16
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	de bf       	out	0x3e, r29	; 62
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	cd bf       	out	0x3d, r28	; 61
    3f7c:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3f7e:	1f 86       	std	Y+15, r1	; 0x0f
    3f80:	7b c0       	rjmp	.+246    	; 0x4078 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3f88:	80 e1       	ldi	r24, 0x10	; 16
    3f8a:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	a6 e9       	ldi	r26, 0x96	; 150
    3f94:	b3 e4       	ldi	r27, 0x43	; 67
    3f96:	8b 87       	std	Y+11, r24	; 0x0b
    3f98:	9c 87       	std	Y+12, r25	; 0x0c
    3f9a:	ad 87       	std	Y+13, r26	; 0x0d
    3f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	4a ef       	ldi	r20, 0xFA	; 250
    3fac:	54 e4       	ldi	r21, 0x44	; 68
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	8f 83       	std	Y+7, r24	; 0x07
    3fb8:	98 87       	std	Y+8, r25	; 0x08
    3fba:	a9 87       	std	Y+9, r26	; 0x09
    3fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc0:	78 85       	ldd	r23, Y+8	; 0x08
    3fc2:	89 85       	ldd	r24, Y+9	; 0x09
    3fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e8       	ldi	r20, 0x80	; 128
    3fcc:	5f e3       	ldi	r21, 0x3F	; 63
    3fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fd2:	88 23       	and	r24, r24
    3fd4:	2c f4       	brge	.+10     	; 0x3fe0 <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	9e 83       	std	Y+6, r25	; 0x06
    3fdc:	8d 83       	std	Y+5, r24	; 0x05
    3fde:	3f c0       	rjmp	.+126    	; 0x405e <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    3fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fe2:	78 85       	ldd	r23, Y+8	; 0x08
    3fe4:	89 85       	ldd	r24, Y+9	; 0x09
    3fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	3f ef       	ldi	r19, 0xFF	; 255
    3fec:	4f e7       	ldi	r20, 0x7F	; 127
    3fee:	57 e4       	ldi	r21, 0x47	; 71
    3ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ff4:	18 16       	cp	r1, r24
    3ff6:	4c f5       	brge	.+82     	; 0x404a <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	40 e2       	ldi	r20, 0x20	; 32
    4006:	51 e4       	ldi	r21, 0x41	; 65
    4008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	bc 01       	movw	r22, r24
    4012:	cd 01       	movw	r24, r26
    4014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	9e 83       	std	Y+6, r25	; 0x06
    401e:	8d 83       	std	Y+5, r24	; 0x05
    4020:	0f c0       	rjmp	.+30     	; 0x4040 <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    4022:	88 ec       	ldi	r24, 0xC8	; 200
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	9c 83       	std	Y+4, r25	; 0x04
    4028:	8b 83       	std	Y+3, r24	; 0x03
    402a:	8b 81       	ldd	r24, Y+3	; 0x03
    402c:	9c 81       	ldd	r25, Y+4	; 0x04
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    4032:	9c 83       	std	Y+4, r25	; 0x04
    4034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4036:	8d 81       	ldd	r24, Y+5	; 0x05
    4038:	9e 81       	ldd	r25, Y+6	; 0x06
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	9e 83       	std	Y+6, r25	; 0x06
    403e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4040:	8d 81       	ldd	r24, Y+5	; 0x05
    4042:	9e 81       	ldd	r25, Y+6	; 0x06
    4044:	00 97       	sbiw	r24, 0x00	; 0
    4046:	69 f7       	brne	.-38     	; 0x4022 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    4048:	14 c0       	rjmp	.+40     	; 0x4072 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    404a:	6f 81       	ldd	r22, Y+7	; 0x07
    404c:	78 85       	ldd	r23, Y+8	; 0x08
    404e:	89 85       	ldd	r24, Y+9	; 0x09
    4050:	9a 85       	ldd	r25, Y+10	; 0x0a
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	9e 83       	std	Y+6, r25	; 0x06
    405c:	8d 83       	std	Y+5, r24	; 0x05
    405e:	8d 81       	ldd	r24, Y+5	; 0x05
    4060:	9e 81       	ldd	r25, Y+6	; 0x06
    4062:	9a 83       	std	Y+2, r25	; 0x02
    4064:	89 83       	std	Y+1, r24	; 0x01
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	9a 81       	ldd	r25, Y+2	; 0x02
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	f1 f7       	brne	.-4      	; 0x406a <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    406e:	9a 83       	std	Y+2, r25	; 0x02
    4070:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4072:	8f 85       	ldd	r24, Y+15	; 0x0f
    4074:	8f 5f       	subi	r24, 0xFF	; 255
    4076:	8f 87       	std	Y+15, r24	; 0x0f
    4078:	9f 85       	ldd	r25, Y+15	; 0x0f
    407a:	88 89       	ldd	r24, Y+16	; 0x10
    407c:	98 17       	cp	r25, r24
    407e:	08 f4       	brcc	.+2      	; 0x4082 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    4080:	80 cf       	rjmp	.-256    	; 0x3f82 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    4082:	60 96       	adiw	r28, 0x10	; 16
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	f8 94       	cli
    4088:	de bf       	out	0x3e, r29	; 62
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	cd bf       	out	0x3d, r28	; 61
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	08 95       	ret

00004094 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    4094:	df 93       	push	r29
    4096:	cf 93       	push	r28
    4098:	cd b7       	in	r28, 0x3d	; 61
    409a:	de b7       	in	r29, 0x3e	; 62
    409c:	60 97       	sbiw	r28, 0x10	; 16
    409e:	0f b6       	in	r0, 0x3f	; 63
    40a0:	f8 94       	cli
    40a2:	de bf       	out	0x3e, r29	; 62
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	cd bf       	out	0x3d, r28	; 61
    40a8:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    40aa:	1f 86       	std	Y+15, r1	; 0x0f
    40ac:	7b c0       	rjmp	.+246    	; 0x41a4 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    40b4:	84 e1       	ldi	r24, 0x14	; 20
    40b6:	0e 94 75 19 	call	0x32ea	; 0x32ea <HCLCD_Vid4Bits_SendCommand>
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	a6 e9       	ldi	r26, 0x96	; 150
    40c0:	b3 e4       	ldi	r27, 0x43	; 67
    40c2:	8b 87       	std	Y+11, r24	; 0x0b
    40c4:	9c 87       	std	Y+12, r25	; 0x0c
    40c6:	ad 87       	std	Y+13, r26	; 0x0d
    40c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    40cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	4a ef       	ldi	r20, 0xFA	; 250
    40d8:	54 e4       	ldi	r21, 0x44	; 68
    40da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	8f 83       	std	Y+7, r24	; 0x07
    40e4:	98 87       	std	Y+8, r25	; 0x08
    40e6:	a9 87       	std	Y+9, r26	; 0x09
    40e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40ea:	6f 81       	ldd	r22, Y+7	; 0x07
    40ec:	78 85       	ldd	r23, Y+8	; 0x08
    40ee:	89 85       	ldd	r24, Y+9	; 0x09
    40f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	40 e8       	ldi	r20, 0x80	; 128
    40f8:	5f e3       	ldi	r21, 0x3F	; 63
    40fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40fe:	88 23       	and	r24, r24
    4100:	2c f4       	brge	.+10     	; 0x410c <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	9e 83       	std	Y+6, r25	; 0x06
    4108:	8d 83       	std	Y+5, r24	; 0x05
    410a:	3f c0       	rjmp	.+126    	; 0x418a <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    410c:	6f 81       	ldd	r22, Y+7	; 0x07
    410e:	78 85       	ldd	r23, Y+8	; 0x08
    4110:	89 85       	ldd	r24, Y+9	; 0x09
    4112:	9a 85       	ldd	r25, Y+10	; 0x0a
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	3f ef       	ldi	r19, 0xFF	; 255
    4118:	4f e7       	ldi	r20, 0x7F	; 127
    411a:	57 e4       	ldi	r21, 0x47	; 71
    411c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4120:	18 16       	cp	r1, r24
    4122:	4c f5       	brge	.+82     	; 0x4176 <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4124:	6b 85       	ldd	r22, Y+11	; 0x0b
    4126:	7c 85       	ldd	r23, Y+12	; 0x0c
    4128:	8d 85       	ldd	r24, Y+13	; 0x0d
    412a:	9e 85       	ldd	r25, Y+14	; 0x0e
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	40 e2       	ldi	r20, 0x20	; 32
    4132:	51 e4       	ldi	r21, 0x41	; 65
    4134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	9e 83       	std	Y+6, r25	; 0x06
    414a:	8d 83       	std	Y+5, r24	; 0x05
    414c:	0f c0       	rjmp	.+30     	; 0x416c <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    414e:	88 ec       	ldi	r24, 0xC8	; 200
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	9c 83       	std	Y+4, r25	; 0x04
    4154:	8b 83       	std	Y+3, r24	; 0x03
    4156:	8b 81       	ldd	r24, Y+3	; 0x03
    4158:	9c 81       	ldd	r25, Y+4	; 0x04
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	f1 f7       	brne	.-4      	; 0x415a <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    415e:	9c 83       	std	Y+4, r25	; 0x04
    4160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4162:	8d 81       	ldd	r24, Y+5	; 0x05
    4164:	9e 81       	ldd	r25, Y+6	; 0x06
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	9e 83       	std	Y+6, r25	; 0x06
    416a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416c:	8d 81       	ldd	r24, Y+5	; 0x05
    416e:	9e 81       	ldd	r25, Y+6	; 0x06
    4170:	00 97       	sbiw	r24, 0x00	; 0
    4172:	69 f7       	brne	.-38     	; 0x414e <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    4174:	14 c0       	rjmp	.+40     	; 0x419e <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4176:	6f 81       	ldd	r22, Y+7	; 0x07
    4178:	78 85       	ldd	r23, Y+8	; 0x08
    417a:	89 85       	ldd	r24, Y+9	; 0x09
    417c:	9a 85       	ldd	r25, Y+10	; 0x0a
    417e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	9e 83       	std	Y+6, r25	; 0x06
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	8d 81       	ldd	r24, Y+5	; 0x05
    418c:	9e 81       	ldd	r25, Y+6	; 0x06
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	01 97       	sbiw	r24, 0x01	; 1
    4198:	f1 f7       	brne	.-4      	; 0x4196 <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    419a:	9a 83       	std	Y+2, r25	; 0x02
    419c:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    419e:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a0:	8f 5f       	subi	r24, 0xFF	; 255
    41a2:	8f 87       	std	Y+15, r24	; 0x0f
    41a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    41a6:	88 89       	ldd	r24, Y+16	; 0x10
    41a8:	98 17       	cp	r25, r24
    41aa:	08 f4       	brcc	.+2      	; 0x41ae <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    41ac:	80 cf       	rjmp	.-256    	; 0x40ae <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    41ae:	60 96       	adiw	r28, 0x10	; 16
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	cf 91       	pop	r28
    41bc:	df 91       	pop	r29
    41be:	08 95       	ret

000041c0 <main>:
#include<util\delay.h>



int main(void)
{
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	a3 97       	sbiw	r28, 0x23	; 35
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
	u16 LOC_u16DigitalValue=0;
    41d4:	1b a2       	std	Y+35, r1	; 0x23
    41d6:	1a a2       	std	Y+34, r1	; 0x22
	u16 LOC_u16AnalogValue=0;
    41d8:	19 a2       	std	Y+33, r1	; 0x21
    41da:	18 a2       	std	Y+32, r1	; 0x20
	u16 LOC_u16Analog_OldValue=0;
    41dc:	1f 8e       	std	Y+31, r1	; 0x1f
    41de:	1e 8e       	std	Y+30, r1	; 0x1e


	MDIO_Error_State_SetPortDirection(MDIO_PORTB,PORT_OUTPUT);
    41e0:	81 e0       	ldi	r24, 0x01	; 1
    41e2:	6f ef       	ldi	r22, 0xFF	; 255
    41e4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPortValue(MDIO_PORTB,LOC_u16DigitalValue);
    41e8:	9a a1       	ldd	r25, Y+34	; 0x22
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	69 2f       	mov	r22, r25
    41ee:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>

	/*LCD Initialization*/
	HCLCD_Vid4Bits_Init();
    41f2:	0e 94 14 1a 	call	0x3428	; 0x3428 <HCLCD_Vid4Bits_Init>
	/*Send Welcome message*/
	HCLCD_Vid4Bits_DisplayString((u8*)"Welcome....");
    41f6:	80 e6       	ldi	r24, 0x60	; 96
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <HCLCD_Vid4Bits_DisplayString>
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	aa e7       	ldi	r26, 0x7A	; 122
    4204:	b4 e4       	ldi	r27, 0x44	; 68
    4206:	89 8f       	std	Y+25, r24	; 0x19
    4208:	9a 8f       	std	Y+26, r25	; 0x1a
    420a:	ab 8f       	std	Y+27, r26	; 0x1b
    420c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    420e:	69 8d       	ldd	r22, Y+25	; 0x19
    4210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	4a ef       	ldi	r20, 0xFA	; 250
    421c:	54 e4       	ldi	r21, 0x44	; 68
    421e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	8d 8b       	std	Y+21, r24	; 0x15
    4228:	9e 8b       	std	Y+22, r25	; 0x16
    422a:	af 8b       	std	Y+23, r26	; 0x17
    422c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    422e:	6d 89       	ldd	r22, Y+21	; 0x15
    4230:	7e 89       	ldd	r23, Y+22	; 0x16
    4232:	8f 89       	ldd	r24, Y+23	; 0x17
    4234:	98 8d       	ldd	r25, Y+24	; 0x18
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e8       	ldi	r20, 0x80	; 128
    423c:	5f e3       	ldi	r21, 0x3F	; 63
    423e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4242:	88 23       	and	r24, r24
    4244:	2c f4       	brge	.+10     	; 0x4250 <main+0x90>
		__ticks = 1;
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	9c 8b       	std	Y+20, r25	; 0x14
    424c:	8b 8b       	std	Y+19, r24	; 0x13
    424e:	3f c0       	rjmp	.+126    	; 0x42ce <main+0x10e>
	else if (__tmp > 65535)
    4250:	6d 89       	ldd	r22, Y+21	; 0x15
    4252:	7e 89       	ldd	r23, Y+22	; 0x16
    4254:	8f 89       	ldd	r24, Y+23	; 0x17
    4256:	98 8d       	ldd	r25, Y+24	; 0x18
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	3f ef       	ldi	r19, 0xFF	; 255
    425c:	4f e7       	ldi	r20, 0x7F	; 127
    425e:	57 e4       	ldi	r21, 0x47	; 71
    4260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4264:	18 16       	cp	r1, r24
    4266:	4c f5       	brge	.+82     	; 0x42ba <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4268:	69 8d       	ldd	r22, Y+25	; 0x19
    426a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    426c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    426e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	40 e2       	ldi	r20, 0x20	; 32
    4276:	51 e4       	ldi	r21, 0x41	; 65
    4278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	bc 01       	movw	r22, r24
    4282:	cd 01       	movw	r24, r26
    4284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	9c 8b       	std	Y+20, r25	; 0x14
    428e:	8b 8b       	std	Y+19, r24	; 0x13
    4290:	0f c0       	rjmp	.+30     	; 0x42b0 <main+0xf0>
    4292:	88 ec       	ldi	r24, 0xC8	; 200
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	9a 8b       	std	Y+18, r25	; 0x12
    4298:	89 8b       	std	Y+17, r24	; 0x11
    429a:	89 89       	ldd	r24, Y+17	; 0x11
    429c:	9a 89       	ldd	r25, Y+18	; 0x12
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <main+0xde>
    42a2:	9a 8b       	std	Y+18, r25	; 0x12
    42a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a6:	8b 89       	ldd	r24, Y+19	; 0x13
    42a8:	9c 89       	ldd	r25, Y+20	; 0x14
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	9c 8b       	std	Y+20, r25	; 0x14
    42ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b0:	8b 89       	ldd	r24, Y+19	; 0x13
    42b2:	9c 89       	ldd	r25, Y+20	; 0x14
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	69 f7       	brne	.-38     	; 0x4292 <main+0xd2>
    42b8:	14 c0       	rjmp	.+40     	; 0x42e2 <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ba:	6d 89       	ldd	r22, Y+21	; 0x15
    42bc:	7e 89       	ldd	r23, Y+22	; 0x16
    42be:	8f 89       	ldd	r24, Y+23	; 0x17
    42c0:	98 8d       	ldd	r25, Y+24	; 0x18
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	9c 8b       	std	Y+20, r25	; 0x14
    42cc:	8b 8b       	std	Y+19, r24	; 0x13
    42ce:	8b 89       	ldd	r24, Y+19	; 0x13
    42d0:	9c 89       	ldd	r25, Y+20	; 0x14
    42d2:	98 8b       	std	Y+16, r25	; 0x10
    42d4:	8f 87       	std	Y+15, r24	; 0x0f
    42d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d8:	98 89       	ldd	r25, Y+16	; 0x10
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	f1 f7       	brne	.-4      	; 0x42da <main+0x11a>
    42de:	98 8b       	std	Y+16, r25	; 0x10
    42e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    42e2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <HCLCD_Vid4Bits_ClearScreen>
	 * if V_ref = 12 V --> Step_size = 12000/16 = 750 mv
	 *  */

	while(1)
	{
		for(u8 i = LOC_u16DigitalValue;i<16;i++)
    42e6:	8a a1       	ldd	r24, Y+34	; 0x22
    42e8:	8d 8f       	std	Y+29, r24	; 0x1d
    42ea:	cb c0       	rjmp	.+406    	; 0x4482 <main+0x2c2>
		{
			MDIO_Error_State_SetPortValue(MDIO_PORTB,i);
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    42f0:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_Error_State_SetPortValue>
			LOC_u16AnalogValue=i*312.5;
    42f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42f6:	88 2f       	mov	r24, r24
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	aa 27       	eor	r26, r26
    42fc:	97 fd       	sbrc	r25, 7
    42fe:	a0 95       	com	r26
    4300:	ba 2f       	mov	r27, r26
    4302:	bc 01       	movw	r22, r24
    4304:	cd 01       	movw	r24, r26
    4306:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	bc 01       	movw	r22, r24
    4310:	cd 01       	movw	r24, r26
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	30 e4       	ldi	r19, 0x40	; 64
    4316:	4c e9       	ldi	r20, 0x9C	; 156
    4318:	53 e4       	ldi	r21, 0x43	; 67
    431a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	bc 01       	movw	r22, r24
    4324:	cd 01       	movw	r24, r26
    4326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    432a:	dc 01       	movw	r26, r24
    432c:	cb 01       	movw	r24, r22
    432e:	99 a3       	std	Y+33, r25	; 0x21
    4330:	88 a3       	std	Y+32, r24	; 0x20
			if(LOC_u16AnalogValue!=LOC_u16Analog_OldValue)
    4332:	28 a1       	ldd	r18, Y+32	; 0x20
    4334:	39 a1       	ldd	r19, Y+33	; 0x21
    4336:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4338:	9f 8d       	ldd	r25, Y+31	; 0x1f
    433a:	28 17       	cp	r18, r24
    433c:	39 07       	cpc	r19, r25
    433e:	61 f1       	breq	.+88     	; 0x4398 <main+0x1d8>
			{
				HCLCD_Vid4Bits_ClearScreen();
    4340:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <HCLCD_Vid4Bits_ClearScreen>
				HCLCD_Vid4Bits_SetPosition(1,0);
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	60 e0       	ldi	r22, 0x00	; 0
    4348:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <HCLCD_Vid4Bits_SetPosition>
				HCLCD_Vid4Bits_DisplayString((u8*)"Digital =");
    434c:	8c e6       	ldi	r24, 0x6C	; 108
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <HCLCD_Vid4Bits_DisplayString>
				HCLCD_Vid4Bits_DisplayNumber(i);
    4354:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4356:	88 2f       	mov	r24, r24
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	a0 e0       	ldi	r26, 0x00	; 0
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	bc 01       	movw	r22, r24
    4360:	cd 01       	movw	r24, r26
    4362:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <HCLCD_Vid4Bits_DisplayNumber>
				HCLCD_Vid4Bits_SetPosition(2,0);
    4366:	82 e0       	ldi	r24, 0x02	; 2
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <HCLCD_Vid4Bits_SetPosition>
				HCLCD_Vid4Bits_DisplayString((u8*)"Analog =");
    436e:	86 e7       	ldi	r24, 0x76	; 118
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <HCLCD_Vid4Bits_DisplayString>
				HCLCD_Vid4Bits_DisplayNumber(LOC_u16AnalogValue);
    4376:	88 a1       	ldd	r24, Y+32	; 0x20
    4378:	99 a1       	ldd	r25, Y+33	; 0x21
    437a:	cc 01       	movw	r24, r24
    437c:	a0 e0       	ldi	r26, 0x00	; 0
    437e:	b0 e0       	ldi	r27, 0x00	; 0
    4380:	bc 01       	movw	r22, r24
    4382:	cd 01       	movw	r24, r26
    4384:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <HCLCD_Vid4Bits_DisplayNumber>
				//HCLCD_Vid4Bits_DisplayString("Volte=");
				HCLCD_Vid4Bits_DisplayString((u8*)"MV");
    4388:	8f e7       	ldi	r24, 0x7F	; 127
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <HCLCD_Vid4Bits_DisplayString>
				LOC_u16Analog_OldValue=LOC_u16AnalogValue;
    4390:	88 a1       	ldd	r24, Y+32	; 0x20
    4392:	99 a1       	ldd	r25, Y+33	; 0x21
    4394:	9f 8f       	std	Y+31, r25	; 0x1f
    4396:	8e 8f       	std	Y+30, r24	; 0x1e
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	90 e8       	ldi	r25, 0x80	; 128
    439c:	ab e3       	ldi	r26, 0x3B	; 59
    439e:	b5 e4       	ldi	r27, 0x45	; 69
    43a0:	8b 87       	std	Y+11, r24	; 0x0b
    43a2:	9c 87       	std	Y+12, r25	; 0x0c
    43a4:	ad 87       	std	Y+13, r26	; 0x0d
    43a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    43ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	4a ef       	ldi	r20, 0xFA	; 250
    43b6:	54 e4       	ldi	r21, 0x44	; 68
    43b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	8f 83       	std	Y+7, r24	; 0x07
    43c2:	98 87       	std	Y+8, r25	; 0x08
    43c4:	a9 87       	std	Y+9, r26	; 0x09
    43c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43c8:	6f 81       	ldd	r22, Y+7	; 0x07
    43ca:	78 85       	ldd	r23, Y+8	; 0x08
    43cc:	89 85       	ldd	r24, Y+9	; 0x09
    43ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	40 e8       	ldi	r20, 0x80	; 128
    43d6:	5f e3       	ldi	r21, 0x3F	; 63
    43d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43dc:	88 23       	and	r24, r24
    43de:	2c f4       	brge	.+10     	; 0x43ea <main+0x22a>
		__ticks = 1;
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	9e 83       	std	Y+6, r25	; 0x06
    43e6:	8d 83       	std	Y+5, r24	; 0x05
    43e8:	3f c0       	rjmp	.+126    	; 0x4468 <main+0x2a8>
	else if (__tmp > 65535)
    43ea:	6f 81       	ldd	r22, Y+7	; 0x07
    43ec:	78 85       	ldd	r23, Y+8	; 0x08
    43ee:	89 85       	ldd	r24, Y+9	; 0x09
    43f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	3f ef       	ldi	r19, 0xFF	; 255
    43f6:	4f e7       	ldi	r20, 0x7F	; 127
    43f8:	57 e4       	ldi	r21, 0x47	; 71
    43fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43fe:	18 16       	cp	r1, r24
    4400:	4c f5       	brge	.+82     	; 0x4454 <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4402:	6b 85       	ldd	r22, Y+11	; 0x0b
    4404:	7c 85       	ldd	r23, Y+12	; 0x0c
    4406:	8d 85       	ldd	r24, Y+13	; 0x0d
    4408:	9e 85       	ldd	r25, Y+14	; 0x0e
    440a:	20 e0       	ldi	r18, 0x00	; 0
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	40 e2       	ldi	r20, 0x20	; 32
    4410:	51 e4       	ldi	r21, 0x41	; 65
    4412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	bc 01       	movw	r22, r24
    441c:	cd 01       	movw	r24, r26
    441e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4422:	dc 01       	movw	r26, r24
    4424:	cb 01       	movw	r24, r22
    4426:	9e 83       	std	Y+6, r25	; 0x06
    4428:	8d 83       	std	Y+5, r24	; 0x05
    442a:	0f c0       	rjmp	.+30     	; 0x444a <main+0x28a>
    442c:	88 ec       	ldi	r24, 0xC8	; 200
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	9c 83       	std	Y+4, r25	; 0x04
    4432:	8b 83       	std	Y+3, r24	; 0x03
    4434:	8b 81       	ldd	r24, Y+3	; 0x03
    4436:	9c 81       	ldd	r25, Y+4	; 0x04
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	f1 f7       	brne	.-4      	; 0x4438 <main+0x278>
    443c:	9c 83       	std	Y+4, r25	; 0x04
    443e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4440:	8d 81       	ldd	r24, Y+5	; 0x05
    4442:	9e 81       	ldd	r25, Y+6	; 0x06
    4444:	01 97       	sbiw	r24, 0x01	; 1
    4446:	9e 83       	std	Y+6, r25	; 0x06
    4448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    444a:	8d 81       	ldd	r24, Y+5	; 0x05
    444c:	9e 81       	ldd	r25, Y+6	; 0x06
    444e:	00 97       	sbiw	r24, 0x00	; 0
    4450:	69 f7       	brne	.-38     	; 0x442c <main+0x26c>
    4452:	14 c0       	rjmp	.+40     	; 0x447c <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4454:	6f 81       	ldd	r22, Y+7	; 0x07
    4456:	78 85       	ldd	r23, Y+8	; 0x08
    4458:	89 85       	ldd	r24, Y+9	; 0x09
    445a:	9a 85       	ldd	r25, Y+10	; 0x0a
    445c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	9e 83       	std	Y+6, r25	; 0x06
    4466:	8d 83       	std	Y+5, r24	; 0x05
    4468:	8d 81       	ldd	r24, Y+5	; 0x05
    446a:	9e 81       	ldd	r25, Y+6	; 0x06
    446c:	9a 83       	std	Y+2, r25	; 0x02
    446e:	89 83       	std	Y+1, r24	; 0x01
    4470:	89 81       	ldd	r24, Y+1	; 0x01
    4472:	9a 81       	ldd	r25, Y+2	; 0x02
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	f1 f7       	brne	.-4      	; 0x4474 <main+0x2b4>
    4478:	9a 83       	std	Y+2, r25	; 0x02
    447a:	89 83       	std	Y+1, r24	; 0x01
	 * if V_ref = 12 V --> Step_size = 12000/16 = 750 mv
	 *  */

	while(1)
	{
		for(u8 i = LOC_u16DigitalValue;i<16;i++)
    447c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    447e:	8f 5f       	subi	r24, 0xFF	; 255
    4480:	8d 8f       	std	Y+29, r24	; 0x1d
    4482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4484:	80 31       	cpi	r24, 0x10	; 16
    4486:	08 f4       	brcc	.+2      	; 0x448a <main+0x2ca>
    4488:	31 cf       	rjmp	.-414    	; 0x42ec <main+0x12c>
    448a:	2d cf       	rjmp	.-422    	; 0x42e6 <main+0x126>

0000448c <__udivmodsi4>:
    448c:	a1 e2       	ldi	r26, 0x21	; 33
    448e:	1a 2e       	mov	r1, r26
    4490:	aa 1b       	sub	r26, r26
    4492:	bb 1b       	sub	r27, r27
    4494:	fd 01       	movw	r30, r26
    4496:	0d c0       	rjmp	.+26     	; 0x44b2 <__udivmodsi4_ep>

00004498 <__udivmodsi4_loop>:
    4498:	aa 1f       	adc	r26, r26
    449a:	bb 1f       	adc	r27, r27
    449c:	ee 1f       	adc	r30, r30
    449e:	ff 1f       	adc	r31, r31
    44a0:	a2 17       	cp	r26, r18
    44a2:	b3 07       	cpc	r27, r19
    44a4:	e4 07       	cpc	r30, r20
    44a6:	f5 07       	cpc	r31, r21
    44a8:	20 f0       	brcs	.+8      	; 0x44b2 <__udivmodsi4_ep>
    44aa:	a2 1b       	sub	r26, r18
    44ac:	b3 0b       	sbc	r27, r19
    44ae:	e4 0b       	sbc	r30, r20
    44b0:	f5 0b       	sbc	r31, r21

000044b2 <__udivmodsi4_ep>:
    44b2:	66 1f       	adc	r22, r22
    44b4:	77 1f       	adc	r23, r23
    44b6:	88 1f       	adc	r24, r24
    44b8:	99 1f       	adc	r25, r25
    44ba:	1a 94       	dec	r1
    44bc:	69 f7       	brne	.-38     	; 0x4498 <__udivmodsi4_loop>
    44be:	60 95       	com	r22
    44c0:	70 95       	com	r23
    44c2:	80 95       	com	r24
    44c4:	90 95       	com	r25
    44c6:	9b 01       	movw	r18, r22
    44c8:	ac 01       	movw	r20, r24
    44ca:	bd 01       	movw	r22, r26
    44cc:	cf 01       	movw	r24, r30
    44ce:	08 95       	ret

000044d0 <__prologue_saves__>:
    44d0:	2f 92       	push	r2
    44d2:	3f 92       	push	r3
    44d4:	4f 92       	push	r4
    44d6:	5f 92       	push	r5
    44d8:	6f 92       	push	r6
    44da:	7f 92       	push	r7
    44dc:	8f 92       	push	r8
    44de:	9f 92       	push	r9
    44e0:	af 92       	push	r10
    44e2:	bf 92       	push	r11
    44e4:	cf 92       	push	r12
    44e6:	df 92       	push	r13
    44e8:	ef 92       	push	r14
    44ea:	ff 92       	push	r15
    44ec:	0f 93       	push	r16
    44ee:	1f 93       	push	r17
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	cd b7       	in	r28, 0x3d	; 61
    44f6:	de b7       	in	r29, 0x3e	; 62
    44f8:	ca 1b       	sub	r28, r26
    44fa:	db 0b       	sbc	r29, r27
    44fc:	0f b6       	in	r0, 0x3f	; 63
    44fe:	f8 94       	cli
    4500:	de bf       	out	0x3e, r29	; 62
    4502:	0f be       	out	0x3f, r0	; 63
    4504:	cd bf       	out	0x3d, r28	; 61
    4506:	09 94       	ijmp

00004508 <__epilogue_restores__>:
    4508:	2a 88       	ldd	r2, Y+18	; 0x12
    450a:	39 88       	ldd	r3, Y+17	; 0x11
    450c:	48 88       	ldd	r4, Y+16	; 0x10
    450e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4510:	6e 84       	ldd	r6, Y+14	; 0x0e
    4512:	7d 84       	ldd	r7, Y+13	; 0x0d
    4514:	8c 84       	ldd	r8, Y+12	; 0x0c
    4516:	9b 84       	ldd	r9, Y+11	; 0x0b
    4518:	aa 84       	ldd	r10, Y+10	; 0x0a
    451a:	b9 84       	ldd	r11, Y+9	; 0x09
    451c:	c8 84       	ldd	r12, Y+8	; 0x08
    451e:	df 80       	ldd	r13, Y+7	; 0x07
    4520:	ee 80       	ldd	r14, Y+6	; 0x06
    4522:	fd 80       	ldd	r15, Y+5	; 0x05
    4524:	0c 81       	ldd	r16, Y+4	; 0x04
    4526:	1b 81       	ldd	r17, Y+3	; 0x03
    4528:	aa 81       	ldd	r26, Y+2	; 0x02
    452a:	b9 81       	ldd	r27, Y+1	; 0x01
    452c:	ce 0f       	add	r28, r30
    452e:	d1 1d       	adc	r29, r1
    4530:	0f b6       	in	r0, 0x3f	; 63
    4532:	f8 94       	cli
    4534:	de bf       	out	0x3e, r29	; 62
    4536:	0f be       	out	0x3f, r0	; 63
    4538:	cd bf       	out	0x3d, r28	; 61
    453a:	ed 01       	movw	r28, r26
    453c:	08 95       	ret

0000453e <_exit>:
    453e:	f8 94       	cli

00004540 <__stop_program>:
    4540:	ff cf       	rjmp	.-2      	; 0x4540 <__stop_program>
