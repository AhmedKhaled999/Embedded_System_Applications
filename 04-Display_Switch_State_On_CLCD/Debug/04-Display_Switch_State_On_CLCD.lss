
04-Display_Switch_State_On_CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  00006602  00006696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800164  00800164  0000679a  2**0
                  ALLOC
  3 .stab         000056a0  00000000  00000000  0000679c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001958  00000000  00000000  0000be3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000da44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f68d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011328  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011715  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f6 e6       	ldi	r31, 0x66	; 102
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 36       	cpi	r26, 0x67	; 103
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <main>
      8a:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e1       	ldi	r26, 0x1C	; 28
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 32 	jmp	0x65c8	; 0x65c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e1       	ldi	r24, 0x1C	; 28
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 32 	jmp	0x65c8	; 0x65c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 32 	jmp	0x65b0	; 0x65b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f4 32 	jmp	0x65e8	; 0x65e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <MDIO_Error_State_SetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <MDIO_Error_State_SetPinDirection+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <MDIO_Error_State_SetPinDirection+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
     b58:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	88 30       	cpi	r24, 0x08	; 8
     b62:	08 f0       	brcs	.+2      	; 0xb66 <MDIO_Error_State_SetPinDirection+0x20>
     b64:	e8 c0       	rjmp	.+464    	; 0xd36 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	3e 83       	std	Y+6, r19	; 0x06
     b6e:	2d 83       	std	Y+5, r18	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 05       	cpc	r25, r1
     b78:	09 f4       	brne	.+2      	; 0xb7c <MDIO_Error_State_SetPinDirection+0x36>
     b7a:	48 c0       	rjmp	.+144    	; 0xc0c <MDIO_Error_State_SetPinDirection+0xc6>
     b7c:	2d 81       	ldd	r18, Y+5	; 0x05
     b7e:	3e 81       	ldd	r19, Y+6	; 0x06
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <MDIO_Error_State_SetPinDirection+0x4a>
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	71 f0       	breq	.+28     	; 0xbaa <MDIO_Error_State_SetPinDirection+0x64>
     b8e:	d1 c0       	rjmp	.+418    	; 0xd32 <MDIO_Error_State_SetPinDirection+0x1ec>
     b90:	2d 81       	ldd	r18, Y+5	; 0x05
     b92:	3e 81       	ldd	r19, Y+6	; 0x06
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <MDIO_Error_State_SetPinDirection+0x56>
     b9a:	69 c0       	rjmp	.+210    	; 0xc6e <MDIO_Error_State_SetPinDirection+0x128>
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <MDIO_Error_State_SetPinDirection+0x62>
     ba6:	94 c0       	rjmp	.+296    	; 0xcd0 <MDIO_Error_State_SetPinDirection+0x18a>
     ba8:	c4 c0       	rjmp	.+392    	; 0xd32 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	a1 f4       	brne	.+40     	; 0xbd8 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e3       	ldi	r30, 0x3A	; 58
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <MDIO_Error_State_SetPinDirection+0x88>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <MDIO_Error_State_SetPinDirection+0x84>
     bd2:	84 2b       	or	r24, r20
     bd4:	8c 93       	st	X, r24
     bd6:	b0 c0       	rjmp	.+352    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	88 23       	and	r24, r24
     bdc:	a9 f4       	brne	.+42     	; 0xc08 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <MDIO_Error_State_SetPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <MDIO_Error_State_SetPinDirection+0xb2>
     c00:	80 95       	com	r24
     c02:	84 23       	and	r24, r20
     c04:	8c 93       	st	X, r24
     c06:	98 c0       	rjmp	.+304    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     c08:	19 82       	std	Y+1, r1	; 0x01
     c0a:	96 c0       	rjmp	.+300    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	a1 f4       	brne	.+40     	; 0xc3a <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
     c12:	a7 e3       	ldi	r26, 0x37	; 55
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e7 e3       	ldi	r30, 0x37	; 55
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <MDIO_Error_State_SetPinDirection+0xea>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <MDIO_Error_State_SetPinDirection+0xe6>
     c34:	84 2b       	or	r24, r20
     c36:	8c 93       	st	X, r24
     c38:	7f c0       	rjmp	.+254    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	88 23       	and	r24, r24
     c3e:	a9 f4       	brne	.+42     	; 0xc6a <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
     c40:	a7 e3       	ldi	r26, 0x37	; 55
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e7 e3       	ldi	r30, 0x37	; 55
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <MDIO_Error_State_SetPinDirection+0x118>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <MDIO_Error_State_SetPinDirection+0x114>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	67 c0       	rjmp	.+206    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	65 c0       	rjmp	.+202    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
     c74:	a4 e3       	ldi	r26, 0x34	; 52
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <MDIO_Error_State_SetPinDirection+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <MDIO_Error_State_SetPinDirection+0x148>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	4e c0       	rjmp	.+156    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	88 23       	and	r24, r24
     ca0:	a9 f4       	brne	.+42     	; 0xccc <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
     ca2:	a4 e3       	ldi	r26, 0x34	; 52
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <MDIO_Error_State_SetPinDirection+0x17a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <MDIO_Error_State_SetPinDirection+0x176>
     cc4:	80 95       	com	r24
     cc6:	84 23       	and	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	36 c0       	rjmp	.+108    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     ccc:	19 82       	std	Y+1, r1	; 0x01
     cce:	34 c0       	rjmp	.+104    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	a1 f4       	brne	.+40     	; 0xcfe <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <MDIO_Error_State_SetPinDirection+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <MDIO_Error_State_SetPinDirection+0x1aa>
     cf8:	84 2b       	or	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	1d c0       	rjmp	.+58     	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	88 23       	and	r24, r24
     d02:	a9 f4       	brne	.+42     	; 0xd2e <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
     d04:	a1 e3       	ldi	r26, 0x31	; 49
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e1 e3       	ldi	r30, 0x31	; 49
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <MDIO_Error_State_SetPinDirection+0x1dc>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <MDIO_Error_State_SetPinDirection+0x1d8>
     d26:	80 95       	com	r24
     d28:	84 23       	and	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     d2e:	19 82       	std	Y+1, r1	; 0x01
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
     d32:	19 82       	std	Y+1, r1	; 0x01
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
     d36:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
     d38:	89 81       	ldd	r24, Y+1	; 0x01

}
     d3a:	26 96       	adiw	r28, 0x06	; 6
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <MDIO_Error_State_SetPortDirection+0x6>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <MDIO_Error_State_SetPortDirection+0x8>
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	8f 3f       	cpi	r24, 0xFF	; 255
     d66:	19 f0       	breq	.+6      	; 0xd6e <MDIO_Error_State_SetPortDirection+0x22>
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	88 23       	and	r24, r24
     d6c:	a9 f5       	brne	.+106    	; 0xdd8 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	3d 83       	std	Y+5, r19	; 0x05
     d76:	2c 83       	std	Y+4, r18	; 0x04
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	91 05       	cpc	r25, r1
     d80:	d1 f0       	breq	.+52     	; 0xdb6 <MDIO_Error_State_SetPortDirection+0x6a>
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	2c f4       	brge	.+10     	; 0xd96 <MDIO_Error_State_SetPortDirection+0x4a>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	61 f0       	breq	.+24     	; 0xdac <MDIO_Error_State_SetPortDirection+0x60>
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <MDIO_Error_State_SetPortDirection+0x88>
     d96:	2c 81       	ldd	r18, Y+4	; 0x04
     d98:	3d 81       	ldd	r19, Y+5	; 0x05
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	81 f0       	breq	.+32     	; 0xdc0 <MDIO_Error_State_SetPortDirection+0x74>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	91 05       	cpc	r25, r1
     da8:	81 f0       	breq	.+32     	; 0xdca <MDIO_Error_State_SetPortDirection+0x7e>
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	80 83       	st	Z, r24
     db4:	12 c0       	rjmp	.+36     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
     db6:	e7 e3       	ldi	r30, 0x37	; 55
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	80 83       	st	Z, r24
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	80 83       	st	Z, r24
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
     dca:	e1 e3       	ldi	r30, 0x31	; 49
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 83       	st	Z, r24
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
     dd4:	19 82       	std	Y+1, r1	; 0x01
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <MDIO_Error_State_SetPinValue+0x6>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <MDIO_Error_State_SetPinValue+0x8>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <MDIO_Error_State_SetPinValue+0xa>
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	8a 83       	std	Y+2, r24	; 0x02
     dfc:	6b 83       	std	Y+3, r22	; 0x03
     dfe:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	08 f0       	brcs	.+2      	; 0xe0c <MDIO_Error_State_SetPinValue+0x20>
     e0a:	e8 c0       	rjmp	.+464    	; 0xfdc <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3e 83       	std	Y+6, r19	; 0x06
     e14:	2d 83       	std	Y+5, r18	; 0x05
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <MDIO_Error_State_SetPinValue+0x36>
     e20:	48 c0       	rjmp	.+144    	; 0xeb2 <MDIO_Error_State_SetPinValue+0xc6>
     e22:	2d 81       	ldd	r18, Y+5	; 0x05
     e24:	3e 81       	ldd	r19, Y+6	; 0x06
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	2c f4       	brge	.+10     	; 0xe36 <MDIO_Error_State_SetPinValue+0x4a>
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	71 f0       	breq	.+28     	; 0xe50 <MDIO_Error_State_SetPinValue+0x64>
     e34:	d1 c0       	rjmp	.+418    	; 0xfd8 <MDIO_Error_State_SetPinValue+0x1ec>
     e36:	2d 81       	ldd	r18, Y+5	; 0x05
     e38:	3e 81       	ldd	r19, Y+6	; 0x06
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <MDIO_Error_State_SetPinValue+0x56>
     e40:	69 c0       	rjmp	.+210    	; 0xf14 <MDIO_Error_State_SetPinValue+0x128>
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <MDIO_Error_State_SetPinValue+0x62>
     e4c:	94 c0       	rjmp	.+296    	; 0xf76 <MDIO_Error_State_SetPinValue+0x18a>
     e4e:	c4 c0       	rjmp	.+392    	; 0xfd8 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	a1 f4       	brne	.+40     	; 0xe7e <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <MDIO_Error_State_SetPinValue+0x88>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <MDIO_Error_State_SetPinValue+0x84>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	b0 c0       	rjmp	.+352    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	88 23       	and	r24, r24
     e82:	a9 f4       	brne	.+42     	; 0xeae <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
     e84:	ab e3       	ldi	r26, 0x3B	; 59
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <MDIO_Error_State_SetPinValue+0xb6>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <MDIO_Error_State_SetPinValue+0xb2>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	98 c0       	rjmp	.+304    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
     eae:	19 82       	std	Y+1, r1	; 0x01
     eb0:	96 c0       	rjmp	.+300    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	a1 f4       	brne	.+40     	; 0xee0 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <MDIO_Error_State_SetPinValue+0xea>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <MDIO_Error_State_SetPinValue+0xe6>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	7f c0       	rjmp	.+254    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	88 23       	and	r24, r24
     ee4:	a9 f4       	brne	.+42     	; 0xf10 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
     ee6:	a8 e3       	ldi	r26, 0x38	; 56
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e3       	ldi	r30, 0x38	; 56
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <MDIO_Error_State_SetPinValue+0x118>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <MDIO_Error_State_SetPinValue+0x114>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	67 c0       	rjmp	.+206    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
     f10:	19 82       	std	Y+1, r1	; 0x01
     f12:	65 c0       	rjmp	.+202    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	a1 f4       	brne	.+40     	; 0xf42 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
     f1a:	a5 e3       	ldi	r26, 0x35	; 53
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e5 e3       	ldi	r30, 0x35	; 53
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <MDIO_Error_State_SetPinValue+0x14c>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <MDIO_Error_State_SetPinValue+0x148>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	4e c0       	rjmp	.+156    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 23       	and	r24, r24
     f46:	a9 f4       	brne	.+42     	; 0xf72 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
     f48:	a5 e3       	ldi	r26, 0x35	; 53
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e5 e3       	ldi	r30, 0x35	; 53
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <MDIO_Error_State_SetPinValue+0x17a>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <MDIO_Error_State_SetPinValue+0x176>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	36 c0       	rjmp	.+108    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	34 c0       	rjmp	.+104    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	a1 f4       	brne	.+40     	; 0xfa4 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
     f7c:	a2 e3       	ldi	r26, 0x32	; 50
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e2 e3       	ldi	r30, 0x32	; 50
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <MDIO_Error_State_SetPinValue+0x1ae>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <MDIO_Error_State_SetPinValue+0x1aa>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	1d c0       	rjmp	.+58     	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	88 23       	and	r24, r24
     fa8:	a9 f4       	brne	.+42     	; 0xfd4 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
     faa:	a2 e3       	ldi	r26, 0x32	; 50
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e2 e3       	ldi	r30, 0x32	; 50
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <MDIO_Error_State_SetPinValue+0x1dc>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <MDIO_Error_State_SetPinValue+0x1d8>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	01 c0       	rjmp	.+2      	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
     fdc:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
     fde:	89 81       	ldd	r24, Y+1	; 0x01

}
     fe0:	26 96       	adiw	r28, 0x06	; 6
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <MDIO_Error_State_SetPortValue+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <MDIO_Error_State_SetPortValue+0x8>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3d 83       	std	Y+5, r19	; 0x05
    1010:	2c 83       	std	Y+4, r18	; 0x04
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	d1 f0       	breq	.+52     	; 0x1050 <MDIO_Error_State_SetPortValue+0x5e>
    101c:	2c 81       	ldd	r18, Y+4	; 0x04
    101e:	3d 81       	ldd	r19, Y+5	; 0x05
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	2c f4       	brge	.+10     	; 0x1030 <MDIO_Error_State_SetPortValue+0x3e>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	61 f0       	breq	.+24     	; 0x1046 <MDIO_Error_State_SetPortValue+0x54>
    102e:	1f c0       	rjmp	.+62     	; 0x106e <MDIO_Error_State_SetPortValue+0x7c>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	81 f0       	breq	.+32     	; 0x105a <MDIO_Error_State_SetPortValue+0x68>
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	91 05       	cpc	r25, r1
    1042:	81 f0       	breq	.+32     	; 0x1064 <MDIO_Error_State_SetPortValue+0x72>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1046:	eb e3       	ldi	r30, 0x3B	; 59
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	80 83       	st	Z, r24
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	80 83       	st	Z, r24
    1058:	0b c0       	rjmp	.+22     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    105a:	e5 e3       	ldi	r30, 0x35	; 53
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	80 83       	st	Z, r24
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1064:	e2 e3       	ldi	r30, 0x32	; 50
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	80 83       	st	Z, r24
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    106e:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	27 97       	sbiw	r28, 0x07	; 7
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	8a 83       	std	Y+2, r24	; 0x02
    1098:	6b 83       	std	Y+3, r22	; 0x03
    109a:	5d 83       	std	Y+5, r21	; 0x05
    109c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <MDIO_Error_State_GetPinValue+0x28>
    10a8:	79 c0       	rjmp	.+242    	; 0x119c <MDIO_Error_State_GetPinValue+0x11a>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <MDIO_Error_State_GetPinValue+0x34>
    10b4:	73 c0       	rjmp	.+230    	; 0x119c <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3f 83       	std	Y+7, r19	; 0x07
    10be:	2e 83       	std	Y+6, r18	; 0x06
    10c0:	4e 81       	ldd	r20, Y+6	; 0x06
    10c2:	5f 81       	ldd	r21, Y+7	; 0x07
    10c4:	41 30       	cpi	r20, 0x01	; 1
    10c6:	51 05       	cpc	r21, r1
    10c8:	59 f1       	breq	.+86     	; 0x1120 <MDIO_Error_State_GetPinValue+0x9e>
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	9f 81       	ldd	r25, Y+7	; 0x07
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	91 05       	cpc	r25, r1
    10d2:	34 f4       	brge	.+12     	; 0x10e0 <MDIO_Error_State_GetPinValue+0x5e>
    10d4:	2e 81       	ldd	r18, Y+6	; 0x06
    10d6:	3f 81       	ldd	r19, Y+7	; 0x07
    10d8:	21 15       	cp	r18, r1
    10da:	31 05       	cpc	r19, r1
    10dc:	69 f0       	breq	.+26     	; 0x10f8 <MDIO_Error_State_GetPinValue+0x76>
    10de:	5c c0       	rjmp	.+184    	; 0x1198 <MDIO_Error_State_GetPinValue+0x116>
    10e0:	4e 81       	ldd	r20, Y+6	; 0x06
    10e2:	5f 81       	ldd	r21, Y+7	; 0x07
    10e4:	42 30       	cpi	r20, 0x02	; 2
    10e6:	51 05       	cpc	r21, r1
    10e8:	79 f1       	breq	.+94     	; 0x1148 <MDIO_Error_State_GetPinValue+0xc6>
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	9f 81       	ldd	r25, Y+7	; 0x07
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <MDIO_Error_State_GetPinValue+0x74>
    10f4:	3d c0       	rjmp	.+122    	; 0x1170 <MDIO_Error_State_GetPinValue+0xee>
    10f6:	50 c0       	rjmp	.+160    	; 0x1198 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    10f8:	e9 e3       	ldi	r30, 0x39	; 57
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <MDIO_Error_State_GetPinValue+0x8e>
    110c:	55 95       	asr	r21
    110e:	47 95       	ror	r20
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <MDIO_Error_State_GetPinValue+0x8a>
    1114:	ca 01       	movw	r24, r20
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	ec 81       	ldd	r30, Y+4	; 0x04
    111a:	fd 81       	ldd	r31, Y+5	; 0x05
    111c:	80 83       	st	Z, r24
    111e:	3f c0       	rjmp	.+126    	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1120:	e6 e3       	ldi	r30, 0x36	; 54
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <MDIO_Error_State_GetPinValue+0xb6>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <MDIO_Error_State_GetPinValue+0xb2>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	ec 81       	ldd	r30, Y+4	; 0x04
    1142:	fd 81       	ldd	r31, Y+5	; 0x05
    1144:	80 83       	st	Z, r24
    1146:	2b c0       	rjmp	.+86     	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1148:	e3 e3       	ldi	r30, 0x33	; 51
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <MDIO_Error_State_GetPinValue+0xde>
    115c:	55 95       	asr	r21
    115e:	47 95       	ror	r20
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <MDIO_Error_State_GetPinValue+0xda>
    1164:	ca 01       	movw	r24, r20
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	ec 81       	ldd	r30, Y+4	; 0x04
    116a:	fd 81       	ldd	r31, Y+5	; 0x05
    116c:	80 83       	st	Z, r24
    116e:	17 c0       	rjmp	.+46     	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1170:	e0 e3       	ldi	r30, 0x30	; 48
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <MDIO_Error_State_GetPinValue+0x106>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <MDIO_Error_State_GetPinValue+0x102>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	ec 81       	ldd	r30, Y+4	; 0x04
    1192:	fd 81       	ldd	r31, Y+5	; 0x05
    1194:	80 83       	st	Z, r24
    1196:	03 c0       	rjmp	.+6      	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	01 c0       	rjmp	.+2      	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    119c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    119e:	89 81       	ldd	r24, Y+1	; 0x01

}
    11a0:	27 96       	adiw	r28, 0x07	; 7
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <MDIO_Error_State_SetNippleValue+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <MDIO_Error_State_SetNippleValue+0x8>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <MDIO_Error_State_SetNippleValue+0xa>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	8a 83       	std	Y+2, r24	; 0x02
    11c2:	6b 83       	std	Y+3, r22	; 0x03
    11c4:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	85 30       	cpi	r24, 0x05	; 5
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <MDIO_Error_State_SetNippleValue+0x20>
    11d0:	c9 c0       	rjmp	.+402    	; 0x1364 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3e 83       	std	Y+6, r19	; 0x06
    11da:	2d 83       	std	Y+5, r18	; 0x05
    11dc:	6d 81       	ldd	r22, Y+5	; 0x05
    11de:	7e 81       	ldd	r23, Y+6	; 0x06
    11e0:	61 30       	cpi	r22, 0x01	; 1
    11e2:	71 05       	cpc	r23, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <MDIO_Error_State_SetNippleValue+0x36>
    11e6:	41 c0       	rjmp	.+130    	; 0x126a <MDIO_Error_State_SetNippleValue+0xb8>
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	91 05       	cpc	r25, r1
    11f0:	34 f4       	brge	.+12     	; 0x11fe <MDIO_Error_State_SetNippleValue+0x4c>
    11f2:	2d 81       	ldd	r18, Y+5	; 0x05
    11f4:	3e 81       	ldd	r19, Y+6	; 0x06
    11f6:	21 15       	cp	r18, r1
    11f8:	31 05       	cpc	r19, r1
    11fa:	71 f0       	breq	.+28     	; 0x1218 <MDIO_Error_State_SetNippleValue+0x66>
    11fc:	b1 c0       	rjmp	.+354    	; 0x1360 <MDIO_Error_State_SetNippleValue+0x1ae>
    11fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1200:	7e 81       	ldd	r23, Y+6	; 0x06
    1202:	62 30       	cpi	r22, 0x02	; 2
    1204:	71 05       	cpc	r23, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <MDIO_Error_State_SetNippleValue+0x58>
    1208:	59 c0       	rjmp	.+178    	; 0x12bc <MDIO_Error_State_SetNippleValue+0x10a>
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	91 05       	cpc	r25, r1
    1212:	09 f4       	brne	.+2      	; 0x1216 <MDIO_Error_State_SetNippleValue+0x64>
    1214:	7c c0       	rjmp	.+248    	; 0x130e <MDIO_Error_State_SetNippleValue+0x15c>
    1216:	a4 c0       	rjmp	.+328    	; 0x1360 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8f e0       	ldi	r24, 0x0F	; 15
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <MDIO_Error_State_SetNippleValue+0x82>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	2a 95       	dec	r18
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <MDIO_Error_State_SetNippleValue+0x7e>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    123e:	ab e3       	ldi	r26, 0x3B	; 59
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	b9 01       	movw	r22, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <MDIO_Error_State_SetNippleValue+0xac>
    125a:	66 0f       	add	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	8a 95       	dec	r24
    1260:	e2 f7       	brpl	.-8      	; 0x125a <MDIO_Error_State_SetNippleValue+0xa8>
    1262:	cb 01       	movw	r24, r22
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	7e c0       	rjmp	.+252    	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    126a:	a8 e3       	ldi	r26, 0x38	; 56
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e8 e3       	ldi	r30, 0x38	; 56
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8f e0       	ldi	r24, 0x0F	; 15
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <MDIO_Error_State_SetNippleValue+0xd4>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	2a 95       	dec	r18
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <MDIO_Error_State_SetNippleValue+0xd0>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	b9 01       	movw	r22, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <MDIO_Error_State_SetNippleValue+0xfe>
    12ac:	66 0f       	add	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <MDIO_Error_State_SetNippleValue+0xfa>
    12b4:	cb 01       	movw	r24, r22
    12b6:	84 2b       	or	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	55 c0       	rjmp	.+170    	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    12bc:	a5 e3       	ldi	r26, 0x35	; 53
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e5 e3       	ldi	r30, 0x35	; 53
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8f e0       	ldi	r24, 0x0F	; 15
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <MDIO_Error_State_SetNippleValue+0x126>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	2a 95       	dec	r18
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <MDIO_Error_State_SetNippleValue+0x122>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    12e2:	a5 e3       	ldi	r26, 0x35	; 53
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	b9 01       	movw	r22, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <MDIO_Error_State_SetNippleValue+0x150>
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <MDIO_Error_State_SetNippleValue+0x14c>
    1306:	cb 01       	movw	r24, r22
    1308:	84 2b       	or	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	2c c0       	rjmp	.+88     	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    130e:	a2 e3       	ldi	r26, 0x32	; 50
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	8f e0       	ldi	r24, 0x0F	; 15
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <MDIO_Error_State_SetNippleValue+0x178>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	2a 95       	dec	r18
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <MDIO_Error_State_SetNippleValue+0x174>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1334:	a2 e3       	ldi	r26, 0x32	; 50
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e2 e3       	ldi	r30, 0x32	; 50
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	b9 01       	movw	r22, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <MDIO_Error_State_SetNippleValue+0x1a2>
    1350:	66 0f       	add	r22, r22
    1352:	77 1f       	adc	r23, r23
    1354:	8a 95       	dec	r24
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <MDIO_Error_State_SetNippleValue+0x19e>
    1358:	cb 01       	movw	r24, r22
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1364:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
}
    1368:	26 96       	adiw	r28, 0x06	; 6
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <MDIO_VidActivePullUP+0x6>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	6a 81       	ldd	r22, Y+2	; 0x02
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	6a 81       	ldd	r22, Y+2	; 0x02
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>

}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <HSWITCH_VidInit_PullUP+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    13b4:	e9 81       	ldd	r30, Y+1	; 0x01
    13b6:	fa 81       	ldd	r31, Y+2	; 0x02
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	90 81       	ld	r25, Z
    13c0:	69 2f       	mov	r22, r25
    13c2:	0e 94 bd 09 	call	0x137a	; 0x137a <MDIO_VidActivePullUP>
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <HSWITCH_u8SwitchState+0x6>
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	9b 83       	std	Y+3, r25	; 0x03
    13de:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    13e4:	ea 81       	ldd	r30, Y+2	; 0x02
    13e6:	fb 81       	ldd	r31, Y+3	; 0x03
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	ea 81       	ldd	r30, Y+2	; 0x02
    13ec:	fb 81       	ldd	r31, Y+3	; 0x03
    13ee:	90 81       	ld	r25, Z
    13f0:	69 2f       	mov	r22, r25
    13f2:	9e 01       	movw	r18, r28
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	a9 01       	movw	r20, r18
    13fa:	0e 94 41 08 	call	0x1082	; 0x1082 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <HSEVEN_SEGMENT_VidInit+0x6>
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	80 81       	ld	r24, Z
    1420:	6f ef       	ldi	r22, 0xFF	; 255
    1422:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MDIO_Error_State_SetPortDirection>
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <HSEVEN_SEGMENT_VidOff+0x6>
    1436:	0f 92       	push	r0
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	81 81       	ldd	r24, Z+1	; 0x01
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	31 f4       	brne	.+12     	; 0x1458 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	80 81       	ld	r24, Z
    1452:	6b 81       	ldd	r22, Y+3	; 0x03
    1454:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1458:	e9 81       	ldd	r30, Y+1	; 0x01
    145a:	fa 81       	ldd	r31, Y+2	; 0x02
    145c:	81 81       	ldd	r24, Z+1	; 0x01
    145e:	88 23       	and	r24, r24
    1460:	51 f4       	brne	.+20     	; 0x1476 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	20 81       	ld	r18, Z
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	98 2f       	mov	r25, r24
    146c:	90 95       	com	r25
    146e:	82 2f       	mov	r24, r18
    1470:	69 2f       	mov	r22, r25
    1472:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	}
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	27 97       	sbiw	r28, 0x07	; 7
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	81 81       	ldd	r24, Z+1	; 0x01
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    14a6:	9b c0       	rjmp	.+310    	; 0x15de <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3f 83       	std	Y+7, r19	; 0x07
    14b0:	2e 83       	std	Y+6, r18	; 0x06
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    14bc:	5f c0       	rjmp	.+190    	; 0x157c <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    14be:	2e 81       	ldd	r18, Y+6	; 0x06
    14c0:	3f 81       	ldd	r19, Y+7	; 0x07
    14c2:	25 30       	cpi	r18, 0x05	; 5
    14c4:	31 05       	cpc	r19, r1
    14c6:	dc f4       	brge	.+54     	; 0x14fe <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    14c8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ca:	9f 81       	ldd	r25, Y+7	; 0x07
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    14d4:	2e 81       	ldd	r18, Y+6	; 0x06
    14d6:	3f 81       	ldd	r19, Y+7	; 0x07
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    14de:	8e 81       	ldd	r24, Y+6	; 0x06
    14e0:	9f 81       	ldd	r25, Y+7	; 0x07
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	79 f1       	breq	.+94     	; 0x1544 <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    14e6:	74 c0       	rjmp	.+232    	; 0x15d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    14e8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ea:	3f 81       	ldd	r19, Y+7	; 0x07
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	b9 f1       	breq	.+110    	; 0x1560 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    14f2:	8e 81       	ldd	r24, Y+6	; 0x06
    14f4:	9f 81       	ldd	r25, Y+7	; 0x07
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	91 05       	cpc	r25, r1
    14fa:	c9 f1       	breq	.+114    	; 0x156e <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    14fc:	69 c0       	rjmp	.+210    	; 0x15d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    14fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1500:	3f 81       	ldd	r19, Y+7	; 0x07
    1502:	27 30       	cpi	r18, 0x07	; 7
    1504:	31 05       	cpc	r19, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1508:	4e c0       	rjmp	.+156    	; 0x15a6 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    150a:	8e 81       	ldd	r24, Y+6	; 0x06
    150c:	9f 81       	ldd	r25, Y+7	; 0x07
    150e:	88 30       	cpi	r24, 0x08	; 8
    1510:	91 05       	cpc	r25, r1
    1512:	5c f4       	brge	.+22     	; 0x152a <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1514:	2e 81       	ldd	r18, Y+6	; 0x06
    1516:	3f 81       	ldd	r19, Y+7	; 0x07
    1518:	25 30       	cpi	r18, 0x05	; 5
    151a:	31 05       	cpc	r19, r1
    151c:	b1 f1       	breq	.+108    	; 0x158a <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    151e:	8e 81       	ldd	r24, Y+6	; 0x06
    1520:	9f 81       	ldd	r25, Y+7	; 0x07
    1522:	86 30       	cpi	r24, 0x06	; 6
    1524:	91 05       	cpc	r25, r1
    1526:	c1 f1       	breq	.+112    	; 0x1598 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1528:	53 c0       	rjmp	.+166    	; 0x15d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    152a:	2e 81       	ldd	r18, Y+6	; 0x06
    152c:	3f 81       	ldd	r19, Y+7	; 0x07
    152e:	28 30       	cpi	r18, 0x08	; 8
    1530:	31 05       	cpc	r19, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1534:	3f c0       	rjmp	.+126    	; 0x15b4 <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1536:	8e 81       	ldd	r24, Y+6	; 0x06
    1538:	9f 81       	ldd	r25, Y+7	; 0x07
    153a:	89 30       	cpi	r24, 0x09	; 9
    153c:	91 05       	cpc	r25, r1
    153e:	09 f4       	brne	.+2      	; 0x1542 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1540:	40 c0       	rjmp	.+128    	; 0x15c2 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1542:	46 c0       	rjmp	.+140    	; 0x15d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1544:	e9 81       	ldd	r30, Y+1	; 0x01
    1546:	fa 81       	ldd	r31, Y+2	; 0x02
    1548:	80 81       	ld	r24, Z
    154a:	6f e3       	ldi	r22, 0x3F	; 63
    154c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1550:	e6 c0       	rjmp	.+460    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1552:	e9 81       	ldd	r30, Y+1	; 0x01
    1554:	fa 81       	ldd	r31, Y+2	; 0x02
    1556:	80 81       	ld	r24, Z
    1558:	66 e0       	ldi	r22, 0x06	; 6
    155a:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    155e:	df c0       	rjmp	.+446    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	80 81       	ld	r24, Z
    1566:	6b e5       	ldi	r22, 0x5B	; 91
    1568:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    156c:	d8 c0       	rjmp	.+432    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    156e:	e9 81       	ldd	r30, Y+1	; 0x01
    1570:	fa 81       	ldd	r31, Y+2	; 0x02
    1572:	80 81       	ld	r24, Z
    1574:	6f e4       	ldi	r22, 0x4F	; 79
    1576:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    157a:	d1 c0       	rjmp	.+418    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	80 81       	ld	r24, Z
    1582:	66 e6       	ldi	r22, 0x66	; 102
    1584:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1588:	ca c0       	rjmp	.+404    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	80 81       	ld	r24, Z
    1590:	6d e6       	ldi	r22, 0x6D	; 109
    1592:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1596:	c3 c0       	rjmp	.+390    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1598:	e9 81       	ldd	r30, Y+1	; 0x01
    159a:	fa 81       	ldd	r31, Y+2	; 0x02
    159c:	80 81       	ld	r24, Z
    159e:	6d e7       	ldi	r22, 0x7D	; 125
    15a0:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15a4:	bc c0       	rjmp	.+376    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    15a6:	e9 81       	ldd	r30, Y+1	; 0x01
    15a8:	fa 81       	ldd	r31, Y+2	; 0x02
    15aa:	80 81       	ld	r24, Z
    15ac:	67 e0       	ldi	r22, 0x07	; 7
    15ae:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15b2:	b5 c0       	rjmp	.+362    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    15b4:	e9 81       	ldd	r30, Y+1	; 0x01
    15b6:	fa 81       	ldd	r31, Y+2	; 0x02
    15b8:	80 81       	ld	r24, Z
    15ba:	6f e7       	ldi	r22, 0x7F	; 127
    15bc:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15c0:	ae c0       	rjmp	.+348    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    15c2:	e9 81       	ldd	r30, Y+1	; 0x01
    15c4:	fa 81       	ldd	r31, Y+2	; 0x02
    15c6:	80 81       	ld	r24, Z
    15c8:	6f e6       	ldi	r22, 0x6F	; 111
    15ca:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15ce:	a7 c0       	rjmp	.+334    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    15d0:	e9 81       	ldd	r30, Y+1	; 0x01
    15d2:	fa 81       	ldd	r31, Y+2	; 0x02
    15d4:	80 81       	ld	r24, Z
    15d6:	69 e7       	ldi	r22, 0x79	; 121
    15d8:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15dc:	a0 c0       	rjmp	.+320    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	88 23       	and	r24, r24
    15e6:	09 f0       	breq	.+2      	; 0x15ea <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    15e8:	9a c0       	rjmp	.+308    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	3d 83       	std	Y+5, r19	; 0x05
    15f2:	2c 83       	std	Y+4, r18	; 0x04
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	91 05       	cpc	r25, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    15fe:	5f c0       	rjmp	.+190    	; 0x16be <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    1600:	2c 81       	ldd	r18, Y+4	; 0x04
    1602:	3d 81       	ldd	r19, Y+5	; 0x05
    1604:	25 30       	cpi	r18, 0x05	; 5
    1606:	31 05       	cpc	r19, r1
    1608:	dc f4       	brge	.+54     	; 0x1640 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	9d 81       	ldd	r25, Y+5	; 0x05
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    1616:	2c 81       	ldd	r18, Y+4	; 0x04
    1618:	3d 81       	ldd	r19, Y+5	; 0x05
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	2c f4       	brge	.+10     	; 0x162a <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	79 f1       	breq	.+94     	; 0x1686 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1628:	74 c0       	rjmp	.+232    	; 0x1712 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    162a:	2c 81       	ldd	r18, Y+4	; 0x04
    162c:	3d 81       	ldd	r19, Y+5	; 0x05
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	b9 f1       	breq	.+110    	; 0x16a2 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	c9 f1       	breq	.+114    	; 0x16b0 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    163e:	69 c0       	rjmp	.+210    	; 0x1712 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1640:	2c 81       	ldd	r18, Y+4	; 0x04
    1642:	3d 81       	ldd	r19, Y+5	; 0x05
    1644:	27 30       	cpi	r18, 0x07	; 7
    1646:	31 05       	cpc	r19, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    164a:	4e c0       	rjmp	.+156    	; 0x16e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	9d 81       	ldd	r25, Y+5	; 0x05
    1650:	88 30       	cpi	r24, 0x08	; 8
    1652:	91 05       	cpc	r25, r1
    1654:	5c f4       	brge	.+22     	; 0x166c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    1656:	2c 81       	ldd	r18, Y+4	; 0x04
    1658:	3d 81       	ldd	r19, Y+5	; 0x05
    165a:	25 30       	cpi	r18, 0x05	; 5
    165c:	31 05       	cpc	r19, r1
    165e:	b1 f1       	breq	.+108    	; 0x16cc <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	9d 81       	ldd	r25, Y+5	; 0x05
    1664:	86 30       	cpi	r24, 0x06	; 6
    1666:	91 05       	cpc	r25, r1
    1668:	c1 f1       	breq	.+112    	; 0x16da <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    166a:	53 c0       	rjmp	.+166    	; 0x1712 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    166c:	2c 81       	ldd	r18, Y+4	; 0x04
    166e:	3d 81       	ldd	r19, Y+5	; 0x05
    1670:	28 30       	cpi	r18, 0x08	; 8
    1672:	31 05       	cpc	r19, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    1676:	3f c0       	rjmp	.+126    	; 0x16f6 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	89 30       	cpi	r24, 0x09	; 9
    167e:	91 05       	cpc	r25, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    1682:	40 c0       	rjmp	.+128    	; 0x1704 <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    1684:	46 c0       	rjmp	.+140    	; 0x1712 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    1686:	e9 81       	ldd	r30, Y+1	; 0x01
    1688:	fa 81       	ldd	r31, Y+2	; 0x02
    168a:	80 81       	ld	r24, Z
    168c:	60 ec       	ldi	r22, 0xC0	; 192
    168e:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1692:	45 c0       	rjmp	.+138    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	80 81       	ld	r24, Z
    169a:	69 ef       	ldi	r22, 0xF9	; 249
    169c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16a0:	3e c0       	rjmp	.+124    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	80 81       	ld	r24, Z
    16a8:	64 ea       	ldi	r22, 0xA4	; 164
    16aa:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16ae:	37 c0       	rjmp	.+110    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	80 81       	ld	r24, Z
    16b6:	60 eb       	ldi	r22, 0xB0	; 176
    16b8:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16bc:	30 c0       	rjmp	.+96     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    16be:	e9 81       	ldd	r30, Y+1	; 0x01
    16c0:	fa 81       	ldd	r31, Y+2	; 0x02
    16c2:	80 81       	ld	r24, Z
    16c4:	69 e9       	ldi	r22, 0x99	; 153
    16c6:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16ca:	29 c0       	rjmp	.+82     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    16cc:	e9 81       	ldd	r30, Y+1	; 0x01
    16ce:	fa 81       	ldd	r31, Y+2	; 0x02
    16d0:	80 81       	ld	r24, Z
    16d2:	62 e9       	ldi	r22, 0x92	; 146
    16d4:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16d8:	22 c0       	rjmp	.+68     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    16da:	e9 81       	ldd	r30, Y+1	; 0x01
    16dc:	fa 81       	ldd	r31, Y+2	; 0x02
    16de:	80 81       	ld	r24, Z
    16e0:	62 e8       	ldi	r22, 0x82	; 130
    16e2:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16e6:	1b c0       	rjmp	.+54     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    16e8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ea:	fa 81       	ldd	r31, Y+2	; 0x02
    16ec:	80 81       	ld	r24, Z
    16ee:	68 ef       	ldi	r22, 0xF8	; 248
    16f0:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    16f6:	e9 81       	ldd	r30, Y+1	; 0x01
    16f8:	fa 81       	ldd	r31, Y+2	; 0x02
    16fa:	80 81       	ld	r24, Z
    16fc:	60 e8       	ldi	r22, 0x80	; 128
    16fe:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1702:	0d c0       	rjmp	.+26     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	80 81       	ld	r24, Z
    170a:	60 e9       	ldi	r22, 0x90	; 144
    170c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1710:	06 c0       	rjmp	.+12     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    1712:	e9 81       	ldd	r30, Y+1	; 0x01
    1714:	fa 81       	ldd	r31, Y+2	; 0x02
    1716:	80 81       	ld	r24, Z
    1718:	66 e8       	ldi	r22, 0x86	; 134
    171a:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	}
}
}
    171e:	27 96       	adiw	r28, 0x07	; 7
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <HLED_VidInit+0x6>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    173e:	e9 81       	ldd	r30, Y+1	; 0x01
    1740:	fa 81       	ldd	r31, Y+2	; 0x02
    1742:	81 81       	ldd	r24, Z+1	; 0x01
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	90 81       	ld	r25, Z
    174a:	69 2f       	mov	r22, r25
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <HLED_VidLed_On+0x6>
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	81 81       	ldd	r24, Z+1	; 0x01
    1770:	e9 81       	ldd	r30, Y+1	; 0x01
    1772:	fa 81       	ldd	r31, Y+2	; 0x02
    1774:	90 81       	ld	r25, Z
    1776:	69 2f       	mov	r22, r25
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <HLED_VidLed_Off+0x6>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1796:	e9 81       	ldd	r30, Y+1	; 0x01
    1798:	fa 81       	ldd	r31, Y+2	; 0x02
    179a:	81 81       	ldd	r24, Z+1	; 0x01
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	90 81       	ld	r25, Z
    17a2:	69 2f       	mov	r22, r25
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <HLED_VidLed_Toggle+0x6>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    17c2:	80 91 64 01 	lds	r24, 0x0164
    17c6:	88 23       	and	r24, r24
    17c8:	71 f4       	brne	.+28     	; 0x17e6 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	81 81       	ldd	r24, Z+1	; 0x01
    17d0:	e9 81       	ldd	r30, Y+1	; 0x01
    17d2:	fa 81       	ldd	r31, Y+2	; 0x02
    17d4:	90 81       	ld	r25, Z
    17d6:	69 2f       	mov	r22, r25
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
		Flag=1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	80 93 64 01 	sts	0x0164, r24
    17e4:	0c c0       	rjmp	.+24     	; 0x17fe <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	81 81       	ldd	r24, Z+1	; 0x01
    17ec:	e9 81       	ldd	r30, Y+1	; 0x01
    17ee:	fa 81       	ldd	r31, Y+2	; 0x02
    17f0:	90 81       	ld	r25, Z
    17f2:	69 2f       	mov	r22, r25
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
		Flag=0;
    17fa:	10 92 64 01 	sts	0x0164, r1
	}
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	6d 97       	sbiw	r28, 0x1d	; 29
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	63 e0       	ldi	r22, 0x03	; 3
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	63 e0       	ldi	r22, 0x03	; 3
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1836:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	63 e0       	ldi	r22, 0x03	; 3
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e0       	ldi	r26, 0x00	; 0
    184a:	b0 e4       	ldi	r27, 0x40	; 64
    184c:	89 8f       	std	Y+25, r24	; 0x19
    184e:	9a 8f       	std	Y+26, r25	; 0x1a
    1850:	ab 8f       	std	Y+27, r26	; 0x1b
    1852:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	69 8d       	ldd	r22, Y+25	; 0x19
    1856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8d 8b       	std	Y+21, r24	; 0x15
    186e:	9e 8b       	std	Y+22, r25	; 0x16
    1870:	af 8b       	std	Y+23, r26	; 0x17
    1872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1874:	6d 89       	ldd	r22, Y+21	; 0x15
    1876:	7e 89       	ldd	r23, Y+22	; 0x16
    1878:	8f 89       	ldd	r24, Y+23	; 0x17
    187a:	98 8d       	ldd	r25, Y+24	; 0x18
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9c 8b       	std	Y+20, r25	; 0x14
    1892:	8b 8b       	std	Y+19, r24	; 0x13
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    1896:	6d 89       	ldd	r22, Y+21	; 0x15
    1898:	7e 89       	ldd	r23, Y+22	; 0x16
    189a:	8f 89       	ldd	r24, Y+23	; 0x17
    189c:	98 8d       	ldd	r25, Y+24	; 0x18
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	69 8d       	ldd	r22, Y+25	; 0x19
    18b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <HCLCD_Vid8Bits_SendCommand+0xee>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9a 8b       	std	Y+18, r25	; 0x12
    18de:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e0:	89 89       	ldd	r24, Y+17	; 0x11
    18e2:	9a 89       	ldd	r25, Y+18	; 0x12
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <HCLCD_Vid8Bits_SendCommand+0xdc>
    18e8:	9a 8b       	std	Y+18, r25	; 0x12
    18ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8b 89       	ldd	r24, Y+19	; 0x13
    18ee:	9c 89       	ldd	r25, Y+20	; 0x14
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9c 8b       	std	Y+20, r25	; 0x14
    18f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8b 89       	ldd	r24, Y+19	; 0x13
    18f8:	9c 89       	ldd	r25, Y+20	; 0x14
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <HCLCD_Vid8Bits_SendCommand+0xd0>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6d 89       	ldd	r22, Y+21	; 0x15
    1902:	7e 89       	ldd	r23, Y+22	; 0x16
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9c 8b       	std	Y+20, r25	; 0x14
    1912:	8b 8b       	std	Y+19, r24	; 0x13
    1914:	8b 89       	ldd	r24, Y+19	; 0x13
    1916:	9c 89       	ldd	r25, Y+20	; 0x14
    1918:	98 8b       	std	Y+16, r25	; 0x10
    191a:	8f 87       	std	Y+15, r24	; 0x0f
    191c:	8f 85       	ldd	r24, Y+15	; 0x0f
    191e:	98 89       	ldd	r25, Y+16	; 0x10
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <HCLCD_Vid8Bits_SendCommand+0x118>
    1924:	98 8b       	std	Y+16, r25	; 0x10
    1926:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	63 e0       	ldi	r22, 0x03	; 3
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e4       	ldi	r27, 0x40	; 64
    193a:	8b 87       	std	Y+11, r24	; 0x0b
    193c:	9c 87       	std	Y+12, r25	; 0x0c
    193e:	ad 87       	std	Y+13, r26	; 0x0d
    1940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	6b 85       	ldd	r22, Y+11	; 0x0b
    1944:	7c 85       	ldd	r23, Y+12	; 0x0c
    1946:	8d 85       	ldd	r24, Y+13	; 0x0d
    1948:	9e 85       	ldd	r25, Y+14	; 0x0e
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a ef       	ldi	r20, 0xFA	; 250
    1950:	54 e4       	ldi	r21, 0x44	; 68
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8f 83       	std	Y+7, r24	; 0x07
    195c:	98 87       	std	Y+8, r25	; 0x08
    195e:	a9 87       	std	Y+9, r26	; 0x09
    1960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1962:	6f 81       	ldd	r22, Y+7	; 0x07
    1964:	78 85       	ldd	r23, Y+8	; 0x08
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    1984:	6f 81       	ldd	r22, Y+7	; 0x07
    1986:	78 85       	ldd	r23, Y+8	; 0x08
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	9a 85       	ldd	r25, Y+10	; 0x0a
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	6b 85       	ldd	r22, Y+11	; 0x0b
    199e:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <HCLCD_Vid8Bits_SendCommand+0x1dc>
    19c6:	88 ec       	ldi	r24, 0xC8	; 200
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <HCLCD_Vid8Bits_SendCommand+0x1ca>
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	9e 81       	ldd	r25, Y+6	; 0x06
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <HCLCD_Vid8Bits_SendCommand+0x1be>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <HCLCD_Vid8Bits_SendCommand+0x206>
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	63 e0       	ldi	r22, 0x03	; 3
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    1a20:	6d 96       	adiw	r28, 0x1d	; 29
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	e8 97       	sbiw	r28, 0x38	; 56
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	6f ef       	ldi	r22, 0xFF	; 255
    1a4a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	63 e0       	ldi	r22, 0x03	; 3
    1a52:	41 e0       	ldi	r20, 0x01	; 1
    1a54:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	63 e0       	ldi	r22, 0x03	; 3
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	63 e0       	ldi	r22, 0x03	; 3
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 ef       	ldi	r26, 0xF0	; 240
    1a72:	b1 e4       	ldi	r27, 0x41	; 65
    1a74:	8d ab       	std	Y+53, r24	; 0x35
    1a76:	9e ab       	std	Y+54, r25	; 0x36
    1a78:	af ab       	std	Y+55, r26	; 0x37
    1a7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a80:	8f a9       	ldd	r24, Y+55	; 0x37
    1a82:	98 ad       	ldd	r25, Y+56	; 0x38
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a ef       	ldi	r20, 0xFA	; 250
    1a8a:	54 e4       	ldi	r21, 0x44	; 68
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	89 ab       	std	Y+49, r24	; 0x31
    1a96:	9a ab       	std	Y+50, r25	; 0x32
    1a98:	ab ab       	std	Y+51, r26	; 0x33
    1a9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	98 ab       	std	Y+48, r25	; 0x30
    1aba:	8f a7       	std	Y+47, r24	; 0x2f
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    1abe:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad8:	7e a9       	ldd	r23, Y+54	; 0x36
    1ada:	8f a9       	ldd	r24, Y+55	; 0x37
    1adc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	98 ab       	std	Y+48, r25	; 0x30
    1afc:	8f a7       	std	Y+47, r24	; 0x2f
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <HCLCD_Vid8Bits_Init+0xec>
    1b00:	88 ec       	ldi	r24, 0xC8	; 200
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9e a7       	std	Y+46, r25	; 0x2e
    1b06:	8d a7       	std	Y+45, r24	; 0x2d
    1b08:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <HCLCD_Vid8Bits_Init+0xda>
    1b10:	9e a7       	std	Y+46, r25	; 0x2e
    1b12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b16:	98 a9       	ldd	r25, Y+48	; 0x30
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	98 ab       	std	Y+48, r25	; 0x30
    1b1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b20:	98 a9       	ldd	r25, Y+48	; 0x30
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <HCLCD_Vid8Bits_Init+0xce>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	98 ab       	std	Y+48, r25	; 0x30
    1b3a:	8f a7       	std	Y+47, r24	; 0x2f
    1b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b40:	9c a7       	std	Y+44, r25	; 0x2c
    1b42:	8b a7       	std	Y+43, r24	; 0x2b
    1b44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b46:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <HCLCD_Vid8Bits_Init+0x116>
    1b4c:	9c a7       	std	Y+44, r25	; 0x2c
    1b4e:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    1b50:	88 e2       	ldi	r24, 0x28	; 40
    1b52:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e8       	ldi	r26, 0x80	; 128
    1b5c:	bf e3       	ldi	r27, 0x3F	; 63
    1b5e:	8f a3       	std	Y+39, r24	; 0x27
    1b60:	98 a7       	std	Y+40, r25	; 0x28
    1b62:	a9 a7       	std	Y+41, r26	; 0x29
    1b64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b66:	6f a1       	ldd	r22, Y+39	; 0x27
    1b68:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4a ef       	ldi	r20, 0xFA	; 250
    1b74:	54 e4       	ldi	r21, 0x44	; 68
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8b a3       	std	Y+35, r24	; 0x23
    1b80:	9c a3       	std	Y+36, r25	; 0x24
    1b82:	ad a3       	std	Y+37, r26	; 0x25
    1b84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b86:	6b a1       	ldd	r22, Y+35	; 0x23
    1b88:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9a a3       	std	Y+34, r25	; 0x22
    1ba4:	89 a3       	std	Y+33, r24	; 0x21
    1ba6:	3f c0       	rjmp	.+126    	; 0x1c26 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    1ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    1baa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bac:	8d a1       	ldd	r24, Y+37	; 0x25
    1bae:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	4c f5       	brge	.+82     	; 0x1c12 <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e2       	ldi	r20, 0x20	; 32
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9a a3       	std	Y+34, r25	; 0x22
    1be6:	89 a3       	std	Y+33, r24	; 0x21
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <HCLCD_Vid8Bits_Init+0x1d6>
    1bea:	88 ec       	ldi	r24, 0xC8	; 200
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	98 a3       	std	Y+32, r25	; 0x20
    1bf0:	8f 8f       	std	Y+31, r24	; 0x1f
    1bf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf4:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <HCLCD_Vid8Bits_Init+0x1c4>
    1bfa:	98 a3       	std	Y+32, r25	; 0x20
    1bfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1c00:	9a a1       	ldd	r25, Y+34	; 0x22
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	9a a3       	std	Y+34, r25	; 0x22
    1c06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c08:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <HCLCD_Vid8Bits_Init+0x1b8>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c12:	6b a1       	ldd	r22, Y+35	; 0x23
    1c14:	7c a1       	ldd	r23, Y+36	; 0x24
    1c16:	8d a1       	ldd	r24, Y+37	; 0x25
    1c18:	9e a1       	ldd	r25, Y+38	; 0x26
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
    1c26:	89 a1       	ldd	r24, Y+33	; 0x21
    1c28:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <HCLCD_Vid8Bits_Init+0x200>
    1c36:	9e 8f       	std	Y+30, r25	; 0x1e
    1c38:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    1c3a:	8f e0       	ldi	r24, 0x0F	; 15
    1c3c:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e8       	ldi	r26, 0x80	; 128
    1c46:	bf e3       	ldi	r27, 0x3F	; 63
    1c48:	89 8f       	std	Y+25, r24	; 0x19
    1c4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c50:	69 8d       	ldd	r22, Y+25	; 0x19
    1c52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a ef       	ldi	r20, 0xFA	; 250
    1c5e:	54 e4       	ldi	r21, 0x44	; 68
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8d 8b       	std	Y+21, r24	; 0x15
    1c6a:	9e 8b       	std	Y+22, r25	; 0x16
    1c6c:	af 8b       	std	Y+23, r26	; 0x17
    1c6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c70:	6d 89       	ldd	r22, Y+21	; 0x15
    1c72:	7e 89       	ldd	r23, Y+22	; 0x16
    1c74:	8f 89       	ldd	r24, Y+23	; 0x17
    1c76:	98 8d       	ldd	r25, Y+24	; 0x18
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	2c f4       	brge	.+10     	; 0x1c92 <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
    1c90:	3f c0       	rjmp	.+126    	; 0x1d10 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    1c92:	6d 89       	ldd	r22, Y+21	; 0x15
    1c94:	7e 89       	ldd	r23, Y+22	; 0x16
    1c96:	8f 89       	ldd	r24, Y+23	; 0x17
    1c98:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	4c f5       	brge	.+82     	; 0x1cfc <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9c 8b       	std	Y+20, r25	; 0x14
    1cd0:	8b 8b       	std	Y+19, r24	; 0x13
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <HCLCD_Vid8Bits_Init+0x2c0>
    1cd4:	88 ec       	ldi	r24, 0xC8	; 200
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9a 8b       	std	Y+18, r25	; 0x12
    1cda:	89 8b       	std	Y+17, r24	; 0x11
    1cdc:	89 89       	ldd	r24, Y+17	; 0x11
    1cde:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <HCLCD_Vid8Bits_Init+0x2ae>
    1ce4:	9a 8b       	std	Y+18, r25	; 0x12
    1ce6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cea:	9c 89       	ldd	r25, Y+20	; 0x14
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9c 8b       	std	Y+20, r25	; 0x14
    1cf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <HCLCD_Vid8Bits_Init+0x2a2>
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
    1d10:	8b 89       	ldd	r24, Y+19	; 0x13
    1d12:	9c 89       	ldd	r25, Y+20	; 0x14
    1d14:	98 8b       	std	Y+16, r25	; 0x10
    1d16:	8f 87       	std	Y+15, r24	; 0x0f
    1d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1a:	98 89       	ldd	r25, Y+16	; 0x10
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <HCLCD_Vid8Bits_Init+0x2ea>
    1d20:	98 8b       	std	Y+16, r25	; 0x10
    1d22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e0       	ldi	r26, 0x00	; 0
    1d30:	b0 e4       	ldi	r27, 0x40	; 64
    1d32:	8b 87       	std	Y+11, r24	; 0x0b
    1d34:	9c 87       	std	Y+12, r25	; 0x0c
    1d36:	ad 87       	std	Y+13, r26	; 0x0d
    1d38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4a ef       	ldi	r20, 0xFA	; 250
    1d48:	54 e4       	ldi	r21, 0x44	; 68
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	8f 83       	std	Y+7, r24	; 0x07
    1d54:	98 87       	std	Y+8, r25	; 0x08
    1d56:	a9 87       	std	Y+9, r26	; 0x09
    1d58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	78 85       	ldd	r23, Y+8	; 0x08
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	3f c0       	rjmp	.+126    	; 0x1dfa <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    1d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7e:	78 85       	ldd	r23, Y+8	; 0x08
    1d80:	89 85       	ldd	r24, Y+9	; 0x09
    1d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	4c f5       	brge	.+82     	; 0x1de6 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e2       	ldi	r20, 0x20	; 32
    1da2:	51 e4       	ldi	r21, 0x41	; 65
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <HCLCD_Vid8Bits_Init+0x3aa>
    1dbe:	88 ec       	ldi	r24, 0xC8	; 200
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9c 83       	std	Y+4, r25	; 0x04
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <HCLCD_Vid8Bits_Init+0x398>
    1dce:	9c 83       	std	Y+4, r25	; 0x04
    1dd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f7       	brne	.-38     	; 0x1dbe <HCLCD_Vid8Bits_Init+0x38c>
    1de4:	14 c0       	rjmp	.+40     	; 0x1e0e <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	6f 81       	ldd	r22, Y+7	; 0x07
    1de8:	78 85       	ldd	r23, Y+8	; 0x08
    1dea:	89 85       	ldd	r24, Y+9	; 0x09
    1dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <HCLCD_Vid8Bits_Init+0x3d4>
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    1e0e:	86 e0       	ldi	r24, 0x06	; 6
    1e10:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
}
    1e14:	e8 96       	adiw	r28, 0x38	; 56
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	6d 97       	sbiw	r28, 0x1d	; 29
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	63 e0       	ldi	r22, 0x03	; 3
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	63 e0       	ldi	r22, 0x03	; 3
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e54:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	63 e0       	ldi	r22, 0x03	; 3
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e4       	ldi	r27, 0x40	; 64
    1e6a:	89 8f       	std	Y+25, r24	; 0x19
    1e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	69 8d       	ldd	r22, Y+25	; 0x19
    1e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	9e 8b       	std	Y+22, r25	; 0x16
    1e8e:	af 8b       	std	Y+23, r26	; 0x17
    1e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
    1efe:	89 89       	ldd	r24, Y+17	; 0x11
    1f00:	9a 89       	ldd	r25, Y+18	; 0x12
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    1f06:	9a 8b       	std	Y+18, r25	; 0x12
    1f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 89       	ldd	r25, Y+16	; 0x10
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    1f42:	98 8b       	std	Y+16, r25	; 0x10
    1f44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	63 e0       	ldi	r22, 0x03	; 3
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e4       	ldi	r27, 0x40	; 64
    1f58:	8b 87       	std	Y+11, r24	; 0x0b
    1f5a:	9c 87       	std	Y+12, r25	; 0x0c
    1f5c:	ad 87       	std	Y+13, r26	; 0x0d
    1f5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a ef       	ldi	r20, 0xFA	; 250
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8f 83       	std	Y+7, r24	; 0x07
    1f7a:	98 87       	std	Y+8, r25	; 0x08
    1f7c:	a9 87       	std	Y+9, r26	; 0x09
    1f7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f80:	6f 81       	ldd	r22, Y+7	; 0x07
    1f82:	78 85       	ldd	r23, Y+8	; 0x08
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e8       	ldi	r20, 0x80	; 128
    1f8e:	5f e3       	ldi	r21, 0x3F	; 63
    1f90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f94:	88 23       	and	r24, r24
    1f96:	2c f4       	brge	.+10     	; 0x1fa2 <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	3f c0       	rjmp	.+126    	; 0x2020 <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    1fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa4:	78 85       	ldd	r23, Y+8	; 0x08
    1fa6:	89 85       	ldd	r24, Y+9	; 0x09
    1fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	4c f5       	brge	.+82     	; 0x200c <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e2       	ldi	r20, 0x20	; 32
    1fc8:	51 e4       	ldi	r21, 0x41	; 65
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    1fe4:	88 ec       	ldi	r24, 0xC8	; 200
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 83       	std	Y+4, r25	; 0x04
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	9e 81       	ldd	r25, Y+6	; 0x06
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	69 f7       	brne	.-38     	; 0x1fe4 <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    200a:	14 c0       	rjmp	.+40     	; 0x2034 <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	89 85       	ldd	r24, Y+9	; 0x09
    2012:	9a 85       	ldd	r25, Y+10	; 0x0a
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	63 e0       	ldi	r22, 0x03	; 3
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    203e:	6d 96       	adiw	r28, 0x1d	; 29
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	00 d0       	rcall	.+0      	; 0x2056 <HCLCD_Vid8Bits_DisplayString+0x6>
    2056:	0f 92       	push	r0
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	9b 83       	std	Y+3, r25	; 0x03
    205e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2060:	19 82       	std	Y+1, r1	; 0x01
    2062:	0e c0       	rjmp	.+28     	; 0x2080 <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	fc 01       	movw	r30, r24
    2070:	e2 0f       	add	r30, r18
    2072:	f3 1f       	adc	r31, r19
    2074:	80 81       	ld	r24, Z
    2076:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	9b 81       	ldd	r25, Y+3	; 0x03
    208a:	fc 01       	movw	r30, r24
    208c:	e2 0f       	add	r30, r18
    208e:	f3 1f       	adc	r31, r19
    2090:	80 81       	ld	r24, Z
    2092:	88 23       	and	r24, r24
    2094:	39 f7       	brne	.-50     	; 0x2064 <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	60 97       	sbiw	r28, 0x10	; 16
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	6d 87       	std	Y+13, r22	; 0x0d
    20bc:	7e 87       	std	Y+14, r23	; 0x0e
    20be:	8f 87       	std	Y+15, r24	; 0x0f
    20c0:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    20c2:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	af 85       	ldd	r26, Y+15	; 0x0f
    20ca:	b8 89       	ldd	r27, Y+16	; 0x10
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	a1 05       	cpc	r26, r1
    20d0:	b1 05       	cpc	r27, r1
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    20d4:	4f c0       	rjmp	.+158    	; 0x2174 <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    20d6:	2d c0       	rjmp	.+90     	; 0x2132 <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	08 2f       	mov	r16, r24
    20dc:	10 e0       	ldi	r17, 0x00	; 0
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e2:	af 85       	ldd	r26, Y+15	; 0x0f
    20e4:	b8 89       	ldd	r27, Y+16	; 0x10
    20e6:	2a e0       	ldi	r18, 0x0A	; 10
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 a6 32 	call	0x654c	; 0x654c <__udivmodsi4>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	28 2f       	mov	r18, r24
    20fc:	ce 01       	movw	r24, r28
    20fe:	03 96       	adiw	r24, 0x03	; 3
    2100:	fc 01       	movw	r30, r24
    2102:	e0 0f       	add	r30, r16
    2104:	f1 1f       	adc	r31, r17
    2106:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	af 85       	ldd	r26, Y+15	; 0x0f
    210e:	b8 89       	ldd	r27, Y+16	; 0x10
    2110:	2a e0       	ldi	r18, 0x0A	; 10
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 a6 32 	call	0x654c	; 0x654c <__udivmodsi4>
    2120:	da 01       	movw	r26, r20
    2122:	c9 01       	movw	r24, r18
    2124:	8d 87       	std	Y+13, r24	; 0x0d
    2126:	9e 87       	std	Y+14, r25	; 0x0e
    2128:	af 87       	std	Y+15, r26	; 0x0f
    212a:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	8f 5f       	subi	r24, 0xFF	; 255
    2130:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2132:	8d 85       	ldd	r24, Y+13	; 0x0d
    2134:	9e 85       	ldd	r25, Y+14	; 0x0e
    2136:	af 85       	ldd	r26, Y+15	; 0x0f
    2138:	b8 89       	ldd	r27, Y+16	; 0x10
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	a1 05       	cpc	r26, r1
    213e:	b1 05       	cpc	r27, r1
    2140:	59 f6       	brne	.-106    	; 0x20d8 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	81 50       	subi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	11 c0       	rjmp	.+34     	; 0x216c <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	28 2f       	mov	r18, r24
    214e:	33 27       	eor	r19, r19
    2150:	27 fd       	sbrc	r18, 7
    2152:	30 95       	com	r19
    2154:	ce 01       	movw	r24, r28
    2156:	03 96       	adiw	r24, 0x03	; 3
    2158:	fc 01       	movw	r30, r24
    215a:	e2 0f       	add	r30, r18
    215c:	f3 1f       	adc	r31, r19
    215e:	80 81       	ld	r24, Z
    2160:	80 5d       	subi	r24, 0xD0	; 208
    2162:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	81 50       	subi	r24, 0x01	; 1
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	88 23       	and	r24, r24
    2170:	64 f7       	brge	.-40     	; 0x214a <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2172:	03 c0       	rjmp	.+6      	; 0x217a <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2174:	80 e3       	ldi	r24, 0x30	; 48
    2176:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    217a:	60 96       	adiw	r28, 0x10	; 16
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <HCLCD_Vid8Bits_SetPosition+0x6>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	41 f4       	brne	.+16     	; 0x21b4 <HCLCD_Vid8Bits_SetPosition+0x24>
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	80 31       	cpi	r24, 0x10	; 16
    21a8:	28 f4       	brcc	.+10     	; 0x21b4 <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	80 58       	subi	r24, 0x80	; 128
    21ae:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    21b2:	0a c0       	rjmp	.+20     	; 0x21c8 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	82 30       	cpi	r24, 0x02	; 2
    21b8:	39 f4       	brne	.+14     	; 0x21c8 <HCLCD_Vid8Bits_SetPosition+0x38>
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	80 31       	cpi	r24, 0x10	; 16
    21be:	20 f4       	brcc	.+8      	; 0x21c8 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	80 54       	subi	r24, 0x40	; 64
    21c4:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    21d8:	00 d0       	rcall	.+0      	; 0x21da <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	8a 83       	std	Y+2, r24	; 0x02
    21e0:	7c 83       	std	Y+4, r23	; 0x04
    21e2:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	88 30       	cpi	r24, 0x08	; 8
    21e8:	f8 f4       	brcc	.+62     	; 0x2228 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	08 96       	adiw	r24, 0x08	; 8
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	0e c0       	rjmp	.+28     	; 0x2222 <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	fc 01       	movw	r30, r24
    2212:	e2 0f       	add	r30, r18
    2214:	f3 1f       	adc	r31, r19
    2216:	80 81       	ld	r24, Z
    2218:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	88 30       	cpi	r24, 0x08	; 8
    2226:	78 f3       	brcs	.-34     	; 0x2206 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	2e 97       	sbiw	r28, 0x0e	; 14
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a0 e0       	ldi	r26, 0x00	; 0
    2256:	b0 e4       	ldi	r27, 0x40	; 64
    2258:	8b 87       	std	Y+11, r24	; 0x0b
    225a:	9c 87       	std	Y+12, r25	; 0x0c
    225c:	ad 87       	std	Y+13, r26	; 0x0d
    225e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2260:	6b 85       	ldd	r22, Y+11	; 0x0b
    2262:	7c 85       	ldd	r23, Y+12	; 0x0c
    2264:	8d 85       	ldd	r24, Y+13	; 0x0d
    2266:	9e 85       	ldd	r25, Y+14	; 0x0e
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a ef       	ldi	r20, 0xFA	; 250
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8f 83       	std	Y+7, r24	; 0x07
    227a:	98 87       	std	Y+8, r25	; 0x08
    227c:	a9 87       	std	Y+9, r26	; 0x09
    227e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	2c f4       	brge	.+10     	; 0x22a2 <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	3f c0       	rjmp	.+126    	; 0x2320 <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	4c f5       	brge	.+82     	; 0x230c <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    22bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22be:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e2       	ldi	r20, 0x20	; 32
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	0f c0       	rjmp	.+30     	; 0x2302 <HCLCD_Vid8Bits_ClearScreen+0xcc>
    22e4:	88 ec       	ldi	r24, 0xC8	; 200
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <HCLCD_Vid8Bits_ClearScreen+0xba>
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f8:	8d 81       	ldd	r24, Y+5	; 0x05
    22fa:	9e 81       	ldd	r25, Y+6	; 0x06
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	9e 83       	std	Y+6, r25	; 0x06
    2300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	69 f7       	brne	.-38     	; 0x22e4 <HCLCD_Vid8Bits_ClearScreen+0xae>
    230a:	14 c0       	rjmp	.+40     	; 0x2334 <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	9a 83       	std	Y+2, r25	; 0x02
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <HCLCD_Vid8Bits_ClearScreen+0xf6>
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2334:	2e 96       	adiw	r28, 0x0e	; 14
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	60 97       	sbiw	r28, 0x10	; 16
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    235c:	1f 86       	std	Y+15, r1	; 0x0f
    235e:	78 c0       	rjmp	.+240    	; 0x2450 <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2360:	88 e1       	ldi	r24, 0x18	; 24
    2362:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a6 e9       	ldi	r26, 0x96	; 150
    236c:	b3 e4       	ldi	r27, 0x43	; 67
    236e:	8b 87       	std	Y+11, r24	; 0x0b
    2370:	9c 87       	std	Y+12, r25	; 0x0c
    2372:	ad 87       	std	Y+13, r26	; 0x0d
    2374:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2376:	6b 85       	ldd	r22, Y+11	; 0x0b
    2378:	7c 85       	ldd	r23, Y+12	; 0x0c
    237a:	8d 85       	ldd	r24, Y+13	; 0x0d
    237c:	9e 85       	ldd	r25, Y+14	; 0x0e
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a ef       	ldi	r20, 0xFA	; 250
    2384:	54 e4       	ldi	r21, 0x44	; 68
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8f 83       	std	Y+7, r24	; 0x07
    2390:	98 87       	std	Y+8, r25	; 0x08
    2392:	a9 87       	std	Y+9, r26	; 0x09
    2394:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2396:	6f 81       	ldd	r22, Y+7	; 0x07
    2398:	78 85       	ldd	r23, Y+8	; 0x08
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e8       	ldi	r20, 0x80	; 128
    23a4:	5f e3       	ldi	r21, 0x3F	; 63
    23a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23aa:	88 23       	and	r24, r24
    23ac:	2c f4       	brge	.+10     	; 0x23b8 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	3f c0       	rjmp	.+126    	; 0x2436 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	3f ef       	ldi	r19, 0xFF	; 255
    23c4:	4f e7       	ldi	r20, 0x7F	; 127
    23c6:	57 e4       	ldi	r21, 0x47	; 71
    23c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23cc:	18 16       	cp	r1, r24
    23ce:	4c f5       	brge	.+82     	; 0x2422 <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	51 e4       	ldi	r21, 0x41	; 65
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
    23f8:	0f c0       	rjmp	.+30     	; 0x2418 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    23fa:	88 ec       	ldi	r24, 0xC8	; 200
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9c 83       	std	Y+4, r25	; 0x04
    2400:	8b 83       	std	Y+3, r24	; 0x03
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    240a:	9c 83       	std	Y+4, r25	; 0x04
    240c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	69 f7       	brne	.-38     	; 0x23fa <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    2420:	14 c0       	rjmp	.+40     	; 0x244a <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    244a:	8f 85       	ldd	r24, Y+15	; 0x0f
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	8f 87       	std	Y+15, r24	; 0x0f
    2450:	9f 85       	ldd	r25, Y+15	; 0x0f
    2452:	88 89       	ldd	r24, Y+16	; 0x10
    2454:	98 17       	cp	r25, r24
    2456:	08 f4       	brcc	.+2      	; 0x245a <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    2458:	83 cf       	rjmp	.-250    	; 0x2360 <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    245a:	60 96       	adiw	r28, 0x10	; 16
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	60 97       	sbiw	r28, 0x10	; 16
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2482:	1f 86       	std	Y+15, r1	; 0x0f
    2484:	78 c0       	rjmp	.+240    	; 0x2576 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    2486:	8c e1       	ldi	r24, 0x1C	; 28
    2488:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a6 e9       	ldi	r26, 0x96	; 150
    2492:	b3 e4       	ldi	r27, 0x43	; 67
    2494:	8b 87       	std	Y+11, r24	; 0x0b
    2496:	9c 87       	std	Y+12, r25	; 0x0c
    2498:	ad 87       	std	Y+13, r26	; 0x0d
    249a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249c:	6b 85       	ldd	r22, Y+11	; 0x0b
    249e:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a ef       	ldi	r20, 0xFA	; 250
    24aa:	54 e4       	ldi	r21, 0x44	; 68
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	8f 83       	std	Y+7, r24	; 0x07
    24b6:	98 87       	std	Y+8, r25	; 0x08
    24b8:	a9 87       	std	Y+9, r26	; 0x09
    24ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	2c f4       	brge	.+10     	; 0x24de <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	8d 83       	std	Y+5, r24	; 0x05
    24dc:	3f c0       	rjmp	.+126    	; 0x255c <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    24de:	6f 81       	ldd	r22, Y+7	; 0x07
    24e0:	78 85       	ldd	r23, Y+8	; 0x08
    24e2:	89 85       	ldd	r24, Y+9	; 0x09
    24e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	57 e4       	ldi	r21, 0x47	; 71
    24ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	4c f5       	brge	.+82     	; 0x2548 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e2       	ldi	r20, 0x20	; 32
    2504:	51 e4       	ldi	r21, 0x41	; 65
    2506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	0f c0       	rjmp	.+30     	; 0x253e <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    2520:	88 ec       	ldi	r24, 0xC8	; 200
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9c 83       	std	Y+4, r25	; 0x04
    2526:	8b 83       	std	Y+3, r24	; 0x03
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	9c 81       	ldd	r25, Y+4	; 0x04
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    2530:	9c 83       	std	Y+4, r25	; 0x04
    2532:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2534:	8d 81       	ldd	r24, Y+5	; 0x05
    2536:	9e 81       	ldd	r25, Y+6	; 0x06
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	69 f7       	brne	.-38     	; 0x2520 <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2570:	8f 85       	ldd	r24, Y+15	; 0x0f
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	8f 87       	std	Y+15, r24	; 0x0f
    2576:	9f 85       	ldd	r25, Y+15	; 0x0f
    2578:	88 89       	ldd	r24, Y+16	; 0x10
    257a:	98 17       	cp	r25, r24
    257c:	08 f4       	brcc	.+2      	; 0x2580 <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    257e:	83 cf       	rjmp	.-250    	; 0x2486 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    2580:	60 96       	adiw	r28, 0x10	; 16
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	60 97       	sbiw	r28, 0x10	; 16
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    25a8:	1f 86       	std	Y+15, r1	; 0x0f
    25aa:	78 c0       	rjmp	.+240    	; 0x269c <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    25ac:	80 e1       	ldi	r24, 0x10	; 16
    25ae:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a6 e9       	ldi	r26, 0x96	; 150
    25b8:	b3 e4       	ldi	r27, 0x43	; 67
    25ba:	8b 87       	std	Y+11, r24	; 0x0b
    25bc:	9c 87       	std	Y+12, r25	; 0x0c
    25be:	ad 87       	std	Y+13, r26	; 0x0d
    25c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4a ef       	ldi	r20, 0xFA	; 250
    25d0:	54 e4       	ldi	r21, 0x44	; 68
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8f 83       	std	Y+7, r24	; 0x07
    25dc:	98 87       	std	Y+8, r25	; 0x08
    25de:	a9 87       	std	Y+9, r26	; 0x09
    25e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e2:	6f 81       	ldd	r22, Y+7	; 0x07
    25e4:	78 85       	ldd	r23, Y+8	; 0x08
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	2c f4       	brge	.+10     	; 0x2604 <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
    2602:	3f c0       	rjmp	.+126    	; 0x2682 <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	57 e4       	ldi	r21, 0x47	; 71
    2614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	4c f5       	brge	.+82     	; 0x266e <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	6b 85       	ldd	r22, Y+11	; 0x0b
    261e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2620:	8d 85       	ldd	r24, Y+13	; 0x0d
    2622:	9e 85       	ldd	r25, Y+14	; 0x0e
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    2646:	88 ec       	ldi	r24, 0xC8	; 200
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    2656:	9c 83       	std	Y+4, r25	; 0x04
    2658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	69 f7       	brne	.-38     	; 0x2646 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    266c:	14 c0       	rjmp	.+40     	; 0x2696 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266e:	6f 81       	ldd	r22, Y+7	; 0x07
    2670:	78 85       	ldd	r23, Y+8	; 0x08
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	9a 85       	ldd	r25, Y+10	; 0x0a
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2696:	8f 85       	ldd	r24, Y+15	; 0x0f
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	8f 87       	std	Y+15, r24	; 0x0f
    269c:	9f 85       	ldd	r25, Y+15	; 0x0f
    269e:	88 89       	ldd	r24, Y+16	; 0x10
    26a0:	98 17       	cp	r25, r24
    26a2:	08 f4       	brcc	.+2      	; 0x26a6 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    26a4:	83 cf       	rjmp	.-250    	; 0x25ac <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    26a6:	60 96       	adiw	r28, 0x10	; 16
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	60 97       	sbiw	r28, 0x10	; 16
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    26ce:	1f 86       	std	Y+15, r1	; 0x0f
    26d0:	78 c0       	rjmp	.+240    	; 0x27c2 <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    26d2:	84 e1       	ldi	r24, 0x14	; 20
    26d4:	0e 94 04 0c 	call	0x1808	; 0x1808 <HCLCD_Vid8Bits_SendCommand>
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a6 e9       	ldi	r26, 0x96	; 150
    26de:	b3 e4       	ldi	r27, 0x43	; 67
    26e0:	8b 87       	std	Y+11, r24	; 0x0b
    26e2:	9c 87       	std	Y+12, r25	; 0x0c
    26e4:	ad 87       	std	Y+13, r26	; 0x0d
    26e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a ef       	ldi	r20, 0xFA	; 250
    26f6:	54 e4       	ldi	r21, 0x44	; 68
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	8f 83       	std	Y+7, r24	; 0x07
    2702:	98 87       	std	Y+8, r25	; 0x08
    2704:	a9 87       	std	Y+9, r26	; 0x09
    2706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	78 85       	ldd	r23, Y+8	; 0x08
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e8       	ldi	r20, 0x80	; 128
    2716:	5f e3       	ldi	r21, 0x3F	; 63
    2718:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271c:	88 23       	and	r24, r24
    271e:	2c f4       	brge	.+10     	; 0x272a <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	3f c0       	rjmp	.+126    	; 0x27a8 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	3f ef       	ldi	r19, 0xFF	; 255
    2736:	4f e7       	ldi	r20, 0x7F	; 127
    2738:	57 e4       	ldi	r21, 0x47	; 71
    273a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273e:	18 16       	cp	r1, r24
    2740:	4c f5       	brge	.+82     	; 0x2794 <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2742:	6b 85       	ldd	r22, Y+11	; 0x0b
    2744:	7c 85       	ldd	r23, Y+12	; 0x0c
    2746:	8d 85       	ldd	r24, Y+13	; 0x0d
    2748:	9e 85       	ldd	r25, Y+14	; 0x0e
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e2       	ldi	r20, 0x20	; 32
    2750:	51 e4       	ldi	r21, 0x41	; 65
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
    276a:	0f c0       	rjmp	.+30     	; 0x278a <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    276c:	88 ec       	ldi	r24, 0xC8	; 200
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	9c 83       	std	Y+4, r25	; 0x04
    2772:	8b 83       	std	Y+3, r24	; 0x03
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	9c 81       	ldd	r25, Y+4	; 0x04
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	69 f7       	brne	.-38     	; 0x276c <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    2792:	14 c0       	rjmp	.+40     	; 0x27bc <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2794:	6f 81       	ldd	r22, Y+7	; 0x07
    2796:	78 85       	ldd	r23, Y+8	; 0x08
    2798:	89 85       	ldd	r24, Y+9	; 0x09
    279a:	9a 85       	ldd	r25, Y+10	; 0x0a
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    27bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27be:	8f 5f       	subi	r24, 0xFF	; 255
    27c0:	8f 87       	std	Y+15, r24	; 0x0f
    27c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    27c4:	88 89       	ldd	r24, Y+16	; 0x10
    27c6:	98 17       	cp	r25, r24
    27c8:	08 f4       	brcc	.+2      	; 0x27cc <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    27ca:	83 cf       	rjmp	.-250    	; 0x26d2 <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    27cc:	60 96       	adiw	r28, 0x10	; 16
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	2f 97       	sbiw	r28, 0x0f	; 15
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	63 e0       	ldi	r22, 0x03	; 3
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	63 e0       	ldi	r22, 0x03	; 3
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    2808:	84 e0       	ldi	r24, 0x04	; 4
    280a:	63 e0       	ldi	r22, 0x03	; 3
    280c:	4f 85       	ldd	r20, Y+15	; 0x0f
    280e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	63 e0       	ldi	r22, 0x03	; 3
    2816:	41 e0       	ldi	r20, 0x01	; 1
    2818:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a0 e0       	ldi	r26, 0x00	; 0
    2822:	b0 e4       	ldi	r27, 0x40	; 64
    2824:	8b 87       	std	Y+11, r24	; 0x0b
    2826:	9c 87       	std	Y+12, r25	; 0x0c
    2828:	ad 87       	std	Y+13, r26	; 0x0d
    282a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	6b 85       	ldd	r22, Y+11	; 0x0b
    282e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2830:	8d 85       	ldd	r24, Y+13	; 0x0d
    2832:	9e 85       	ldd	r25, Y+14	; 0x0e
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8f 83       	std	Y+7, r24	; 0x07
    2846:	98 87       	std	Y+8, r25	; 0x08
    2848:	a9 87       	std	Y+9, r26	; 0x09
    284a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <HCLCD_Vid4Bits_SendCommand+0xf0>
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <HCLCD_Vid4Bits_SendCommand+0xde>
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <HCLCD_Vid4Bits_SendCommand+0xd2>
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <HCLCD_Vid4Bits_SendCommand+0x11a>
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	63 e0       	ldi	r22, 0x03	; 3
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    290a:	2f 96       	adiw	r28, 0x0f	; 15
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	e9 97       	sbiw	r28, 0x39	; 57
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    2930:	87 e0       	ldi	r24, 0x07	; 7
    2932:	89 af       	std	Y+57, r24	; 0x39
    2934:	08 c0       	rjmp	.+16     	; 0x2946 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    2936:	89 ad       	ldd	r24, Y+57	; 0x39
    2938:	63 e0       	ldi	r22, 0x03	; 3
    293a:	41 e0       	ldi	r20, 0x01	; 1
    293c:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    2940:	89 ad       	ldd	r24, Y+57	; 0x39
    2942:	81 50       	subi	r24, 0x01	; 1
    2944:	89 af       	std	Y+57, r24	; 0x39
    2946:	89 ad       	ldd	r24, Y+57	; 0x39
    2948:	84 30       	cpi	r24, 0x04	; 4
    294a:	ac f7       	brge	.-22     	; 0x2936 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	63 e0       	ldi	r22, 0x03	; 3
    2950:	41 e0       	ldi	r20, 0x01	; 1
    2952:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	63 e0       	ldi	r22, 0x03	; 3
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2960:	82 e0       	ldi	r24, 0x02	; 2
    2962:	63 e0       	ldi	r22, 0x03	; 3
    2964:	41 e0       	ldi	r20, 0x01	; 1
    2966:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	a0 ef       	ldi	r26, 0xF0	; 240
    2970:	b1 e4       	ldi	r27, 0x41	; 65
    2972:	8d ab       	std	Y+53, r24	; 0x35
    2974:	9e ab       	std	Y+54, r25	; 0x36
    2976:	af ab       	std	Y+55, r26	; 0x37
    2978:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297a:	6d a9       	ldd	r22, Y+53	; 0x35
    297c:	7e a9       	ldd	r23, Y+54	; 0x36
    297e:	8f a9       	ldd	r24, Y+55	; 0x37
    2980:	98 ad       	ldd	r25, Y+56	; 0x38
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	4a ef       	ldi	r20, 0xFA	; 250
    2988:	54 e4       	ldi	r21, 0x44	; 68
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	89 ab       	std	Y+49, r24	; 0x31
    2994:	9a ab       	std	Y+50, r25	; 0x32
    2996:	ab ab       	std	Y+51, r26	; 0x33
    2998:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    299a:	69 a9       	ldd	r22, Y+49	; 0x31
    299c:	7a a9       	ldd	r23, Y+50	; 0x32
    299e:	8b a9       	ldd	r24, Y+51	; 0x33
    29a0:	9c a9       	ldd	r25, Y+52	; 0x34
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e8       	ldi	r20, 0x80	; 128
    29a8:	5f e3       	ldi	r21, 0x3F	; 63
    29aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ae:	88 23       	and	r24, r24
    29b0:	2c f4       	brge	.+10     	; 0x29bc <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	98 ab       	std	Y+48, r25	; 0x30
    29b8:	8f a7       	std	Y+47, r24	; 0x2f
    29ba:	3f c0       	rjmp	.+126    	; 0x2a3a <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    29bc:	69 a9       	ldd	r22, Y+49	; 0x31
    29be:	7a a9       	ldd	r23, Y+50	; 0x32
    29c0:	8b a9       	ldd	r24, Y+51	; 0x33
    29c2:	9c a9       	ldd	r25, Y+52	; 0x34
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	3f ef       	ldi	r19, 0xFF	; 255
    29c8:	4f e7       	ldi	r20, 0x7F	; 127
    29ca:	57 e4       	ldi	r21, 0x47	; 71
    29cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	4c f5       	brge	.+82     	; 0x2a26 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d4:	6d a9       	ldd	r22, Y+53	; 0x35
    29d6:	7e a9       	ldd	r23, Y+54	; 0x36
    29d8:	8f a9       	ldd	r24, Y+55	; 0x37
    29da:	98 ad       	ldd	r25, Y+56	; 0x38
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e2       	ldi	r20, 0x20	; 32
    29e2:	51 e4       	ldi	r21, 0x41	; 65
    29e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	98 ab       	std	Y+48, r25	; 0x30
    29fa:	8f a7       	std	Y+47, r24	; 0x2f
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <HCLCD_Vid4Bits_Init+0x100>
    29fe:	88 ec       	ldi	r24, 0xC8	; 200
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	9e a7       	std	Y+46, r25	; 0x2e
    2a04:	8d a7       	std	Y+45, r24	; 0x2d
    2a06:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a08:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <HCLCD_Vid4Bits_Init+0xee>
    2a0e:	9e a7       	std	Y+46, r25	; 0x2e
    2a10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a14:	98 a9       	ldd	r25, Y+48	; 0x30
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	98 ab       	std	Y+48, r25	; 0x30
    2a1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	69 f7       	brne	.-38     	; 0x29fe <HCLCD_Vid4Bits_Init+0xe2>
    2a24:	14 c0       	rjmp	.+40     	; 0x2a4e <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a26:	69 a9       	ldd	r22, Y+49	; 0x31
    2a28:	7a a9       	ldd	r23, Y+50	; 0x32
    2a2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	98 ab       	std	Y+48, r25	; 0x30
    2a38:	8f a7       	std	Y+47, r24	; 0x2f
    2a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a3e:	9c a7       	std	Y+44, r25	; 0x2c
    2a40:	8b a7       	std	Y+43, r24	; 0x2b
    2a42:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a44:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <HCLCD_Vid4Bits_Init+0x12a>
    2a4a:	9c a7       	std	Y+44, r25	; 0x2c
    2a4c:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    2a5a:	88 e2       	ldi	r24, 0x28	; 40
    2a5c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	a0 e8       	ldi	r26, 0x80	; 128
    2a66:	bf e3       	ldi	r27, 0x3F	; 63
    2a68:	8f a3       	std	Y+39, r24	; 0x27
    2a6a:	98 a7       	std	Y+40, r25	; 0x28
    2a6c:	a9 a7       	std	Y+41, r26	; 0x29
    2a6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a70:	6f a1       	ldd	r22, Y+39	; 0x27
    2a72:	78 a5       	ldd	r23, Y+40	; 0x28
    2a74:	89 a5       	ldd	r24, Y+41	; 0x29
    2a76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	4a ef       	ldi	r20, 0xFA	; 250
    2a7e:	54 e4       	ldi	r21, 0x44	; 68
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	8b a3       	std	Y+35, r24	; 0x23
    2a8a:	9c a3       	std	Y+36, r25	; 0x24
    2a8c:	ad a3       	std	Y+37, r26	; 0x25
    2a8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a90:	6b a1       	ldd	r22, Y+35	; 0x23
    2a92:	7c a1       	ldd	r23, Y+36	; 0x24
    2a94:	8d a1       	ldd	r24, Y+37	; 0x25
    2a96:	9e a1       	ldd	r25, Y+38	; 0x26
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e8       	ldi	r20, 0x80	; 128
    2a9e:	5f e3       	ldi	r21, 0x3F	; 63
    2aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa4:	88 23       	and	r24, r24
    2aa6:	2c f4       	brge	.+10     	; 0x2ab2 <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	9a a3       	std	Y+34, r25	; 0x22
    2aae:	89 a3       	std	Y+33, r24	; 0x21
    2ab0:	3f c0       	rjmp	.+126    	; 0x2b30 <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    2ab2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	3f ef       	ldi	r19, 0xFF	; 255
    2abe:	4f e7       	ldi	r20, 0x7F	; 127
    2ac0:	57 e4       	ldi	r21, 0x47	; 71
    2ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac6:	18 16       	cp	r1, r24
    2ac8:	4c f5       	brge	.+82     	; 0x2b1c <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aca:	6f a1       	ldd	r22, Y+39	; 0x27
    2acc:	78 a5       	ldd	r23, Y+40	; 0x28
    2ace:	89 a5       	ldd	r24, Y+41	; 0x29
    2ad0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e2       	ldi	r20, 0x20	; 32
    2ad8:	51 e4       	ldi	r21, 0x41	; 65
    2ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	9a a3       	std	Y+34, r25	; 0x22
    2af0:	89 a3       	std	Y+33, r24	; 0x21
    2af2:	0f c0       	rjmp	.+30     	; 0x2b12 <HCLCD_Vid4Bits_Init+0x1f6>
    2af4:	88 ec       	ldi	r24, 0xC8	; 200
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	98 a3       	std	Y+32, r25	; 0x20
    2afa:	8f 8f       	std	Y+31, r24	; 0x1f
    2afc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2afe:	98 a1       	ldd	r25, Y+32	; 0x20
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <HCLCD_Vid4Bits_Init+0x1e4>
    2b04:	98 a3       	std	Y+32, r25	; 0x20
    2b06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b08:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	9a a3       	std	Y+34, r25	; 0x22
    2b10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b12:	89 a1       	ldd	r24, Y+33	; 0x21
    2b14:	9a a1       	ldd	r25, Y+34	; 0x22
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	69 f7       	brne	.-38     	; 0x2af4 <HCLCD_Vid4Bits_Init+0x1d8>
    2b1a:	14 c0       	rjmp	.+40     	; 0x2b44 <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b20:	8d a1       	ldd	r24, Y+37	; 0x25
    2b22:	9e a1       	ldd	r25, Y+38	; 0x26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9a a3       	std	Y+34, r25	; 0x22
    2b2e:	89 a3       	std	Y+33, r24	; 0x21
    2b30:	89 a1       	ldd	r24, Y+33	; 0x21
    2b32:	9a a1       	ldd	r25, Y+34	; 0x22
    2b34:	9e 8f       	std	Y+30, r25	; 0x1e
    2b36:	8d 8f       	std	Y+29, r24	; 0x1d
    2b38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <HCLCD_Vid4Bits_Init+0x220>
    2b40:	9e 8f       	std	Y+30, r25	; 0x1e
    2b42:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    2b4a:	8f e0       	ldi	r24, 0x0F	; 15
    2b4c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e8       	ldi	r26, 0x80	; 128
    2b56:	bf e3       	ldi	r27, 0x3F	; 63
    2b58:	89 8f       	std	Y+25, r24	; 0x19
    2b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	69 8d       	ldd	r22, Y+25	; 0x19
    2b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4a ef       	ldi	r20, 0xFA	; 250
    2b6e:	54 e4       	ldi	r21, 0x44	; 68
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8d 8b       	std	Y+21, r24	; 0x15
    2b7a:	9e 8b       	std	Y+22, r25	; 0x16
    2b7c:	af 8b       	std	Y+23, r26	; 0x17
    2b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b80:	6d 89       	ldd	r22, Y+21	; 0x15
    2b82:	7e 89       	ldd	r23, Y+22	; 0x16
    2b84:	8f 89       	ldd	r24, Y+23	; 0x17
    2b86:	98 8d       	ldd	r25, Y+24	; 0x18
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9c 8b       	std	Y+20, r25	; 0x14
    2b9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ba0:	3f c0       	rjmp	.+126    	; 0x2c20 <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    2ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	4c f5       	brge	.+82     	; 0x2c0c <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	69 8d       	ldd	r22, Y+25	; 0x19
    2bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e2       	ldi	r20, 0x20	; 32
    2bc8:	51 e4       	ldi	r21, 0x41	; 65
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9c 8b       	std	Y+20, r25	; 0x14
    2be0:	8b 8b       	std	Y+19, r24	; 0x13
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <HCLCD_Vid4Bits_Init+0x2e6>
    2be4:	88 ec       	ldi	r24, 0xC8	; 200
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	9a 8b       	std	Y+18, r25	; 0x12
    2bea:	89 8b       	std	Y+17, r24	; 0x11
    2bec:	89 89       	ldd	r24, Y+17	; 0x11
    2bee:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <HCLCD_Vid4Bits_Init+0x2d4>
    2bf4:	9a 8b       	std	Y+18, r25	; 0x12
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9c 8b       	std	Y+20, r25	; 0x14
    2c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <HCLCD_Vid4Bits_Init+0x2c8>
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c10:	8f 89       	ldd	r24, Y+23	; 0x17
    2c12:	98 8d       	ldd	r25, Y+24	; 0x18
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
    2c1e:	8b 8b       	std	Y+19, r24	; 0x13
    2c20:	8b 89       	ldd	r24, Y+19	; 0x13
    2c22:	9c 89       	ldd	r25, Y+20	; 0x14
    2c24:	98 8b       	std	Y+16, r25	; 0x10
    2c26:	8f 87       	std	Y+15, r24	; 0x0f
    2c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2a:	98 89       	ldd	r25, Y+16	; 0x10
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <HCLCD_Vid4Bits_Init+0x310>
    2c30:	98 8b       	std	Y+16, r25	; 0x10
    2c32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e0       	ldi	r26, 0x00	; 0
    2c46:	b0 e4       	ldi	r27, 0x40	; 64
    2c48:	8b 87       	std	Y+11, r24	; 0x0b
    2c4a:	9c 87       	std	Y+12, r25	; 0x0c
    2c4c:	ad 87       	std	Y+13, r26	; 0x0d
    2c4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	4a ef       	ldi	r20, 0xFA	; 250
    2c5e:	54 e4       	ldi	r21, 0x44	; 68
    2c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	8f 83       	std	Y+7, r24	; 0x07
    2c6a:	98 87       	std	Y+8, r25	; 0x08
    2c6c:	a9 87       	std	Y+9, r26	; 0x09
    2c6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c70:	6f 81       	ldd	r22, Y+7	; 0x07
    2c72:	78 85       	ldd	r23, Y+8	; 0x08
    2c74:	89 85       	ldd	r24, Y+9	; 0x09
    2c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c84:	88 23       	and	r24, r24
    2c86:	2c f4       	brge	.+10     	; 0x2c92 <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	3f c0       	rjmp	.+126    	; 0x2d10 <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    2c92:	6f 81       	ldd	r22, Y+7	; 0x07
    2c94:	78 85       	ldd	r23, Y+8	; 0x08
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	3f ef       	ldi	r19, 0xFF	; 255
    2c9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ca0:	57 e4       	ldi	r21, 0x47	; 71
    2ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca6:	18 16       	cp	r1, r24
    2ca8:	4c f5       	brge	.+82     	; 0x2cfc <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	51 e4       	ldi	r21, 0x41	; 65
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
    2cd2:	0f c0       	rjmp	.+30     	; 0x2cf2 <HCLCD_Vid4Bits_Init+0x3d6>
    2cd4:	88 ec       	ldi	r24, 0xC8	; 200
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <HCLCD_Vid4Bits_Init+0x3c4>
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cea:	9e 81       	ldd	r25, Y+6	; 0x06
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	69 f7       	brne	.-38     	; 0x2cd4 <HCLCD_Vid4Bits_Init+0x3b8>
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfe:	78 85       	ldd	r23, Y+8	; 0x08
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	8d 81       	ldd	r24, Y+5	; 0x05
    2d12:	9e 81       	ldd	r25, Y+6	; 0x06
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <HCLCD_Vid4Bits_Init+0x400>
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2d2a:	86 e0       	ldi	r24, 0x06	; 6
    2d2c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
}
    2d30:	e9 96       	adiw	r28, 0x39	; 57
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	2f 97       	sbiw	r28, 0x0f	; 15
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	63 e0       	ldi	r22, 0x03	; 3
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	63 e0       	ldi	r22, 0x03	; 3
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    2d6c:	84 e0       	ldi	r24, 0x04	; 4
    2d6e:	63 e0       	ldi	r22, 0x03	; 3
    2d70:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d72:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	63 e0       	ldi	r22, 0x03	; 3
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	a0 e0       	ldi	r26, 0x00	; 0
    2d86:	b0 e4       	ldi	r27, 0x40	; 64
    2d88:	8b 87       	std	Y+11, r24	; 0x0b
    2d8a:	9c 87       	std	Y+12, r25	; 0x0c
    2d8c:	ad 87       	std	Y+13, r26	; 0x0d
    2d8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	4a ef       	ldi	r20, 0xFA	; 250
    2d9e:	54 e4       	ldi	r21, 0x44	; 68
    2da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	8f 83       	std	Y+7, r24	; 0x07
    2daa:	98 87       	std	Y+8, r25	; 0x08
    2dac:	a9 87       	std	Y+9, r26	; 0x09
    2dae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db0:	6f 81       	ldd	r22, Y+7	; 0x07
    2db2:	78 85       	ldd	r23, Y+8	; 0x08
    2db4:	89 85       	ldd	r24, Y+9	; 0x09
    2db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e8       	ldi	r20, 0x80	; 128
    2dbe:	5f e3       	ldi	r21, 0x3F	; 63
    2dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc4:	88 23       	and	r24, r24
    2dc6:	2c f4       	brge	.+10     	; 0x2dd2 <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	9e 83       	std	Y+6, r25	; 0x06
    2dce:	8d 83       	std	Y+5, r24	; 0x05
    2dd0:	3f c0       	rjmp	.+126    	; 0x2e50 <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    2dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd4:	78 85       	ldd	r23, Y+8	; 0x08
    2dd6:	89 85       	ldd	r24, Y+9	; 0x09
    2dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	3f ef       	ldi	r19, 0xFF	; 255
    2dde:	4f e7       	ldi	r20, 0x7F	; 127
    2de0:	57 e4       	ldi	r21, 0x47	; 71
    2de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de6:	18 16       	cp	r1, r24
    2de8:	4c f5       	brge	.+82     	; 0x2e3c <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e2       	ldi	r20, 0x20	; 32
    2df8:	51 e4       	ldi	r21, 0x41	; 65
    2dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	bc 01       	movw	r22, r24
    2e04:	cd 01       	movw	r24, r26
    2e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	9e 83       	std	Y+6, r25	; 0x06
    2e10:	8d 83       	std	Y+5, r24	; 0x05
    2e12:	0f c0       	rjmp	.+30     	; 0x2e32 <HCLCD_VidWriteChar_4Bits+0xf0>
    2e14:	88 ec       	ldi	r24, 0xC8	; 200
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	9c 83       	std	Y+4, r25	; 0x04
    2e1a:	8b 83       	std	Y+3, r24	; 0x03
    2e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <HCLCD_VidWriteChar_4Bits+0xde>
    2e24:	9c 83       	std	Y+4, r25	; 0x04
    2e26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	69 f7       	brne	.-38     	; 0x2e14 <HCLCD_VidWriteChar_4Bits+0xd2>
    2e3a:	14 c0       	rjmp	.+40     	; 0x2e64 <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
    2e50:	8d 81       	ldd	r24, Y+5	; 0x05
    2e52:	9e 81       	ldd	r25, Y+6	; 0x06
    2e54:	9a 83       	std	Y+2, r25	; 0x02
    2e56:	89 83       	std	Y+1, r24	; 0x01
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <HCLCD_VidWriteChar_4Bits+0x11a>
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2e64:	82 e0       	ldi	r24, 0x02	; 2
    2e66:	63 e0       	ldi	r22, 0x03	; 3
    2e68:	40 e0       	ldi	r20, 0x00	; 0
    2e6a:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    2e6e:	2f 96       	adiw	r28, 0x0f	; 15
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	0f 92       	push	r0
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	82 95       	swap	r24
    2e90:	8f 70       	andi	r24, 0x0F	; 15
    2e92:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <HCLCD_VidWriteChar_4Bits>
}
    2e9c:	0f 90       	pop	r0
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	08 95       	ret

00002ea4 <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	00 d0       	rcall	.+0      	; 0x2eaa <HCLCD_Vid4Bits_DisplayString+0x6>
    2eaa:	0f 92       	push	r0
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	9b 83       	std	Y+3, r25	; 0x03
    2eb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2eb4:	19 82       	std	Y+1, r1	; 0x01
    2eb6:	0e c0       	rjmp	.+28     	; 0x2ed4 <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	e2 0f       	add	r30, r18
    2ec6:	f3 1f       	adc	r31, r19
    2ec8:	80 81       	ld	r24, Z
    2eca:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	8f 5f       	subi	r24, 0xFF	; 255
    2ed2:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	fc 01       	movw	r30, r24
    2ee0:	e2 0f       	add	r30, r18
    2ee2:	f3 1f       	adc	r31, r19
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 23       	and	r24, r24
    2ee8:	39 f7       	brne	.-50     	; 0x2eb8 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	60 97       	sbiw	r28, 0x10	; 16
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	6d 87       	std	Y+13, r22	; 0x0d
    2f10:	7e 87       	std	Y+14, r23	; 0x0e
    2f12:	8f 87       	std	Y+15, r24	; 0x0f
    2f14:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2f16:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1c:	af 85       	ldd	r26, Y+15	; 0x0f
    2f1e:	b8 89       	ldd	r27, Y+16	; 0x10
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	a1 05       	cpc	r26, r1
    2f24:	b1 05       	cpc	r27, r1
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <HCLCD_Vid4Bits_DisplayNumber+0x34>
    2f28:	4f c0       	rjmp	.+158    	; 0x2fc8 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    2f2a:	2d c0       	rjmp	.+90     	; 0x2f86 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    2f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2e:	08 2f       	mov	r16, r24
    2f30:	10 e0       	ldi	r17, 0x00	; 0
    2f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f36:	af 85       	ldd	r26, Y+15	; 0x0f
    2f38:	b8 89       	ldd	r27, Y+16	; 0x10
    2f3a:	2a e0       	ldi	r18, 0x0A	; 10
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	50 e0       	ldi	r21, 0x00	; 0
    2f42:	bc 01       	movw	r22, r24
    2f44:	cd 01       	movw	r24, r26
    2f46:	0e 94 a6 32 	call	0x654c	; 0x654c <__udivmodsi4>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	28 2f       	mov	r18, r24
    2f50:	ce 01       	movw	r24, r28
    2f52:	03 96       	adiw	r24, 0x03	; 3
    2f54:	fc 01       	movw	r30, r24
    2f56:	e0 0f       	add	r30, r16
    2f58:	f1 1f       	adc	r31, r17
    2f5a:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	af 85       	ldd	r26, Y+15	; 0x0f
    2f62:	b8 89       	ldd	r27, Y+16	; 0x10
    2f64:	2a e0       	ldi	r18, 0x0A	; 10
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 a6 32 	call	0x654c	; 0x654c <__udivmodsi4>
    2f74:	da 01       	movw	r26, r20
    2f76:	c9 01       	movw	r24, r18
    2f78:	8d 87       	std	Y+13, r24	; 0x0d
    2f7a:	9e 87       	std	Y+14, r25	; 0x0e
    2f7c:	af 87       	std	Y+15, r26	; 0x0f
    2f7e:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	8f 5f       	subi	r24, 0xFF	; 255
    2f84:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8a:	af 85       	ldd	r26, Y+15	; 0x0f
    2f8c:	b8 89       	ldd	r27, Y+16	; 0x10
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	a1 05       	cpc	r26, r1
    2f92:	b1 05       	cpc	r27, r1
    2f94:	59 f6       	brne	.-106    	; 0x2f2c <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	81 50       	subi	r24, 0x01	; 1
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	11 c0       	rjmp	.+34     	; 0x2fc0 <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	33 27       	eor	r19, r19
    2fa4:	27 fd       	sbrc	r18, 7
    2fa6:	30 95       	com	r19
    2fa8:	ce 01       	movw	r24, r28
    2faa:	03 96       	adiw	r24, 0x03	; 3
    2fac:	fc 01       	movw	r30, r24
    2fae:	e2 0f       	add	r30, r18
    2fb0:	f3 1f       	adc	r31, r19
    2fb2:	80 81       	ld	r24, Z
    2fb4:	80 5d       	subi	r24, 0xD0	; 208
    2fb6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	81 50       	subi	r24, 0x01	; 1
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	88 23       	and	r24, r24
    2fc4:	64 f7       	brge	.-40     	; 0x2f9e <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    2fc8:	80 e3       	ldi	r24, 0x30	; 48
    2fca:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    2fce:	60 96       	adiw	r28, 0x10	; 16
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	08 95       	ret

00002fe4 <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <HCLCD_Vid4Bits_SetPosition+0x6>
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	81 30       	cpi	r24, 0x01	; 1
    2ff6:	b9 f4       	brne	.+46     	; 0x3026 <HCLCD_Vid4Bits_SetPosition+0x42>
    2ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffa:	80 31       	cpi	r24, 0x10	; 16
    2ffc:	a0 f4       	brcc	.+40     	; 0x3026 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	80 58       	subi	r24, 0x80	; 128
    3006:	9f 4f       	sbci	r25, 0xFF	; 255
    3008:	95 95       	asr	r25
    300a:	87 95       	ror	r24
    300c:	95 95       	asr	r25
    300e:	87 95       	ror	r24
    3010:	95 95       	asr	r25
    3012:	87 95       	ror	r24
    3014:	95 95       	asr	r25
    3016:	87 95       	ror	r24
    3018:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	80 58       	subi	r24, 0x80	; 128
    3020:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    3024:	19 c0       	rjmp	.+50     	; 0x3058 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	b1 f4       	brne	.+44     	; 0x3058 <HCLCD_Vid4Bits_SetPosition+0x74>
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	80 31       	cpi	r24, 0x10	; 16
    3030:	98 f4       	brcc	.+38     	; 0x3058 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	80 54       	subi	r24, 0x40	; 64
    303a:	9f 4f       	sbci	r25, 0xFF	; 255
    303c:	95 95       	asr	r25
    303e:	87 95       	ror	r24
    3040:	95 95       	asr	r25
    3042:	87 95       	ror	r24
    3044:	95 95       	asr	r25
    3046:	87 95       	ror	r24
    3048:	95 95       	asr	r25
    304a:	87 95       	ror	r24
    304c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	80 54       	subi	r24, 0x40	; 64
    3054:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	00 d0       	rcall	.+0      	; 0x3068 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3068:	00 d0       	rcall	.+0      	; 0x306a <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	8a 83       	std	Y+2, r24	; 0x02
    3070:	7c 83       	std	Y+4, r23	; 0x04
    3072:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	88 30       	cpi	r24, 0x08	; 8
    3078:	98 f5       	brcc	.+102    	; 0x30e0 <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	88 2f       	mov	r24, r24
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	08 96       	adiw	r24, 0x08	; 8
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	95 95       	asr	r25
    3090:	87 95       	ror	r24
    3092:	95 95       	asr	r25
    3094:	87 95       	ror	r24
    3096:	95 95       	asr	r25
    3098:	87 95       	ror	r24
    309a:	95 95       	asr	r25
    309c:	87 95       	ror	r24
    309e:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	08 96       	adiw	r24, 0x08	; 8
    30aa:	88 0f       	add	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    30ba:	19 82       	std	Y+1, r1	; 0x01
    30bc:	0e c0       	rjmp	.+28     	; 0x30da <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	28 2f       	mov	r18, r24
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	9c 81       	ldd	r25, Y+4	; 0x04
    30c8:	fc 01       	movw	r30, r24
    30ca:	e2 0f       	add	r30, r18
    30cc:	f3 1f       	adc	r31, r19
    30ce:	80 81       	ld	r24, Z
    30d0:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	8f 5f       	subi	r24, 0xFF	; 255
    30d8:	89 83       	std	Y+1, r24	; 0x01
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	88 30       	cpi	r24, 0x08	; 8
    30de:	78 f3       	brcs	.-34     	; 0x30be <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	2e 97       	sbiw	r28, 0x0e	; 14
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	a0 e0       	ldi	r26, 0x00	; 0
    3114:	b0 e4       	ldi	r27, 0x40	; 64
    3116:	8b 87       	std	Y+11, r24	; 0x0b
    3118:	9c 87       	std	Y+12, r25	; 0x0c
    311a:	ad 87       	std	Y+13, r26	; 0x0d
    311c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	4a ef       	ldi	r20, 0xFA	; 250
    312c:	54 e4       	ldi	r21, 0x44	; 68
    312e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	8f 83       	std	Y+7, r24	; 0x07
    3138:	98 87       	std	Y+8, r25	; 0x08
    313a:	a9 87       	std	Y+9, r26	; 0x09
    313c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    313e:	6f 81       	ldd	r22, Y+7	; 0x07
    3140:	78 85       	ldd	r23, Y+8	; 0x08
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	2c f4       	brge	.+10     	; 0x3160 <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	3f c0       	rjmp	.+126    	; 0x31de <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	3f ef       	ldi	r19, 0xFF	; 255
    316c:	4f e7       	ldi	r20, 0x7F	; 127
    316e:	57 e4       	ldi	r21, 0x47	; 71
    3170:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3174:	18 16       	cp	r1, r24
    3176:	4c f5       	brge	.+82     	; 0x31ca <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3178:	6b 85       	ldd	r22, Y+11	; 0x0b
    317a:	7c 85       	ldd	r23, Y+12	; 0x0c
    317c:	8d 85       	ldd	r24, Y+13	; 0x0d
    317e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e2       	ldi	r20, 0x20	; 32
    3186:	51 e4       	ldi	r21, 0x41	; 65
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	bc 01       	movw	r22, r24
    3192:	cd 01       	movw	r24, r26
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	0f c0       	rjmp	.+30     	; 0x31c0 <HCLCD_Vid4Bits_ClearScreen+0xd2>
    31a2:	88 ec       	ldi	r24, 0xC8	; 200
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	9c 83       	std	Y+4, r25	; 0x04
    31a8:	8b 83       	std	Y+3, r24	; 0x03
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <HCLCD_Vid4Bits_ClearScreen+0xc0>
    31b2:	9c 83       	std	Y+4, r25	; 0x04
    31b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
    31b8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c0:	8d 81       	ldd	r24, Y+5	; 0x05
    31c2:	9e 81       	ldd	r25, Y+6	; 0x06
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	69 f7       	brne	.-38     	; 0x31a2 <HCLCD_Vid4Bits_ClearScreen+0xb4>
    31c8:	14 c0       	rjmp	.+40     	; 0x31f2 <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ca:	6f 81       	ldd	r22, Y+7	; 0x07
    31cc:	78 85       	ldd	r23, Y+8	; 0x08
    31ce:	89 85       	ldd	r24, Y+9	; 0x09
    31d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <HCLCD_Vid4Bits_ClearScreen+0xfc>
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    31f2:	2e 96       	adiw	r28, 0x0e	; 14
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	de bf       	out	0x3e, r29	; 62
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	60 97       	sbiw	r28, 0x10	; 16
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    321a:	1f 86       	std	Y+15, r1	; 0x0f
    321c:	7b c0       	rjmp	.+246    	; 0x3314 <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3224:	88 e1       	ldi	r24, 0x18	; 24
    3226:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	a6 e9       	ldi	r26, 0x96	; 150
    3230:	b3 e4       	ldi	r27, 0x43	; 67
    3232:	8b 87       	std	Y+11, r24	; 0x0b
    3234:	9c 87       	std	Y+12, r25	; 0x0c
    3236:	ad 87       	std	Y+13, r26	; 0x0d
    3238:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    323a:	6b 85       	ldd	r22, Y+11	; 0x0b
    323c:	7c 85       	ldd	r23, Y+12	; 0x0c
    323e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3240:	9e 85       	ldd	r25, Y+14	; 0x0e
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	4a ef       	ldi	r20, 0xFA	; 250
    3248:	54 e4       	ldi	r21, 0x44	; 68
    324a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	8f 83       	std	Y+7, r24	; 0x07
    3254:	98 87       	std	Y+8, r25	; 0x08
    3256:	a9 87       	std	Y+9, r26	; 0x09
    3258:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e8       	ldi	r20, 0x80	; 128
    3268:	5f e3       	ldi	r21, 0x3F	; 63
    326a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    326e:	88 23       	and	r24, r24
    3270:	2c f4       	brge	.+10     	; 0x327c <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
    327a:	3f c0       	rjmp	.+126    	; 0x32fa <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    327c:	6f 81       	ldd	r22, Y+7	; 0x07
    327e:	78 85       	ldd	r23, Y+8	; 0x08
    3280:	89 85       	ldd	r24, Y+9	; 0x09
    3282:	9a 85       	ldd	r25, Y+10	; 0x0a
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	3f ef       	ldi	r19, 0xFF	; 255
    3288:	4f e7       	ldi	r20, 0x7F	; 127
    328a:	57 e4       	ldi	r21, 0x47	; 71
    328c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3290:	18 16       	cp	r1, r24
    3292:	4c f5       	brge	.+82     	; 0x32e6 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3294:	6b 85       	ldd	r22, Y+11	; 0x0b
    3296:	7c 85       	ldd	r23, Y+12	; 0x0c
    3298:	8d 85       	ldd	r24, Y+13	; 0x0d
    329a:	9e 85       	ldd	r25, Y+14	; 0x0e
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e2       	ldi	r20, 0x20	; 32
    32a2:	51 e4       	ldi	r21, 0x41	; 65
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	bc 01       	movw	r22, r24
    32ae:	cd 01       	movw	r24, r26
    32b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	9e 83       	std	Y+6, r25	; 0x06
    32ba:	8d 83       	std	Y+5, r24	; 0x05
    32bc:	0f c0       	rjmp	.+30     	; 0x32dc <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    32be:	88 ec       	ldi	r24, 0xC8	; 200
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	9c 83       	std	Y+4, r25	; 0x04
    32c4:	8b 83       	std	Y+3, r24	; 0x03
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    32ce:	9c 83       	std	Y+4, r25	; 0x04
    32d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	9e 83       	std	Y+6, r25	; 0x06
    32da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	69 f7       	brne	.-38     	; 0x32be <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    32e4:	14 c0       	rjmp	.+40     	; 0x330e <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e6:	6f 81       	ldd	r22, Y+7	; 0x07
    32e8:	78 85       	ldd	r23, Y+8	; 0x08
    32ea:	89 85       	ldd	r24, Y+9	; 0x09
    32ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	9e 83       	std	Y+6, r25	; 0x06
    32f8:	8d 83       	std	Y+5, r24	; 0x05
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	9e 81       	ldd	r25, Y+6	; 0x06
    32fe:	9a 83       	std	Y+2, r25	; 0x02
    3300:	89 83       	std	Y+1, r24	; 0x01
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	9a 81       	ldd	r25, Y+2	; 0x02
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    330a:	9a 83       	std	Y+2, r25	; 0x02
    330c:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    330e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3310:	8f 5f       	subi	r24, 0xFF	; 255
    3312:	8f 87       	std	Y+15, r24	; 0x0f
    3314:	9f 85       	ldd	r25, Y+15	; 0x0f
    3316:	88 89       	ldd	r24, Y+16	; 0x10
    3318:	98 17       	cp	r25, r24
    331a:	08 f4       	brcc	.+2      	; 0x331e <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    331c:	80 cf       	rjmp	.-256    	; 0x321e <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    331e:	60 96       	adiw	r28, 0x10	; 16
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	08 95       	ret

00003330 <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	60 97       	sbiw	r28, 0x10	; 16
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3346:	1f 86       	std	Y+15, r1	; 0x0f
    3348:	7b c0       	rjmp	.+246    	; 0x3440 <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3350:	8c e1       	ldi	r24, 0x1C	; 28
    3352:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	a6 e9       	ldi	r26, 0x96	; 150
    335c:	b3 e4       	ldi	r27, 0x43	; 67
    335e:	8b 87       	std	Y+11, r24	; 0x0b
    3360:	9c 87       	std	Y+12, r25	; 0x0c
    3362:	ad 87       	std	Y+13, r26	; 0x0d
    3364:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3366:	6b 85       	ldd	r22, Y+11	; 0x0b
    3368:	7c 85       	ldd	r23, Y+12	; 0x0c
    336a:	8d 85       	ldd	r24, Y+13	; 0x0d
    336c:	9e 85       	ldd	r25, Y+14	; 0x0e
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a ef       	ldi	r20, 0xFA	; 250
    3374:	54 e4       	ldi	r21, 0x44	; 68
    3376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	8f 83       	std	Y+7, r24	; 0x07
    3380:	98 87       	std	Y+8, r25	; 0x08
    3382:	a9 87       	std	Y+9, r26	; 0x09
    3384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3386:	6f 81       	ldd	r22, Y+7	; 0x07
    3388:	78 85       	ldd	r23, Y+8	; 0x08
    338a:	89 85       	ldd	r24, Y+9	; 0x09
    338c:	9a 85       	ldd	r25, Y+10	; 0x0a
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e8       	ldi	r20, 0x80	; 128
    3394:	5f e3       	ldi	r21, 0x3F	; 63
    3396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    339a:	88 23       	and	r24, r24
    339c:	2c f4       	brge	.+10     	; 0x33a8 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	9e 83       	std	Y+6, r25	; 0x06
    33a4:	8d 83       	std	Y+5, r24	; 0x05
    33a6:	3f c0       	rjmp	.+126    	; 0x3426 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    33a8:	6f 81       	ldd	r22, Y+7	; 0x07
    33aa:	78 85       	ldd	r23, Y+8	; 0x08
    33ac:	89 85       	ldd	r24, Y+9	; 0x09
    33ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	3f ef       	ldi	r19, 0xFF	; 255
    33b4:	4f e7       	ldi	r20, 0x7F	; 127
    33b6:	57 e4       	ldi	r21, 0x47	; 71
    33b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33bc:	18 16       	cp	r1, r24
    33be:	4c f5       	brge	.+82     	; 0x3412 <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e2       	ldi	r20, 0x20	; 32
    33ce:	51 e4       	ldi	r21, 0x41	; 65
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	bc 01       	movw	r22, r24
    33da:	cd 01       	movw	r24, r26
    33dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	9e 83       	std	Y+6, r25	; 0x06
    33e6:	8d 83       	std	Y+5, r24	; 0x05
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    33ea:	88 ec       	ldi	r24, 0xC8	; 200
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9c 83       	std	Y+4, r25	; 0x04
    33f0:	8b 83       	std	Y+3, r24	; 0x03
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	9c 81       	ldd	r25, Y+4	; 0x04
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    33fa:	9c 83       	std	Y+4, r25	; 0x04
    33fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3400:	9e 81       	ldd	r25, Y+6	; 0x06
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	9e 83       	std	Y+6, r25	; 0x06
    3406:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3408:	8d 81       	ldd	r24, Y+5	; 0x05
    340a:	9e 81       	ldd	r25, Y+6	; 0x06
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	69 f7       	brne	.-38     	; 0x33ea <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    3410:	14 c0       	rjmp	.+40     	; 0x343a <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3412:	6f 81       	ldd	r22, Y+7	; 0x07
    3414:	78 85       	ldd	r23, Y+8	; 0x08
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	8d 81       	ldd	r24, Y+5	; 0x05
    3428:	9e 81       	ldd	r25, Y+6	; 0x06
    342a:	9a 83       	std	Y+2, r25	; 0x02
    342c:	89 83       	std	Y+1, r24	; 0x01
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	9a 81       	ldd	r25, Y+2	; 0x02
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    343a:	8f 85       	ldd	r24, Y+15	; 0x0f
    343c:	8f 5f       	subi	r24, 0xFF	; 255
    343e:	8f 87       	std	Y+15, r24	; 0x0f
    3440:	9f 85       	ldd	r25, Y+15	; 0x0f
    3442:	88 89       	ldd	r24, Y+16	; 0x10
    3444:	98 17       	cp	r25, r24
    3446:	08 f4       	brcc	.+2      	; 0x344a <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    3448:	80 cf       	rjmp	.-256    	; 0x334a <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    344a:	60 96       	adiw	r28, 0x10	; 16
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	60 97       	sbiw	r28, 0x10	; 16
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3472:	1f 86       	std	Y+15, r1	; 0x0f
    3474:	7b c0       	rjmp	.+246    	; 0x356c <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    347c:	80 e1       	ldi	r24, 0x10	; 16
    347e:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	a6 e9       	ldi	r26, 0x96	; 150
    3488:	b3 e4       	ldi	r27, 0x43	; 67
    348a:	8b 87       	std	Y+11, r24	; 0x0b
    348c:	9c 87       	std	Y+12, r25	; 0x0c
    348e:	ad 87       	std	Y+13, r26	; 0x0d
    3490:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3492:	6b 85       	ldd	r22, Y+11	; 0x0b
    3494:	7c 85       	ldd	r23, Y+12	; 0x0c
    3496:	8d 85       	ldd	r24, Y+13	; 0x0d
    3498:	9e 85       	ldd	r25, Y+14	; 0x0e
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	4a ef       	ldi	r20, 0xFA	; 250
    34a0:	54 e4       	ldi	r21, 0x44	; 68
    34a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	8f 83       	std	Y+7, r24	; 0x07
    34ac:	98 87       	std	Y+8, r25	; 0x08
    34ae:	a9 87       	std	Y+9, r26	; 0x09
    34b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34b2:	6f 81       	ldd	r22, Y+7	; 0x07
    34b4:	78 85       	ldd	r23, Y+8	; 0x08
    34b6:	89 85       	ldd	r24, Y+9	; 0x09
    34b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	40 e8       	ldi	r20, 0x80	; 128
    34c0:	5f e3       	ldi	r21, 0x3F	; 63
    34c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34c6:	88 23       	and	r24, r24
    34c8:	2c f4       	brge	.+10     	; 0x34d4 <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	9e 83       	std	Y+6, r25	; 0x06
    34d0:	8d 83       	std	Y+5, r24	; 0x05
    34d2:	3f c0       	rjmp	.+126    	; 0x3552 <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    34d4:	6f 81       	ldd	r22, Y+7	; 0x07
    34d6:	78 85       	ldd	r23, Y+8	; 0x08
    34d8:	89 85       	ldd	r24, Y+9	; 0x09
    34da:	9a 85       	ldd	r25, Y+10	; 0x0a
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	3f ef       	ldi	r19, 0xFF	; 255
    34e0:	4f e7       	ldi	r20, 0x7F	; 127
    34e2:	57 e4       	ldi	r21, 0x47	; 71
    34e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e8:	18 16       	cp	r1, r24
    34ea:	4c f5       	brge	.+82     	; 0x353e <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e2       	ldi	r20, 0x20	; 32
    34fa:	51 e4       	ldi	r21, 0x41	; 65
    34fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	bc 01       	movw	r22, r24
    3506:	cd 01       	movw	r24, r26
    3508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	9e 83       	std	Y+6, r25	; 0x06
    3512:	8d 83       	std	Y+5, r24	; 0x05
    3514:	0f c0       	rjmp	.+30     	; 0x3534 <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    3516:	88 ec       	ldi	r24, 0xC8	; 200
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	9c 83       	std	Y+4, r25	; 0x04
    351c:	8b 83       	std	Y+3, r24	; 0x03
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	9c 81       	ldd	r25, Y+4	; 0x04
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	f1 f7       	brne	.-4      	; 0x3522 <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    3526:	9c 83       	std	Y+4, r25	; 0x04
    3528:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352a:	8d 81       	ldd	r24, Y+5	; 0x05
    352c:	9e 81       	ldd	r25, Y+6	; 0x06
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	9e 83       	std	Y+6, r25	; 0x06
    3532:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3534:	8d 81       	ldd	r24, Y+5	; 0x05
    3536:	9e 81       	ldd	r25, Y+6	; 0x06
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	69 f7       	brne	.-38     	; 0x3516 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    353c:	14 c0       	rjmp	.+40     	; 0x3566 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353e:	6f 81       	ldd	r22, Y+7	; 0x07
    3540:	78 85       	ldd	r23, Y+8	; 0x08
    3542:	89 85       	ldd	r24, Y+9	; 0x09
    3544:	9a 85       	ldd	r25, Y+10	; 0x0a
    3546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	9e 83       	std	Y+6, r25	; 0x06
    3550:	8d 83       	std	Y+5, r24	; 0x05
    3552:	8d 81       	ldd	r24, Y+5	; 0x05
    3554:	9e 81       	ldd	r25, Y+6	; 0x06
    3556:	9a 83       	std	Y+2, r25	; 0x02
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	f1 f7       	brne	.-4      	; 0x355e <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    3562:	9a 83       	std	Y+2, r25	; 0x02
    3564:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3566:	8f 85       	ldd	r24, Y+15	; 0x0f
    3568:	8f 5f       	subi	r24, 0xFF	; 255
    356a:	8f 87       	std	Y+15, r24	; 0x0f
    356c:	9f 85       	ldd	r25, Y+15	; 0x0f
    356e:	88 89       	ldd	r24, Y+16	; 0x10
    3570:	98 17       	cp	r25, r24
    3572:	08 f4       	brcc	.+2      	; 0x3576 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    3574:	80 cf       	rjmp	.-256    	; 0x3476 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3576:	60 96       	adiw	r28, 0x10	; 16
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	60 97       	sbiw	r28, 0x10	; 16
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    359c:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    359e:	1f 86       	std	Y+15, r1	; 0x0f
    35a0:	7b c0       	rjmp	.+246    	; 0x3698 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    35a8:	84 e1       	ldi	r24, 0x14	; 20
    35aa:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	a6 e9       	ldi	r26, 0x96	; 150
    35b4:	b3 e4       	ldi	r27, 0x43	; 67
    35b6:	8b 87       	std	Y+11, r24	; 0x0b
    35b8:	9c 87       	std	Y+12, r25	; 0x0c
    35ba:	ad 87       	std	Y+13, r26	; 0x0d
    35bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35be:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	4a ef       	ldi	r20, 0xFA	; 250
    35cc:	54 e4       	ldi	r21, 0x44	; 68
    35ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	8f 83       	std	Y+7, r24	; 0x07
    35d8:	98 87       	std	Y+8, r25	; 0x08
    35da:	a9 87       	std	Y+9, r26	; 0x09
    35dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35de:	6f 81       	ldd	r22, Y+7	; 0x07
    35e0:	78 85       	ldd	r23, Y+8	; 0x08
    35e2:	89 85       	ldd	r24, Y+9	; 0x09
    35e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e8       	ldi	r20, 0x80	; 128
    35ec:	5f e3       	ldi	r21, 0x3F	; 63
    35ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35f2:	88 23       	and	r24, r24
    35f4:	2c f4       	brge	.+10     	; 0x3600 <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	3f c0       	rjmp	.+126    	; 0x367e <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    3600:	6f 81       	ldd	r22, Y+7	; 0x07
    3602:	78 85       	ldd	r23, Y+8	; 0x08
    3604:	89 85       	ldd	r24, Y+9	; 0x09
    3606:	9a 85       	ldd	r25, Y+10	; 0x0a
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	3f ef       	ldi	r19, 0xFF	; 255
    360c:	4f e7       	ldi	r20, 0x7F	; 127
    360e:	57 e4       	ldi	r21, 0x47	; 71
    3610:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3614:	18 16       	cp	r1, r24
    3616:	4c f5       	brge	.+82     	; 0x366a <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3618:	6b 85       	ldd	r22, Y+11	; 0x0b
    361a:	7c 85       	ldd	r23, Y+12	; 0x0c
    361c:	8d 85       	ldd	r24, Y+13	; 0x0d
    361e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	40 e2       	ldi	r20, 0x20	; 32
    3626:	51 e4       	ldi	r21, 0x41	; 65
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	bc 01       	movw	r22, r24
    3632:	cd 01       	movw	r24, r26
    3634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	8d 83       	std	Y+5, r24	; 0x05
    3640:	0f c0       	rjmp	.+30     	; 0x3660 <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    3642:	88 ec       	ldi	r24, 0xC8	; 200
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	9c 83       	std	Y+4, r25	; 0x04
    3648:	8b 83       	std	Y+3, r24	; 0x03
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    3652:	9c 83       	std	Y+4, r25	; 0x04
    3654:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	9e 83       	std	Y+6, r25	; 0x06
    365e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	69 f7       	brne	.-38     	; 0x3642 <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    3668:	14 c0       	rjmp	.+40     	; 0x3692 <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	9e 83       	std	Y+6, r25	; 0x06
    367c:	8d 83       	std	Y+5, r24	; 0x05
    367e:	8d 81       	ldd	r24, Y+5	; 0x05
    3680:	9e 81       	ldd	r25, Y+6	; 0x06
    3682:	9a 83       	std	Y+2, r25	; 0x02
    3684:	89 83       	std	Y+1, r24	; 0x01
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	9a 81       	ldd	r25, Y+2	; 0x02
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	f1 f7       	brne	.-4      	; 0x368a <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    368e:	9a 83       	std	Y+2, r25	; 0x02
    3690:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3692:	8f 85       	ldd	r24, Y+15	; 0x0f
    3694:	8f 5f       	subi	r24, 0xFF	; 255
    3696:	8f 87       	std	Y+15, r24	; 0x0f
    3698:	9f 85       	ldd	r25, Y+15	; 0x0f
    369a:	88 89       	ldd	r24, Y+16	; 0x10
    369c:	98 17       	cp	r25, r24
    369e:	08 f4       	brcc	.+2      	; 0x36a2 <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    36a0:	80 cf       	rjmp	.-256    	; 0x35a2 <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    36a2:	60 96       	adiw	r28, 0x10	; 16
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	de bf       	out	0x3e, r29	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <main>:

void APP_VidLED_Mode(u8 Copy_u8SwitchNumber);


int main(void)
{
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	cc 53       	subi	r28, 0x3C	; 60
    36c2:	d1 40       	sbci	r29, 0x01	; 1
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
	/*pattern for Ahmed in Arabic */
	//pattern for Alph character
	u8 pattern0[8]={0x06,0x04,0x0E,0x00,0x04,0x04,0x04,0x00};
    36ce:	ce 01       	movw	r24, r28
    36d0:	83 50       	subi	r24, 0x03	; 3
    36d2:	9f 4f       	sbci	r25, 0xFF	; 255
    36d4:	cc 5d       	subi	r28, 0xDC	; 220
    36d6:	de 4f       	sbci	r29, 0xFE	; 254
    36d8:	99 83       	std	Y+1, r25	; 0x01
    36da:	88 83       	st	Y, r24
    36dc:	c4 52       	subi	r28, 0x24	; 36
    36de:	d1 40       	sbci	r29, 0x01	; 1
    36e0:	8c e5       	ldi	r24, 0x5C	; 92
    36e2:	91 e0       	ldi	r25, 0x01	; 1
    36e4:	ca 5d       	subi	r28, 0xDA	; 218
    36e6:	de 4f       	sbci	r29, 0xFE	; 254
    36e8:	99 83       	std	Y+1, r25	; 0x01
    36ea:	88 83       	st	Y, r24
    36ec:	c6 52       	subi	r28, 0x26	; 38
    36ee:	d1 40       	sbci	r29, 0x01	; 1
    36f0:	98 e0       	ldi	r25, 0x08	; 8
    36f2:	c8 5d       	subi	r28, 0xD8	; 216
    36f4:	de 4f       	sbci	r29, 0xFE	; 254
    36f6:	98 83       	st	Y, r25
    36f8:	c8 52       	subi	r28, 0x28	; 40
    36fa:	d1 40       	sbci	r29, 0x01	; 1
    36fc:	ca 5d       	subi	r28, 0xDA	; 218
    36fe:	de 4f       	sbci	r29, 0xFE	; 254
    3700:	e8 81       	ld	r30, Y
    3702:	f9 81       	ldd	r31, Y+1	; 0x01
    3704:	c6 52       	subi	r28, 0x26	; 38
    3706:	d1 40       	sbci	r29, 0x01	; 1
    3708:	00 80       	ld	r0, Z
    370a:	ca 5d       	subi	r28, 0xDA	; 218
    370c:	de 4f       	sbci	r29, 0xFE	; 254
    370e:	88 81       	ld	r24, Y
    3710:	99 81       	ldd	r25, Y+1	; 0x01
    3712:	c6 52       	subi	r28, 0x26	; 38
    3714:	d1 40       	sbci	r29, 0x01	; 1
    3716:	01 96       	adiw	r24, 0x01	; 1
    3718:	ca 5d       	subi	r28, 0xDA	; 218
    371a:	de 4f       	sbci	r29, 0xFE	; 254
    371c:	99 83       	std	Y+1, r25	; 0x01
    371e:	88 83       	st	Y, r24
    3720:	c6 52       	subi	r28, 0x26	; 38
    3722:	d1 40       	sbci	r29, 0x01	; 1
    3724:	cc 5d       	subi	r28, 0xDC	; 220
    3726:	de 4f       	sbci	r29, 0xFE	; 254
    3728:	e8 81       	ld	r30, Y
    372a:	f9 81       	ldd	r31, Y+1	; 0x01
    372c:	c4 52       	subi	r28, 0x24	; 36
    372e:	d1 40       	sbci	r29, 0x01	; 1
    3730:	00 82       	st	Z, r0
    3732:	cc 5d       	subi	r28, 0xDC	; 220
    3734:	de 4f       	sbci	r29, 0xFE	; 254
    3736:	88 81       	ld	r24, Y
    3738:	99 81       	ldd	r25, Y+1	; 0x01
    373a:	c4 52       	subi	r28, 0x24	; 36
    373c:	d1 40       	sbci	r29, 0x01	; 1
    373e:	01 96       	adiw	r24, 0x01	; 1
    3740:	cc 5d       	subi	r28, 0xDC	; 220
    3742:	de 4f       	sbci	r29, 0xFE	; 254
    3744:	99 83       	std	Y+1, r25	; 0x01
    3746:	88 83       	st	Y, r24
    3748:	c4 52       	subi	r28, 0x24	; 36
    374a:	d1 40       	sbci	r29, 0x01	; 1
    374c:	c8 5d       	subi	r28, 0xD8	; 216
    374e:	de 4f       	sbci	r29, 0xFE	; 254
    3750:	98 81       	ld	r25, Y
    3752:	c8 52       	subi	r28, 0x28	; 40
    3754:	d1 40       	sbci	r29, 0x01	; 1
    3756:	91 50       	subi	r25, 0x01	; 1
    3758:	c8 5d       	subi	r28, 0xD8	; 216
    375a:	de 4f       	sbci	r29, 0xFE	; 254
    375c:	98 83       	st	Y, r25
    375e:	c8 52       	subi	r28, 0x28	; 40
    3760:	d1 40       	sbci	r29, 0x01	; 1
    3762:	c8 5d       	subi	r28, 0xD8	; 216
    3764:	de 4f       	sbci	r29, 0xFE	; 254
    3766:	e8 81       	ld	r30, Y
    3768:	c8 52       	subi	r28, 0x28	; 40
    376a:	d1 40       	sbci	r29, 0x01	; 1
    376c:	ee 23       	and	r30, r30
    376e:	31 f6       	brne	.-116    	; 0x36fc <main+0x48>
	// pattern for 7a8
	u8 pattern1[8]={0x00,0x00,0x08,0x14,0x02,0x1F,0x00,0x00};
    3770:	ce 01       	movw	r24, r28
    3772:	8b 5f       	subi	r24, 0xFB	; 251
    3774:	9e 4f       	sbci	r25, 0xFE	; 254
    3776:	c7 5d       	subi	r28, 0xD7	; 215
    3778:	de 4f       	sbci	r29, 0xFE	; 254
    377a:	99 83       	std	Y+1, r25	; 0x01
    377c:	88 83       	st	Y, r24
    377e:	c9 52       	subi	r28, 0x29	; 41
    3780:	d1 40       	sbci	r29, 0x01	; 1
    3782:	84 e5       	ldi	r24, 0x54	; 84
    3784:	91 e0       	ldi	r25, 0x01	; 1
    3786:	c5 5d       	subi	r28, 0xD5	; 213
    3788:	de 4f       	sbci	r29, 0xFE	; 254
    378a:	99 83       	std	Y+1, r25	; 0x01
    378c:	88 83       	st	Y, r24
    378e:	cb 52       	subi	r28, 0x2B	; 43
    3790:	d1 40       	sbci	r29, 0x01	; 1
    3792:	98 e0       	ldi	r25, 0x08	; 8
    3794:	c3 5d       	subi	r28, 0xD3	; 211
    3796:	de 4f       	sbci	r29, 0xFE	; 254
    3798:	98 83       	st	Y, r25
    379a:	cd 52       	subi	r28, 0x2D	; 45
    379c:	d1 40       	sbci	r29, 0x01	; 1
    379e:	c5 5d       	subi	r28, 0xD5	; 213
    37a0:	de 4f       	sbci	r29, 0xFE	; 254
    37a2:	e8 81       	ld	r30, Y
    37a4:	f9 81       	ldd	r31, Y+1	; 0x01
    37a6:	cb 52       	subi	r28, 0x2B	; 43
    37a8:	d1 40       	sbci	r29, 0x01	; 1
    37aa:	00 80       	ld	r0, Z
    37ac:	c5 5d       	subi	r28, 0xD5	; 213
    37ae:	de 4f       	sbci	r29, 0xFE	; 254
    37b0:	88 81       	ld	r24, Y
    37b2:	99 81       	ldd	r25, Y+1	; 0x01
    37b4:	cb 52       	subi	r28, 0x2B	; 43
    37b6:	d1 40       	sbci	r29, 0x01	; 1
    37b8:	01 96       	adiw	r24, 0x01	; 1
    37ba:	c5 5d       	subi	r28, 0xD5	; 213
    37bc:	de 4f       	sbci	r29, 0xFE	; 254
    37be:	99 83       	std	Y+1, r25	; 0x01
    37c0:	88 83       	st	Y, r24
    37c2:	cb 52       	subi	r28, 0x2B	; 43
    37c4:	d1 40       	sbci	r29, 0x01	; 1
    37c6:	c7 5d       	subi	r28, 0xD7	; 215
    37c8:	de 4f       	sbci	r29, 0xFE	; 254
    37ca:	e8 81       	ld	r30, Y
    37cc:	f9 81       	ldd	r31, Y+1	; 0x01
    37ce:	c9 52       	subi	r28, 0x29	; 41
    37d0:	d1 40       	sbci	r29, 0x01	; 1
    37d2:	00 82       	st	Z, r0
    37d4:	c7 5d       	subi	r28, 0xD7	; 215
    37d6:	de 4f       	sbci	r29, 0xFE	; 254
    37d8:	88 81       	ld	r24, Y
    37da:	99 81       	ldd	r25, Y+1	; 0x01
    37dc:	c9 52       	subi	r28, 0x29	; 41
    37de:	d1 40       	sbci	r29, 0x01	; 1
    37e0:	01 96       	adiw	r24, 0x01	; 1
    37e2:	c7 5d       	subi	r28, 0xD7	; 215
    37e4:	de 4f       	sbci	r29, 0xFE	; 254
    37e6:	99 83       	std	Y+1, r25	; 0x01
    37e8:	88 83       	st	Y, r24
    37ea:	c9 52       	subi	r28, 0x29	; 41
    37ec:	d1 40       	sbci	r29, 0x01	; 1
    37ee:	c3 5d       	subi	r28, 0xD3	; 211
    37f0:	de 4f       	sbci	r29, 0xFE	; 254
    37f2:	98 81       	ld	r25, Y
    37f4:	cd 52       	subi	r28, 0x2D	; 45
    37f6:	d1 40       	sbci	r29, 0x01	; 1
    37f8:	91 50       	subi	r25, 0x01	; 1
    37fa:	c3 5d       	subi	r28, 0xD3	; 211
    37fc:	de 4f       	sbci	r29, 0xFE	; 254
    37fe:	98 83       	st	Y, r25
    3800:	cd 52       	subi	r28, 0x2D	; 45
    3802:	d1 40       	sbci	r29, 0x01	; 1
    3804:	c3 5d       	subi	r28, 0xD3	; 211
    3806:	de 4f       	sbci	r29, 0xFE	; 254
    3808:	e8 81       	ld	r30, Y
    380a:	cd 52       	subi	r28, 0x2D	; 45
    380c:	d1 40       	sbci	r29, 0x01	; 1
    380e:	ee 23       	and	r30, r30
    3810:	31 f6       	brne	.-116    	; 0x379e <main+0xea>
	// pattern for mem
	u8 pattern2[8]={0x00,0x00,0x00,0x00,0x02,0x1D,0x02,0x00};
    3812:	ce 01       	movw	r24, r28
    3814:	83 5f       	subi	r24, 0xF3	; 243
    3816:	9e 4f       	sbci	r25, 0xFE	; 254
    3818:	c2 5d       	subi	r28, 0xD2	; 210
    381a:	de 4f       	sbci	r29, 0xFE	; 254
    381c:	99 83       	std	Y+1, r25	; 0x01
    381e:	88 83       	st	Y, r24
    3820:	ce 52       	subi	r28, 0x2E	; 46
    3822:	d1 40       	sbci	r29, 0x01	; 1
    3824:	8c e4       	ldi	r24, 0x4C	; 76
    3826:	91 e0       	ldi	r25, 0x01	; 1
    3828:	c0 5d       	subi	r28, 0xD0	; 208
    382a:	de 4f       	sbci	r29, 0xFE	; 254
    382c:	99 83       	std	Y+1, r25	; 0x01
    382e:	88 83       	st	Y, r24
    3830:	c0 53       	subi	r28, 0x30	; 48
    3832:	d1 40       	sbci	r29, 0x01	; 1
    3834:	98 e0       	ldi	r25, 0x08	; 8
    3836:	ce 5c       	subi	r28, 0xCE	; 206
    3838:	de 4f       	sbci	r29, 0xFE	; 254
    383a:	98 83       	st	Y, r25
    383c:	c2 53       	subi	r28, 0x32	; 50
    383e:	d1 40       	sbci	r29, 0x01	; 1
    3840:	c0 5d       	subi	r28, 0xD0	; 208
    3842:	de 4f       	sbci	r29, 0xFE	; 254
    3844:	e8 81       	ld	r30, Y
    3846:	f9 81       	ldd	r31, Y+1	; 0x01
    3848:	c0 53       	subi	r28, 0x30	; 48
    384a:	d1 40       	sbci	r29, 0x01	; 1
    384c:	00 80       	ld	r0, Z
    384e:	c0 5d       	subi	r28, 0xD0	; 208
    3850:	de 4f       	sbci	r29, 0xFE	; 254
    3852:	88 81       	ld	r24, Y
    3854:	99 81       	ldd	r25, Y+1	; 0x01
    3856:	c0 53       	subi	r28, 0x30	; 48
    3858:	d1 40       	sbci	r29, 0x01	; 1
    385a:	01 96       	adiw	r24, 0x01	; 1
    385c:	c0 5d       	subi	r28, 0xD0	; 208
    385e:	de 4f       	sbci	r29, 0xFE	; 254
    3860:	99 83       	std	Y+1, r25	; 0x01
    3862:	88 83       	st	Y, r24
    3864:	c0 53       	subi	r28, 0x30	; 48
    3866:	d1 40       	sbci	r29, 0x01	; 1
    3868:	c2 5d       	subi	r28, 0xD2	; 210
    386a:	de 4f       	sbci	r29, 0xFE	; 254
    386c:	e8 81       	ld	r30, Y
    386e:	f9 81       	ldd	r31, Y+1	; 0x01
    3870:	ce 52       	subi	r28, 0x2E	; 46
    3872:	d1 40       	sbci	r29, 0x01	; 1
    3874:	00 82       	st	Z, r0
    3876:	c2 5d       	subi	r28, 0xD2	; 210
    3878:	de 4f       	sbci	r29, 0xFE	; 254
    387a:	88 81       	ld	r24, Y
    387c:	99 81       	ldd	r25, Y+1	; 0x01
    387e:	ce 52       	subi	r28, 0x2E	; 46
    3880:	d1 40       	sbci	r29, 0x01	; 1
    3882:	01 96       	adiw	r24, 0x01	; 1
    3884:	c2 5d       	subi	r28, 0xD2	; 210
    3886:	de 4f       	sbci	r29, 0xFE	; 254
    3888:	99 83       	std	Y+1, r25	; 0x01
    388a:	88 83       	st	Y, r24
    388c:	ce 52       	subi	r28, 0x2E	; 46
    388e:	d1 40       	sbci	r29, 0x01	; 1
    3890:	ce 5c       	subi	r28, 0xCE	; 206
    3892:	de 4f       	sbci	r29, 0xFE	; 254
    3894:	98 81       	ld	r25, Y
    3896:	c2 53       	subi	r28, 0x32	; 50
    3898:	d1 40       	sbci	r29, 0x01	; 1
    389a:	91 50       	subi	r25, 0x01	; 1
    389c:	ce 5c       	subi	r28, 0xCE	; 206
    389e:	de 4f       	sbci	r29, 0xFE	; 254
    38a0:	98 83       	st	Y, r25
    38a2:	c2 53       	subi	r28, 0x32	; 50
    38a4:	d1 40       	sbci	r29, 0x01	; 1
    38a6:	ce 5c       	subi	r28, 0xCE	; 206
    38a8:	de 4f       	sbci	r29, 0xFE	; 254
    38aa:	e8 81       	ld	r30, Y
    38ac:	c2 53       	subi	r28, 0x32	; 50
    38ae:	d1 40       	sbci	r29, 0x01	; 1
    38b0:	ee 23       	and	r30, r30
    38b2:	31 f6       	brne	.-116    	; 0x3840 <main+0x18c>
	// pattern for dal
	u8 pattern3[8]={0x00,0x00,0x01,0x01,0x01,0x1F,0x00,0x00};
    38b4:	ce 01       	movw	r24, r28
    38b6:	8b 5e       	subi	r24, 0xEB	; 235
    38b8:	9e 4f       	sbci	r25, 0xFE	; 254
    38ba:	cd 5c       	subi	r28, 0xCD	; 205
    38bc:	de 4f       	sbci	r29, 0xFE	; 254
    38be:	99 83       	std	Y+1, r25	; 0x01
    38c0:	88 83       	st	Y, r24
    38c2:	c3 53       	subi	r28, 0x33	; 51
    38c4:	d1 40       	sbci	r29, 0x01	; 1
    38c6:	84 e4       	ldi	r24, 0x44	; 68
    38c8:	91 e0       	ldi	r25, 0x01	; 1
    38ca:	cb 5c       	subi	r28, 0xCB	; 203
    38cc:	de 4f       	sbci	r29, 0xFE	; 254
    38ce:	99 83       	std	Y+1, r25	; 0x01
    38d0:	88 83       	st	Y, r24
    38d2:	c5 53       	subi	r28, 0x35	; 53
    38d4:	d1 40       	sbci	r29, 0x01	; 1
    38d6:	98 e0       	ldi	r25, 0x08	; 8
    38d8:	c9 5c       	subi	r28, 0xC9	; 201
    38da:	de 4f       	sbci	r29, 0xFE	; 254
    38dc:	98 83       	st	Y, r25
    38de:	c7 53       	subi	r28, 0x37	; 55
    38e0:	d1 40       	sbci	r29, 0x01	; 1
    38e2:	cb 5c       	subi	r28, 0xCB	; 203
    38e4:	de 4f       	sbci	r29, 0xFE	; 254
    38e6:	e8 81       	ld	r30, Y
    38e8:	f9 81       	ldd	r31, Y+1	; 0x01
    38ea:	c5 53       	subi	r28, 0x35	; 53
    38ec:	d1 40       	sbci	r29, 0x01	; 1
    38ee:	00 80       	ld	r0, Z
    38f0:	cb 5c       	subi	r28, 0xCB	; 203
    38f2:	de 4f       	sbci	r29, 0xFE	; 254
    38f4:	88 81       	ld	r24, Y
    38f6:	99 81       	ldd	r25, Y+1	; 0x01
    38f8:	c5 53       	subi	r28, 0x35	; 53
    38fa:	d1 40       	sbci	r29, 0x01	; 1
    38fc:	01 96       	adiw	r24, 0x01	; 1
    38fe:	cb 5c       	subi	r28, 0xCB	; 203
    3900:	de 4f       	sbci	r29, 0xFE	; 254
    3902:	99 83       	std	Y+1, r25	; 0x01
    3904:	88 83       	st	Y, r24
    3906:	c5 53       	subi	r28, 0x35	; 53
    3908:	d1 40       	sbci	r29, 0x01	; 1
    390a:	cd 5c       	subi	r28, 0xCD	; 205
    390c:	de 4f       	sbci	r29, 0xFE	; 254
    390e:	e8 81       	ld	r30, Y
    3910:	f9 81       	ldd	r31, Y+1	; 0x01
    3912:	c3 53       	subi	r28, 0x33	; 51
    3914:	d1 40       	sbci	r29, 0x01	; 1
    3916:	00 82       	st	Z, r0
    3918:	cd 5c       	subi	r28, 0xCD	; 205
    391a:	de 4f       	sbci	r29, 0xFE	; 254
    391c:	88 81       	ld	r24, Y
    391e:	99 81       	ldd	r25, Y+1	; 0x01
    3920:	c3 53       	subi	r28, 0x33	; 51
    3922:	d1 40       	sbci	r29, 0x01	; 1
    3924:	01 96       	adiw	r24, 0x01	; 1
    3926:	cd 5c       	subi	r28, 0xCD	; 205
    3928:	de 4f       	sbci	r29, 0xFE	; 254
    392a:	99 83       	std	Y+1, r25	; 0x01
    392c:	88 83       	st	Y, r24
    392e:	c3 53       	subi	r28, 0x33	; 51
    3930:	d1 40       	sbci	r29, 0x01	; 1
    3932:	c9 5c       	subi	r28, 0xC9	; 201
    3934:	de 4f       	sbci	r29, 0xFE	; 254
    3936:	98 81       	ld	r25, Y
    3938:	c7 53       	subi	r28, 0x37	; 55
    393a:	d1 40       	sbci	r29, 0x01	; 1
    393c:	91 50       	subi	r25, 0x01	; 1
    393e:	c9 5c       	subi	r28, 0xC9	; 201
    3940:	de 4f       	sbci	r29, 0xFE	; 254
    3942:	98 83       	st	Y, r25
    3944:	c7 53       	subi	r28, 0x37	; 55
    3946:	d1 40       	sbci	r29, 0x01	; 1
    3948:	c9 5c       	subi	r28, 0xC9	; 201
    394a:	de 4f       	sbci	r29, 0xFE	; 254
    394c:	e8 81       	ld	r30, Y
    394e:	c7 53       	subi	r28, 0x37	; 55
    3950:	d1 40       	sbci	r29, 0x01	; 1
    3952:	ee 23       	and	r30, r30
    3954:	31 f6       	brne	.-116    	; 0x38e2 <main+0x22e>

	/*Initialize  8 LEDs*/
	HLED_VidInit(&LED1);
    3956:	85 e6       	ldi	r24, 0x65	; 101
    3958:	91 e0       	ldi	r25, 0x01	; 1
    395a:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED2);
    395e:	84 e2       	ldi	r24, 0x24	; 36
    3960:	91 e0       	ldi	r25, 0x01	; 1
    3962:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED3);
    3966:	86 e2       	ldi	r24, 0x26	; 38
    3968:	91 e0       	ldi	r25, 0x01	; 1
    396a:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED4);
    396e:	88 e2       	ldi	r24, 0x28	; 40
    3970:	91 e0       	ldi	r25, 0x01	; 1
    3972:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED5);
    3976:	8a e2       	ldi	r24, 0x2A	; 42
    3978:	91 e0       	ldi	r25, 0x01	; 1
    397a:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED6);
    397e:	8c e2       	ldi	r24, 0x2C	; 44
    3980:	91 e0       	ldi	r25, 0x01	; 1
    3982:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED7);
    3986:	8e e2       	ldi	r24, 0x2E	; 46
    3988:	91 e0       	ldi	r25, 0x01	; 1
    398a:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED8);
    398e:	80 e3       	ldi	r24, 0x30	; 48
    3990:	91 e0       	ldi	r25, 0x01	; 1
    3992:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>

	/*Initialize Seven Segment*/
	HSEVEN_SEGMENT_VidInit(&SEVEN_SEG1);
    3996:	82 e3       	ldi	r24, 0x32	; 50
    3998:	91 e0       	ldi	r25, 0x01	; 1
    399a:	0e 94 06 0a 	call	0x140c	; 0x140c <HSEVEN_SEGMENT_VidInit>

	/*Initialize 8 Switches interface as Pull resistance */
	HSWITCH_VidInit_PullUP(&Switch_1);
    399e:	84 e3       	ldi	r24, 0x34	; 52
    39a0:	91 e0       	ldi	r25, 0x01	; 1
    39a2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_2);
    39a6:	86 e3       	ldi	r24, 0x36	; 54
    39a8:	91 e0       	ldi	r25, 0x01	; 1
    39aa:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_3);
    39ae:	88 e3       	ldi	r24, 0x38	; 56
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    39b2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_4);
    39b6:	8a e3       	ldi	r24, 0x3A	; 58
    39b8:	91 e0       	ldi	r25, 0x01	; 1
    39ba:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_5);
    39be:	8c e3       	ldi	r24, 0x3C	; 60
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_6);
    39c6:	8e e3       	ldi	r24, 0x3E	; 62
    39c8:	91 e0       	ldi	r25, 0x01	; 1
    39ca:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_7);
    39ce:	80 e4       	ldi	r24, 0x40	; 64
    39d0:	91 e0       	ldi	r25, 0x01	; 1
    39d2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_8);
    39d6:	82 e4       	ldi	r24, 0x42	; 66
    39d8:	91 e0       	ldi	r25, 0x01	; 1
    39da:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	/*Initialize LCD*/
	HCLCD_Vid4Bits_Init();
    39de:	0e 94 8e 14 	call	0x291c	; 0x291c <HCLCD_Vid4Bits_Init>

	/*Initialize patterns*/
	HCLCD_Vid4Bits_CustomAlphChar(0, pattern0);
    39e2:	9e 01       	movw	r18, r28
    39e4:	23 50       	subi	r18, 0x03	; 3
    39e6:	3f 4f       	sbci	r19, 0xFF	; 255
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	b9 01       	movw	r22, r18
    39ec:	0e 94 31 18 	call	0x3062	; 0x3062 <HCLCD_Vid4Bits_CustomAlphChar>
	HCLCD_Vid4Bits_CustomAlphChar(1, pattern1);
    39f0:	9e 01       	movw	r18, r28
    39f2:	2b 5f       	subi	r18, 0xFB	; 251
    39f4:	3e 4f       	sbci	r19, 0xFE	; 254
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	b9 01       	movw	r22, r18
    39fa:	0e 94 31 18 	call	0x3062	; 0x3062 <HCLCD_Vid4Bits_CustomAlphChar>
	HCLCD_Vid4Bits_CustomAlphChar(2, pattern2);
    39fe:	9e 01       	movw	r18, r28
    3a00:	23 5f       	subi	r18, 0xF3	; 243
    3a02:	3e 4f       	sbci	r19, 0xFE	; 254
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	b9 01       	movw	r22, r18
    3a08:	0e 94 31 18 	call	0x3062	; 0x3062 <HCLCD_Vid4Bits_CustomAlphChar>
	HCLCD_Vid4Bits_CustomAlphChar(3, pattern3);
    3a0c:	9e 01       	movw	r18, r28
    3a0e:	2b 5e       	subi	r18, 0xEB	; 235
    3a10:	3e 4f       	sbci	r19, 0xFE	; 254
    3a12:	83 e0       	ldi	r24, 0x03	; 3
    3a14:	b9 01       	movw	r22, r18
    3a16:	0e 94 31 18 	call	0x3062	; 0x3062 <HCLCD_Vid4Bits_CustomAlphChar>
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e7 50       	subi	r30, 0x07	; 7
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	a0 e2       	ldi	r26, 0x20	; 32
    3a26:	b1 e4       	ldi	r27, 0x41	; 65
    3a28:	80 83       	st	Z, r24
    3a2a:	91 83       	std	Z+1, r25	; 0x01
    3a2c:	a2 83       	std	Z+2, r26	; 0x02
    3a2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a30:	8e 01       	movw	r16, r28
    3a32:	0b 50       	subi	r16, 0x0B	; 11
    3a34:	1f 4f       	sbci	r17, 0xFF	; 255
    3a36:	fe 01       	movw	r30, r28
    3a38:	e7 50       	subi	r30, 0x07	; 7
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	60 81       	ld	r22, Z
    3a3e:	71 81       	ldd	r23, Z+1	; 0x01
    3a40:	82 81       	ldd	r24, Z+2	; 0x02
    3a42:	93 81       	ldd	r25, Z+3	; 0x03
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	4a ef       	ldi	r20, 0xFA	; 250
    3a4a:	54 e4       	ldi	r21, 0x44	; 68
    3a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	f8 01       	movw	r30, r16
    3a56:	80 83       	st	Z, r24
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	a2 83       	std	Z+2, r26	; 0x02
    3a5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a5e:	fe 01       	movw	r30, r28
    3a60:	eb 50       	subi	r30, 0x0B	; 11
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	60 81       	ld	r22, Z
    3a66:	71 81       	ldd	r23, Z+1	; 0x01
    3a68:	82 81       	ldd	r24, Z+2	; 0x02
    3a6a:	93 81       	ldd	r25, Z+3	; 0x03
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	40 e8       	ldi	r20, 0x80	; 128
    3a72:	5f e3       	ldi	r21, 0x3F	; 63
    3a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a78:	88 23       	and	r24, r24
    3a7a:	44 f4       	brge	.+16     	; 0x3a8c <main+0x3d8>
		__ticks = 1;
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	ed 50       	subi	r30, 0x0D	; 13
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	91 83       	std	Z+1, r25	; 0x01
    3a88:	80 83       	st	Z, r24
    3a8a:	64 c0       	rjmp	.+200    	; 0x3b54 <main+0x4a0>
	else if (__tmp > 65535)
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	eb 50       	subi	r30, 0x0B	; 11
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	60 81       	ld	r22, Z
    3a94:	71 81       	ldd	r23, Z+1	; 0x01
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	3f ef       	ldi	r19, 0xFF	; 255
    3a9e:	4f e7       	ldi	r20, 0x7F	; 127
    3aa0:	57 e4       	ldi	r21, 0x47	; 71
    3aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aa6:	18 16       	cp	r1, r24
    3aa8:	0c f0       	brlt	.+2      	; 0x3aac <main+0x3f8>
    3aaa:	43 c0       	rjmp	.+134    	; 0x3b32 <main+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aac:	fe 01       	movw	r30, r28
    3aae:	e7 50       	subi	r30, 0x07	; 7
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	60 81       	ld	r22, Z
    3ab4:	71 81       	ldd	r23, Z+1	; 0x01
    3ab6:	82 81       	ldd	r24, Z+2	; 0x02
    3ab8:	93 81       	ldd	r25, Z+3	; 0x03
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e2       	ldi	r20, 0x20	; 32
    3ac0:	51 e4       	ldi	r21, 0x41	; 65
    3ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	8e 01       	movw	r16, r28
    3acc:	0d 50       	subi	r16, 0x0D	; 13
    3ace:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad0:	bc 01       	movw	r22, r24
    3ad2:	cd 01       	movw	r24, r26
    3ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	f8 01       	movw	r30, r16
    3ade:	91 83       	std	Z+1, r25	; 0x01
    3ae0:	80 83       	st	Z, r24
    3ae2:	1f c0       	rjmp	.+62     	; 0x3b22 <main+0x46e>
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	ef 50       	subi	r30, 0x0F	; 15
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	88 ec       	ldi	r24, 0xC8	; 200
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	80 83       	st	Z, r24
    3af2:	fe 01       	movw	r30, r28
    3af4:	ef 50       	subi	r30, 0x0F	; 15
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	80 81       	ld	r24, Z
    3afa:	91 81       	ldd	r25, Z+1	; 0x01
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <main+0x448>
    3b00:	fe 01       	movw	r30, r28
    3b02:	ef 50       	subi	r30, 0x0F	; 15
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	91 83       	std	Z+1, r25	; 0x01
    3b08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b0a:	de 01       	movw	r26, r28
    3b0c:	ad 50       	subi	r26, 0x0D	; 13
    3b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3b10:	fe 01       	movw	r30, r28
    3b12:	ed 50       	subi	r30, 0x0D	; 13
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	80 81       	ld	r24, Z
    3b18:	91 81       	ldd	r25, Z+1	; 0x01
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
    3b1c:	11 96       	adiw	r26, 0x01	; 1
    3b1e:	9c 93       	st	X, r25
    3b20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b22:	fe 01       	movw	r30, r28
    3b24:	ed 50       	subi	r30, 0x0D	; 13
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	80 81       	ld	r24, Z
    3b2a:	91 81       	ldd	r25, Z+1	; 0x01
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	d1 f6       	brne	.-76     	; 0x3ae4 <main+0x430>
    3b30:	27 c0       	rjmp	.+78     	; 0x3b80 <main+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b32:	8e 01       	movw	r16, r28
    3b34:	0d 50       	subi	r16, 0x0D	; 13
    3b36:	1f 4f       	sbci	r17, 0xFF	; 255
    3b38:	fe 01       	movw	r30, r28
    3b3a:	eb 50       	subi	r30, 0x0B	; 11
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	93 81       	ldd	r25, Z+3	; 0x03
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	f8 01       	movw	r30, r16
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
    3b54:	de 01       	movw	r26, r28
    3b56:	a1 51       	subi	r26, 0x11	; 17
    3b58:	bf 4f       	sbci	r27, 0xFF	; 255
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	ed 50       	subi	r30, 0x0D	; 13
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	80 81       	ld	r24, Z
    3b62:	91 81       	ldd	r25, Z+1	; 0x01
    3b64:	8d 93       	st	X+, r24
    3b66:	9c 93       	st	X, r25
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e1 51       	subi	r30, 0x11	; 17
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	80 81       	ld	r24, Z
    3b70:	91 81       	ldd	r25, Z+1	; 0x01
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <main+0x4be>
    3b76:	fe 01       	movw	r30, r28
    3b78:	e1 51       	subi	r30, 0x11	; 17
    3b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	80 83       	st	Z, r24
	/***********************************************Display Welcome Massage on LCD ********************************************************/
	_delay_ms(10);
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	//LCD_VidGoToRowCol(0,4);
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE1,4);
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	64 e0       	ldi	r22, 0x04	; 4
    3b90:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayCharacter('W');
    3b94:	87 e5       	ldi	r24, 0x57	; 87
    3b96:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('e');
    3b9a:	85 e6       	ldi	r24, 0x65	; 101
    3b9c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('l');
    3ba0:	8c e6       	ldi	r24, 0x6C	; 108
    3ba2:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('c');
    3ba6:	83 e6       	ldi	r24, 0x63	; 99
    3ba8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('o');
    3bac:	8f e6       	ldi	r24, 0x6F	; 111
    3bae:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('m');
    3bb2:	8d e6       	ldi	r24, 0x6D	; 109
    3bb4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('e');
    3bb8:	85 e6       	ldi	r24, 0x65	; 101
    3bba:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e5 51       	subi	r30, 0x15	; 21
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	aa e7       	ldi	r26, 0x7A	; 122
    3bca:	b4 e4       	ldi	r27, 0x44	; 68
    3bcc:	80 83       	st	Z, r24
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	a2 83       	std	Z+2, r26	; 0x02
    3bd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd4:	8e 01       	movw	r16, r28
    3bd6:	09 51       	subi	r16, 0x19	; 25
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e5 51       	subi	r30, 0x15	; 21
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	60 81       	ld	r22, Z
    3be2:	71 81       	ldd	r23, Z+1	; 0x01
    3be4:	82 81       	ldd	r24, Z+2	; 0x02
    3be6:	93 81       	ldd	r25, Z+3	; 0x03
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	4a ef       	ldi	r20, 0xFA	; 250
    3bee:	54 e4       	ldi	r21, 0x44	; 68
    3bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	80 83       	st	Z, r24
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	a2 83       	std	Z+2, r26	; 0x02
    3c00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c02:	fe 01       	movw	r30, r28
    3c04:	e9 51       	subi	r30, 0x19	; 25
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	60 81       	ld	r22, Z
    3c0a:	71 81       	ldd	r23, Z+1	; 0x01
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e8       	ldi	r20, 0x80	; 128
    3c16:	5f e3       	ldi	r21, 0x3F	; 63
    3c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c1c:	88 23       	and	r24, r24
    3c1e:	44 f4       	brge	.+16     	; 0x3c30 <main+0x57c>
		__ticks = 1;
    3c20:	fe 01       	movw	r30, r28
    3c22:	eb 51       	subi	r30, 0x1B	; 27
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
    3c2e:	64 c0       	rjmp	.+200    	; 0x3cf8 <main+0x644>
	else if (__tmp > 65535)
    3c30:	fe 01       	movw	r30, r28
    3c32:	e9 51       	subi	r30, 0x19	; 25
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	60 81       	ld	r22, Z
    3c38:	71 81       	ldd	r23, Z+1	; 0x01
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	3f ef       	ldi	r19, 0xFF	; 255
    3c42:	4f e7       	ldi	r20, 0x7F	; 127
    3c44:	57 e4       	ldi	r21, 0x47	; 71
    3c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c4a:	18 16       	cp	r1, r24
    3c4c:	0c f0       	brlt	.+2      	; 0x3c50 <main+0x59c>
    3c4e:	43 c0       	rjmp	.+134    	; 0x3cd6 <main+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c50:	fe 01       	movw	r30, r28
    3c52:	e5 51       	subi	r30, 0x15	; 21
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	60 81       	ld	r22, Z
    3c58:	71 81       	ldd	r23, Z+1	; 0x01
    3c5a:	82 81       	ldd	r24, Z+2	; 0x02
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e2       	ldi	r20, 0x20	; 32
    3c64:	51 e4       	ldi	r21, 0x41	; 65
    3c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	8e 01       	movw	r16, r28
    3c70:	0b 51       	subi	r16, 0x1B	; 27
    3c72:	1f 4f       	sbci	r17, 0xFF	; 255
    3c74:	bc 01       	movw	r22, r24
    3c76:	cd 01       	movw	r24, r26
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	f8 01       	movw	r30, r16
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
    3c86:	1f c0       	rjmp	.+62     	; 0x3cc6 <main+0x612>
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ed 51       	subi	r30, 0x1D	; 29
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	88 ec       	ldi	r24, 0xC8	; 200
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	91 83       	std	Z+1, r25	; 0x01
    3c94:	80 83       	st	Z, r24
    3c96:	fe 01       	movw	r30, r28
    3c98:	ed 51       	subi	r30, 0x1D	; 29
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	80 81       	ld	r24, Z
    3c9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	f1 f7       	brne	.-4      	; 0x3ca0 <main+0x5ec>
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	ed 51       	subi	r30, 0x1D	; 29
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	91 83       	std	Z+1, r25	; 0x01
    3cac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cae:	de 01       	movw	r26, r28
    3cb0:	ab 51       	subi	r26, 0x1B	; 27
    3cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	eb 51       	subi	r30, 0x1B	; 27
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	11 96       	adiw	r26, 0x01	; 1
    3cc2:	9c 93       	st	X, r25
    3cc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	eb 51       	subi	r30, 0x1B	; 27
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	80 81       	ld	r24, Z
    3cce:	91 81       	ldd	r25, Z+1	; 0x01
    3cd0:	00 97       	sbiw	r24, 0x00	; 0
    3cd2:	d1 f6       	brne	.-76     	; 0x3c88 <main+0x5d4>
    3cd4:	27 c0       	rjmp	.+78     	; 0x3d24 <main+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd6:	8e 01       	movw	r16, r28
    3cd8:	0b 51       	subi	r16, 0x1B	; 27
    3cda:	1f 4f       	sbci	r17, 0xFF	; 255
    3cdc:	fe 01       	movw	r30, r28
    3cde:	e9 51       	subi	r30, 0x19	; 25
    3ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce2:	60 81       	ld	r22, Z
    3ce4:	71 81       	ldd	r23, Z+1	; 0x01
    3ce6:	82 81       	ldd	r24, Z+2	; 0x02
    3ce8:	93 81       	ldd	r25, Z+3	; 0x03
    3cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	f8 01       	movw	r30, r16
    3cf4:	91 83       	std	Z+1, r25	; 0x01
    3cf6:	80 83       	st	Z, r24
    3cf8:	de 01       	movw	r26, r28
    3cfa:	af 51       	subi	r26, 0x1F	; 31
    3cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    3cfe:	fe 01       	movw	r30, r28
    3d00:	eb 51       	subi	r30, 0x1B	; 27
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	80 81       	ld	r24, Z
    3d06:	91 81       	ldd	r25, Z+1	; 0x01
    3d08:	8d 93       	st	X+, r24
    3d0a:	9c 93       	st	X, r25
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	ef 51       	subi	r30, 0x1F	; 31
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	f1 f7       	brne	.-4      	; 0x3d16 <main+0x662>
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	ef 51       	subi	r30, 0x1F	; 31
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	91 83       	std	Z+1, r25	; 0x01
    3d22:	80 83       	st	Z, r24
	_delay_ms(1000);
	HCLCD_Vid4Bits_DisplayShiftLeft(7);
    3d24:	87 e0       	ldi	r24, 0x07	; 7
    3d26:	0e 94 02 19 	call	0x3204	; 0x3204 <HCLCD_Vid4Bits_DisplayShiftLeft>
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e3 52       	subi	r30, 0x23	; 35
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	aa e7       	ldi	r26, 0x7A	; 122
    3d36:	b4 e4       	ldi	r27, 0x44	; 68
    3d38:	80 83       	st	Z, r24
    3d3a:	91 83       	std	Z+1, r25	; 0x01
    3d3c:	a2 83       	std	Z+2, r26	; 0x02
    3d3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d40:	8e 01       	movw	r16, r28
    3d42:	07 52       	subi	r16, 0x27	; 39
    3d44:	1f 4f       	sbci	r17, 0xFF	; 255
    3d46:	fe 01       	movw	r30, r28
    3d48:	e3 52       	subi	r30, 0x23	; 35
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	60 81       	ld	r22, Z
    3d4e:	71 81       	ldd	r23, Z+1	; 0x01
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	93 81       	ldd	r25, Z+3	; 0x03
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	4a ef       	ldi	r20, 0xFA	; 250
    3d5a:	54 e4       	ldi	r21, 0x44	; 68
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	f8 01       	movw	r30, r16
    3d66:	80 83       	st	Z, r24
    3d68:	91 83       	std	Z+1, r25	; 0x01
    3d6a:	a2 83       	std	Z+2, r26	; 0x02
    3d6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e7 52       	subi	r30, 0x27	; 39
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	60 81       	ld	r22, Z
    3d76:	71 81       	ldd	r23, Z+1	; 0x01
    3d78:	82 81       	ldd	r24, Z+2	; 0x02
    3d7a:	93 81       	ldd	r25, Z+3	; 0x03
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	40 e8       	ldi	r20, 0x80	; 128
    3d82:	5f e3       	ldi	r21, 0x3F	; 63
    3d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d88:	88 23       	and	r24, r24
    3d8a:	44 f4       	brge	.+16     	; 0x3d9c <main+0x6e8>
		__ticks = 1;
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e9 52       	subi	r30, 0x29	; 41
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	91 83       	std	Z+1, r25	; 0x01
    3d98:	80 83       	st	Z, r24
    3d9a:	64 c0       	rjmp	.+200    	; 0x3e64 <main+0x7b0>
	else if (__tmp > 65535)
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	e7 52       	subi	r30, 0x27	; 39
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	60 81       	ld	r22, Z
    3da4:	71 81       	ldd	r23, Z+1	; 0x01
    3da6:	82 81       	ldd	r24, Z+2	; 0x02
    3da8:	93 81       	ldd	r25, Z+3	; 0x03
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	3f ef       	ldi	r19, 0xFF	; 255
    3dae:	4f e7       	ldi	r20, 0x7F	; 127
    3db0:	57 e4       	ldi	r21, 0x47	; 71
    3db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3db6:	18 16       	cp	r1, r24
    3db8:	0c f0       	brlt	.+2      	; 0x3dbc <main+0x708>
    3dba:	43 c0       	rjmp	.+134    	; 0x3e42 <main+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	e3 52       	subi	r30, 0x23	; 35
    3dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc2:	60 81       	ld	r22, Z
    3dc4:	71 81       	ldd	r23, Z+1	; 0x01
    3dc6:	82 81       	ldd	r24, Z+2	; 0x02
    3dc8:	93 81       	ldd	r25, Z+3	; 0x03
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	40 e2       	ldi	r20, 0x20	; 32
    3dd0:	51 e4       	ldi	r21, 0x41	; 65
    3dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	8e 01       	movw	r16, r28
    3ddc:	09 52       	subi	r16, 0x29	; 41
    3dde:	1f 4f       	sbci	r17, 0xFF	; 255
    3de0:	bc 01       	movw	r22, r24
    3de2:	cd 01       	movw	r24, r26
    3de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	f8 01       	movw	r30, r16
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24
    3df2:	1f c0       	rjmp	.+62     	; 0x3e32 <main+0x77e>
    3df4:	fe 01       	movw	r30, r28
    3df6:	eb 52       	subi	r30, 0x2B	; 43
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	88 ec       	ldi	r24, 0xC8	; 200
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	80 83       	st	Z, r24
    3e02:	fe 01       	movw	r30, r28
    3e04:	eb 52       	subi	r30, 0x2B	; 43
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	80 81       	ld	r24, Z
    3e0a:	91 81       	ldd	r25, Z+1	; 0x01
    3e0c:	01 97       	sbiw	r24, 0x01	; 1
    3e0e:	f1 f7       	brne	.-4      	; 0x3e0c <main+0x758>
    3e10:	fe 01       	movw	r30, r28
    3e12:	eb 52       	subi	r30, 0x2B	; 43
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e1a:	de 01       	movw	r26, r28
    3e1c:	a9 52       	subi	r26, 0x29	; 41
    3e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e20:	fe 01       	movw	r30, r28
    3e22:	e9 52       	subi	r30, 0x29	; 41
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	80 81       	ld	r24, Z
    3e28:	91 81       	ldd	r25, Z+1	; 0x01
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	11 96       	adiw	r26, 0x01	; 1
    3e2e:	9c 93       	st	X, r25
    3e30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e32:	fe 01       	movw	r30, r28
    3e34:	e9 52       	subi	r30, 0x29	; 41
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	80 81       	ld	r24, Z
    3e3a:	91 81       	ldd	r25, Z+1	; 0x01
    3e3c:	00 97       	sbiw	r24, 0x00	; 0
    3e3e:	d1 f6       	brne	.-76     	; 0x3df4 <main+0x740>
    3e40:	27 c0       	rjmp	.+78     	; 0x3e90 <main+0x7dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e42:	8e 01       	movw	r16, r28
    3e44:	09 52       	subi	r16, 0x29	; 41
    3e46:	1f 4f       	sbci	r17, 0xFF	; 255
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e7 52       	subi	r30, 0x27	; 39
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	60 81       	ld	r22, Z
    3e50:	71 81       	ldd	r23, Z+1	; 0x01
    3e52:	82 81       	ldd	r24, Z+2	; 0x02
    3e54:	93 81       	ldd	r25, Z+3	; 0x03
    3e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	f8 01       	movw	r30, r16
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	80 83       	st	Z, r24
    3e64:	de 01       	movw	r26, r28
    3e66:	ad 52       	subi	r26, 0x2D	; 45
    3e68:	bf 4f       	sbci	r27, 0xFF	; 255
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	e9 52       	subi	r30, 0x29	; 41
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	8d 93       	st	X+, r24
    3e76:	9c 93       	st	X, r25
    3e78:	fe 01       	movw	r30, r28
    3e7a:	ed 52       	subi	r30, 0x2D	; 45
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	80 81       	ld	r24, Z
    3e80:	91 81       	ldd	r25, Z+1	; 0x01
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	f1 f7       	brne	.-4      	; 0x3e82 <main+0x7ce>
    3e86:	fe 01       	movw	r30, r28
    3e88:	ed 52       	subi	r30, 0x2D	; 45
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	80 83       	st	Z, r24
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    3e90:	0e 94 77 18 	call	0x30ee	; 0x30ee <HCLCD_Vid4Bits_ClearScreen>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,5);
    3e94:	82 e0       	ldi	r24, 0x02	; 2
    3e96:	65 e0       	ldi	r22, 0x05	; 5
    3e98:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayCharacter('T');
    3e9c:	84 e5       	ldi	r24, 0x54	; 84
    3e9e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('A');
    3ea2:	81 e4       	ldi	r24, 0x41	; 65
    3ea4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('S');
    3ea8:	83 e5       	ldi	r24, 0x53	; 83
    3eaa:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('K');
    3eae:	8b e4       	ldi	r24, 0x4B	; 75
    3eb0:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter(' ');
    3eb4:	80 e2       	ldi	r24, 0x20	; 32
    3eb6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayCharacter('4');
    3eba:	84 e3       	ldi	r24, 0x34	; 52
    3ebc:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_CursorShiftRight(2);
    3ec0:	82 e0       	ldi	r24, 0x02	; 2
    3ec2:	0e 94 c4 1a 	call	0x3588	; 0x3588 <HCLCD_Vid4Bits_CursorShiftRight>
	HCLCD_Vid4Bits_DisplayCharacter('R');
    3ec6:	82 e5       	ldi	r24, 0x52	; 82
    3ec8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e1 53       	subi	r30, 0x31	; 49
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	aa e7       	ldi	r26, 0x7A	; 122
    3ed8:	b4 e4       	ldi	r27, 0x44	; 68
    3eda:	80 83       	st	Z, r24
    3edc:	91 83       	std	Z+1, r25	; 0x01
    3ede:	a2 83       	std	Z+2, r26	; 0x02
    3ee0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee2:	8e 01       	movw	r16, r28
    3ee4:	05 53       	subi	r16, 0x35	; 53
    3ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e1 53       	subi	r30, 0x31	; 49
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	60 81       	ld	r22, Z
    3ef0:	71 81       	ldd	r23, Z+1	; 0x01
    3ef2:	82 81       	ldd	r24, Z+2	; 0x02
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	4a ef       	ldi	r20, 0xFA	; 250
    3efc:	54 e4       	ldi	r21, 0x44	; 68
    3efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	f8 01       	movw	r30, r16
    3f08:	80 83       	st	Z, r24
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	a2 83       	std	Z+2, r26	; 0x02
    3f0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f10:	fe 01       	movw	r30, r28
    3f12:	e5 53       	subi	r30, 0x35	; 53
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	60 81       	ld	r22, Z
    3f18:	71 81       	ldd	r23, Z+1	; 0x01
    3f1a:	82 81       	ldd	r24, Z+2	; 0x02
    3f1c:	93 81       	ldd	r25, Z+3	; 0x03
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	40 e8       	ldi	r20, 0x80	; 128
    3f24:	5f e3       	ldi	r21, 0x3F	; 63
    3f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f2a:	88 23       	and	r24, r24
    3f2c:	44 f4       	brge	.+16     	; 0x3f3e <main+0x88a>
		__ticks = 1;
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e7 53       	subi	r30, 0x37	; 55
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	80 83       	st	Z, r24
    3f3c:	64 c0       	rjmp	.+200    	; 0x4006 <main+0x952>
	else if (__tmp > 65535)
    3f3e:	fe 01       	movw	r30, r28
    3f40:	e5 53       	subi	r30, 0x35	; 53
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	60 81       	ld	r22, Z
    3f46:	71 81       	ldd	r23, Z+1	; 0x01
    3f48:	82 81       	ldd	r24, Z+2	; 0x02
    3f4a:	93 81       	ldd	r25, Z+3	; 0x03
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	3f ef       	ldi	r19, 0xFF	; 255
    3f50:	4f e7       	ldi	r20, 0x7F	; 127
    3f52:	57 e4       	ldi	r21, 0x47	; 71
    3f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f58:	18 16       	cp	r1, r24
    3f5a:	0c f0       	brlt	.+2      	; 0x3f5e <main+0x8aa>
    3f5c:	43 c0       	rjmp	.+134    	; 0x3fe4 <main+0x930>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f5e:	fe 01       	movw	r30, r28
    3f60:	e1 53       	subi	r30, 0x31	; 49
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	60 81       	ld	r22, Z
    3f66:	71 81       	ldd	r23, Z+1	; 0x01
    3f68:	82 81       	ldd	r24, Z+2	; 0x02
    3f6a:	93 81       	ldd	r25, Z+3	; 0x03
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e2       	ldi	r20, 0x20	; 32
    3f72:	51 e4       	ldi	r21, 0x41	; 65
    3f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	8e 01       	movw	r16, r28
    3f7e:	07 53       	subi	r16, 0x37	; 55
    3f80:	1f 4f       	sbci	r17, 0xFF	; 255
    3f82:	bc 01       	movw	r22, r24
    3f84:	cd 01       	movw	r24, r26
    3f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	f8 01       	movw	r30, r16
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	80 83       	st	Z, r24
    3f94:	1f c0       	rjmp	.+62     	; 0x3fd4 <main+0x920>
    3f96:	fe 01       	movw	r30, r28
    3f98:	e9 53       	subi	r30, 0x39	; 57
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	88 ec       	ldi	r24, 0xC8	; 200
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	91 83       	std	Z+1, r25	; 0x01
    3fa2:	80 83       	st	Z, r24
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e9 53       	subi	r30, 0x39	; 57
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	80 81       	ld	r24, Z
    3fac:	91 81       	ldd	r25, Z+1	; 0x01
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <main+0x8fa>
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	e9 53       	subi	r30, 0x39	; 57
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	91 83       	std	Z+1, r25	; 0x01
    3fba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fbc:	de 01       	movw	r26, r28
    3fbe:	a7 53       	subi	r26, 0x37	; 55
    3fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e7 53       	subi	r30, 0x37	; 55
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 81       	ld	r24, Z
    3fca:	91 81       	ldd	r25, Z+1	; 0x01
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	11 96       	adiw	r26, 0x01	; 1
    3fd0:	9c 93       	st	X, r25
    3fd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	e7 53       	subi	r30, 0x37	; 55
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	80 81       	ld	r24, Z
    3fdc:	91 81       	ldd	r25, Z+1	; 0x01
    3fde:	00 97       	sbiw	r24, 0x00	; 0
    3fe0:	d1 f6       	brne	.-76     	; 0x3f96 <main+0x8e2>
    3fe2:	27 c0       	rjmp	.+78     	; 0x4032 <main+0x97e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe4:	8e 01       	movw	r16, r28
    3fe6:	07 53       	subi	r16, 0x37	; 55
    3fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fea:	fe 01       	movw	r30, r28
    3fec:	e5 53       	subi	r30, 0x35	; 53
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	60 81       	ld	r22, Z
    3ff2:	71 81       	ldd	r23, Z+1	; 0x01
    3ff4:	82 81       	ldd	r24, Z+2	; 0x02
    3ff6:	93 81       	ldd	r25, Z+3	; 0x03
    3ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	f8 01       	movw	r30, r16
    4002:	91 83       	std	Z+1, r25	; 0x01
    4004:	80 83       	st	Z, r24
    4006:	de 01       	movw	r26, r28
    4008:	ab 53       	subi	r26, 0x3B	; 59
    400a:	bf 4f       	sbci	r27, 0xFF	; 255
    400c:	fe 01       	movw	r30, r28
    400e:	e7 53       	subi	r30, 0x37	; 55
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	80 81       	ld	r24, Z
    4014:	91 81       	ldd	r25, Z+1	; 0x01
    4016:	8d 93       	st	X+, r24
    4018:	9c 93       	st	X, r25
    401a:	fe 01       	movw	r30, r28
    401c:	eb 53       	subi	r30, 0x3B	; 59
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 81       	ld	r24, Z
    4022:	91 81       	ldd	r25, Z+1	; 0x01
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	f1 f7       	brne	.-4      	; 0x4024 <main+0x970>
    4028:	fe 01       	movw	r30, r28
    402a:	eb 53       	subi	r30, 0x3B	; 59
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	80 83       	st	Z, r24

	_delay_ms(1000);
	/*send most Nipple first*/

	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	//HCLCD_Vid4Bits_SetPosition(HCLCD_LINE1,4);
	HCLCD_Vid4Bits_CursorShiftRight(4);
    403e:	84 e0       	ldi	r24, 0x04	; 4
    4040:	0e 94 c4 1a 	call	0x3588	; 0x3588 <HCLCD_Vid4Bits_CursorShiftRight>
	HCLCD_Vid4Bits_DisplayString((u8*)"My Name is");
    4044:	80 e6       	ldi	r24, 0x60	; 96
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
    404c:	fe 01       	movw	r30, r28
    404e:	ef 53       	subi	r30, 0x3F	; 63
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	aa ef       	ldi	r26, 0xFA	; 250
    4058:	b4 e4       	ldi	r27, 0x44	; 68
    405a:	80 83       	st	Z, r24
    405c:	91 83       	std	Z+1, r25	; 0x01
    405e:	a2 83       	std	Z+2, r26	; 0x02
    4060:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4062:	8e 01       	movw	r16, r28
    4064:	03 54       	subi	r16, 0x43	; 67
    4066:	1f 4f       	sbci	r17, 0xFF	; 255
    4068:	fe 01       	movw	r30, r28
    406a:	ef 53       	subi	r30, 0x3F	; 63
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	4a ef       	ldi	r20, 0xFA	; 250
    407c:	54 e4       	ldi	r21, 0x44	; 68
    407e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	f8 01       	movw	r30, r16
    4088:	80 83       	st	Z, r24
    408a:	91 83       	std	Z+1, r25	; 0x01
    408c:	a2 83       	std	Z+2, r26	; 0x02
    408e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4090:	fe 01       	movw	r30, r28
    4092:	e3 54       	subi	r30, 0x43	; 67
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	60 81       	ld	r22, Z
    4098:	71 81       	ldd	r23, Z+1	; 0x01
    409a:	82 81       	ldd	r24, Z+2	; 0x02
    409c:	93 81       	ldd	r25, Z+3	; 0x03
    409e:	20 e0       	ldi	r18, 0x00	; 0
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	40 e8       	ldi	r20, 0x80	; 128
    40a4:	5f e3       	ldi	r21, 0x3F	; 63
    40a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40aa:	88 23       	and	r24, r24
    40ac:	44 f4       	brge	.+16     	; 0x40be <main+0xa0a>
		__ticks = 1;
    40ae:	fe 01       	movw	r30, r28
    40b0:	e5 54       	subi	r30, 0x45	; 69
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	91 83       	std	Z+1, r25	; 0x01
    40ba:	80 83       	st	Z, r24
    40bc:	64 c0       	rjmp	.+200    	; 0x4186 <main+0xad2>
	else if (__tmp > 65535)
    40be:	fe 01       	movw	r30, r28
    40c0:	e3 54       	subi	r30, 0x43	; 67
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	60 81       	ld	r22, Z
    40c6:	71 81       	ldd	r23, Z+1	; 0x01
    40c8:	82 81       	ldd	r24, Z+2	; 0x02
    40ca:	93 81       	ldd	r25, Z+3	; 0x03
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	3f ef       	ldi	r19, 0xFF	; 255
    40d0:	4f e7       	ldi	r20, 0x7F	; 127
    40d2:	57 e4       	ldi	r21, 0x47	; 71
    40d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40d8:	18 16       	cp	r1, r24
    40da:	0c f0       	brlt	.+2      	; 0x40de <main+0xa2a>
    40dc:	43 c0       	rjmp	.+134    	; 0x4164 <main+0xab0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40de:	fe 01       	movw	r30, r28
    40e0:	ef 53       	subi	r30, 0x3F	; 63
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	60 81       	ld	r22, Z
    40e6:	71 81       	ldd	r23, Z+1	; 0x01
    40e8:	82 81       	ldd	r24, Z+2	; 0x02
    40ea:	93 81       	ldd	r25, Z+3	; 0x03
    40ec:	20 e0       	ldi	r18, 0x00	; 0
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	40 e2       	ldi	r20, 0x20	; 32
    40f2:	51 e4       	ldi	r21, 0x41	; 65
    40f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f8:	dc 01       	movw	r26, r24
    40fa:	cb 01       	movw	r24, r22
    40fc:	8e 01       	movw	r16, r28
    40fe:	05 54       	subi	r16, 0x45	; 69
    4100:	1f 4f       	sbci	r17, 0xFF	; 255
    4102:	bc 01       	movw	r22, r24
    4104:	cd 01       	movw	r24, r26
    4106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	f8 01       	movw	r30, r16
    4110:	91 83       	std	Z+1, r25	; 0x01
    4112:	80 83       	st	Z, r24
    4114:	1f c0       	rjmp	.+62     	; 0x4154 <main+0xaa0>
    4116:	fe 01       	movw	r30, r28
    4118:	e7 54       	subi	r30, 0x47	; 71
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	88 ec       	ldi	r24, 0xC8	; 200
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	91 83       	std	Z+1, r25	; 0x01
    4122:	80 83       	st	Z, r24
    4124:	fe 01       	movw	r30, r28
    4126:	e7 54       	subi	r30, 0x47	; 71
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	80 81       	ld	r24, Z
    412c:	91 81       	ldd	r25, Z+1	; 0x01
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	f1 f7       	brne	.-4      	; 0x412e <main+0xa7a>
    4132:	fe 01       	movw	r30, r28
    4134:	e7 54       	subi	r30, 0x47	; 71
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	91 83       	std	Z+1, r25	; 0x01
    413a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    413c:	de 01       	movw	r26, r28
    413e:	a5 54       	subi	r26, 0x45	; 69
    4140:	bf 4f       	sbci	r27, 0xFF	; 255
    4142:	fe 01       	movw	r30, r28
    4144:	e5 54       	subi	r30, 0x45	; 69
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	80 81       	ld	r24, Z
    414a:	91 81       	ldd	r25, Z+1	; 0x01
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	11 96       	adiw	r26, 0x01	; 1
    4150:	9c 93       	st	X, r25
    4152:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4154:	fe 01       	movw	r30, r28
    4156:	e5 54       	subi	r30, 0x45	; 69
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	80 81       	ld	r24, Z
    415c:	91 81       	ldd	r25, Z+1	; 0x01
    415e:	00 97       	sbiw	r24, 0x00	; 0
    4160:	d1 f6       	brne	.-76     	; 0x4116 <main+0xa62>
    4162:	27 c0       	rjmp	.+78     	; 0x41b2 <main+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4164:	8e 01       	movw	r16, r28
    4166:	05 54       	subi	r16, 0x45	; 69
    4168:	1f 4f       	sbci	r17, 0xFF	; 255
    416a:	fe 01       	movw	r30, r28
    416c:	e3 54       	subi	r30, 0x43	; 67
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	60 81       	ld	r22, Z
    4172:	71 81       	ldd	r23, Z+1	; 0x01
    4174:	82 81       	ldd	r24, Z+2	; 0x02
    4176:	93 81       	ldd	r25, Z+3	; 0x03
    4178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	f8 01       	movw	r30, r16
    4182:	91 83       	std	Z+1, r25	; 0x01
    4184:	80 83       	st	Z, r24
    4186:	de 01       	movw	r26, r28
    4188:	a9 54       	subi	r26, 0x49	; 73
    418a:	bf 4f       	sbci	r27, 0xFF	; 255
    418c:	fe 01       	movw	r30, r28
    418e:	e5 54       	subi	r30, 0x45	; 69
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	80 81       	ld	r24, Z
    4194:	91 81       	ldd	r25, Z+1	; 0x01
    4196:	8d 93       	st	X+, r24
    4198:	9c 93       	st	X, r25
    419a:	fe 01       	movw	r30, r28
    419c:	e9 54       	subi	r30, 0x49	; 73
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	80 81       	ld	r24, Z
    41a2:	91 81       	ldd	r25, Z+1	; 0x01
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <main+0xaf0>
    41a8:	fe 01       	movw	r30, r28
    41aa:	e9 54       	subi	r30, 0x49	; 73
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	91 83       	std	Z+1, r25	; 0x01
    41b0:	80 83       	st	Z, r24
	_delay_ms(2000);

	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,2);
    41b2:	82 e0       	ldi	r24, 0x02	; 2
    41b4:	62 e0       	ldi	r22, 0x02	; 2
    41b6:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>

	u8 LOC_Name[] = "Khaled";
    41ba:	ce 01       	movw	r24, r28
    41bc:	83 5e       	subi	r24, 0xE3	; 227
    41be:	9e 4f       	sbci	r25, 0xFE	; 254
    41c0:	c8 5c       	subi	r28, 0xC8	; 200
    41c2:	de 4f       	sbci	r29, 0xFE	; 254
    41c4:	99 83       	std	Y+1, r25	; 0x01
    41c6:	88 83       	st	Y, r24
    41c8:	c8 53       	subi	r28, 0x38	; 56
    41ca:	d1 40       	sbci	r29, 0x01	; 1
    41cc:	82 e9       	ldi	r24, 0x92	; 146
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	c6 5c       	subi	r28, 0xC6	; 198
    41d2:	de 4f       	sbci	r29, 0xFE	; 254
    41d4:	99 83       	std	Y+1, r25	; 0x01
    41d6:	88 83       	st	Y, r24
    41d8:	ca 53       	subi	r28, 0x3A	; 58
    41da:	d1 40       	sbci	r29, 0x01	; 1
    41dc:	97 e0       	ldi	r25, 0x07	; 7
    41de:	c4 5c       	subi	r28, 0xC4	; 196
    41e0:	de 4f       	sbci	r29, 0xFE	; 254
    41e2:	98 83       	st	Y, r25
    41e4:	cc 53       	subi	r28, 0x3C	; 60
    41e6:	d1 40       	sbci	r29, 0x01	; 1
    41e8:	c6 5c       	subi	r28, 0xC6	; 198
    41ea:	de 4f       	sbci	r29, 0xFE	; 254
    41ec:	e8 81       	ld	r30, Y
    41ee:	f9 81       	ldd	r31, Y+1	; 0x01
    41f0:	ca 53       	subi	r28, 0x3A	; 58
    41f2:	d1 40       	sbci	r29, 0x01	; 1
    41f4:	00 80       	ld	r0, Z
    41f6:	c6 5c       	subi	r28, 0xC6	; 198
    41f8:	de 4f       	sbci	r29, 0xFE	; 254
    41fa:	88 81       	ld	r24, Y
    41fc:	99 81       	ldd	r25, Y+1	; 0x01
    41fe:	ca 53       	subi	r28, 0x3A	; 58
    4200:	d1 40       	sbci	r29, 0x01	; 1
    4202:	01 96       	adiw	r24, 0x01	; 1
    4204:	c6 5c       	subi	r28, 0xC6	; 198
    4206:	de 4f       	sbci	r29, 0xFE	; 254
    4208:	99 83       	std	Y+1, r25	; 0x01
    420a:	88 83       	st	Y, r24
    420c:	ca 53       	subi	r28, 0x3A	; 58
    420e:	d1 40       	sbci	r29, 0x01	; 1
    4210:	c8 5c       	subi	r28, 0xC8	; 200
    4212:	de 4f       	sbci	r29, 0xFE	; 254
    4214:	e8 81       	ld	r30, Y
    4216:	f9 81       	ldd	r31, Y+1	; 0x01
    4218:	c8 53       	subi	r28, 0x38	; 56
    421a:	d1 40       	sbci	r29, 0x01	; 1
    421c:	00 82       	st	Z, r0
    421e:	c8 5c       	subi	r28, 0xC8	; 200
    4220:	de 4f       	sbci	r29, 0xFE	; 254
    4222:	88 81       	ld	r24, Y
    4224:	99 81       	ldd	r25, Y+1	; 0x01
    4226:	c8 53       	subi	r28, 0x38	; 56
    4228:	d1 40       	sbci	r29, 0x01	; 1
    422a:	01 96       	adiw	r24, 0x01	; 1
    422c:	c8 5c       	subi	r28, 0xC8	; 200
    422e:	de 4f       	sbci	r29, 0xFE	; 254
    4230:	99 83       	std	Y+1, r25	; 0x01
    4232:	88 83       	st	Y, r24
    4234:	c8 53       	subi	r28, 0x38	; 56
    4236:	d1 40       	sbci	r29, 0x01	; 1
    4238:	c4 5c       	subi	r28, 0xC4	; 196
    423a:	de 4f       	sbci	r29, 0xFE	; 254
    423c:	98 81       	ld	r25, Y
    423e:	cc 53       	subi	r28, 0x3C	; 60
    4240:	d1 40       	sbci	r29, 0x01	; 1
    4242:	91 50       	subi	r25, 0x01	; 1
    4244:	c4 5c       	subi	r28, 0xC4	; 196
    4246:	de 4f       	sbci	r29, 0xFE	; 254
    4248:	98 83       	st	Y, r25
    424a:	cc 53       	subi	r28, 0x3C	; 60
    424c:	d1 40       	sbci	r29, 0x01	; 1
    424e:	c4 5c       	subi	r28, 0xC4	; 196
    4250:	de 4f       	sbci	r29, 0xFE	; 254
    4252:	e8 81       	ld	r30, Y
    4254:	cc 53       	subi	r28, 0x3C	; 60
    4256:	d1 40       	sbci	r29, 0x01	; 1
    4258:	ee 23       	and	r30, r30
    425a:	31 f6       	brne	.-116    	; 0x41e8 <main+0xb34>
	HCLCD_Vid4Bits_DisplayString((u8*)"Ahmed");
    425c:	8b e6       	ldi	r24, 0x6B	; 107
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
	HCLCD_Vid4Bits_DisplayCharacter(' ');
    4264:	80 e2       	ldi	r24, 0x20	; 32
    4266:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_DisplayString(LOC_Name);
    426a:	ce 01       	movw	r24, r28
    426c:	83 5e       	subi	r24, 0xE3	; 227
    426e:	9e 4f       	sbci	r25, 0xFE	; 254
    4270:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
    4274:	fe 01       	movw	r30, r28
    4276:	ed 54       	subi	r30, 0x4D	; 77
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	aa ef       	ldi	r26, 0xFA	; 250
    4280:	b4 e4       	ldi	r27, 0x44	; 68
    4282:	80 83       	st	Z, r24
    4284:	91 83       	std	Z+1, r25	; 0x01
    4286:	a2 83       	std	Z+2, r26	; 0x02
    4288:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428a:	8e 01       	movw	r16, r28
    428c:	01 55       	subi	r16, 0x51	; 81
    428e:	1f 4f       	sbci	r17, 0xFF	; 255
    4290:	fe 01       	movw	r30, r28
    4292:	ed 54       	subi	r30, 0x4D	; 77
    4294:	ff 4f       	sbci	r31, 0xFF	; 255
    4296:	60 81       	ld	r22, Z
    4298:	71 81       	ldd	r23, Z+1	; 0x01
    429a:	82 81       	ldd	r24, Z+2	; 0x02
    429c:	93 81       	ldd	r25, Z+3	; 0x03
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	4a ef       	ldi	r20, 0xFA	; 250
    42a4:	54 e4       	ldi	r21, 0x44	; 68
    42a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	f8 01       	movw	r30, r16
    42b0:	80 83       	st	Z, r24
    42b2:	91 83       	std	Z+1, r25	; 0x01
    42b4:	a2 83       	std	Z+2, r26	; 0x02
    42b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42b8:	fe 01       	movw	r30, r28
    42ba:	e1 55       	subi	r30, 0x51	; 81
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	60 81       	ld	r22, Z
    42c0:	71 81       	ldd	r23, Z+1	; 0x01
    42c2:	82 81       	ldd	r24, Z+2	; 0x02
    42c4:	93 81       	ldd	r25, Z+3	; 0x03
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	40 e8       	ldi	r20, 0x80	; 128
    42cc:	5f e3       	ldi	r21, 0x3F	; 63
    42ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42d2:	88 23       	and	r24, r24
    42d4:	44 f4       	brge	.+16     	; 0x42e6 <main+0xc32>
		__ticks = 1;
    42d6:	fe 01       	movw	r30, r28
    42d8:	e3 55       	subi	r30, 0x53	; 83
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	91 83       	std	Z+1, r25	; 0x01
    42e2:	80 83       	st	Z, r24
    42e4:	64 c0       	rjmp	.+200    	; 0x43ae <main+0xcfa>
	else if (__tmp > 65535)
    42e6:	fe 01       	movw	r30, r28
    42e8:	e1 55       	subi	r30, 0x51	; 81
    42ea:	ff 4f       	sbci	r31, 0xFF	; 255
    42ec:	60 81       	ld	r22, Z
    42ee:	71 81       	ldd	r23, Z+1	; 0x01
    42f0:	82 81       	ldd	r24, Z+2	; 0x02
    42f2:	93 81       	ldd	r25, Z+3	; 0x03
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	3f ef       	ldi	r19, 0xFF	; 255
    42f8:	4f e7       	ldi	r20, 0x7F	; 127
    42fa:	57 e4       	ldi	r21, 0x47	; 71
    42fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4300:	18 16       	cp	r1, r24
    4302:	0c f0       	brlt	.+2      	; 0x4306 <main+0xc52>
    4304:	43 c0       	rjmp	.+134    	; 0x438c <main+0xcd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4306:	fe 01       	movw	r30, r28
    4308:	ed 54       	subi	r30, 0x4D	; 77
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	60 81       	ld	r22, Z
    430e:	71 81       	ldd	r23, Z+1	; 0x01
    4310:	82 81       	ldd	r24, Z+2	; 0x02
    4312:	93 81       	ldd	r25, Z+3	; 0x03
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	40 e2       	ldi	r20, 0x20	; 32
    431a:	51 e4       	ldi	r21, 0x41	; 65
    431c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	8e 01       	movw	r16, r28
    4326:	03 55       	subi	r16, 0x53	; 83
    4328:	1f 4f       	sbci	r17, 0xFF	; 255
    432a:	bc 01       	movw	r22, r24
    432c:	cd 01       	movw	r24, r26
    432e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
    4336:	f8 01       	movw	r30, r16
    4338:	91 83       	std	Z+1, r25	; 0x01
    433a:	80 83       	st	Z, r24
    433c:	1f c0       	rjmp	.+62     	; 0x437c <main+0xcc8>
    433e:	fe 01       	movw	r30, r28
    4340:	e5 55       	subi	r30, 0x55	; 85
    4342:	ff 4f       	sbci	r31, 0xFF	; 255
    4344:	88 ec       	ldi	r24, 0xC8	; 200
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	80 83       	st	Z, r24
    434c:	fe 01       	movw	r30, r28
    434e:	e5 55       	subi	r30, 0x55	; 85
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	80 81       	ld	r24, Z
    4354:	91 81       	ldd	r25, Z+1	; 0x01
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	f1 f7       	brne	.-4      	; 0x4356 <main+0xca2>
    435a:	fe 01       	movw	r30, r28
    435c:	e5 55       	subi	r30, 0x55	; 85
    435e:	ff 4f       	sbci	r31, 0xFF	; 255
    4360:	91 83       	std	Z+1, r25	; 0x01
    4362:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4364:	de 01       	movw	r26, r28
    4366:	a3 55       	subi	r26, 0x53	; 83
    4368:	bf 4f       	sbci	r27, 0xFF	; 255
    436a:	fe 01       	movw	r30, r28
    436c:	e3 55       	subi	r30, 0x53	; 83
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	80 81       	ld	r24, Z
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	01 97       	sbiw	r24, 0x01	; 1
    4376:	11 96       	adiw	r26, 0x01	; 1
    4378:	9c 93       	st	X, r25
    437a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    437c:	fe 01       	movw	r30, r28
    437e:	e3 55       	subi	r30, 0x53	; 83
    4380:	ff 4f       	sbci	r31, 0xFF	; 255
    4382:	80 81       	ld	r24, Z
    4384:	91 81       	ldd	r25, Z+1	; 0x01
    4386:	00 97       	sbiw	r24, 0x00	; 0
    4388:	d1 f6       	brne	.-76     	; 0x433e <main+0xc8a>
    438a:	27 c0       	rjmp	.+78     	; 0x43da <main+0xd26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438c:	8e 01       	movw	r16, r28
    438e:	03 55       	subi	r16, 0x53	; 83
    4390:	1f 4f       	sbci	r17, 0xFF	; 255
    4392:	fe 01       	movw	r30, r28
    4394:	e1 55       	subi	r30, 0x51	; 81
    4396:	ff 4f       	sbci	r31, 0xFF	; 255
    4398:	60 81       	ld	r22, Z
    439a:	71 81       	ldd	r23, Z+1	; 0x01
    439c:	82 81       	ldd	r24, Z+2	; 0x02
    439e:	93 81       	ldd	r25, Z+3	; 0x03
    43a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a4:	dc 01       	movw	r26, r24
    43a6:	cb 01       	movw	r24, r22
    43a8:	f8 01       	movw	r30, r16
    43aa:	91 83       	std	Z+1, r25	; 0x01
    43ac:	80 83       	st	Z, r24
    43ae:	de 01       	movw	r26, r28
    43b0:	a7 55       	subi	r26, 0x57	; 87
    43b2:	bf 4f       	sbci	r27, 0xFF	; 255
    43b4:	fe 01       	movw	r30, r28
    43b6:	e3 55       	subi	r30, 0x53	; 83
    43b8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ba:	80 81       	ld	r24, Z
    43bc:	91 81       	ldd	r25, Z+1	; 0x01
    43be:	8d 93       	st	X+, r24
    43c0:	9c 93       	st	X, r25
    43c2:	fe 01       	movw	r30, r28
    43c4:	e7 55       	subi	r30, 0x57	; 87
    43c6:	ff 4f       	sbci	r31, 0xFF	; 255
    43c8:	80 81       	ld	r24, Z
    43ca:	91 81       	ldd	r25, Z+1	; 0x01
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <main+0xd18>
    43d0:	fe 01       	movw	r30, r28
    43d2:	e7 55       	subi	r30, 0x57	; 87
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	91 83       	std	Z+1, r25	; 0x01
    43d8:	80 83       	st	Z, r24
	_delay_ms(2000);
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    43e6:	fe 01       	movw	r30, r28
    43e8:	eb 55       	subi	r30, 0x5B	; 91
    43ea:	ff 4f       	sbci	r31, 0xFF	; 255
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	aa ef       	ldi	r26, 0xFA	; 250
    43f2:	b4 e4       	ldi	r27, 0x44	; 68
    43f4:	80 83       	st	Z, r24
    43f6:	91 83       	std	Z+1, r25	; 0x01
    43f8:	a2 83       	std	Z+2, r26	; 0x02
    43fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43fc:	8e 01       	movw	r16, r28
    43fe:	0f 55       	subi	r16, 0x5F	; 95
    4400:	1f 4f       	sbci	r17, 0xFF	; 255
    4402:	fe 01       	movw	r30, r28
    4404:	eb 55       	subi	r30, 0x5B	; 91
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	4a ef       	ldi	r20, 0xFA	; 250
    4416:	54 e4       	ldi	r21, 0x44	; 68
    4418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	f8 01       	movw	r30, r16
    4422:	80 83       	st	Z, r24
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	a2 83       	std	Z+2, r26	; 0x02
    4428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    442a:	fe 01       	movw	r30, r28
    442c:	ef 55       	subi	r30, 0x5F	; 95
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	60 81       	ld	r22, Z
    4432:	71 81       	ldd	r23, Z+1	; 0x01
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	40 e8       	ldi	r20, 0x80	; 128
    443e:	5f e3       	ldi	r21, 0x3F	; 63
    4440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4444:	88 23       	and	r24, r24
    4446:	44 f4       	brge	.+16     	; 0x4458 <main+0xda4>
		__ticks = 1;
    4448:	fe 01       	movw	r30, r28
    444a:	e1 56       	subi	r30, 0x61	; 97
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	91 83       	std	Z+1, r25	; 0x01
    4454:	80 83       	st	Z, r24
    4456:	64 c0       	rjmp	.+200    	; 0x4520 <main+0xe6c>
	else if (__tmp > 65535)
    4458:	fe 01       	movw	r30, r28
    445a:	ef 55       	subi	r30, 0x5F	; 95
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	60 81       	ld	r22, Z
    4460:	71 81       	ldd	r23, Z+1	; 0x01
    4462:	82 81       	ldd	r24, Z+2	; 0x02
    4464:	93 81       	ldd	r25, Z+3	; 0x03
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	3f ef       	ldi	r19, 0xFF	; 255
    446a:	4f e7       	ldi	r20, 0x7F	; 127
    446c:	57 e4       	ldi	r21, 0x47	; 71
    446e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4472:	18 16       	cp	r1, r24
    4474:	0c f0       	brlt	.+2      	; 0x4478 <main+0xdc4>
    4476:	43 c0       	rjmp	.+134    	; 0x44fe <main+0xe4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4478:	fe 01       	movw	r30, r28
    447a:	eb 55       	subi	r30, 0x5B	; 91
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	60 81       	ld	r22, Z
    4480:	71 81       	ldd	r23, Z+1	; 0x01
    4482:	82 81       	ldd	r24, Z+2	; 0x02
    4484:	93 81       	ldd	r25, Z+3	; 0x03
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	40 e2       	ldi	r20, 0x20	; 32
    448c:	51 e4       	ldi	r21, 0x41	; 65
    448e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	8e 01       	movw	r16, r28
    4498:	01 56       	subi	r16, 0x61	; 97
    449a:	1f 4f       	sbci	r17, 0xFF	; 255
    449c:	bc 01       	movw	r22, r24
    449e:	cd 01       	movw	r24, r26
    44a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a4:	dc 01       	movw	r26, r24
    44a6:	cb 01       	movw	r24, r22
    44a8:	f8 01       	movw	r30, r16
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	80 83       	st	Z, r24
    44ae:	1f c0       	rjmp	.+62     	; 0x44ee <main+0xe3a>
    44b0:	fe 01       	movw	r30, r28
    44b2:	e3 56       	subi	r30, 0x63	; 99
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	88 ec       	ldi	r24, 0xC8	; 200
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	91 83       	std	Z+1, r25	; 0x01
    44bc:	80 83       	st	Z, r24
    44be:	fe 01       	movw	r30, r28
    44c0:	e3 56       	subi	r30, 0x63	; 99
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	80 81       	ld	r24, Z
    44c6:	91 81       	ldd	r25, Z+1	; 0x01
    44c8:	01 97       	sbiw	r24, 0x01	; 1
    44ca:	f1 f7       	brne	.-4      	; 0x44c8 <main+0xe14>
    44cc:	fe 01       	movw	r30, r28
    44ce:	e3 56       	subi	r30, 0x63	; 99
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	91 83       	std	Z+1, r25	; 0x01
    44d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d6:	de 01       	movw	r26, r28
    44d8:	a1 56       	subi	r26, 0x61	; 97
    44da:	bf 4f       	sbci	r27, 0xFF	; 255
    44dc:	fe 01       	movw	r30, r28
    44de:	e1 56       	subi	r30, 0x61	; 97
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	80 81       	ld	r24, Z
    44e4:	91 81       	ldd	r25, Z+1	; 0x01
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	11 96       	adiw	r26, 0x01	; 1
    44ea:	9c 93       	st	X, r25
    44ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ee:	fe 01       	movw	r30, r28
    44f0:	e1 56       	subi	r30, 0x61	; 97
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	00 97       	sbiw	r24, 0x00	; 0
    44fa:	d1 f6       	brne	.-76     	; 0x44b0 <main+0xdfc>
    44fc:	27 c0       	rjmp	.+78     	; 0x454c <main+0xe98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44fe:	8e 01       	movw	r16, r28
    4500:	01 56       	subi	r16, 0x61	; 97
    4502:	1f 4f       	sbci	r17, 0xFF	; 255
    4504:	fe 01       	movw	r30, r28
    4506:	ef 55       	subi	r30, 0x5F	; 95
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	60 81       	ld	r22, Z
    450c:	71 81       	ldd	r23, Z+1	; 0x01
    450e:	82 81       	ldd	r24, Z+2	; 0x02
    4510:	93 81       	ldd	r25, Z+3	; 0x03
    4512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4516:	dc 01       	movw	r26, r24
    4518:	cb 01       	movw	r24, r22
    451a:	f8 01       	movw	r30, r16
    451c:	91 83       	std	Z+1, r25	; 0x01
    451e:	80 83       	st	Z, r24
    4520:	de 01       	movw	r26, r28
    4522:	a5 56       	subi	r26, 0x65	; 101
    4524:	bf 4f       	sbci	r27, 0xFF	; 255
    4526:	fe 01       	movw	r30, r28
    4528:	e1 56       	subi	r30, 0x61	; 97
    452a:	ff 4f       	sbci	r31, 0xFF	; 255
    452c:	80 81       	ld	r24, Z
    452e:	91 81       	ldd	r25, Z+1	; 0x01
    4530:	8d 93       	st	X+, r24
    4532:	9c 93       	st	X, r25
    4534:	fe 01       	movw	r30, r28
    4536:	e5 56       	subi	r30, 0x65	; 101
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	80 81       	ld	r24, Z
    453c:	91 81       	ldd	r25, Z+1	; 0x01
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	f1 f7       	brne	.-4      	; 0x453e <main+0xe8a>
    4542:	fe 01       	movw	r30, r28
    4544:	e5 56       	subi	r30, 0x65	; 101
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	91 83       	std	Z+1, r25	; 0x01
    454a:	80 83       	st	Z, r24
	_delay_ms(2000);
	HCLCD_Vid4Bits_DisplayString((u8*)"My Phone is");
    454c:	81 e7       	ldi	r24, 0x71	; 113
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,2);
    4554:	82 e0       	ldi	r24, 0x02	; 2
    4556:	62 e0       	ldi	r22, 0x02	; 2
    4558:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayNumber(01105555555);
    455c:	6d e6       	ldi	r22, 0x6D	; 109
    455e:	7b ed       	ldi	r23, 0xDB	; 219
    4560:	86 e1       	ldi	r24, 0x16	; 22
    4562:	99 e0       	ldi	r25, 0x09	; 9
    4564:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <HCLCD_Vid4Bits_DisplayNumber>
    4568:	fe 01       	movw	r30, r28
    456a:	e9 56       	subi	r30, 0x69	; 105
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	aa ef       	ldi	r26, 0xFA	; 250
    4574:	b4 e4       	ldi	r27, 0x44	; 68
    4576:	80 83       	st	Z, r24
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	a2 83       	std	Z+2, r26	; 0x02
    457c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    457e:	8e 01       	movw	r16, r28
    4580:	0d 56       	subi	r16, 0x6D	; 109
    4582:	1f 4f       	sbci	r17, 0xFF	; 255
    4584:	fe 01       	movw	r30, r28
    4586:	e9 56       	subi	r30, 0x69	; 105
    4588:	ff 4f       	sbci	r31, 0xFF	; 255
    458a:	60 81       	ld	r22, Z
    458c:	71 81       	ldd	r23, Z+1	; 0x01
    458e:	82 81       	ldd	r24, Z+2	; 0x02
    4590:	93 81       	ldd	r25, Z+3	; 0x03
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	4a ef       	ldi	r20, 0xFA	; 250
    4598:	54 e4       	ldi	r21, 0x44	; 68
    459a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	f8 01       	movw	r30, r16
    45a4:	80 83       	st	Z, r24
    45a6:	91 83       	std	Z+1, r25	; 0x01
    45a8:	a2 83       	std	Z+2, r26	; 0x02
    45aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45ac:	fe 01       	movw	r30, r28
    45ae:	ed 56       	subi	r30, 0x6D	; 109
    45b0:	ff 4f       	sbci	r31, 0xFF	; 255
    45b2:	60 81       	ld	r22, Z
    45b4:	71 81       	ldd	r23, Z+1	; 0x01
    45b6:	82 81       	ldd	r24, Z+2	; 0x02
    45b8:	93 81       	ldd	r25, Z+3	; 0x03
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	40 e8       	ldi	r20, 0x80	; 128
    45c0:	5f e3       	ldi	r21, 0x3F	; 63
    45c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45c6:	88 23       	and	r24, r24
    45c8:	44 f4       	brge	.+16     	; 0x45da <main+0xf26>
		__ticks = 1;
    45ca:	fe 01       	movw	r30, r28
    45cc:	ef 56       	subi	r30, 0x6F	; 111
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	91 83       	std	Z+1, r25	; 0x01
    45d6:	80 83       	st	Z, r24
    45d8:	64 c0       	rjmp	.+200    	; 0x46a2 <main+0xfee>
	else if (__tmp > 65535)
    45da:	fe 01       	movw	r30, r28
    45dc:	ed 56       	subi	r30, 0x6D	; 109
    45de:	ff 4f       	sbci	r31, 0xFF	; 255
    45e0:	60 81       	ld	r22, Z
    45e2:	71 81       	ldd	r23, Z+1	; 0x01
    45e4:	82 81       	ldd	r24, Z+2	; 0x02
    45e6:	93 81       	ldd	r25, Z+3	; 0x03
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	3f ef       	ldi	r19, 0xFF	; 255
    45ec:	4f e7       	ldi	r20, 0x7F	; 127
    45ee:	57 e4       	ldi	r21, 0x47	; 71
    45f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45f4:	18 16       	cp	r1, r24
    45f6:	0c f0       	brlt	.+2      	; 0x45fa <main+0xf46>
    45f8:	43 c0       	rjmp	.+134    	; 0x4680 <main+0xfcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45fa:	fe 01       	movw	r30, r28
    45fc:	e9 56       	subi	r30, 0x69	; 105
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	60 81       	ld	r22, Z
    4602:	71 81       	ldd	r23, Z+1	; 0x01
    4604:	82 81       	ldd	r24, Z+2	; 0x02
    4606:	93 81       	ldd	r25, Z+3	; 0x03
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e2       	ldi	r20, 0x20	; 32
    460e:	51 e4       	ldi	r21, 0x41	; 65
    4610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4614:	dc 01       	movw	r26, r24
    4616:	cb 01       	movw	r24, r22
    4618:	8e 01       	movw	r16, r28
    461a:	0f 56       	subi	r16, 0x6F	; 111
    461c:	1f 4f       	sbci	r17, 0xFF	; 255
    461e:	bc 01       	movw	r22, r24
    4620:	cd 01       	movw	r24, r26
    4622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	f8 01       	movw	r30, r16
    462c:	91 83       	std	Z+1, r25	; 0x01
    462e:	80 83       	st	Z, r24
    4630:	1f c0       	rjmp	.+62     	; 0x4670 <main+0xfbc>
    4632:	fe 01       	movw	r30, r28
    4634:	e1 57       	subi	r30, 0x71	; 113
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	88 ec       	ldi	r24, 0xC8	; 200
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	91 83       	std	Z+1, r25	; 0x01
    463e:	80 83       	st	Z, r24
    4640:	fe 01       	movw	r30, r28
    4642:	e1 57       	subi	r30, 0x71	; 113
    4644:	ff 4f       	sbci	r31, 0xFF	; 255
    4646:	80 81       	ld	r24, Z
    4648:	91 81       	ldd	r25, Z+1	; 0x01
    464a:	01 97       	sbiw	r24, 0x01	; 1
    464c:	f1 f7       	brne	.-4      	; 0x464a <main+0xf96>
    464e:	fe 01       	movw	r30, r28
    4650:	e1 57       	subi	r30, 0x71	; 113
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	91 83       	std	Z+1, r25	; 0x01
    4656:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4658:	de 01       	movw	r26, r28
    465a:	af 56       	subi	r26, 0x6F	; 111
    465c:	bf 4f       	sbci	r27, 0xFF	; 255
    465e:	fe 01       	movw	r30, r28
    4660:	ef 56       	subi	r30, 0x6F	; 111
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	80 81       	ld	r24, Z
    4666:	91 81       	ldd	r25, Z+1	; 0x01
    4668:	01 97       	sbiw	r24, 0x01	; 1
    466a:	11 96       	adiw	r26, 0x01	; 1
    466c:	9c 93       	st	X, r25
    466e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4670:	fe 01       	movw	r30, r28
    4672:	ef 56       	subi	r30, 0x6F	; 111
    4674:	ff 4f       	sbci	r31, 0xFF	; 255
    4676:	80 81       	ld	r24, Z
    4678:	91 81       	ldd	r25, Z+1	; 0x01
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	d1 f6       	brne	.-76     	; 0x4632 <main+0xf7e>
    467e:	27 c0       	rjmp	.+78     	; 0x46ce <main+0x101a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4680:	8e 01       	movw	r16, r28
    4682:	0f 56       	subi	r16, 0x6F	; 111
    4684:	1f 4f       	sbci	r17, 0xFF	; 255
    4686:	fe 01       	movw	r30, r28
    4688:	ed 56       	subi	r30, 0x6D	; 109
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	60 81       	ld	r22, Z
    468e:	71 81       	ldd	r23, Z+1	; 0x01
    4690:	82 81       	ldd	r24, Z+2	; 0x02
    4692:	93 81       	ldd	r25, Z+3	; 0x03
    4694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	f8 01       	movw	r30, r16
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	80 83       	st	Z, r24
    46a2:	de 01       	movw	r26, r28
    46a4:	a3 57       	subi	r26, 0x73	; 115
    46a6:	bf 4f       	sbci	r27, 0xFF	; 255
    46a8:	fe 01       	movw	r30, r28
    46aa:	ef 56       	subi	r30, 0x6F	; 111
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	80 81       	ld	r24, Z
    46b0:	91 81       	ldd	r25, Z+1	; 0x01
    46b2:	8d 93       	st	X+, r24
    46b4:	9c 93       	st	X, r25
    46b6:	fe 01       	movw	r30, r28
    46b8:	e3 57       	subi	r30, 0x73	; 115
    46ba:	ff 4f       	sbci	r31, 0xFF	; 255
    46bc:	80 81       	ld	r24, Z
    46be:	91 81       	ldd	r25, Z+1	; 0x01
    46c0:	01 97       	sbiw	r24, 0x01	; 1
    46c2:	f1 f7       	brne	.-4      	; 0x46c0 <main+0x100c>
    46c4:	fe 01       	movw	r30, r28
    46c6:	e3 57       	subi	r30, 0x73	; 115
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	91 83       	std	Z+1, r25	; 0x01
    46cc:	80 83       	st	Z, r24
	_delay_ms(2000);
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_DisplayString((u8*)"My Name is");
    46da:	80 e6       	ldi	r24, 0x60	; 96
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
	/*Print my name in Arabic*/
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,9);
    46e2:	82 e0       	ldi	r24, 0x02	; 2
    46e4:	69 e0       	ldi	r22, 0x09	; 9
    46e6:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayCharacter(0);
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,8);
    46f0:	82 e0       	ldi	r24, 0x02	; 2
    46f2:	68 e0       	ldi	r22, 0x08	; 8
    46f4:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayCharacter(1);
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,7);
    46fe:	82 e0       	ldi	r24, 0x02	; 2
    4700:	67 e0       	ldi	r22, 0x07	; 7
    4702:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayCharacter(2);
    4706:	82 e0       	ldi	r24, 0x02	; 2
    4708:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    470c:	82 e0       	ldi	r24, 0x02	; 2
    470e:	66 e0       	ldi	r22, 0x06	; 6
    4710:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayCharacter(3);
    4714:	83 e0       	ldi	r24, 0x03	; 3
    4716:	0e 94 40 17 	call	0x2e80	; 0x2e80 <HCLCD_Vid4Bits_DisplayCharacter>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,5);
    471a:	82 e0       	ldi	r24, 0x02	; 2
    471c:	65 e0       	ldi	r22, 0x05	; 5
    471e:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
    4722:	fe 01       	movw	r30, r28
    4724:	e7 57       	subi	r30, 0x77	; 119
    4726:	ff 4f       	sbci	r31, 0xFF	; 255
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	aa ef       	ldi	r26, 0xFA	; 250
    472e:	b4 e4       	ldi	r27, 0x44	; 68
    4730:	80 83       	st	Z, r24
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	a2 83       	std	Z+2, r26	; 0x02
    4736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4738:	8e 01       	movw	r16, r28
    473a:	0b 57       	subi	r16, 0x7B	; 123
    473c:	1f 4f       	sbci	r17, 0xFF	; 255
    473e:	fe 01       	movw	r30, r28
    4740:	e7 57       	subi	r30, 0x77	; 119
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	60 81       	ld	r22, Z
    4746:	71 81       	ldd	r23, Z+1	; 0x01
    4748:	82 81       	ldd	r24, Z+2	; 0x02
    474a:	93 81       	ldd	r25, Z+3	; 0x03
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	4a ef       	ldi	r20, 0xFA	; 250
    4752:	54 e4       	ldi	r21, 0x44	; 68
    4754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	f8 01       	movw	r30, r16
    475e:	80 83       	st	Z, r24
    4760:	91 83       	std	Z+1, r25	; 0x01
    4762:	a2 83       	std	Z+2, r26	; 0x02
    4764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4766:	fe 01       	movw	r30, r28
    4768:	eb 57       	subi	r30, 0x7B	; 123
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	60 81       	ld	r22, Z
    476e:	71 81       	ldd	r23, Z+1	; 0x01
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e8       	ldi	r20, 0x80	; 128
    477a:	5f e3       	ldi	r21, 0x3F	; 63
    477c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4780:	88 23       	and	r24, r24
    4782:	44 f4       	brge	.+16     	; 0x4794 <main+0x10e0>
		__ticks = 1;
    4784:	fe 01       	movw	r30, r28
    4786:	ed 57       	subi	r30, 0x7D	; 125
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	80 83       	st	Z, r24
    4792:	64 c0       	rjmp	.+200    	; 0x485c <main+0x11a8>
	else if (__tmp > 65535)
    4794:	fe 01       	movw	r30, r28
    4796:	eb 57       	subi	r30, 0x7B	; 123
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	60 81       	ld	r22, Z
    479c:	71 81       	ldd	r23, Z+1	; 0x01
    479e:	82 81       	ldd	r24, Z+2	; 0x02
    47a0:	93 81       	ldd	r25, Z+3	; 0x03
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	3f ef       	ldi	r19, 0xFF	; 255
    47a6:	4f e7       	ldi	r20, 0x7F	; 127
    47a8:	57 e4       	ldi	r21, 0x47	; 71
    47aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47ae:	18 16       	cp	r1, r24
    47b0:	0c f0       	brlt	.+2      	; 0x47b4 <main+0x1100>
    47b2:	43 c0       	rjmp	.+134    	; 0x483a <main+0x1186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47b4:	fe 01       	movw	r30, r28
    47b6:	e7 57       	subi	r30, 0x77	; 119
    47b8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ba:	60 81       	ld	r22, Z
    47bc:	71 81       	ldd	r23, Z+1	; 0x01
    47be:	82 81       	ldd	r24, Z+2	; 0x02
    47c0:	93 81       	ldd	r25, Z+3	; 0x03
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	40 e2       	ldi	r20, 0x20	; 32
    47c8:	51 e4       	ldi	r21, 0x41	; 65
    47ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	8e 01       	movw	r16, r28
    47d4:	0d 57       	subi	r16, 0x7D	; 125
    47d6:	1f 4f       	sbci	r17, 0xFF	; 255
    47d8:	bc 01       	movw	r22, r24
    47da:	cd 01       	movw	r24, r26
    47dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e0:	dc 01       	movw	r26, r24
    47e2:	cb 01       	movw	r24, r22
    47e4:	f8 01       	movw	r30, r16
    47e6:	91 83       	std	Z+1, r25	; 0x01
    47e8:	80 83       	st	Z, r24
    47ea:	1f c0       	rjmp	.+62     	; 0x482a <main+0x1176>
    47ec:	fe 01       	movw	r30, r28
    47ee:	ef 57       	subi	r30, 0x7F	; 127
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	88 ec       	ldi	r24, 0xC8	; 200
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	91 83       	std	Z+1, r25	; 0x01
    47f8:	80 83       	st	Z, r24
    47fa:	fe 01       	movw	r30, r28
    47fc:	ef 57       	subi	r30, 0x7F	; 127
    47fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	01 97       	sbiw	r24, 0x01	; 1
    4806:	f1 f7       	brne	.-4      	; 0x4804 <main+0x1150>
    4808:	fe 01       	movw	r30, r28
    480a:	ef 57       	subi	r30, 0x7F	; 127
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	91 83       	std	Z+1, r25	; 0x01
    4810:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4812:	de 01       	movw	r26, r28
    4814:	ad 57       	subi	r26, 0x7D	; 125
    4816:	bf 4f       	sbci	r27, 0xFF	; 255
    4818:	fe 01       	movw	r30, r28
    481a:	ed 57       	subi	r30, 0x7D	; 125
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	80 81       	ld	r24, Z
    4820:	91 81       	ldd	r25, Z+1	; 0x01
    4822:	01 97       	sbiw	r24, 0x01	; 1
    4824:	11 96       	adiw	r26, 0x01	; 1
    4826:	9c 93       	st	X, r25
    4828:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    482a:	fe 01       	movw	r30, r28
    482c:	ed 57       	subi	r30, 0x7D	; 125
    482e:	ff 4f       	sbci	r31, 0xFF	; 255
    4830:	80 81       	ld	r24, Z
    4832:	91 81       	ldd	r25, Z+1	; 0x01
    4834:	00 97       	sbiw	r24, 0x00	; 0
    4836:	d1 f6       	brne	.-76     	; 0x47ec <main+0x1138>
    4838:	27 c0       	rjmp	.+78     	; 0x4888 <main+0x11d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483a:	8e 01       	movw	r16, r28
    483c:	0d 57       	subi	r16, 0x7D	; 125
    483e:	1f 4f       	sbci	r17, 0xFF	; 255
    4840:	fe 01       	movw	r30, r28
    4842:	eb 57       	subi	r30, 0x7B	; 123
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	60 81       	ld	r22, Z
    4848:	71 81       	ldd	r23, Z+1	; 0x01
    484a:	82 81       	ldd	r24, Z+2	; 0x02
    484c:	93 81       	ldd	r25, Z+3	; 0x03
    484e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	f8 01       	movw	r30, r16
    4858:	91 83       	std	Z+1, r25	; 0x01
    485a:	80 83       	st	Z, r24
    485c:	de 01       	movw	r26, r28
    485e:	a1 58       	subi	r26, 0x81	; 129
    4860:	bf 4f       	sbci	r27, 0xFF	; 255
    4862:	fe 01       	movw	r30, r28
    4864:	ed 57       	subi	r30, 0x7D	; 125
    4866:	ff 4f       	sbci	r31, 0xFF	; 255
    4868:	80 81       	ld	r24, Z
    486a:	91 81       	ldd	r25, Z+1	; 0x01
    486c:	8d 93       	st	X+, r24
    486e:	9c 93       	st	X, r25
    4870:	fe 01       	movw	r30, r28
    4872:	e1 58       	subi	r30, 0x81	; 129
    4874:	ff 4f       	sbci	r31, 0xFF	; 255
    4876:	80 81       	ld	r24, Z
    4878:	91 81       	ldd	r25, Z+1	; 0x01
    487a:	01 97       	sbiw	r24, 0x01	; 1
    487c:	f1 f7       	brne	.-4      	; 0x487a <main+0x11c6>
    487e:	fe 01       	movw	r30, r28
    4880:	e1 58       	subi	r30, 0x81	; 129
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
	_delay_ms(2000);
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>

	while(1)
	{
		if(PRESSED == HSWITCH_u8SwitchState(&Switch_1))
    4894:	84 e3       	ldi	r24, 0x34	; 52
    4896:	91 e0       	ldi	r25, 0x01	; 1
    4898:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    489c:	88 23       	and	r24, r24
    489e:	09 f0       	breq	.+2      	; 0x48a2 <main+0x11ee>
    48a0:	be c0       	rjmp	.+380    	; 0x4a1e <main+0x136a>
    48a2:	fe 01       	movw	r30, r28
    48a4:	e5 58       	subi	r30, 0x85	; 133
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	a8 e4       	ldi	r26, 0x48	; 72
    48ae:	b2 e4       	ldi	r27, 0x42	; 66
    48b0:	80 83       	st	Z, r24
    48b2:	91 83       	std	Z+1, r25	; 0x01
    48b4:	a2 83       	std	Z+2, r26	; 0x02
    48b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b8:	8e 01       	movw	r16, r28
    48ba:	09 58       	subi	r16, 0x89	; 137
    48bc:	1f 4f       	sbci	r17, 0xFF	; 255
    48be:	fe 01       	movw	r30, r28
    48c0:	e5 58       	subi	r30, 0x85	; 133
    48c2:	ff 4f       	sbci	r31, 0xFF	; 255
    48c4:	60 81       	ld	r22, Z
    48c6:	71 81       	ldd	r23, Z+1	; 0x01
    48c8:	82 81       	ldd	r24, Z+2	; 0x02
    48ca:	93 81       	ldd	r25, Z+3	; 0x03
    48cc:	20 e0       	ldi	r18, 0x00	; 0
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	4a ef       	ldi	r20, 0xFA	; 250
    48d2:	54 e4       	ldi	r21, 0x44	; 68
    48d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d8:	dc 01       	movw	r26, r24
    48da:	cb 01       	movw	r24, r22
    48dc:	f8 01       	movw	r30, r16
    48de:	80 83       	st	Z, r24
    48e0:	91 83       	std	Z+1, r25	; 0x01
    48e2:	a2 83       	std	Z+2, r26	; 0x02
    48e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48e6:	fe 01       	movw	r30, r28
    48e8:	e9 58       	subi	r30, 0x89	; 137
    48ea:	ff 4f       	sbci	r31, 0xFF	; 255
    48ec:	60 81       	ld	r22, Z
    48ee:	71 81       	ldd	r23, Z+1	; 0x01
    48f0:	82 81       	ldd	r24, Z+2	; 0x02
    48f2:	93 81       	ldd	r25, Z+3	; 0x03
    48f4:	20 e0       	ldi	r18, 0x00	; 0
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	40 e8       	ldi	r20, 0x80	; 128
    48fa:	5f e3       	ldi	r21, 0x3F	; 63
    48fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4900:	88 23       	and	r24, r24
    4902:	44 f4       	brge	.+16     	; 0x4914 <main+0x1260>
		__ticks = 1;
    4904:	fe 01       	movw	r30, r28
    4906:	eb 58       	subi	r30, 0x8B	; 139
    4908:	ff 4f       	sbci	r31, 0xFF	; 255
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	91 83       	std	Z+1, r25	; 0x01
    4910:	80 83       	st	Z, r24
    4912:	64 c0       	rjmp	.+200    	; 0x49dc <main+0x1328>
	else if (__tmp > 65535)
    4914:	fe 01       	movw	r30, r28
    4916:	e9 58       	subi	r30, 0x89	; 137
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	60 81       	ld	r22, Z
    491c:	71 81       	ldd	r23, Z+1	; 0x01
    491e:	82 81       	ldd	r24, Z+2	; 0x02
    4920:	93 81       	ldd	r25, Z+3	; 0x03
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	3f ef       	ldi	r19, 0xFF	; 255
    4926:	4f e7       	ldi	r20, 0x7F	; 127
    4928:	57 e4       	ldi	r21, 0x47	; 71
    492a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    492e:	18 16       	cp	r1, r24
    4930:	0c f0       	brlt	.+2      	; 0x4934 <main+0x1280>
    4932:	43 c0       	rjmp	.+134    	; 0x49ba <main+0x1306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4934:	fe 01       	movw	r30, r28
    4936:	e5 58       	subi	r30, 0x85	; 133
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	60 81       	ld	r22, Z
    493c:	71 81       	ldd	r23, Z+1	; 0x01
    493e:	82 81       	ldd	r24, Z+2	; 0x02
    4940:	93 81       	ldd	r25, Z+3	; 0x03
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	40 e2       	ldi	r20, 0x20	; 32
    4948:	51 e4       	ldi	r21, 0x41	; 65
    494a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	8e 01       	movw	r16, r28
    4954:	0b 58       	subi	r16, 0x8B	; 139
    4956:	1f 4f       	sbci	r17, 0xFF	; 255
    4958:	bc 01       	movw	r22, r24
    495a:	cd 01       	movw	r24, r26
    495c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	f8 01       	movw	r30, r16
    4966:	91 83       	std	Z+1, r25	; 0x01
    4968:	80 83       	st	Z, r24
    496a:	1f c0       	rjmp	.+62     	; 0x49aa <main+0x12f6>
    496c:	fe 01       	movw	r30, r28
    496e:	ed 58       	subi	r30, 0x8D	; 141
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	88 ec       	ldi	r24, 0xC8	; 200
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	91 83       	std	Z+1, r25	; 0x01
    4978:	80 83       	st	Z, r24
    497a:	fe 01       	movw	r30, r28
    497c:	ed 58       	subi	r30, 0x8D	; 141
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	80 81       	ld	r24, Z
    4982:	91 81       	ldd	r25, Z+1	; 0x01
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	f1 f7       	brne	.-4      	; 0x4984 <main+0x12d0>
    4988:	fe 01       	movw	r30, r28
    498a:	ed 58       	subi	r30, 0x8D	; 141
    498c:	ff 4f       	sbci	r31, 0xFF	; 255
    498e:	91 83       	std	Z+1, r25	; 0x01
    4990:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4992:	de 01       	movw	r26, r28
    4994:	ab 58       	subi	r26, 0x8B	; 139
    4996:	bf 4f       	sbci	r27, 0xFF	; 255
    4998:	fe 01       	movw	r30, r28
    499a:	eb 58       	subi	r30, 0x8B	; 139
    499c:	ff 4f       	sbci	r31, 0xFF	; 255
    499e:	80 81       	ld	r24, Z
    49a0:	91 81       	ldd	r25, Z+1	; 0x01
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	11 96       	adiw	r26, 0x01	; 1
    49a6:	9c 93       	st	X, r25
    49a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49aa:	fe 01       	movw	r30, r28
    49ac:	eb 58       	subi	r30, 0x8B	; 139
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	80 81       	ld	r24, Z
    49b2:	91 81       	ldd	r25, Z+1	; 0x01
    49b4:	00 97       	sbiw	r24, 0x00	; 0
    49b6:	d1 f6       	brne	.-76     	; 0x496c <main+0x12b8>
    49b8:	27 c0       	rjmp	.+78     	; 0x4a08 <main+0x1354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ba:	8e 01       	movw	r16, r28
    49bc:	0b 58       	subi	r16, 0x8B	; 139
    49be:	1f 4f       	sbci	r17, 0xFF	; 255
    49c0:	fe 01       	movw	r30, r28
    49c2:	e9 58       	subi	r30, 0x89	; 137
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	60 81       	ld	r22, Z
    49c8:	71 81       	ldd	r23, Z+1	; 0x01
    49ca:	82 81       	ldd	r24, Z+2	; 0x02
    49cc:	93 81       	ldd	r25, Z+3	; 0x03
    49ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	f8 01       	movw	r30, r16
    49d8:	91 83       	std	Z+1, r25	; 0x01
    49da:	80 83       	st	Z, r24
    49dc:	de 01       	movw	r26, r28
    49de:	af 58       	subi	r26, 0x8F	; 143
    49e0:	bf 4f       	sbci	r27, 0xFF	; 255
    49e2:	fe 01       	movw	r30, r28
    49e4:	eb 58       	subi	r30, 0x8B	; 139
    49e6:	ff 4f       	sbci	r31, 0xFF	; 255
    49e8:	80 81       	ld	r24, Z
    49ea:	91 81       	ldd	r25, Z+1	; 0x01
    49ec:	8d 93       	st	X+, r24
    49ee:	9c 93       	st	X, r25
    49f0:	fe 01       	movw	r30, r28
    49f2:	ef 58       	subi	r30, 0x8F	; 143
    49f4:	ff 4f       	sbci	r31, 0xFF	; 255
    49f6:	80 81       	ld	r24, Z
    49f8:	91 81       	ldd	r25, Z+1	; 0x01
    49fa:	01 97       	sbiw	r24, 0x01	; 1
    49fc:	f1 f7       	brne	.-4      	; 0x49fa <main+0x1346>
    49fe:	fe 01       	movw	r30, r28
    4a00:	ef 58       	subi	r30, 0x8F	; 143
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	91 83       	std	Z+1, r25	; 0x01
    4a06:	80 83       	st	Z, r24
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_1))
    4a08:	84 e3       	ldi	r24, 0x34	; 52
    4a0a:	91 e0       	ldi	r25, 0x01	; 1
    4a0c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4a10:	88 23       	and	r24, r24
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <main+0x1362>
    4a14:	3f cf       	rjmp	.-386    	; 0x4894 <main+0x11e0>
			{
				/*1- Flashing every 500 ms */
				APP_VidLED_Mode(switch1);
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	0e 94 0b 2a 	call	0x5416	; 0x5416 <APP_VidLED_Mode>
    4a1c:	3b cf       	rjmp	.-394    	; 0x4894 <main+0x11e0>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_2))
    4a1e:	86 e3       	ldi	r24, 0x36	; 54
    4a20:	91 e0       	ldi	r25, 0x01	; 1
    4a22:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4a26:	88 23       	and	r24, r24
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <main+0x1378>
    4a2a:	be c0       	rjmp	.+380    	; 0x4ba8 <main+0x14f4>
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e3 59       	subi	r30, 0x93	; 147
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	80 e0       	ldi	r24, 0x00	; 0
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	a8 e4       	ldi	r26, 0x48	; 72
    4a38:	b2 e4       	ldi	r27, 0x42	; 66
    4a3a:	80 83       	st	Z, r24
    4a3c:	91 83       	std	Z+1, r25	; 0x01
    4a3e:	a2 83       	std	Z+2, r26	; 0x02
    4a40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a42:	8e 01       	movw	r16, r28
    4a44:	07 59       	subi	r16, 0x97	; 151
    4a46:	1f 4f       	sbci	r17, 0xFF	; 255
    4a48:	fe 01       	movw	r30, r28
    4a4a:	e3 59       	subi	r30, 0x93	; 147
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	60 81       	ld	r22, Z
    4a50:	71 81       	ldd	r23, Z+1	; 0x01
    4a52:	82 81       	ldd	r24, Z+2	; 0x02
    4a54:	93 81       	ldd	r25, Z+3	; 0x03
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	30 e0       	ldi	r19, 0x00	; 0
    4a5a:	4a ef       	ldi	r20, 0xFA	; 250
    4a5c:	54 e4       	ldi	r21, 0x44	; 68
    4a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	f8 01       	movw	r30, r16
    4a68:	80 83       	st	Z, r24
    4a6a:	91 83       	std	Z+1, r25	; 0x01
    4a6c:	a2 83       	std	Z+2, r26	; 0x02
    4a6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a70:	fe 01       	movw	r30, r28
    4a72:	e7 59       	subi	r30, 0x97	; 151
    4a74:	ff 4f       	sbci	r31, 0xFF	; 255
    4a76:	60 81       	ld	r22, Z
    4a78:	71 81       	ldd	r23, Z+1	; 0x01
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	40 e8       	ldi	r20, 0x80	; 128
    4a84:	5f e3       	ldi	r21, 0x3F	; 63
    4a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a8a:	88 23       	and	r24, r24
    4a8c:	44 f4       	brge	.+16     	; 0x4a9e <main+0x13ea>
		__ticks = 1;
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e9 59       	subi	r30, 0x99	; 153
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	91 83       	std	Z+1, r25	; 0x01
    4a9a:	80 83       	st	Z, r24
    4a9c:	64 c0       	rjmp	.+200    	; 0x4b66 <main+0x14b2>
	else if (__tmp > 65535)
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e7 59       	subi	r30, 0x97	; 151
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	60 81       	ld	r22, Z
    4aa6:	71 81       	ldd	r23, Z+1	; 0x01
    4aa8:	82 81       	ldd	r24, Z+2	; 0x02
    4aaa:	93 81       	ldd	r25, Z+3	; 0x03
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	3f ef       	ldi	r19, 0xFF	; 255
    4ab0:	4f e7       	ldi	r20, 0x7F	; 127
    4ab2:	57 e4       	ldi	r21, 0x47	; 71
    4ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ab8:	18 16       	cp	r1, r24
    4aba:	0c f0       	brlt	.+2      	; 0x4abe <main+0x140a>
    4abc:	43 c0       	rjmp	.+134    	; 0x4b44 <main+0x1490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4abe:	fe 01       	movw	r30, r28
    4ac0:	e3 59       	subi	r30, 0x93	; 147
    4ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac4:	60 81       	ld	r22, Z
    4ac6:	71 81       	ldd	r23, Z+1	; 0x01
    4ac8:	82 81       	ldd	r24, Z+2	; 0x02
    4aca:	93 81       	ldd	r25, Z+3	; 0x03
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	40 e2       	ldi	r20, 0x20	; 32
    4ad2:	51 e4       	ldi	r21, 0x41	; 65
    4ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	8e 01       	movw	r16, r28
    4ade:	09 59       	subi	r16, 0x99	; 153
    4ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae2:	bc 01       	movw	r22, r24
    4ae4:	cd 01       	movw	r24, r26
    4ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22
    4aee:	f8 01       	movw	r30, r16
    4af0:	91 83       	std	Z+1, r25	; 0x01
    4af2:	80 83       	st	Z, r24
    4af4:	1f c0       	rjmp	.+62     	; 0x4b34 <main+0x1480>
    4af6:	fe 01       	movw	r30, r28
    4af8:	eb 59       	subi	r30, 0x9B	; 155
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	88 ec       	ldi	r24, 0xC8	; 200
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	91 83       	std	Z+1, r25	; 0x01
    4b02:	80 83       	st	Z, r24
    4b04:	fe 01       	movw	r30, r28
    4b06:	eb 59       	subi	r30, 0x9B	; 155
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	80 81       	ld	r24, Z
    4b0c:	91 81       	ldd	r25, Z+1	; 0x01
    4b0e:	01 97       	sbiw	r24, 0x01	; 1
    4b10:	f1 f7       	brne	.-4      	; 0x4b0e <main+0x145a>
    4b12:	fe 01       	movw	r30, r28
    4b14:	eb 59       	subi	r30, 0x9B	; 155
    4b16:	ff 4f       	sbci	r31, 0xFF	; 255
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b1c:	de 01       	movw	r26, r28
    4b1e:	a9 59       	subi	r26, 0x99	; 153
    4b20:	bf 4f       	sbci	r27, 0xFF	; 255
    4b22:	fe 01       	movw	r30, r28
    4b24:	e9 59       	subi	r30, 0x99	; 153
    4b26:	ff 4f       	sbci	r31, 0xFF	; 255
    4b28:	80 81       	ld	r24, Z
    4b2a:	91 81       	ldd	r25, Z+1	; 0x01
    4b2c:	01 97       	sbiw	r24, 0x01	; 1
    4b2e:	11 96       	adiw	r26, 0x01	; 1
    4b30:	9c 93       	st	X, r25
    4b32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b34:	fe 01       	movw	r30, r28
    4b36:	e9 59       	subi	r30, 0x99	; 153
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	80 81       	ld	r24, Z
    4b3c:	91 81       	ldd	r25, Z+1	; 0x01
    4b3e:	00 97       	sbiw	r24, 0x00	; 0
    4b40:	d1 f6       	brne	.-76     	; 0x4af6 <main+0x1442>
    4b42:	27 c0       	rjmp	.+78     	; 0x4b92 <main+0x14de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b44:	8e 01       	movw	r16, r28
    4b46:	09 59       	subi	r16, 0x99	; 153
    4b48:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	e7 59       	subi	r30, 0x97	; 151
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	60 81       	ld	r22, Z
    4b52:	71 81       	ldd	r23, Z+1	; 0x01
    4b54:	82 81       	ldd	r24, Z+2	; 0x02
    4b56:	93 81       	ldd	r25, Z+3	; 0x03
    4b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	f8 01       	movw	r30, r16
    4b62:	91 83       	std	Z+1, r25	; 0x01
    4b64:	80 83       	st	Z, r24
    4b66:	de 01       	movw	r26, r28
    4b68:	ad 59       	subi	r26, 0x9D	; 157
    4b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	e9 59       	subi	r30, 0x99	; 153
    4b70:	ff 4f       	sbci	r31, 0xFF	; 255
    4b72:	80 81       	ld	r24, Z
    4b74:	91 81       	ldd	r25, Z+1	; 0x01
    4b76:	8d 93       	st	X+, r24
    4b78:	9c 93       	st	X, r25
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	ed 59       	subi	r30, 0x9D	; 157
    4b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b80:	80 81       	ld	r24, Z
    4b82:	91 81       	ldd	r25, Z+1	; 0x01
    4b84:	01 97       	sbiw	r24, 0x01	; 1
    4b86:	f1 f7       	brne	.-4      	; 0x4b84 <main+0x14d0>
    4b88:	fe 01       	movw	r30, r28
    4b8a:	ed 59       	subi	r30, 0x9D	; 157
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	91 83       	std	Z+1, r25	; 0x01
    4b90:	80 83       	st	Z, r24
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_2))
    4b92:	86 e3       	ldi	r24, 0x36	; 54
    4b94:	91 e0       	ldi	r25, 0x01	; 1
    4b96:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4b9a:	88 23       	and	r24, r24
    4b9c:	09 f0       	breq	.+2      	; 0x4ba0 <main+0x14ec>
    4b9e:	7a ce       	rjmp	.-780    	; 0x4894 <main+0x11e0>
			{
				/*2- Shifting Left every 150 ms*/
				APP_VidLED_Mode(switch2);
    4ba0:	82 e0       	ldi	r24, 0x02	; 2
    4ba2:	0e 94 0b 2a 	call	0x5416	; 0x5416 <APP_VidLED_Mode>
    4ba6:	76 ce       	rjmp	.-788    	; 0x4894 <main+0x11e0>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_3))
    4ba8:	88 e3       	ldi	r24, 0x38	; 56
    4baa:	91 e0       	ldi	r25, 0x01	; 1
    4bac:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4bb0:	88 23       	and	r24, r24
    4bb2:	09 f0       	breq	.+2      	; 0x4bb6 <main+0x1502>
    4bb4:	be c0       	rjmp	.+380    	; 0x4d32 <main+0x167e>
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	e1 5a       	subi	r30, 0xA1	; 161
    4bba:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	a8 e4       	ldi	r26, 0x48	; 72
    4bc2:	b2 e4       	ldi	r27, 0x42	; 66
    4bc4:	80 83       	st	Z, r24
    4bc6:	91 83       	std	Z+1, r25	; 0x01
    4bc8:	a2 83       	std	Z+2, r26	; 0x02
    4bca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bcc:	8e 01       	movw	r16, r28
    4bce:	05 5a       	subi	r16, 0xA5	; 165
    4bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e1 5a       	subi	r30, 0xA1	; 161
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	60 81       	ld	r22, Z
    4bda:	71 81       	ldd	r23, Z+1	; 0x01
    4bdc:	82 81       	ldd	r24, Z+2	; 0x02
    4bde:	93 81       	ldd	r25, Z+3	; 0x03
    4be0:	20 e0       	ldi	r18, 0x00	; 0
    4be2:	30 e0       	ldi	r19, 0x00	; 0
    4be4:	4a ef       	ldi	r20, 0xFA	; 250
    4be6:	54 e4       	ldi	r21, 0x44	; 68
    4be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bec:	dc 01       	movw	r26, r24
    4bee:	cb 01       	movw	r24, r22
    4bf0:	f8 01       	movw	r30, r16
    4bf2:	80 83       	st	Z, r24
    4bf4:	91 83       	std	Z+1, r25	; 0x01
    4bf6:	a2 83       	std	Z+2, r26	; 0x02
    4bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e5 5a       	subi	r30, 0xA5	; 165
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	60 81       	ld	r22, Z
    4c02:	71 81       	ldd	r23, Z+1	; 0x01
    4c04:	82 81       	ldd	r24, Z+2	; 0x02
    4c06:	93 81       	ldd	r25, Z+3	; 0x03
    4c08:	20 e0       	ldi	r18, 0x00	; 0
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	40 e8       	ldi	r20, 0x80	; 128
    4c0e:	5f e3       	ldi	r21, 0x3F	; 63
    4c10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c14:	88 23       	and	r24, r24
    4c16:	44 f4       	brge	.+16     	; 0x4c28 <main+0x1574>
		__ticks = 1;
    4c18:	fe 01       	movw	r30, r28
    4c1a:	e7 5a       	subi	r30, 0xA7	; 167
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	91 83       	std	Z+1, r25	; 0x01
    4c24:	80 83       	st	Z, r24
    4c26:	64 c0       	rjmp	.+200    	; 0x4cf0 <main+0x163c>
	else if (__tmp > 65535)
    4c28:	fe 01       	movw	r30, r28
    4c2a:	e5 5a       	subi	r30, 0xA5	; 165
    4c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2e:	60 81       	ld	r22, Z
    4c30:	71 81       	ldd	r23, Z+1	; 0x01
    4c32:	82 81       	ldd	r24, Z+2	; 0x02
    4c34:	93 81       	ldd	r25, Z+3	; 0x03
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	3f ef       	ldi	r19, 0xFF	; 255
    4c3a:	4f e7       	ldi	r20, 0x7F	; 127
    4c3c:	57 e4       	ldi	r21, 0x47	; 71
    4c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c42:	18 16       	cp	r1, r24
    4c44:	0c f0       	brlt	.+2      	; 0x4c48 <main+0x1594>
    4c46:	43 c0       	rjmp	.+134    	; 0x4cce <main+0x161a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c48:	fe 01       	movw	r30, r28
    4c4a:	e1 5a       	subi	r30, 0xA1	; 161
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	60 81       	ld	r22, Z
    4c50:	71 81       	ldd	r23, Z+1	; 0x01
    4c52:	82 81       	ldd	r24, Z+2	; 0x02
    4c54:	93 81       	ldd	r25, Z+3	; 0x03
    4c56:	20 e0       	ldi	r18, 0x00	; 0
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	40 e2       	ldi	r20, 0x20	; 32
    4c5c:	51 e4       	ldi	r21, 0x41	; 65
    4c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	8e 01       	movw	r16, r28
    4c68:	07 5a       	subi	r16, 0xA7	; 167
    4c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c6c:	bc 01       	movw	r22, r24
    4c6e:	cd 01       	movw	r24, r26
    4c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c74:	dc 01       	movw	r26, r24
    4c76:	cb 01       	movw	r24, r22
    4c78:	f8 01       	movw	r30, r16
    4c7a:	91 83       	std	Z+1, r25	; 0x01
    4c7c:	80 83       	st	Z, r24
    4c7e:	1f c0       	rjmp	.+62     	; 0x4cbe <main+0x160a>
    4c80:	fe 01       	movw	r30, r28
    4c82:	e9 5a       	subi	r30, 0xA9	; 169
    4c84:	ff 4f       	sbci	r31, 0xFF	; 255
    4c86:	88 ec       	ldi	r24, 0xC8	; 200
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	91 83       	std	Z+1, r25	; 0x01
    4c8c:	80 83       	st	Z, r24
    4c8e:	fe 01       	movw	r30, r28
    4c90:	e9 5a       	subi	r30, 0xA9	; 169
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	80 81       	ld	r24, Z
    4c96:	91 81       	ldd	r25, Z+1	; 0x01
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	f1 f7       	brne	.-4      	; 0x4c98 <main+0x15e4>
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	e9 5a       	subi	r30, 0xA9	; 169
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	91 83       	std	Z+1, r25	; 0x01
    4ca4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca6:	de 01       	movw	r26, r28
    4ca8:	a7 5a       	subi	r26, 0xA7	; 167
    4caa:	bf 4f       	sbci	r27, 0xFF	; 255
    4cac:	fe 01       	movw	r30, r28
    4cae:	e7 5a       	subi	r30, 0xA7	; 167
    4cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb2:	80 81       	ld	r24, Z
    4cb4:	91 81       	ldd	r25, Z+1	; 0x01
    4cb6:	01 97       	sbiw	r24, 0x01	; 1
    4cb8:	11 96       	adiw	r26, 0x01	; 1
    4cba:	9c 93       	st	X, r25
    4cbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	e7 5a       	subi	r30, 0xA7	; 167
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	80 81       	ld	r24, Z
    4cc6:	91 81       	ldd	r25, Z+1	; 0x01
    4cc8:	00 97       	sbiw	r24, 0x00	; 0
    4cca:	d1 f6       	brne	.-76     	; 0x4c80 <main+0x15cc>
    4ccc:	27 c0       	rjmp	.+78     	; 0x4d1c <main+0x1668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cce:	8e 01       	movw	r16, r28
    4cd0:	07 5a       	subi	r16, 0xA7	; 167
    4cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	e5 5a       	subi	r30, 0xA5	; 165
    4cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cda:	60 81       	ld	r22, Z
    4cdc:	71 81       	ldd	r23, Z+1	; 0x01
    4cde:	82 81       	ldd	r24, Z+2	; 0x02
    4ce0:	93 81       	ldd	r25, Z+3	; 0x03
    4ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce6:	dc 01       	movw	r26, r24
    4ce8:	cb 01       	movw	r24, r22
    4cea:	f8 01       	movw	r30, r16
    4cec:	91 83       	std	Z+1, r25	; 0x01
    4cee:	80 83       	st	Z, r24
    4cf0:	de 01       	movw	r26, r28
    4cf2:	ab 5a       	subi	r26, 0xAB	; 171
    4cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	e7 5a       	subi	r30, 0xA7	; 167
    4cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfc:	80 81       	ld	r24, Z
    4cfe:	91 81       	ldd	r25, Z+1	; 0x01
    4d00:	8d 93       	st	X+, r24
    4d02:	9c 93       	st	X, r25
    4d04:	fe 01       	movw	r30, r28
    4d06:	eb 5a       	subi	r30, 0xAB	; 171
    4d08:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0a:	80 81       	ld	r24, Z
    4d0c:	91 81       	ldd	r25, Z+1	; 0x01
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	f1 f7       	brne	.-4      	; 0x4d0e <main+0x165a>
    4d12:	fe 01       	movw	r30, r28
    4d14:	eb 5a       	subi	r30, 0xAB	; 171
    4d16:	ff 4f       	sbci	r31, 0xFF	; 255
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	80 83       	st	Z, r24
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_3))
    4d1c:	88 e3       	ldi	r24, 0x38	; 56
    4d1e:	91 e0       	ldi	r25, 0x01	; 1
    4d20:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4d24:	88 23       	and	r24, r24
    4d26:	09 f0       	breq	.+2      	; 0x4d2a <main+0x1676>
    4d28:	b5 cd       	rjmp	.-1174   	; 0x4894 <main+0x11e0>
			{
				/*3- Shifting Right every 150 ms*/

				APP_VidLED_Mode(switch3);
    4d2a:	83 e0       	ldi	r24, 0x03	; 3
    4d2c:	0e 94 0b 2a 	call	0x5416	; 0x5416 <APP_VidLED_Mode>
    4d30:	b1 cd       	rjmp	.-1182   	; 0x4894 <main+0x11e0>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_4))
    4d32:	8a e3       	ldi	r24, 0x3A	; 58
    4d34:	91 e0       	ldi	r25, 0x01	; 1
    4d36:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4d3a:	88 23       	and	r24, r24
    4d3c:	09 f0       	breq	.+2      	; 0x4d40 <main+0x168c>
    4d3e:	be c0       	rjmp	.+380    	; 0x4ebc <main+0x1808>
    4d40:	fe 01       	movw	r30, r28
    4d42:	ef 5a       	subi	r30, 0xAF	; 175
    4d44:	ff 4f       	sbci	r31, 0xFF	; 255
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	a8 e4       	ldi	r26, 0x48	; 72
    4d4c:	b2 e4       	ldi	r27, 0x42	; 66
    4d4e:	80 83       	st	Z, r24
    4d50:	91 83       	std	Z+1, r25	; 0x01
    4d52:	a2 83       	std	Z+2, r26	; 0x02
    4d54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d56:	8e 01       	movw	r16, r28
    4d58:	03 5b       	subi	r16, 0xB3	; 179
    4d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d5c:	fe 01       	movw	r30, r28
    4d5e:	ef 5a       	subi	r30, 0xAF	; 175
    4d60:	ff 4f       	sbci	r31, 0xFF	; 255
    4d62:	60 81       	ld	r22, Z
    4d64:	71 81       	ldd	r23, Z+1	; 0x01
    4d66:	82 81       	ldd	r24, Z+2	; 0x02
    4d68:	93 81       	ldd	r25, Z+3	; 0x03
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	4a ef       	ldi	r20, 0xFA	; 250
    4d70:	54 e4       	ldi	r21, 0x44	; 68
    4d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d76:	dc 01       	movw	r26, r24
    4d78:	cb 01       	movw	r24, r22
    4d7a:	f8 01       	movw	r30, r16
    4d7c:	80 83       	st	Z, r24
    4d7e:	91 83       	std	Z+1, r25	; 0x01
    4d80:	a2 83       	std	Z+2, r26	; 0x02
    4d82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d84:	fe 01       	movw	r30, r28
    4d86:	e3 5b       	subi	r30, 0xB3	; 179
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	60 81       	ld	r22, Z
    4d8c:	71 81       	ldd	r23, Z+1	; 0x01
    4d8e:	82 81       	ldd	r24, Z+2	; 0x02
    4d90:	93 81       	ldd	r25, Z+3	; 0x03
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	40 e8       	ldi	r20, 0x80	; 128
    4d98:	5f e3       	ldi	r21, 0x3F	; 63
    4d9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d9e:	88 23       	and	r24, r24
    4da0:	44 f4       	brge	.+16     	; 0x4db2 <main+0x16fe>
		__ticks = 1;
    4da2:	fe 01       	movw	r30, r28
    4da4:	e5 5b       	subi	r30, 0xB5	; 181
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	91 83       	std	Z+1, r25	; 0x01
    4dae:	80 83       	st	Z, r24
    4db0:	64 c0       	rjmp	.+200    	; 0x4e7a <main+0x17c6>
	else if (__tmp > 65535)
    4db2:	fe 01       	movw	r30, r28
    4db4:	e3 5b       	subi	r30, 0xB3	; 179
    4db6:	ff 4f       	sbci	r31, 0xFF	; 255
    4db8:	60 81       	ld	r22, Z
    4dba:	71 81       	ldd	r23, Z+1	; 0x01
    4dbc:	82 81       	ldd	r24, Z+2	; 0x02
    4dbe:	93 81       	ldd	r25, Z+3	; 0x03
    4dc0:	20 e0       	ldi	r18, 0x00	; 0
    4dc2:	3f ef       	ldi	r19, 0xFF	; 255
    4dc4:	4f e7       	ldi	r20, 0x7F	; 127
    4dc6:	57 e4       	ldi	r21, 0x47	; 71
    4dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4dcc:	18 16       	cp	r1, r24
    4dce:	0c f0       	brlt	.+2      	; 0x4dd2 <main+0x171e>
    4dd0:	43 c0       	rjmp	.+134    	; 0x4e58 <main+0x17a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	ef 5a       	subi	r30, 0xAF	; 175
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	60 81       	ld	r22, Z
    4dda:	71 81       	ldd	r23, Z+1	; 0x01
    4ddc:	82 81       	ldd	r24, Z+2	; 0x02
    4dde:	93 81       	ldd	r25, Z+3	; 0x03
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	40 e2       	ldi	r20, 0x20	; 32
    4de6:	51 e4       	ldi	r21, 0x41	; 65
    4de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	8e 01       	movw	r16, r28
    4df2:	05 5b       	subi	r16, 0xB5	; 181
    4df4:	1f 4f       	sbci	r17, 0xFF	; 255
    4df6:	bc 01       	movw	r22, r24
    4df8:	cd 01       	movw	r24, r26
    4dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dfe:	dc 01       	movw	r26, r24
    4e00:	cb 01       	movw	r24, r22
    4e02:	f8 01       	movw	r30, r16
    4e04:	91 83       	std	Z+1, r25	; 0x01
    4e06:	80 83       	st	Z, r24
    4e08:	1f c0       	rjmp	.+62     	; 0x4e48 <main+0x1794>
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	e7 5b       	subi	r30, 0xB7	; 183
    4e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e10:	88 ec       	ldi	r24, 0xC8	; 200
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	91 83       	std	Z+1, r25	; 0x01
    4e16:	80 83       	st	Z, r24
    4e18:	fe 01       	movw	r30, r28
    4e1a:	e7 5b       	subi	r30, 0xB7	; 183
    4e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1e:	80 81       	ld	r24, Z
    4e20:	91 81       	ldd	r25, Z+1	; 0x01
    4e22:	01 97       	sbiw	r24, 0x01	; 1
    4e24:	f1 f7       	brne	.-4      	; 0x4e22 <main+0x176e>
    4e26:	fe 01       	movw	r30, r28
    4e28:	e7 5b       	subi	r30, 0xB7	; 183
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	91 83       	std	Z+1, r25	; 0x01
    4e2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e30:	de 01       	movw	r26, r28
    4e32:	a5 5b       	subi	r26, 0xB5	; 181
    4e34:	bf 4f       	sbci	r27, 0xFF	; 255
    4e36:	fe 01       	movw	r30, r28
    4e38:	e5 5b       	subi	r30, 0xB5	; 181
    4e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3c:	80 81       	ld	r24, Z
    4e3e:	91 81       	ldd	r25, Z+1	; 0x01
    4e40:	01 97       	sbiw	r24, 0x01	; 1
    4e42:	11 96       	adiw	r26, 0x01	; 1
    4e44:	9c 93       	st	X, r25
    4e46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e48:	fe 01       	movw	r30, r28
    4e4a:	e5 5b       	subi	r30, 0xB5	; 181
    4e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4e:	80 81       	ld	r24, Z
    4e50:	91 81       	ldd	r25, Z+1	; 0x01
    4e52:	00 97       	sbiw	r24, 0x00	; 0
    4e54:	d1 f6       	brne	.-76     	; 0x4e0a <main+0x1756>
    4e56:	27 c0       	rjmp	.+78     	; 0x4ea6 <main+0x17f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e58:	8e 01       	movw	r16, r28
    4e5a:	05 5b       	subi	r16, 0xB5	; 181
    4e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5e:	fe 01       	movw	r30, r28
    4e60:	e3 5b       	subi	r30, 0xB3	; 179
    4e62:	ff 4f       	sbci	r31, 0xFF	; 255
    4e64:	60 81       	ld	r22, Z
    4e66:	71 81       	ldd	r23, Z+1	; 0x01
    4e68:	82 81       	ldd	r24, Z+2	; 0x02
    4e6a:	93 81       	ldd	r25, Z+3	; 0x03
    4e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	f8 01       	movw	r30, r16
    4e76:	91 83       	std	Z+1, r25	; 0x01
    4e78:	80 83       	st	Z, r24
    4e7a:	de 01       	movw	r26, r28
    4e7c:	a9 5b       	subi	r26, 0xB9	; 185
    4e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    4e80:	fe 01       	movw	r30, r28
    4e82:	e5 5b       	subi	r30, 0xB5	; 181
    4e84:	ff 4f       	sbci	r31, 0xFF	; 255
    4e86:	80 81       	ld	r24, Z
    4e88:	91 81       	ldd	r25, Z+1	; 0x01
    4e8a:	8d 93       	st	X+, r24
    4e8c:	9c 93       	st	X, r25
    4e8e:	fe 01       	movw	r30, r28
    4e90:	e9 5b       	subi	r30, 0xB9	; 185
    4e92:	ff 4f       	sbci	r31, 0xFF	; 255
    4e94:	80 81       	ld	r24, Z
    4e96:	91 81       	ldd	r25, Z+1	; 0x01
    4e98:	01 97       	sbiw	r24, 0x01	; 1
    4e9a:	f1 f7       	brne	.-4      	; 0x4e98 <main+0x17e4>
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	e9 5b       	subi	r30, 0xB9	; 185
    4ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea2:	91 83       	std	Z+1, r25	; 0x01
    4ea4:	80 83       	st	Z, r24
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_4))
    4ea6:	8a e3       	ldi	r24, 0x3A	; 58
    4ea8:	91 e0       	ldi	r25, 0x01	; 1
    4eaa:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4eae:	88 23       	and	r24, r24
    4eb0:	09 f0       	breq	.+2      	; 0x4eb4 <main+0x1800>
    4eb2:	f0 cc       	rjmp	.-1568   	; 0x4894 <main+0x11e0>
			{
				/*4- 2-LEDs Converging every 250 ms*/
				APP_VidLED_Mode(switch4);
    4eb4:	84 e0       	ldi	r24, 0x04	; 4
    4eb6:	0e 94 0b 2a 	call	0x5416	; 0x5416 <APP_VidLED_Mode>
    4eba:	ec cc       	rjmp	.-1576   	; 0x4894 <main+0x11e0>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_5))
    4ebc:	8c e3       	ldi	r24, 0x3C	; 60
    4ebe:	91 e0       	ldi	r25, 0x01	; 1
    4ec0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4ec4:	88 23       	and	r24, r24
    4ec6:	09 f0       	breq	.+2      	; 0x4eca <main+0x1816>
    4ec8:	90 c0       	rjmp	.+288    	; 0x4fea <main+0x1936>
    4eca:	fe 01       	movw	r30, r28
    4ecc:	ed 5b       	subi	r30, 0xBD	; 189
    4ece:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	a8 e4       	ldi	r26, 0x48	; 72
    4ed6:	b2 e4       	ldi	r27, 0x42	; 66
    4ed8:	80 83       	st	Z, r24
    4eda:	91 83       	std	Z+1, r25	; 0x01
    4edc:	a2 83       	std	Z+2, r26	; 0x02
    4ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ee0:	8e 01       	movw	r16, r28
    4ee2:	01 5c       	subi	r16, 0xC1	; 193
    4ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ee6:	fe 01       	movw	r30, r28
    4ee8:	ed 5b       	subi	r30, 0xBD	; 189
    4eea:	ff 4f       	sbci	r31, 0xFF	; 255
    4eec:	60 81       	ld	r22, Z
    4eee:	71 81       	ldd	r23, Z+1	; 0x01
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	4a ef       	ldi	r20, 0xFA	; 250
    4efa:	54 e4       	ldi	r21, 0x44	; 68
    4efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f00:	dc 01       	movw	r26, r24
    4f02:	cb 01       	movw	r24, r22
    4f04:	f8 01       	movw	r30, r16
    4f06:	80 83       	st	Z, r24
    4f08:	91 83       	std	Z+1, r25	; 0x01
    4f0a:	a2 83       	std	Z+2, r26	; 0x02
    4f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ff 96       	adiw	r30, 0x3f	; 63
    4f12:	60 81       	ld	r22, Z
    4f14:	71 81       	ldd	r23, Z+1	; 0x01
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	93 81       	ldd	r25, Z+3	; 0x03
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	40 e8       	ldi	r20, 0x80	; 128
    4f20:	5f e3       	ldi	r21, 0x3F	; 63
    4f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f26:	88 23       	and	r24, r24
    4f28:	2c f4       	brge	.+10     	; 0x4f34 <main+0x1880>
		__ticks = 1;
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	9e af       	std	Y+62, r25	; 0x3e
    4f30:	8d af       	std	Y+61, r24	; 0x3d
    4f32:	46 c0       	rjmp	.+140    	; 0x4fc0 <main+0x190c>
	else if (__tmp > 65535)
    4f34:	fe 01       	movw	r30, r28
    4f36:	ff 96       	adiw	r30, 0x3f	; 63
    4f38:	60 81       	ld	r22, Z
    4f3a:	71 81       	ldd	r23, Z+1	; 0x01
    4f3c:	82 81       	ldd	r24, Z+2	; 0x02
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	3f ef       	ldi	r19, 0xFF	; 255
    4f44:	4f e7       	ldi	r20, 0x7F	; 127
    4f46:	57 e4       	ldi	r21, 0x47	; 71
    4f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f4c:	18 16       	cp	r1, r24
    4f4e:	64 f5       	brge	.+88     	; 0x4fa8 <main+0x18f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f50:	fe 01       	movw	r30, r28
    4f52:	ed 5b       	subi	r30, 0xBD	; 189
    4f54:	ff 4f       	sbci	r31, 0xFF	; 255
    4f56:	60 81       	ld	r22, Z
    4f58:	71 81       	ldd	r23, Z+1	; 0x01
    4f5a:	82 81       	ldd	r24, Z+2	; 0x02
    4f5c:	93 81       	ldd	r25, Z+3	; 0x03
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	40 e2       	ldi	r20, 0x20	; 32
    4f64:	51 e4       	ldi	r21, 0x41	; 65
    4f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	cb 01       	movw	r24, r22
    4f6e:	bc 01       	movw	r22, r24
    4f70:	cd 01       	movw	r24, r26
    4f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	9e af       	std	Y+62, r25	; 0x3e
    4f7c:	8d af       	std	Y+61, r24	; 0x3d
    4f7e:	0f c0       	rjmp	.+30     	; 0x4f9e <main+0x18ea>
    4f80:	88 ec       	ldi	r24, 0xC8	; 200
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	9c af       	std	Y+60, r25	; 0x3c
    4f86:	8b af       	std	Y+59, r24	; 0x3b
    4f88:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f8a:	9c ad       	ldd	r25, Y+60	; 0x3c
    4f8c:	01 97       	sbiw	r24, 0x01	; 1
    4f8e:	f1 f7       	brne	.-4      	; 0x4f8c <main+0x18d8>
    4f90:	9c af       	std	Y+60, r25	; 0x3c
    4f92:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f94:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f96:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f98:	01 97       	sbiw	r24, 0x01	; 1
    4f9a:	9e af       	std	Y+62, r25	; 0x3e
    4f9c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fa0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fa2:	00 97       	sbiw	r24, 0x00	; 0
    4fa4:	69 f7       	brne	.-38     	; 0x4f80 <main+0x18cc>
    4fa6:	16 c0       	rjmp	.+44     	; 0x4fd4 <main+0x1920>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fa8:	fe 01       	movw	r30, r28
    4faa:	ff 96       	adiw	r30, 0x3f	; 63
    4fac:	60 81       	ld	r22, Z
    4fae:	71 81       	ldd	r23, Z+1	; 0x01
    4fb0:	82 81       	ldd	r24, Z+2	; 0x02
    4fb2:	93 81       	ldd	r25, Z+3	; 0x03
    4fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb8:	dc 01       	movw	r26, r24
    4fba:	cb 01       	movw	r24, r22
    4fbc:	9e af       	std	Y+62, r25	; 0x3e
    4fbe:	8d af       	std	Y+61, r24	; 0x3d
    4fc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fc4:	9a af       	std	Y+58, r25	; 0x3a
    4fc6:	89 af       	std	Y+57, r24	; 0x39
    4fc8:	89 ad       	ldd	r24, Y+57	; 0x39
    4fca:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fcc:	01 97       	sbiw	r24, 0x01	; 1
    4fce:	f1 f7       	brne	.-4      	; 0x4fcc <main+0x1918>
    4fd0:	9a af       	std	Y+58, r25	; 0x3a
    4fd2:	89 af       	std	Y+57, r24	; 0x39
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_5))
    4fd4:	8c e3       	ldi	r24, 0x3C	; 60
    4fd6:	91 e0       	ldi	r25, 0x01	; 1
    4fd8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4fdc:	88 23       	and	r24, r24
    4fde:	09 f0       	breq	.+2      	; 0x4fe2 <main+0x192e>
    4fe0:	59 cc       	rjmp	.-1870   	; 0x4894 <main+0x11e0>
			{
				/*5- 2-LEDs Diverging every 250 ms*/
				APP_VidLED_Mode(switch5);
    4fe2:	85 e0       	ldi	r24, 0x05	; 5
    4fe4:	0e 94 0b 2a 	call	0x5416	; 0x5416 <APP_VidLED_Mode>
    4fe8:	55 cc       	rjmp	.-1878   	; 0x4894 <main+0x11e0>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_6))
    4fea:	8e e3       	ldi	r24, 0x3E	; 62
    4fec:	91 e0       	ldi	r25, 0x01	; 1
    4fee:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    4ff2:	88 23       	and	r24, r24
    4ff4:	09 f0       	breq	.+2      	; 0x4ff8 <main+0x1944>
    4ff6:	7d c0       	rjmp	.+250    	; 0x50f2 <main+0x1a3e>
    4ff8:	80 e0       	ldi	r24, 0x00	; 0
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	a8 e4       	ldi	r26, 0x48	; 72
    4ffe:	b2 e4       	ldi	r27, 0x42	; 66
    5000:	8d ab       	std	Y+53, r24	; 0x35
    5002:	9e ab       	std	Y+54, r25	; 0x36
    5004:	af ab       	std	Y+55, r26	; 0x37
    5006:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5008:	6d a9       	ldd	r22, Y+53	; 0x35
    500a:	7e a9       	ldd	r23, Y+54	; 0x36
    500c:	8f a9       	ldd	r24, Y+55	; 0x37
    500e:	98 ad       	ldd	r25, Y+56	; 0x38
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	4a ef       	ldi	r20, 0xFA	; 250
    5016:	54 e4       	ldi	r21, 0x44	; 68
    5018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	89 ab       	std	Y+49, r24	; 0x31
    5022:	9a ab       	std	Y+50, r25	; 0x32
    5024:	ab ab       	std	Y+51, r26	; 0x33
    5026:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5028:	69 a9       	ldd	r22, Y+49	; 0x31
    502a:	7a a9       	ldd	r23, Y+50	; 0x32
    502c:	8b a9       	ldd	r24, Y+51	; 0x33
    502e:	9c a9       	ldd	r25, Y+52	; 0x34
    5030:	20 e0       	ldi	r18, 0x00	; 0
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	40 e8       	ldi	r20, 0x80	; 128
    5036:	5f e3       	ldi	r21, 0x3F	; 63
    5038:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    503c:	88 23       	and	r24, r24
    503e:	2c f4       	brge	.+10     	; 0x504a <main+0x1996>
		__ticks = 1;
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	98 ab       	std	Y+48, r25	; 0x30
    5046:	8f a7       	std	Y+47, r24	; 0x2f
    5048:	3f c0       	rjmp	.+126    	; 0x50c8 <main+0x1a14>
	else if (__tmp > 65535)
    504a:	69 a9       	ldd	r22, Y+49	; 0x31
    504c:	7a a9       	ldd	r23, Y+50	; 0x32
    504e:	8b a9       	ldd	r24, Y+51	; 0x33
    5050:	9c a9       	ldd	r25, Y+52	; 0x34
    5052:	20 e0       	ldi	r18, 0x00	; 0
    5054:	3f ef       	ldi	r19, 0xFF	; 255
    5056:	4f e7       	ldi	r20, 0x7F	; 127
    5058:	57 e4       	ldi	r21, 0x47	; 71
    505a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    505e:	18 16       	cp	r1, r24
    5060:	4c f5       	brge	.+82     	; 0x50b4 <main+0x1a00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5062:	6d a9       	ldd	r22, Y+53	; 0x35
    5064:	7e a9       	ldd	r23, Y+54	; 0x36
    5066:	8f a9       	ldd	r24, Y+55	; 0x37
    5068:	98 ad       	ldd	r25, Y+56	; 0x38
    506a:	20 e0       	ldi	r18, 0x00	; 0
    506c:	30 e0       	ldi	r19, 0x00	; 0
    506e:	40 e2       	ldi	r20, 0x20	; 32
    5070:	51 e4       	ldi	r21, 0x41	; 65
    5072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5076:	dc 01       	movw	r26, r24
    5078:	cb 01       	movw	r24, r22
    507a:	bc 01       	movw	r22, r24
    507c:	cd 01       	movw	r24, r26
    507e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	98 ab       	std	Y+48, r25	; 0x30
    5088:	8f a7       	std	Y+47, r24	; 0x2f
    508a:	0f c0       	rjmp	.+30     	; 0x50aa <main+0x19f6>
    508c:	88 ec       	ldi	r24, 0xC8	; 200
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	9e a7       	std	Y+46, r25	; 0x2e
    5092:	8d a7       	std	Y+45, r24	; 0x2d
    5094:	8d a5       	ldd	r24, Y+45	; 0x2d
    5096:	9e a5       	ldd	r25, Y+46	; 0x2e
    5098:	01 97       	sbiw	r24, 0x01	; 1
    509a:	f1 f7       	brne	.-4      	; 0x5098 <main+0x19e4>
    509c:	9e a7       	std	Y+46, r25	; 0x2e
    509e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    50a2:	98 a9       	ldd	r25, Y+48	; 0x30
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	98 ab       	std	Y+48, r25	; 0x30
    50a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    50ac:	98 a9       	ldd	r25, Y+48	; 0x30
    50ae:	00 97       	sbiw	r24, 0x00	; 0
    50b0:	69 f7       	brne	.-38     	; 0x508c <main+0x19d8>
    50b2:	14 c0       	rjmp	.+40     	; 0x50dc <main+0x1a28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b4:	69 a9       	ldd	r22, Y+49	; 0x31
    50b6:	7a a9       	ldd	r23, Y+50	; 0x32
    50b8:	8b a9       	ldd	r24, Y+51	; 0x33
    50ba:	9c a9       	ldd	r25, Y+52	; 0x34
    50bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c0:	dc 01       	movw	r26, r24
    50c2:	cb 01       	movw	r24, r22
    50c4:	98 ab       	std	Y+48, r25	; 0x30
    50c6:	8f a7       	std	Y+47, r24	; 0x2f
    50c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    50ca:	98 a9       	ldd	r25, Y+48	; 0x30
    50cc:	9c a7       	std	Y+44, r25	; 0x2c
    50ce:	8b a7       	std	Y+43, r24	; 0x2b
    50d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    50d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    50d4:	01 97       	sbiw	r24, 0x01	; 1
    50d6:	f1 f7       	brne	.-4      	; 0x50d4 <main+0x1a20>
    50d8:	9c a7       	std	Y+44, r25	; 0x2c
    50da:	8b a7       	std	Y+43, r24	; 0x2b
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_6))
    50dc:	8e e3       	ldi	r24, 0x3E	; 62
    50de:	91 e0       	ldi	r25, 0x01	; 1
    50e0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    50e4:	88 23       	and	r24, r24
    50e6:	09 f0       	breq	.+2      	; 0x50ea <main+0x1a36>
    50e8:	d5 cb       	rjmp	.-2134   	; 0x4894 <main+0x11e0>
			{
				/*6- Ping Pong effect every 250 ms*/
				APP_VidLED_Mode(switch6);
    50ea:	86 e0       	ldi	r24, 0x06	; 6
    50ec:	0e 94 0b 2a 	call	0x5416	; 0x5416 <APP_VidLED_Mode>
    50f0:	d1 cb       	rjmp	.-2142   	; 0x4894 <main+0x11e0>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_7))
    50f2:	80 e4       	ldi	r24, 0x40	; 64
    50f4:	91 e0       	ldi	r25, 0x01	; 1
    50f6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    50fa:	88 23       	and	r24, r24
    50fc:	09 f0       	breq	.+2      	; 0x5100 <main+0x1a4c>
    50fe:	7d c0       	rjmp	.+250    	; 0x51fa <main+0x1b46>
    5100:	80 e0       	ldi	r24, 0x00	; 0
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	a8 e4       	ldi	r26, 0x48	; 72
    5106:	b2 e4       	ldi	r27, 0x42	; 66
    5108:	8f a3       	std	Y+39, r24	; 0x27
    510a:	98 a7       	std	Y+40, r25	; 0x28
    510c:	a9 a7       	std	Y+41, r26	; 0x29
    510e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5110:	6f a1       	ldd	r22, Y+39	; 0x27
    5112:	78 a5       	ldd	r23, Y+40	; 0x28
    5114:	89 a5       	ldd	r24, Y+41	; 0x29
    5116:	9a a5       	ldd	r25, Y+42	; 0x2a
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	4a ef       	ldi	r20, 0xFA	; 250
    511e:	54 e4       	ldi	r21, 0x44	; 68
    5120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	8b a3       	std	Y+35, r24	; 0x23
    512a:	9c a3       	std	Y+36, r25	; 0x24
    512c:	ad a3       	std	Y+37, r26	; 0x25
    512e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5130:	6b a1       	ldd	r22, Y+35	; 0x23
    5132:	7c a1       	ldd	r23, Y+36	; 0x24
    5134:	8d a1       	ldd	r24, Y+37	; 0x25
    5136:	9e a1       	ldd	r25, Y+38	; 0x26
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	40 e8       	ldi	r20, 0x80	; 128
    513e:	5f e3       	ldi	r21, 0x3F	; 63
    5140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5144:	88 23       	and	r24, r24
    5146:	2c f4       	brge	.+10     	; 0x5152 <main+0x1a9e>
		__ticks = 1;
    5148:	81 e0       	ldi	r24, 0x01	; 1
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	9a a3       	std	Y+34, r25	; 0x22
    514e:	89 a3       	std	Y+33, r24	; 0x21
    5150:	3f c0       	rjmp	.+126    	; 0x51d0 <main+0x1b1c>
	else if (__tmp > 65535)
    5152:	6b a1       	ldd	r22, Y+35	; 0x23
    5154:	7c a1       	ldd	r23, Y+36	; 0x24
    5156:	8d a1       	ldd	r24, Y+37	; 0x25
    5158:	9e a1       	ldd	r25, Y+38	; 0x26
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	3f ef       	ldi	r19, 0xFF	; 255
    515e:	4f e7       	ldi	r20, 0x7F	; 127
    5160:	57 e4       	ldi	r21, 0x47	; 71
    5162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5166:	18 16       	cp	r1, r24
    5168:	4c f5       	brge	.+82     	; 0x51bc <main+0x1b08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    516a:	6f a1       	ldd	r22, Y+39	; 0x27
    516c:	78 a5       	ldd	r23, Y+40	; 0x28
    516e:	89 a5       	ldd	r24, Y+41	; 0x29
    5170:	9a a5       	ldd	r25, Y+42	; 0x2a
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	40 e2       	ldi	r20, 0x20	; 32
    5178:	51 e4       	ldi	r21, 0x41	; 65
    517a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    517e:	dc 01       	movw	r26, r24
    5180:	cb 01       	movw	r24, r22
    5182:	bc 01       	movw	r22, r24
    5184:	cd 01       	movw	r24, r26
    5186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    518a:	dc 01       	movw	r26, r24
    518c:	cb 01       	movw	r24, r22
    518e:	9a a3       	std	Y+34, r25	; 0x22
    5190:	89 a3       	std	Y+33, r24	; 0x21
    5192:	0f c0       	rjmp	.+30     	; 0x51b2 <main+0x1afe>
    5194:	88 ec       	ldi	r24, 0xC8	; 200
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	98 a3       	std	Y+32, r25	; 0x20
    519a:	8f 8f       	std	Y+31, r24	; 0x1f
    519c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    519e:	98 a1       	ldd	r25, Y+32	; 0x20
    51a0:	01 97       	sbiw	r24, 0x01	; 1
    51a2:	f1 f7       	brne	.-4      	; 0x51a0 <main+0x1aec>
    51a4:	98 a3       	std	Y+32, r25	; 0x20
    51a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51a8:	89 a1       	ldd	r24, Y+33	; 0x21
    51aa:	9a a1       	ldd	r25, Y+34	; 0x22
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	9a a3       	std	Y+34, r25	; 0x22
    51b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51b2:	89 a1       	ldd	r24, Y+33	; 0x21
    51b4:	9a a1       	ldd	r25, Y+34	; 0x22
    51b6:	00 97       	sbiw	r24, 0x00	; 0
    51b8:	69 f7       	brne	.-38     	; 0x5194 <main+0x1ae0>
    51ba:	14 c0       	rjmp	.+40     	; 0x51e4 <main+0x1b30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51bc:	6b a1       	ldd	r22, Y+35	; 0x23
    51be:	7c a1       	ldd	r23, Y+36	; 0x24
    51c0:	8d a1       	ldd	r24, Y+37	; 0x25
    51c2:	9e a1       	ldd	r25, Y+38	; 0x26
    51c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51c8:	dc 01       	movw	r26, r24
    51ca:	cb 01       	movw	r24, r22
    51cc:	9a a3       	std	Y+34, r25	; 0x22
    51ce:	89 a3       	std	Y+33, r24	; 0x21
    51d0:	89 a1       	ldd	r24, Y+33	; 0x21
    51d2:	9a a1       	ldd	r25, Y+34	; 0x22
    51d4:	9e 8f       	std	Y+30, r25	; 0x1e
    51d6:	8d 8f       	std	Y+29, r24	; 0x1d
    51d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51dc:	01 97       	sbiw	r24, 0x01	; 1
    51de:	f1 f7       	brne	.-4      	; 0x51dc <main+0x1b28>
    51e0:	9e 8f       	std	Y+30, r25	; 0x1e
    51e2:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_7))
    51e4:	80 e4       	ldi	r24, 0x40	; 64
    51e6:	91 e0       	ldi	r25, 0x01	; 1
    51e8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    51ec:	88 23       	and	r24, r24
    51ee:	09 f0       	breq	.+2      	; 0x51f2 <main+0x1b3e>
    51f0:	51 cb       	rjmp	.-2398   	; 0x4894 <main+0x11e0>
			{
				/*7- Incrementing (Snake effect) every 250 ms*/
				APP_VidLED_Mode(switch7);
    51f2:	87 e0       	ldi	r24, 0x07	; 7
    51f4:	0e 94 0b 2a 	call	0x5416	; 0x5416 <APP_VidLED_Mode>
    51f8:	4d cb       	rjmp	.-2406   	; 0x4894 <main+0x11e0>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_8))
    51fa:	82 e4       	ldi	r24, 0x42	; 66
    51fc:	91 e0       	ldi	r25, 0x01	; 1
    51fe:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    5202:	88 23       	and	r24, r24
    5204:	09 f0       	breq	.+2      	; 0x5208 <main+0x1b54>
    5206:	7d c0       	rjmp	.+250    	; 0x5302 <main+0x1c4e>
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	a8 e4       	ldi	r26, 0x48	; 72
    520e:	b2 e4       	ldi	r27, 0x42	; 66
    5210:	89 8f       	std	Y+25, r24	; 0x19
    5212:	9a 8f       	std	Y+26, r25	; 0x1a
    5214:	ab 8f       	std	Y+27, r26	; 0x1b
    5216:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5218:	69 8d       	ldd	r22, Y+25	; 0x19
    521a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    521c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    521e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	4a ef       	ldi	r20, 0xFA	; 250
    5226:	54 e4       	ldi	r21, 0x44	; 68
    5228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    522c:	dc 01       	movw	r26, r24
    522e:	cb 01       	movw	r24, r22
    5230:	8d 8b       	std	Y+21, r24	; 0x15
    5232:	9e 8b       	std	Y+22, r25	; 0x16
    5234:	af 8b       	std	Y+23, r26	; 0x17
    5236:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5238:	6d 89       	ldd	r22, Y+21	; 0x15
    523a:	7e 89       	ldd	r23, Y+22	; 0x16
    523c:	8f 89       	ldd	r24, Y+23	; 0x17
    523e:	98 8d       	ldd	r25, Y+24	; 0x18
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	40 e8       	ldi	r20, 0x80	; 128
    5246:	5f e3       	ldi	r21, 0x3F	; 63
    5248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    524c:	88 23       	and	r24, r24
    524e:	2c f4       	brge	.+10     	; 0x525a <main+0x1ba6>
		__ticks = 1;
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	9c 8b       	std	Y+20, r25	; 0x14
    5256:	8b 8b       	std	Y+19, r24	; 0x13
    5258:	3f c0       	rjmp	.+126    	; 0x52d8 <main+0x1c24>
	else if (__tmp > 65535)
    525a:	6d 89       	ldd	r22, Y+21	; 0x15
    525c:	7e 89       	ldd	r23, Y+22	; 0x16
    525e:	8f 89       	ldd	r24, Y+23	; 0x17
    5260:	98 8d       	ldd	r25, Y+24	; 0x18
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	3f ef       	ldi	r19, 0xFF	; 255
    5266:	4f e7       	ldi	r20, 0x7F	; 127
    5268:	57 e4       	ldi	r21, 0x47	; 71
    526a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    526e:	18 16       	cp	r1, r24
    5270:	4c f5       	brge	.+82     	; 0x52c4 <main+0x1c10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5272:	69 8d       	ldd	r22, Y+25	; 0x19
    5274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    527a:	20 e0       	ldi	r18, 0x00	; 0
    527c:	30 e0       	ldi	r19, 0x00	; 0
    527e:	40 e2       	ldi	r20, 0x20	; 32
    5280:	51 e4       	ldi	r21, 0x41	; 65
    5282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5286:	dc 01       	movw	r26, r24
    5288:	cb 01       	movw	r24, r22
    528a:	bc 01       	movw	r22, r24
    528c:	cd 01       	movw	r24, r26
    528e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	9c 8b       	std	Y+20, r25	; 0x14
    5298:	8b 8b       	std	Y+19, r24	; 0x13
    529a:	0f c0       	rjmp	.+30     	; 0x52ba <main+0x1c06>
    529c:	88 ec       	ldi	r24, 0xC8	; 200
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	9a 8b       	std	Y+18, r25	; 0x12
    52a2:	89 8b       	std	Y+17, r24	; 0x11
    52a4:	89 89       	ldd	r24, Y+17	; 0x11
    52a6:	9a 89       	ldd	r25, Y+18	; 0x12
    52a8:	01 97       	sbiw	r24, 0x01	; 1
    52aa:	f1 f7       	brne	.-4      	; 0x52a8 <main+0x1bf4>
    52ac:	9a 8b       	std	Y+18, r25	; 0x12
    52ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52b0:	8b 89       	ldd	r24, Y+19	; 0x13
    52b2:	9c 89       	ldd	r25, Y+20	; 0x14
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	9c 8b       	std	Y+20, r25	; 0x14
    52b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ba:	8b 89       	ldd	r24, Y+19	; 0x13
    52bc:	9c 89       	ldd	r25, Y+20	; 0x14
    52be:	00 97       	sbiw	r24, 0x00	; 0
    52c0:	69 f7       	brne	.-38     	; 0x529c <main+0x1be8>
    52c2:	14 c0       	rjmp	.+40     	; 0x52ec <main+0x1c38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52c4:	6d 89       	ldd	r22, Y+21	; 0x15
    52c6:	7e 89       	ldd	r23, Y+22	; 0x16
    52c8:	8f 89       	ldd	r24, Y+23	; 0x17
    52ca:	98 8d       	ldd	r25, Y+24	; 0x18
    52cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d0:	dc 01       	movw	r26, r24
    52d2:	cb 01       	movw	r24, r22
    52d4:	9c 8b       	std	Y+20, r25	; 0x14
    52d6:	8b 8b       	std	Y+19, r24	; 0x13
    52d8:	8b 89       	ldd	r24, Y+19	; 0x13
    52da:	9c 89       	ldd	r25, Y+20	; 0x14
    52dc:	98 8b       	std	Y+16, r25	; 0x10
    52de:	8f 87       	std	Y+15, r24	; 0x0f
    52e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    52e2:	98 89       	ldd	r25, Y+16	; 0x10
    52e4:	01 97       	sbiw	r24, 0x01	; 1
    52e6:	f1 f7       	brne	.-4      	; 0x52e4 <main+0x1c30>
    52e8:	98 8b       	std	Y+16, r25	; 0x10
    52ea:	8f 87       	std	Y+15, r24	; 0x0f
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_8))
    52ec:	82 e4       	ldi	r24, 0x42	; 66
    52ee:	91 e0       	ldi	r25, 0x01	; 1
    52f0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    52f4:	88 23       	and	r24, r24
    52f6:	09 f0       	breq	.+2      	; 0x52fa <main+0x1c46>
    52f8:	cd ca       	rjmp	.-2662   	; 0x4894 <main+0x11e0>
			{
				/*8-	2-LEDs Converging/Diverging every 250 ms*/
				APP_VidLED_Mode(switch8);
    52fa:	88 e0       	ldi	r24, 0x08	; 8
    52fc:	0e 94 0b 2a 	call	0x5416	; 0x5416 <APP_VidLED_Mode>
    5300:	c9 ca       	rjmp	.-2670   	; 0x4894 <main+0x11e0>
		}
		else
		{


			HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,OFF);
    5302:	82 e3       	ldi	r24, 0x32	; 50
    5304:	91 e0       	ldi	r25, 0x01	; 1
    5306:	60 e0       	ldi	r22, 0x00	; 0
    5308:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
			HCLCD_Vid4Bits_DisplayString((u8*)"No Switch is");
    530c:	8d e7       	ldi	r24, 0x7D	; 125
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    5314:	82 e0       	ldi	r24, 0x02	; 2
    5316:	66 e0       	ldi	r22, 0x06	; 6
    5318:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
			HCLCD_Vid4Bits_DisplayString((u8*)"Pressed");
    531c:	8a e8       	ldi	r24, 0x8A	; 138
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	90 e0       	ldi	r25, 0x00	; 0
    5328:	aa e7       	ldi	r26, 0x7A	; 122
    532a:	b4 e4       	ldi	r27, 0x44	; 68
    532c:	8b 87       	std	Y+11, r24	; 0x0b
    532e:	9c 87       	std	Y+12, r25	; 0x0c
    5330:	ad 87       	std	Y+13, r26	; 0x0d
    5332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5334:	6b 85       	ldd	r22, Y+11	; 0x0b
    5336:	7c 85       	ldd	r23, Y+12	; 0x0c
    5338:	8d 85       	ldd	r24, Y+13	; 0x0d
    533a:	9e 85       	ldd	r25, Y+14	; 0x0e
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	4a ef       	ldi	r20, 0xFA	; 250
    5342:	54 e4       	ldi	r21, 0x44	; 68
    5344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	8f 83       	std	Y+7, r24	; 0x07
    534e:	98 87       	std	Y+8, r25	; 0x08
    5350:	a9 87       	std	Y+9, r26	; 0x09
    5352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5354:	6f 81       	ldd	r22, Y+7	; 0x07
    5356:	78 85       	ldd	r23, Y+8	; 0x08
    5358:	89 85       	ldd	r24, Y+9	; 0x09
    535a:	9a 85       	ldd	r25, Y+10	; 0x0a
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	40 e8       	ldi	r20, 0x80	; 128
    5362:	5f e3       	ldi	r21, 0x3F	; 63
    5364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5368:	88 23       	and	r24, r24
    536a:	2c f4       	brge	.+10     	; 0x5376 <main+0x1cc2>
		__ticks = 1;
    536c:	81 e0       	ldi	r24, 0x01	; 1
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	9e 83       	std	Y+6, r25	; 0x06
    5372:	8d 83       	std	Y+5, r24	; 0x05
    5374:	3f c0       	rjmp	.+126    	; 0x53f4 <main+0x1d40>
	else if (__tmp > 65535)
    5376:	6f 81       	ldd	r22, Y+7	; 0x07
    5378:	78 85       	ldd	r23, Y+8	; 0x08
    537a:	89 85       	ldd	r24, Y+9	; 0x09
    537c:	9a 85       	ldd	r25, Y+10	; 0x0a
    537e:	20 e0       	ldi	r18, 0x00	; 0
    5380:	3f ef       	ldi	r19, 0xFF	; 255
    5382:	4f e7       	ldi	r20, 0x7F	; 127
    5384:	57 e4       	ldi	r21, 0x47	; 71
    5386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    538a:	18 16       	cp	r1, r24
    538c:	4c f5       	brge	.+82     	; 0x53e0 <main+0x1d2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    538e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5390:	7c 85       	ldd	r23, Y+12	; 0x0c
    5392:	8d 85       	ldd	r24, Y+13	; 0x0d
    5394:	9e 85       	ldd	r25, Y+14	; 0x0e
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	40 e2       	ldi	r20, 0x20	; 32
    539c:	51 e4       	ldi	r21, 0x41	; 65
    539e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a2:	dc 01       	movw	r26, r24
    53a4:	cb 01       	movw	r24, r22
    53a6:	bc 01       	movw	r22, r24
    53a8:	cd 01       	movw	r24, r26
    53aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ae:	dc 01       	movw	r26, r24
    53b0:	cb 01       	movw	r24, r22
    53b2:	9e 83       	std	Y+6, r25	; 0x06
    53b4:	8d 83       	std	Y+5, r24	; 0x05
    53b6:	0f c0       	rjmp	.+30     	; 0x53d6 <main+0x1d22>
    53b8:	88 ec       	ldi	r24, 0xC8	; 200
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	9c 83       	std	Y+4, r25	; 0x04
    53be:	8b 83       	std	Y+3, r24	; 0x03
    53c0:	8b 81       	ldd	r24, Y+3	; 0x03
    53c2:	9c 81       	ldd	r25, Y+4	; 0x04
    53c4:	01 97       	sbiw	r24, 0x01	; 1
    53c6:	f1 f7       	brne	.-4      	; 0x53c4 <main+0x1d10>
    53c8:	9c 83       	std	Y+4, r25	; 0x04
    53ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53cc:	8d 81       	ldd	r24, Y+5	; 0x05
    53ce:	9e 81       	ldd	r25, Y+6	; 0x06
    53d0:	01 97       	sbiw	r24, 0x01	; 1
    53d2:	9e 83       	std	Y+6, r25	; 0x06
    53d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53d6:	8d 81       	ldd	r24, Y+5	; 0x05
    53d8:	9e 81       	ldd	r25, Y+6	; 0x06
    53da:	00 97       	sbiw	r24, 0x00	; 0
    53dc:	69 f7       	brne	.-38     	; 0x53b8 <main+0x1d04>
    53de:	14 c0       	rjmp	.+40     	; 0x5408 <main+0x1d54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53e0:	6f 81       	ldd	r22, Y+7	; 0x07
    53e2:	78 85       	ldd	r23, Y+8	; 0x08
    53e4:	89 85       	ldd	r24, Y+9	; 0x09
    53e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ec:	dc 01       	movw	r26, r24
    53ee:	cb 01       	movw	r24, r22
    53f0:	9e 83       	std	Y+6, r25	; 0x06
    53f2:	8d 83       	std	Y+5, r24	; 0x05
    53f4:	8d 81       	ldd	r24, Y+5	; 0x05
    53f6:	9e 81       	ldd	r25, Y+6	; 0x06
    53f8:	9a 83       	std	Y+2, r25	; 0x02
    53fa:	89 83       	std	Y+1, r24	; 0x01
    53fc:	89 81       	ldd	r24, Y+1	; 0x01
    53fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5400:	01 97       	sbiw	r24, 0x01	; 1
    5402:	f1 f7       	brne	.-4      	; 0x5400 <main+0x1d4c>
    5404:	9a 83       	std	Y+2, r25	; 0x02
    5406:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    5408:	80 e0       	ldi	r24, 0x00	; 0
    540a:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
			HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    540e:	81 e0       	ldi	r24, 0x01	; 1
    5410:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
    5414:	3f ca       	rjmp	.-2946   	; 0x4894 <main+0x11e0>

00005416 <APP_VidLED_Mode>:
		}
	}
	return 0 ;
}
void APP_VidLED_Mode(u8 Copy_u8SwitchNumber)
{
    5416:	0f 93       	push	r16
    5418:	1f 93       	push	r17
    541a:	df 93       	push	r29
    541c:	cf 93       	push	r28
    541e:	cd b7       	in	r28, 0x3d	; 61
    5420:	de b7       	in	r29, 0x3e	; 62
    5422:	c7 59       	subi	r28, 0x97	; 151
    5424:	d0 40       	sbci	r29, 0x00	; 0
    5426:	0f b6       	in	r0, 0x3f	; 63
    5428:	f8 94       	cli
    542a:	de bf       	out	0x3e, r29	; 62
    542c:	0f be       	out	0x3f, r0	; 63
    542e:	cd bf       	out	0x3d, r28	; 61
    5430:	fe 01       	movw	r30, r28
    5432:	eb 56       	subi	r30, 0x6B	; 107
    5434:	ff 4f       	sbci	r31, 0xFF	; 255
    5436:	80 83       	st	Z, r24

	switch(Copy_u8SwitchNumber)
    5438:	fe 01       	movw	r30, r28
    543a:	eb 56       	subi	r30, 0x6B	; 107
    543c:	ff 4f       	sbci	r31, 0xFF	; 255
    543e:	80 81       	ld	r24, Z
    5440:	28 2f       	mov	r18, r24
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	ca 56       	subi	r28, 0x6A	; 106
    5446:	df 4f       	sbci	r29, 0xFF	; 255
    5448:	39 83       	std	Y+1, r19	; 0x01
    544a:	28 83       	st	Y, r18
    544c:	c6 59       	subi	r28, 0x96	; 150
    544e:	d0 40       	sbci	r29, 0x00	; 0
    5450:	ca 56       	subi	r28, 0x6A	; 106
    5452:	df 4f       	sbci	r29, 0xFF	; 255
    5454:	88 81       	ld	r24, Y
    5456:	99 81       	ldd	r25, Y+1	; 0x01
    5458:	c6 59       	subi	r28, 0x96	; 150
    545a:	d0 40       	sbci	r29, 0x00	; 0
    545c:	84 30       	cpi	r24, 0x04	; 4
    545e:	91 05       	cpc	r25, r1
    5460:	09 f4       	brne	.+2      	; 0x5464 <APP_VidLED_Mode+0x4e>
    5462:	f8 c3       	rjmp	.+2032   	; 0x5c54 <APP_VidLED_Mode+0x83e>
    5464:	ca 56       	subi	r28, 0x6A	; 106
    5466:	df 4f       	sbci	r29, 0xFF	; 255
    5468:	e8 81       	ld	r30, Y
    546a:	f9 81       	ldd	r31, Y+1	; 0x01
    546c:	c6 59       	subi	r28, 0x96	; 150
    546e:	d0 40       	sbci	r29, 0x00	; 0
    5470:	e5 30       	cpi	r30, 0x05	; 5
    5472:	f1 05       	cpc	r31, r1
    5474:	fc f4       	brge	.+62     	; 0x54b4 <APP_VidLED_Mode+0x9e>
    5476:	ca 56       	subi	r28, 0x6A	; 106
    5478:	df 4f       	sbci	r29, 0xFF	; 255
    547a:	28 81       	ld	r18, Y
    547c:	39 81       	ldd	r19, Y+1	; 0x01
    547e:	c6 59       	subi	r28, 0x96	; 150
    5480:	d0 40       	sbci	r29, 0x00	; 0
    5482:	22 30       	cpi	r18, 0x02	; 2
    5484:	31 05       	cpc	r19, r1
    5486:	09 f4       	brne	.+2      	; 0x548a <APP_VidLED_Mode+0x74>
    5488:	01 c2       	rjmp	.+1026   	; 0x588c <APP_VidLED_Mode+0x476>
    548a:	ca 56       	subi	r28, 0x6A	; 106
    548c:	df 4f       	sbci	r29, 0xFF	; 255
    548e:	88 81       	ld	r24, Y
    5490:	99 81       	ldd	r25, Y+1	; 0x01
    5492:	c6 59       	subi	r28, 0x96	; 150
    5494:	d0 40       	sbci	r29, 0x00	; 0
    5496:	83 30       	cpi	r24, 0x03	; 3
    5498:	91 05       	cpc	r25, r1
    549a:	0c f0       	brlt	.+2      	; 0x549e <APP_VidLED_Mode+0x88>
    549c:	e7 c2       	rjmp	.+1486   	; 0x5a6c <APP_VidLED_Mode+0x656>
    549e:	ca 56       	subi	r28, 0x6A	; 106
    54a0:	df 4f       	sbci	r29, 0xFF	; 255
    54a2:	e8 81       	ld	r30, Y
    54a4:	f9 81       	ldd	r31, Y+1	; 0x01
    54a6:	c6 59       	subi	r28, 0x96	; 150
    54a8:	d0 40       	sbci	r29, 0x00	; 0
    54aa:	e1 30       	cpi	r30, 0x01	; 1
    54ac:	f1 05       	cpc	r31, r1
    54ae:	61 f1       	breq	.+88     	; 0x5508 <APP_VidLED_Mode+0xf2>
    54b0:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <APP_VidLED_Mode+0x111e>
    54b4:	ca 56       	subi	r28, 0x6A	; 106
    54b6:	df 4f       	sbci	r29, 0xFF	; 255
    54b8:	28 81       	ld	r18, Y
    54ba:	39 81       	ldd	r19, Y+1	; 0x01
    54bc:	c6 59       	subi	r28, 0x96	; 150
    54be:	d0 40       	sbci	r29, 0x00	; 0
    54c0:	26 30       	cpi	r18, 0x06	; 6
    54c2:	31 05       	cpc	r19, r1
    54c4:	09 f4       	brne	.+2      	; 0x54c8 <APP_VidLED_Mode+0xb2>
    54c6:	8e c5       	rjmp	.+2844   	; 0x5fe4 <APP_VidLED_Mode+0xbce>
    54c8:	ca 56       	subi	r28, 0x6A	; 106
    54ca:	df 4f       	sbci	r29, 0xFF	; 255
    54cc:	88 81       	ld	r24, Y
    54ce:	99 81       	ldd	r25, Y+1	; 0x01
    54d0:	c6 59       	subi	r28, 0x96	; 150
    54d2:	d0 40       	sbci	r29, 0x00	; 0
    54d4:	86 30       	cpi	r24, 0x06	; 6
    54d6:	91 05       	cpc	r25, r1
    54d8:	0c f4       	brge	.+2      	; 0x54dc <APP_VidLED_Mode+0xc6>
    54da:	b7 c4       	rjmp	.+2414   	; 0x5e4a <APP_VidLED_Mode+0xa34>
    54dc:	ca 56       	subi	r28, 0x6A	; 106
    54de:	df 4f       	sbci	r29, 0xFF	; 255
    54e0:	e8 81       	ld	r30, Y
    54e2:	f9 81       	ldd	r31, Y+1	; 0x01
    54e4:	c6 59       	subi	r28, 0x96	; 150
    54e6:	d0 40       	sbci	r29, 0x00	; 0
    54e8:	e7 30       	cpi	r30, 0x07	; 7
    54ea:	f1 05       	cpc	r31, r1
    54ec:	09 f4       	brne	.+2      	; 0x54f0 <APP_VidLED_Mode+0xda>
    54ee:	25 c6       	rjmp	.+3146   	; 0x613a <APP_VidLED_Mode+0xd24>
    54f0:	ca 56       	subi	r28, 0x6A	; 106
    54f2:	df 4f       	sbci	r29, 0xFF	; 255
    54f4:	28 81       	ld	r18, Y
    54f6:	39 81       	ldd	r19, Y+1	; 0x01
    54f8:	c6 59       	subi	r28, 0x96	; 150
    54fa:	d0 40       	sbci	r29, 0x00	; 0
    54fc:	28 30       	cpi	r18, 0x08	; 8
    54fe:	31 05       	cpc	r19, r1
    5500:	09 f4       	brne	.+2      	; 0x5504 <APP_VidLED_Mode+0xee>
    5502:	5e c7       	rjmp	.+3772   	; 0x63c0 <APP_VidLED_Mode+0xfaa>
    5504:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <APP_VidLED_Mode+0x111e>
	{
	/*1- Flashing every 500 ms */
	case switch1 :
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    5508:	80 e0       	ldi	r24, 0x00	; 0
    550a:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    550e:	81 e0       	ldi	r24, 0x01	; 1
    5510:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch1);
    5514:	82 e3       	ldi	r24, 0x32	; 50
    5516:	91 e0       	ldi	r25, 0x01	; 1
    5518:	61 e0       	ldi	r22, 0x01	; 1
    551a:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [1]");
    551e:	89 e9       	ldi	r24, 0x99	; 153
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    5526:	82 e0       	ldi	r24, 0x02	; 2
    5528:	66 e0       	ldi	r22, 0x06	; 6
    552a:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
    552e:	88 ea       	ldi	r24, 0xA8	; 168
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_DisplayShiftRight(1);
    5536:	81 e0       	ldi	r24, 0x01	; 1
    5538:	0e 94 98 19 	call	0x3330	; 0x3330 <HCLCD_Vid4Bits_DisplayShiftRight>
		HLED_VidLed_On(&LED1);
    553c:	85 e6       	ldi	r24, 0x65	; 101
    553e:	91 e0       	ldi	r25, 0x01	; 1
    5540:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED2);
    5544:	84 e2       	ldi	r24, 0x24	; 36
    5546:	91 e0       	ldi	r25, 0x01	; 1
    5548:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED3);
    554c:	86 e2       	ldi	r24, 0x26	; 38
    554e:	91 e0       	ldi	r25, 0x01	; 1
    5550:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED4);
    5554:	88 e2       	ldi	r24, 0x28	; 40
    5556:	91 e0       	ldi	r25, 0x01	; 1
    5558:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED5);
    555c:	8a e2       	ldi	r24, 0x2A	; 42
    555e:	91 e0       	ldi	r25, 0x01	; 1
    5560:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED6);
    5564:	8c e2       	ldi	r24, 0x2C	; 44
    5566:	91 e0       	ldi	r25, 0x01	; 1
    5568:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED7);
    556c:	8e e2       	ldi	r24, 0x2E	; 46
    556e:	91 e0       	ldi	r25, 0x01	; 1
    5570:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED8);
    5574:	80 e3       	ldi	r24, 0x30	; 48
    5576:	91 e0       	ldi	r25, 0x01	; 1
    5578:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
    557c:	fe 01       	movw	r30, r28
    557e:	e7 57       	subi	r30, 0x77	; 119
    5580:	ff 4f       	sbci	r31, 0xFF	; 255
    5582:	80 e0       	ldi	r24, 0x00	; 0
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	aa ef       	ldi	r26, 0xFA	; 250
    5588:	b3 e4       	ldi	r27, 0x43	; 67
    558a:	80 83       	st	Z, r24
    558c:	91 83       	std	Z+1, r25	; 0x01
    558e:	a2 83       	std	Z+2, r26	; 0x02
    5590:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5592:	8e 01       	movw	r16, r28
    5594:	0b 57       	subi	r16, 0x7B	; 123
    5596:	1f 4f       	sbci	r17, 0xFF	; 255
    5598:	fe 01       	movw	r30, r28
    559a:	e7 57       	subi	r30, 0x77	; 119
    559c:	ff 4f       	sbci	r31, 0xFF	; 255
    559e:	60 81       	ld	r22, Z
    55a0:	71 81       	ldd	r23, Z+1	; 0x01
    55a2:	82 81       	ldd	r24, Z+2	; 0x02
    55a4:	93 81       	ldd	r25, Z+3	; 0x03
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	4a ef       	ldi	r20, 0xFA	; 250
    55ac:	54 e4       	ldi	r21, 0x44	; 68
    55ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55b2:	dc 01       	movw	r26, r24
    55b4:	cb 01       	movw	r24, r22
    55b6:	f8 01       	movw	r30, r16
    55b8:	80 83       	st	Z, r24
    55ba:	91 83       	std	Z+1, r25	; 0x01
    55bc:	a2 83       	std	Z+2, r26	; 0x02
    55be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55c0:	fe 01       	movw	r30, r28
    55c2:	eb 57       	subi	r30, 0x7B	; 123
    55c4:	ff 4f       	sbci	r31, 0xFF	; 255
    55c6:	60 81       	ld	r22, Z
    55c8:	71 81       	ldd	r23, Z+1	; 0x01
    55ca:	82 81       	ldd	r24, Z+2	; 0x02
    55cc:	93 81       	ldd	r25, Z+3	; 0x03
    55ce:	20 e0       	ldi	r18, 0x00	; 0
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	40 e8       	ldi	r20, 0x80	; 128
    55d4:	5f e3       	ldi	r21, 0x3F	; 63
    55d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55da:	88 23       	and	r24, r24
    55dc:	44 f4       	brge	.+16     	; 0x55ee <APP_VidLED_Mode+0x1d8>
		__ticks = 1;
    55de:	fe 01       	movw	r30, r28
    55e0:	ed 57       	subi	r30, 0x7D	; 125
    55e2:	ff 4f       	sbci	r31, 0xFF	; 255
    55e4:	81 e0       	ldi	r24, 0x01	; 1
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	91 83       	std	Z+1, r25	; 0x01
    55ea:	80 83       	st	Z, r24
    55ec:	64 c0       	rjmp	.+200    	; 0x56b6 <APP_VidLED_Mode+0x2a0>
	else if (__tmp > 65535)
    55ee:	fe 01       	movw	r30, r28
    55f0:	eb 57       	subi	r30, 0x7B	; 123
    55f2:	ff 4f       	sbci	r31, 0xFF	; 255
    55f4:	60 81       	ld	r22, Z
    55f6:	71 81       	ldd	r23, Z+1	; 0x01
    55f8:	82 81       	ldd	r24, Z+2	; 0x02
    55fa:	93 81       	ldd	r25, Z+3	; 0x03
    55fc:	20 e0       	ldi	r18, 0x00	; 0
    55fe:	3f ef       	ldi	r19, 0xFF	; 255
    5600:	4f e7       	ldi	r20, 0x7F	; 127
    5602:	57 e4       	ldi	r21, 0x47	; 71
    5604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5608:	18 16       	cp	r1, r24
    560a:	0c f0       	brlt	.+2      	; 0x560e <APP_VidLED_Mode+0x1f8>
    560c:	43 c0       	rjmp	.+134    	; 0x5694 <APP_VidLED_Mode+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    560e:	fe 01       	movw	r30, r28
    5610:	e7 57       	subi	r30, 0x77	; 119
    5612:	ff 4f       	sbci	r31, 0xFF	; 255
    5614:	60 81       	ld	r22, Z
    5616:	71 81       	ldd	r23, Z+1	; 0x01
    5618:	82 81       	ldd	r24, Z+2	; 0x02
    561a:	93 81       	ldd	r25, Z+3	; 0x03
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	40 e2       	ldi	r20, 0x20	; 32
    5622:	51 e4       	ldi	r21, 0x41	; 65
    5624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5628:	dc 01       	movw	r26, r24
    562a:	cb 01       	movw	r24, r22
    562c:	8e 01       	movw	r16, r28
    562e:	0d 57       	subi	r16, 0x7D	; 125
    5630:	1f 4f       	sbci	r17, 0xFF	; 255
    5632:	bc 01       	movw	r22, r24
    5634:	cd 01       	movw	r24, r26
    5636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    563a:	dc 01       	movw	r26, r24
    563c:	cb 01       	movw	r24, r22
    563e:	f8 01       	movw	r30, r16
    5640:	91 83       	std	Z+1, r25	; 0x01
    5642:	80 83       	st	Z, r24
    5644:	1f c0       	rjmp	.+62     	; 0x5684 <APP_VidLED_Mode+0x26e>
    5646:	fe 01       	movw	r30, r28
    5648:	ef 57       	subi	r30, 0x7F	; 127
    564a:	ff 4f       	sbci	r31, 0xFF	; 255
    564c:	88 ec       	ldi	r24, 0xC8	; 200
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	91 83       	std	Z+1, r25	; 0x01
    5652:	80 83       	st	Z, r24
    5654:	fe 01       	movw	r30, r28
    5656:	ef 57       	subi	r30, 0x7F	; 127
    5658:	ff 4f       	sbci	r31, 0xFF	; 255
    565a:	80 81       	ld	r24, Z
    565c:	91 81       	ldd	r25, Z+1	; 0x01
    565e:	01 97       	sbiw	r24, 0x01	; 1
    5660:	f1 f7       	brne	.-4      	; 0x565e <APP_VidLED_Mode+0x248>
    5662:	fe 01       	movw	r30, r28
    5664:	ef 57       	subi	r30, 0x7F	; 127
    5666:	ff 4f       	sbci	r31, 0xFF	; 255
    5668:	91 83       	std	Z+1, r25	; 0x01
    566a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    566c:	de 01       	movw	r26, r28
    566e:	ad 57       	subi	r26, 0x7D	; 125
    5670:	bf 4f       	sbci	r27, 0xFF	; 255
    5672:	fe 01       	movw	r30, r28
    5674:	ed 57       	subi	r30, 0x7D	; 125
    5676:	ff 4f       	sbci	r31, 0xFF	; 255
    5678:	80 81       	ld	r24, Z
    567a:	91 81       	ldd	r25, Z+1	; 0x01
    567c:	01 97       	sbiw	r24, 0x01	; 1
    567e:	11 96       	adiw	r26, 0x01	; 1
    5680:	9c 93       	st	X, r25
    5682:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5684:	fe 01       	movw	r30, r28
    5686:	ed 57       	subi	r30, 0x7D	; 125
    5688:	ff 4f       	sbci	r31, 0xFF	; 255
    568a:	80 81       	ld	r24, Z
    568c:	91 81       	ldd	r25, Z+1	; 0x01
    568e:	00 97       	sbiw	r24, 0x00	; 0
    5690:	d1 f6       	brne	.-76     	; 0x5646 <APP_VidLED_Mode+0x230>
    5692:	27 c0       	rjmp	.+78     	; 0x56e2 <APP_VidLED_Mode+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5694:	8e 01       	movw	r16, r28
    5696:	0d 57       	subi	r16, 0x7D	; 125
    5698:	1f 4f       	sbci	r17, 0xFF	; 255
    569a:	fe 01       	movw	r30, r28
    569c:	eb 57       	subi	r30, 0x7B	; 123
    569e:	ff 4f       	sbci	r31, 0xFF	; 255
    56a0:	60 81       	ld	r22, Z
    56a2:	71 81       	ldd	r23, Z+1	; 0x01
    56a4:	82 81       	ldd	r24, Z+2	; 0x02
    56a6:	93 81       	ldd	r25, Z+3	; 0x03
    56a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56ac:	dc 01       	movw	r26, r24
    56ae:	cb 01       	movw	r24, r22
    56b0:	f8 01       	movw	r30, r16
    56b2:	91 83       	std	Z+1, r25	; 0x01
    56b4:	80 83       	st	Z, r24
    56b6:	de 01       	movw	r26, r28
    56b8:	a1 58       	subi	r26, 0x81	; 129
    56ba:	bf 4f       	sbci	r27, 0xFF	; 255
    56bc:	fe 01       	movw	r30, r28
    56be:	ed 57       	subi	r30, 0x7D	; 125
    56c0:	ff 4f       	sbci	r31, 0xFF	; 255
    56c2:	80 81       	ld	r24, Z
    56c4:	91 81       	ldd	r25, Z+1	; 0x01
    56c6:	8d 93       	st	X+, r24
    56c8:	9c 93       	st	X, r25
    56ca:	fe 01       	movw	r30, r28
    56cc:	e1 58       	subi	r30, 0x81	; 129
    56ce:	ff 4f       	sbci	r31, 0xFF	; 255
    56d0:	80 81       	ld	r24, Z
    56d2:	91 81       	ldd	r25, Z+1	; 0x01
    56d4:	01 97       	sbiw	r24, 0x01	; 1
    56d6:	f1 f7       	brne	.-4      	; 0x56d4 <APP_VidLED_Mode+0x2be>
    56d8:	fe 01       	movw	r30, r28
    56da:	e1 58       	subi	r30, 0x81	; 129
    56dc:	ff 4f       	sbci	r31, 0xFF	; 255
    56de:	91 83       	std	Z+1, r25	; 0x01
    56e0:	80 83       	st	Z, r24
		_delay_ms(500);
		HLED_VidLed_Off(&LED1);
    56e2:	85 e6       	ldi	r24, 0x65	; 101
    56e4:	91 e0       	ldi	r25, 0x01	; 1
    56e6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED2);
    56ea:	84 e2       	ldi	r24, 0x24	; 36
    56ec:	91 e0       	ldi	r25, 0x01	; 1
    56ee:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED3);
    56f2:	86 e2       	ldi	r24, 0x26	; 38
    56f4:	91 e0       	ldi	r25, 0x01	; 1
    56f6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED4);
    56fa:	88 e2       	ldi	r24, 0x28	; 40
    56fc:	91 e0       	ldi	r25, 0x01	; 1
    56fe:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED5);
    5702:	8a e2       	ldi	r24, 0x2A	; 42
    5704:	91 e0       	ldi	r25, 0x01	; 1
    5706:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED6);
    570a:	8c e2       	ldi	r24, 0x2C	; 44
    570c:	91 e0       	ldi	r25, 0x01	; 1
    570e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED7);
    5712:	8e e2       	ldi	r24, 0x2E	; 46
    5714:	91 e0       	ldi	r25, 0x01	; 1
    5716:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED8);
    571a:	80 e3       	ldi	r24, 0x30	; 48
    571c:	91 e0       	ldi	r25, 0x01	; 1
    571e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
    5722:	fe 01       	movw	r30, r28
    5724:	e5 58       	subi	r30, 0x85	; 133
    5726:	ff 4f       	sbci	r31, 0xFF	; 255
    5728:	80 e0       	ldi	r24, 0x00	; 0
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	aa ef       	ldi	r26, 0xFA	; 250
    572e:	b3 e4       	ldi	r27, 0x43	; 67
    5730:	80 83       	st	Z, r24
    5732:	91 83       	std	Z+1, r25	; 0x01
    5734:	a2 83       	std	Z+2, r26	; 0x02
    5736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5738:	8e 01       	movw	r16, r28
    573a:	09 58       	subi	r16, 0x89	; 137
    573c:	1f 4f       	sbci	r17, 0xFF	; 255
    573e:	fe 01       	movw	r30, r28
    5740:	e5 58       	subi	r30, 0x85	; 133
    5742:	ff 4f       	sbci	r31, 0xFF	; 255
    5744:	60 81       	ld	r22, Z
    5746:	71 81       	ldd	r23, Z+1	; 0x01
    5748:	82 81       	ldd	r24, Z+2	; 0x02
    574a:	93 81       	ldd	r25, Z+3	; 0x03
    574c:	20 e0       	ldi	r18, 0x00	; 0
    574e:	30 e0       	ldi	r19, 0x00	; 0
    5750:	4a ef       	ldi	r20, 0xFA	; 250
    5752:	54 e4       	ldi	r21, 0x44	; 68
    5754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5758:	dc 01       	movw	r26, r24
    575a:	cb 01       	movw	r24, r22
    575c:	f8 01       	movw	r30, r16
    575e:	80 83       	st	Z, r24
    5760:	91 83       	std	Z+1, r25	; 0x01
    5762:	a2 83       	std	Z+2, r26	; 0x02
    5764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5766:	fe 01       	movw	r30, r28
    5768:	e9 58       	subi	r30, 0x89	; 137
    576a:	ff 4f       	sbci	r31, 0xFF	; 255
    576c:	60 81       	ld	r22, Z
    576e:	71 81       	ldd	r23, Z+1	; 0x01
    5770:	82 81       	ldd	r24, Z+2	; 0x02
    5772:	93 81       	ldd	r25, Z+3	; 0x03
    5774:	20 e0       	ldi	r18, 0x00	; 0
    5776:	30 e0       	ldi	r19, 0x00	; 0
    5778:	40 e8       	ldi	r20, 0x80	; 128
    577a:	5f e3       	ldi	r21, 0x3F	; 63
    577c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5780:	88 23       	and	r24, r24
    5782:	44 f4       	brge	.+16     	; 0x5794 <APP_VidLED_Mode+0x37e>
		__ticks = 1;
    5784:	fe 01       	movw	r30, r28
    5786:	eb 58       	subi	r30, 0x8B	; 139
    5788:	ff 4f       	sbci	r31, 0xFF	; 255
    578a:	81 e0       	ldi	r24, 0x01	; 1
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	91 83       	std	Z+1, r25	; 0x01
    5790:	80 83       	st	Z, r24
    5792:	64 c0       	rjmp	.+200    	; 0x585c <APP_VidLED_Mode+0x446>
	else if (__tmp > 65535)
    5794:	fe 01       	movw	r30, r28
    5796:	e9 58       	subi	r30, 0x89	; 137
    5798:	ff 4f       	sbci	r31, 0xFF	; 255
    579a:	60 81       	ld	r22, Z
    579c:	71 81       	ldd	r23, Z+1	; 0x01
    579e:	82 81       	ldd	r24, Z+2	; 0x02
    57a0:	93 81       	ldd	r25, Z+3	; 0x03
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	3f ef       	ldi	r19, 0xFF	; 255
    57a6:	4f e7       	ldi	r20, 0x7F	; 127
    57a8:	57 e4       	ldi	r21, 0x47	; 71
    57aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    57ae:	18 16       	cp	r1, r24
    57b0:	0c f0       	brlt	.+2      	; 0x57b4 <APP_VidLED_Mode+0x39e>
    57b2:	43 c0       	rjmp	.+134    	; 0x583a <APP_VidLED_Mode+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57b4:	fe 01       	movw	r30, r28
    57b6:	e5 58       	subi	r30, 0x85	; 133
    57b8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ba:	60 81       	ld	r22, Z
    57bc:	71 81       	ldd	r23, Z+1	; 0x01
    57be:	82 81       	ldd	r24, Z+2	; 0x02
    57c0:	93 81       	ldd	r25, Z+3	; 0x03
    57c2:	20 e0       	ldi	r18, 0x00	; 0
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	40 e2       	ldi	r20, 0x20	; 32
    57c8:	51 e4       	ldi	r21, 0x41	; 65
    57ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ce:	dc 01       	movw	r26, r24
    57d0:	cb 01       	movw	r24, r22
    57d2:	8e 01       	movw	r16, r28
    57d4:	0b 58       	subi	r16, 0x8B	; 139
    57d6:	1f 4f       	sbci	r17, 0xFF	; 255
    57d8:	bc 01       	movw	r22, r24
    57da:	cd 01       	movw	r24, r26
    57dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e0:	dc 01       	movw	r26, r24
    57e2:	cb 01       	movw	r24, r22
    57e4:	f8 01       	movw	r30, r16
    57e6:	91 83       	std	Z+1, r25	; 0x01
    57e8:	80 83       	st	Z, r24
    57ea:	1f c0       	rjmp	.+62     	; 0x582a <APP_VidLED_Mode+0x414>
    57ec:	fe 01       	movw	r30, r28
    57ee:	ed 58       	subi	r30, 0x8D	; 141
    57f0:	ff 4f       	sbci	r31, 0xFF	; 255
    57f2:	88 ec       	ldi	r24, 0xC8	; 200
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	91 83       	std	Z+1, r25	; 0x01
    57f8:	80 83       	st	Z, r24
    57fa:	fe 01       	movw	r30, r28
    57fc:	ed 58       	subi	r30, 0x8D	; 141
    57fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5800:	80 81       	ld	r24, Z
    5802:	91 81       	ldd	r25, Z+1	; 0x01
    5804:	01 97       	sbiw	r24, 0x01	; 1
    5806:	f1 f7       	brne	.-4      	; 0x5804 <APP_VidLED_Mode+0x3ee>
    5808:	fe 01       	movw	r30, r28
    580a:	ed 58       	subi	r30, 0x8D	; 141
    580c:	ff 4f       	sbci	r31, 0xFF	; 255
    580e:	91 83       	std	Z+1, r25	; 0x01
    5810:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5812:	de 01       	movw	r26, r28
    5814:	ab 58       	subi	r26, 0x8B	; 139
    5816:	bf 4f       	sbci	r27, 0xFF	; 255
    5818:	fe 01       	movw	r30, r28
    581a:	eb 58       	subi	r30, 0x8B	; 139
    581c:	ff 4f       	sbci	r31, 0xFF	; 255
    581e:	80 81       	ld	r24, Z
    5820:	91 81       	ldd	r25, Z+1	; 0x01
    5822:	01 97       	sbiw	r24, 0x01	; 1
    5824:	11 96       	adiw	r26, 0x01	; 1
    5826:	9c 93       	st	X, r25
    5828:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    582a:	fe 01       	movw	r30, r28
    582c:	eb 58       	subi	r30, 0x8B	; 139
    582e:	ff 4f       	sbci	r31, 0xFF	; 255
    5830:	80 81       	ld	r24, Z
    5832:	91 81       	ldd	r25, Z+1	; 0x01
    5834:	00 97       	sbiw	r24, 0x00	; 0
    5836:	d1 f6       	brne	.-76     	; 0x57ec <APP_VidLED_Mode+0x3d6>
    5838:	7d c6       	rjmp	.+3322   	; 0x6534 <APP_VidLED_Mode+0x111e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    583a:	8e 01       	movw	r16, r28
    583c:	0b 58       	subi	r16, 0x8B	; 139
    583e:	1f 4f       	sbci	r17, 0xFF	; 255
    5840:	fe 01       	movw	r30, r28
    5842:	e9 58       	subi	r30, 0x89	; 137
    5844:	ff 4f       	sbci	r31, 0xFF	; 255
    5846:	60 81       	ld	r22, Z
    5848:	71 81       	ldd	r23, Z+1	; 0x01
    584a:	82 81       	ldd	r24, Z+2	; 0x02
    584c:	93 81       	ldd	r25, Z+3	; 0x03
    584e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5852:	dc 01       	movw	r26, r24
    5854:	cb 01       	movw	r24, r22
    5856:	f8 01       	movw	r30, r16
    5858:	91 83       	std	Z+1, r25	; 0x01
    585a:	80 83       	st	Z, r24
    585c:	de 01       	movw	r26, r28
    585e:	af 58       	subi	r26, 0x8F	; 143
    5860:	bf 4f       	sbci	r27, 0xFF	; 255
    5862:	fe 01       	movw	r30, r28
    5864:	eb 58       	subi	r30, 0x8B	; 139
    5866:	ff 4f       	sbci	r31, 0xFF	; 255
    5868:	80 81       	ld	r24, Z
    586a:	91 81       	ldd	r25, Z+1	; 0x01
    586c:	11 96       	adiw	r26, 0x01	; 1
    586e:	9c 93       	st	X, r25
    5870:	8e 93       	st	-X, r24
    5872:	fe 01       	movw	r30, r28
    5874:	ef 58       	subi	r30, 0x8F	; 143
    5876:	ff 4f       	sbci	r31, 0xFF	; 255
    5878:	80 81       	ld	r24, Z
    587a:	91 81       	ldd	r25, Z+1	; 0x01
    587c:	01 97       	sbiw	r24, 0x01	; 1
    587e:	f1 f7       	brne	.-4      	; 0x587c <APP_VidLED_Mode+0x466>
    5880:	fe 01       	movw	r30, r28
    5882:	ef 58       	subi	r30, 0x8F	; 143
    5884:	ff 4f       	sbci	r31, 0xFF	; 255
    5886:	91 83       	std	Z+1, r25	; 0x01
    5888:	80 83       	st	Z, r24
    588a:	54 c6       	rjmp	.+3240   	; 0x6534 <APP_VidLED_Mode+0x111e>
		_delay_ms(500);
		break ;

		/*2- Shifting Right every 150 ms*/
	case switch2 :
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    588c:	80 e0       	ldi	r24, 0x00	; 0
    588e:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch2);
    5898:	82 e3       	ldi	r24, 0x32	; 50
    589a:	91 e0       	ldi	r25, 0x01	; 1
    589c:	62 e0       	ldi	r22, 0x02	; 2
    589e:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [2]");
    58a2:	83 eb       	ldi	r24, 0xB3	; 179
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    58aa:	82 e0       	ldi	r24, 0x02	; 2
    58ac:	66 e0       	ldi	r22, 0x06	; 6
    58ae:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
    58b2:	88 ea       	ldi	r24, 0xA8	; 168
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    58ba:	80 e0       	ldi	r24, 0x00	; 0
    58bc:	60 e0       	ldi	r22, 0x00	; 0
    58be:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>

		for(u8 i =0 ; i<8 ;i++)
    58c2:	fe 01       	movw	r30, r28
    58c4:	ec 56       	subi	r30, 0x6C	; 108
    58c6:	ff 4f       	sbci	r31, 0xFF	; 255
    58c8:	10 82       	st	Z, r1
    58ca:	c8 c0       	rjmp	.+400    	; 0x5a5c <APP_VidLED_Mode+0x646>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	60 e0       	ldi	r22, 0x00	; 0
    58d0:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    58d4:	fe 01       	movw	r30, r28
    58d6:	ec 56       	subi	r30, 0x6C	; 108
    58d8:	ff 4f       	sbci	r31, 0xFF	; 255
    58da:	80 81       	ld	r24, Z
    58dc:	60 e0       	ldi	r22, 0x00	; 0
    58de:	41 e0       	ldi	r20, 0x01	; 1
    58e0:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    58e4:	fe 01       	movw	r30, r28
    58e6:	e3 59       	subi	r30, 0x93	; 147
    58e8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ea:	80 e0       	ldi	r24, 0x00	; 0
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	a6 e1       	ldi	r26, 0x16	; 22
    58f0:	b3 e4       	ldi	r27, 0x43	; 67
    58f2:	80 83       	st	Z, r24
    58f4:	91 83       	std	Z+1, r25	; 0x01
    58f6:	a2 83       	std	Z+2, r26	; 0x02
    58f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58fa:	8e 01       	movw	r16, r28
    58fc:	07 59       	subi	r16, 0x97	; 151
    58fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5900:	fe 01       	movw	r30, r28
    5902:	e3 59       	subi	r30, 0x93	; 147
    5904:	ff 4f       	sbci	r31, 0xFF	; 255
    5906:	60 81       	ld	r22, Z
    5908:	71 81       	ldd	r23, Z+1	; 0x01
    590a:	82 81       	ldd	r24, Z+2	; 0x02
    590c:	93 81       	ldd	r25, Z+3	; 0x03
    590e:	20 e0       	ldi	r18, 0x00	; 0
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	4a ef       	ldi	r20, 0xFA	; 250
    5914:	54 e4       	ldi	r21, 0x44	; 68
    5916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    591a:	dc 01       	movw	r26, r24
    591c:	cb 01       	movw	r24, r22
    591e:	f8 01       	movw	r30, r16
    5920:	80 83       	st	Z, r24
    5922:	91 83       	std	Z+1, r25	; 0x01
    5924:	a2 83       	std	Z+2, r26	; 0x02
    5926:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5928:	fe 01       	movw	r30, r28
    592a:	e7 59       	subi	r30, 0x97	; 151
    592c:	ff 4f       	sbci	r31, 0xFF	; 255
    592e:	60 81       	ld	r22, Z
    5930:	71 81       	ldd	r23, Z+1	; 0x01
    5932:	82 81       	ldd	r24, Z+2	; 0x02
    5934:	93 81       	ldd	r25, Z+3	; 0x03
    5936:	20 e0       	ldi	r18, 0x00	; 0
    5938:	30 e0       	ldi	r19, 0x00	; 0
    593a:	40 e8       	ldi	r20, 0x80	; 128
    593c:	5f e3       	ldi	r21, 0x3F	; 63
    593e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5942:	88 23       	and	r24, r24
    5944:	44 f4       	brge	.+16     	; 0x5956 <APP_VidLED_Mode+0x540>
		__ticks = 1;
    5946:	fe 01       	movw	r30, r28
    5948:	e9 59       	subi	r30, 0x99	; 153
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	81 e0       	ldi	r24, 0x01	; 1
    594e:	90 e0       	ldi	r25, 0x00	; 0
    5950:	91 83       	std	Z+1, r25	; 0x01
    5952:	80 83       	st	Z, r24
    5954:	64 c0       	rjmp	.+200    	; 0x5a1e <APP_VidLED_Mode+0x608>
	else if (__tmp > 65535)
    5956:	fe 01       	movw	r30, r28
    5958:	e7 59       	subi	r30, 0x97	; 151
    595a:	ff 4f       	sbci	r31, 0xFF	; 255
    595c:	60 81       	ld	r22, Z
    595e:	71 81       	ldd	r23, Z+1	; 0x01
    5960:	82 81       	ldd	r24, Z+2	; 0x02
    5962:	93 81       	ldd	r25, Z+3	; 0x03
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	3f ef       	ldi	r19, 0xFF	; 255
    5968:	4f e7       	ldi	r20, 0x7F	; 127
    596a:	57 e4       	ldi	r21, 0x47	; 71
    596c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5970:	18 16       	cp	r1, r24
    5972:	0c f0       	brlt	.+2      	; 0x5976 <APP_VidLED_Mode+0x560>
    5974:	43 c0       	rjmp	.+134    	; 0x59fc <APP_VidLED_Mode+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5976:	fe 01       	movw	r30, r28
    5978:	e3 59       	subi	r30, 0x93	; 147
    597a:	ff 4f       	sbci	r31, 0xFF	; 255
    597c:	60 81       	ld	r22, Z
    597e:	71 81       	ldd	r23, Z+1	; 0x01
    5980:	82 81       	ldd	r24, Z+2	; 0x02
    5982:	93 81       	ldd	r25, Z+3	; 0x03
    5984:	20 e0       	ldi	r18, 0x00	; 0
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	40 e2       	ldi	r20, 0x20	; 32
    598a:	51 e4       	ldi	r21, 0x41	; 65
    598c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5990:	dc 01       	movw	r26, r24
    5992:	cb 01       	movw	r24, r22
    5994:	8e 01       	movw	r16, r28
    5996:	09 59       	subi	r16, 0x99	; 153
    5998:	1f 4f       	sbci	r17, 0xFF	; 255
    599a:	bc 01       	movw	r22, r24
    599c:	cd 01       	movw	r24, r26
    599e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59a2:	dc 01       	movw	r26, r24
    59a4:	cb 01       	movw	r24, r22
    59a6:	f8 01       	movw	r30, r16
    59a8:	91 83       	std	Z+1, r25	; 0x01
    59aa:	80 83       	st	Z, r24
    59ac:	1f c0       	rjmp	.+62     	; 0x59ec <APP_VidLED_Mode+0x5d6>
    59ae:	fe 01       	movw	r30, r28
    59b0:	eb 59       	subi	r30, 0x9B	; 155
    59b2:	ff 4f       	sbci	r31, 0xFF	; 255
    59b4:	88 ec       	ldi	r24, 0xC8	; 200
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	91 83       	std	Z+1, r25	; 0x01
    59ba:	80 83       	st	Z, r24
    59bc:	fe 01       	movw	r30, r28
    59be:	eb 59       	subi	r30, 0x9B	; 155
    59c0:	ff 4f       	sbci	r31, 0xFF	; 255
    59c2:	80 81       	ld	r24, Z
    59c4:	91 81       	ldd	r25, Z+1	; 0x01
    59c6:	01 97       	sbiw	r24, 0x01	; 1
    59c8:	f1 f7       	brne	.-4      	; 0x59c6 <APP_VidLED_Mode+0x5b0>
    59ca:	fe 01       	movw	r30, r28
    59cc:	eb 59       	subi	r30, 0x9B	; 155
    59ce:	ff 4f       	sbci	r31, 0xFF	; 255
    59d0:	91 83       	std	Z+1, r25	; 0x01
    59d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59d4:	de 01       	movw	r26, r28
    59d6:	a9 59       	subi	r26, 0x99	; 153
    59d8:	bf 4f       	sbci	r27, 0xFF	; 255
    59da:	fe 01       	movw	r30, r28
    59dc:	e9 59       	subi	r30, 0x99	; 153
    59de:	ff 4f       	sbci	r31, 0xFF	; 255
    59e0:	80 81       	ld	r24, Z
    59e2:	91 81       	ldd	r25, Z+1	; 0x01
    59e4:	01 97       	sbiw	r24, 0x01	; 1
    59e6:	11 96       	adiw	r26, 0x01	; 1
    59e8:	9c 93       	st	X, r25
    59ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59ec:	fe 01       	movw	r30, r28
    59ee:	e9 59       	subi	r30, 0x99	; 153
    59f0:	ff 4f       	sbci	r31, 0xFF	; 255
    59f2:	80 81       	ld	r24, Z
    59f4:	91 81       	ldd	r25, Z+1	; 0x01
    59f6:	00 97       	sbiw	r24, 0x00	; 0
    59f8:	d1 f6       	brne	.-76     	; 0x59ae <APP_VidLED_Mode+0x598>
    59fa:	27 c0       	rjmp	.+78     	; 0x5a4a <APP_VidLED_Mode+0x634>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59fc:	8e 01       	movw	r16, r28
    59fe:	09 59       	subi	r16, 0x99	; 153
    5a00:	1f 4f       	sbci	r17, 0xFF	; 255
    5a02:	fe 01       	movw	r30, r28
    5a04:	e7 59       	subi	r30, 0x97	; 151
    5a06:	ff 4f       	sbci	r31, 0xFF	; 255
    5a08:	60 81       	ld	r22, Z
    5a0a:	71 81       	ldd	r23, Z+1	; 0x01
    5a0c:	82 81       	ldd	r24, Z+2	; 0x02
    5a0e:	93 81       	ldd	r25, Z+3	; 0x03
    5a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a14:	dc 01       	movw	r26, r24
    5a16:	cb 01       	movw	r24, r22
    5a18:	f8 01       	movw	r30, r16
    5a1a:	91 83       	std	Z+1, r25	; 0x01
    5a1c:	80 83       	st	Z, r24
    5a1e:	de 01       	movw	r26, r28
    5a20:	ad 59       	subi	r26, 0x9D	; 157
    5a22:	bf 4f       	sbci	r27, 0xFF	; 255
    5a24:	fe 01       	movw	r30, r28
    5a26:	e9 59       	subi	r30, 0x99	; 153
    5a28:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2a:	80 81       	ld	r24, Z
    5a2c:	91 81       	ldd	r25, Z+1	; 0x01
    5a2e:	8d 93       	st	X+, r24
    5a30:	9c 93       	st	X, r25
    5a32:	fe 01       	movw	r30, r28
    5a34:	ed 59       	subi	r30, 0x9D	; 157
    5a36:	ff 4f       	sbci	r31, 0xFF	; 255
    5a38:	80 81       	ld	r24, Z
    5a3a:	91 81       	ldd	r25, Z+1	; 0x01
    5a3c:	01 97       	sbiw	r24, 0x01	; 1
    5a3e:	f1 f7       	brne	.-4      	; 0x5a3c <APP_VidLED_Mode+0x626>
    5a40:	fe 01       	movw	r30, r28
    5a42:	ed 59       	subi	r30, 0x9D	; 157
    5a44:	ff 4f       	sbci	r31, 0xFF	; 255
    5a46:	91 83       	std	Z+1, r25	; 0x01
    5a48:	80 83       	st	Z, r24
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [2]");
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);

		for(u8 i =0 ; i<8 ;i++)
    5a4a:	de 01       	movw	r26, r28
    5a4c:	ac 56       	subi	r26, 0x6C	; 108
    5a4e:	bf 4f       	sbci	r27, 0xFF	; 255
    5a50:	fe 01       	movw	r30, r28
    5a52:	ec 56       	subi	r30, 0x6C	; 108
    5a54:	ff 4f       	sbci	r31, 0xFF	; 255
    5a56:	80 81       	ld	r24, Z
    5a58:	8f 5f       	subi	r24, 0xFF	; 255
    5a5a:	8c 93       	st	X, r24
    5a5c:	fe 01       	movw	r30, r28
    5a5e:	ec 56       	subi	r30, 0x6C	; 108
    5a60:	ff 4f       	sbci	r31, 0xFF	; 255
    5a62:	80 81       	ld	r24, Z
    5a64:	88 30       	cpi	r24, 0x08	; 8
    5a66:	08 f4       	brcc	.+2      	; 0x5a6a <APP_VidLED_Mode+0x654>
    5a68:	31 cf       	rjmp	.-414    	; 0x58cc <APP_VidLED_Mode+0x4b6>
    5a6a:	64 c5       	rjmp	.+2760   	; 0x6534 <APP_VidLED_Mode+0x111e>
			_delay_ms(150);
		}
		break  ;
		/*3- Shifting Left every 150 ms*/
	case switch3 :
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    5a6c:	80 e0       	ldi	r24, 0x00	; 0
    5a6e:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    5a72:	81 e0       	ldi	r24, 0x01	; 1
    5a74:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch3);
    5a78:	82 e3       	ldi	r24, 0x32	; 50
    5a7a:	91 e0       	ldi	r25, 0x01	; 1
    5a7c:	63 e0       	ldi	r22, 0x03	; 3
    5a7e:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [3]");
    5a82:	82 ec       	ldi	r24, 0xC2	; 194
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    5a8a:	82 e0       	ldi	r24, 0x02	; 2
    5a8c:	66 e0       	ldi	r22, 0x06	; 6
    5a8e:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
    5a92:	88 ea       	ldi	r24, 0xA8	; 168
    5a94:	90 e0       	ldi	r25, 0x00	; 0
    5a96:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    5a9a:	80 e0       	ldi	r24, 0x00	; 0
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(u8 i =0 ; i<8 ;i++)
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	ed 56       	subi	r30, 0x6D	; 109
    5aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa8:	10 82       	st	Z, r1
    5aaa:	cc c0       	rjmp	.+408    	; 0x5c44 <APP_VidLED_Mode+0x82e>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    5aac:	80 e0       	ldi	r24, 0x00	; 0
    5aae:	60 e0       	ldi	r22, 0x00	; 0
    5ab0:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue((7-i),HLED_PORTA,PIN_HIGH);
    5ab4:	fe 01       	movw	r30, r28
    5ab6:	ed 56       	subi	r30, 0x6D	; 109
    5ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    5aba:	97 e0       	ldi	r25, 0x07	; 7
    5abc:	80 81       	ld	r24, Z
    5abe:	f9 2f       	mov	r31, r25
    5ac0:	f8 1b       	sub	r31, r24
    5ac2:	8f 2f       	mov	r24, r31
    5ac4:	60 e0       	ldi	r22, 0x00	; 0
    5ac6:	41 e0       	ldi	r20, 0x01	; 1
    5ac8:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    5acc:	fe 01       	movw	r30, r28
    5ace:	e1 5a       	subi	r30, 0xA1	; 161
    5ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad2:	80 e0       	ldi	r24, 0x00	; 0
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	a6 e1       	ldi	r26, 0x16	; 22
    5ad8:	b3 e4       	ldi	r27, 0x43	; 67
    5ada:	80 83       	st	Z, r24
    5adc:	91 83       	std	Z+1, r25	; 0x01
    5ade:	a2 83       	std	Z+2, r26	; 0x02
    5ae0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ae2:	8e 01       	movw	r16, r28
    5ae4:	05 5a       	subi	r16, 0xA5	; 165
    5ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ae8:	fe 01       	movw	r30, r28
    5aea:	e1 5a       	subi	r30, 0xA1	; 161
    5aec:	ff 4f       	sbci	r31, 0xFF	; 255
    5aee:	60 81       	ld	r22, Z
    5af0:	71 81       	ldd	r23, Z+1	; 0x01
    5af2:	82 81       	ldd	r24, Z+2	; 0x02
    5af4:	93 81       	ldd	r25, Z+3	; 0x03
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	4a ef       	ldi	r20, 0xFA	; 250
    5afc:	54 e4       	ldi	r21, 0x44	; 68
    5afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b02:	dc 01       	movw	r26, r24
    5b04:	cb 01       	movw	r24, r22
    5b06:	f8 01       	movw	r30, r16
    5b08:	80 83       	st	Z, r24
    5b0a:	91 83       	std	Z+1, r25	; 0x01
    5b0c:	a2 83       	std	Z+2, r26	; 0x02
    5b0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b10:	fe 01       	movw	r30, r28
    5b12:	e5 5a       	subi	r30, 0xA5	; 165
    5b14:	ff 4f       	sbci	r31, 0xFF	; 255
    5b16:	60 81       	ld	r22, Z
    5b18:	71 81       	ldd	r23, Z+1	; 0x01
    5b1a:	82 81       	ldd	r24, Z+2	; 0x02
    5b1c:	93 81       	ldd	r25, Z+3	; 0x03
    5b1e:	20 e0       	ldi	r18, 0x00	; 0
    5b20:	30 e0       	ldi	r19, 0x00	; 0
    5b22:	40 e8       	ldi	r20, 0x80	; 128
    5b24:	5f e3       	ldi	r21, 0x3F	; 63
    5b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b2a:	88 23       	and	r24, r24
    5b2c:	44 f4       	brge	.+16     	; 0x5b3e <APP_VidLED_Mode+0x728>
		__ticks = 1;
    5b2e:	fe 01       	movw	r30, r28
    5b30:	e7 5a       	subi	r30, 0xA7	; 167
    5b32:	ff 4f       	sbci	r31, 0xFF	; 255
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	91 83       	std	Z+1, r25	; 0x01
    5b3a:	80 83       	st	Z, r24
    5b3c:	64 c0       	rjmp	.+200    	; 0x5c06 <APP_VidLED_Mode+0x7f0>
	else if (__tmp > 65535)
    5b3e:	fe 01       	movw	r30, r28
    5b40:	e5 5a       	subi	r30, 0xA5	; 165
    5b42:	ff 4f       	sbci	r31, 0xFF	; 255
    5b44:	60 81       	ld	r22, Z
    5b46:	71 81       	ldd	r23, Z+1	; 0x01
    5b48:	82 81       	ldd	r24, Z+2	; 0x02
    5b4a:	93 81       	ldd	r25, Z+3	; 0x03
    5b4c:	20 e0       	ldi	r18, 0x00	; 0
    5b4e:	3f ef       	ldi	r19, 0xFF	; 255
    5b50:	4f e7       	ldi	r20, 0x7F	; 127
    5b52:	57 e4       	ldi	r21, 0x47	; 71
    5b54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5b58:	18 16       	cp	r1, r24
    5b5a:	0c f0       	brlt	.+2      	; 0x5b5e <APP_VidLED_Mode+0x748>
    5b5c:	43 c0       	rjmp	.+134    	; 0x5be4 <APP_VidLED_Mode+0x7ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b5e:	fe 01       	movw	r30, r28
    5b60:	e1 5a       	subi	r30, 0xA1	; 161
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	60 81       	ld	r22, Z
    5b66:	71 81       	ldd	r23, Z+1	; 0x01
    5b68:	82 81       	ldd	r24, Z+2	; 0x02
    5b6a:	93 81       	ldd	r25, Z+3	; 0x03
    5b6c:	20 e0       	ldi	r18, 0x00	; 0
    5b6e:	30 e0       	ldi	r19, 0x00	; 0
    5b70:	40 e2       	ldi	r20, 0x20	; 32
    5b72:	51 e4       	ldi	r21, 0x41	; 65
    5b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b78:	dc 01       	movw	r26, r24
    5b7a:	cb 01       	movw	r24, r22
    5b7c:	8e 01       	movw	r16, r28
    5b7e:	07 5a       	subi	r16, 0xA7	; 167
    5b80:	1f 4f       	sbci	r17, 0xFF	; 255
    5b82:	bc 01       	movw	r22, r24
    5b84:	cd 01       	movw	r24, r26
    5b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	f8 01       	movw	r30, r16
    5b90:	91 83       	std	Z+1, r25	; 0x01
    5b92:	80 83       	st	Z, r24
    5b94:	1f c0       	rjmp	.+62     	; 0x5bd4 <APP_VidLED_Mode+0x7be>
    5b96:	fe 01       	movw	r30, r28
    5b98:	e9 5a       	subi	r30, 0xA9	; 169
    5b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9c:	88 ec       	ldi	r24, 0xC8	; 200
    5b9e:	90 e0       	ldi	r25, 0x00	; 0
    5ba0:	91 83       	std	Z+1, r25	; 0x01
    5ba2:	80 83       	st	Z, r24
    5ba4:	fe 01       	movw	r30, r28
    5ba6:	e9 5a       	subi	r30, 0xA9	; 169
    5ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    5baa:	80 81       	ld	r24, Z
    5bac:	91 81       	ldd	r25, Z+1	; 0x01
    5bae:	01 97       	sbiw	r24, 0x01	; 1
    5bb0:	f1 f7       	brne	.-4      	; 0x5bae <APP_VidLED_Mode+0x798>
    5bb2:	fe 01       	movw	r30, r28
    5bb4:	e9 5a       	subi	r30, 0xA9	; 169
    5bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb8:	91 83       	std	Z+1, r25	; 0x01
    5bba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bbc:	de 01       	movw	r26, r28
    5bbe:	a7 5a       	subi	r26, 0xA7	; 167
    5bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    5bc2:	fe 01       	movw	r30, r28
    5bc4:	e7 5a       	subi	r30, 0xA7	; 167
    5bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc8:	80 81       	ld	r24, Z
    5bca:	91 81       	ldd	r25, Z+1	; 0x01
    5bcc:	01 97       	sbiw	r24, 0x01	; 1
    5bce:	11 96       	adiw	r26, 0x01	; 1
    5bd0:	9c 93       	st	X, r25
    5bd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	e7 5a       	subi	r30, 0xA7	; 167
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	80 81       	ld	r24, Z
    5bdc:	91 81       	ldd	r25, Z+1	; 0x01
    5bde:	00 97       	sbiw	r24, 0x00	; 0
    5be0:	d1 f6       	brne	.-76     	; 0x5b96 <APP_VidLED_Mode+0x780>
    5be2:	27 c0       	rjmp	.+78     	; 0x5c32 <APP_VidLED_Mode+0x81c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5be4:	8e 01       	movw	r16, r28
    5be6:	07 5a       	subi	r16, 0xA7	; 167
    5be8:	1f 4f       	sbci	r17, 0xFF	; 255
    5bea:	fe 01       	movw	r30, r28
    5bec:	e5 5a       	subi	r30, 0xA5	; 165
    5bee:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf0:	60 81       	ld	r22, Z
    5bf2:	71 81       	ldd	r23, Z+1	; 0x01
    5bf4:	82 81       	ldd	r24, Z+2	; 0x02
    5bf6:	93 81       	ldd	r25, Z+3	; 0x03
    5bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bfc:	dc 01       	movw	r26, r24
    5bfe:	cb 01       	movw	r24, r22
    5c00:	f8 01       	movw	r30, r16
    5c02:	91 83       	std	Z+1, r25	; 0x01
    5c04:	80 83       	st	Z, r24
    5c06:	de 01       	movw	r26, r28
    5c08:	ab 5a       	subi	r26, 0xAB	; 171
    5c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    5c0c:	fe 01       	movw	r30, r28
    5c0e:	e7 5a       	subi	r30, 0xA7	; 167
    5c10:	ff 4f       	sbci	r31, 0xFF	; 255
    5c12:	80 81       	ld	r24, Z
    5c14:	91 81       	ldd	r25, Z+1	; 0x01
    5c16:	8d 93       	st	X+, r24
    5c18:	9c 93       	st	X, r25
    5c1a:	fe 01       	movw	r30, r28
    5c1c:	eb 5a       	subi	r30, 0xAB	; 171
    5c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c20:	80 81       	ld	r24, Z
    5c22:	91 81       	ldd	r25, Z+1	; 0x01
    5c24:	01 97       	sbiw	r24, 0x01	; 1
    5c26:	f1 f7       	brne	.-4      	; 0x5c24 <APP_VidLED_Mode+0x80e>
    5c28:	fe 01       	movw	r30, r28
    5c2a:	eb 5a       	subi	r30, 0xAB	; 171
    5c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2e:	91 83       	std	Z+1, r25	; 0x01
    5c30:	80 83       	st	Z, r24
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch3);
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [3]");
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(u8 i =0 ; i<8 ;i++)
    5c32:	de 01       	movw	r26, r28
    5c34:	ad 56       	subi	r26, 0x6D	; 109
    5c36:	bf 4f       	sbci	r27, 0xFF	; 255
    5c38:	fe 01       	movw	r30, r28
    5c3a:	ed 56       	subi	r30, 0x6D	; 109
    5c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c3e:	80 81       	ld	r24, Z
    5c40:	8f 5f       	subi	r24, 0xFF	; 255
    5c42:	8c 93       	st	X, r24
    5c44:	fe 01       	movw	r30, r28
    5c46:	ed 56       	subi	r30, 0x6D	; 109
    5c48:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4a:	80 81       	ld	r24, Z
    5c4c:	88 30       	cpi	r24, 0x08	; 8
    5c4e:	08 f4       	brcc	.+2      	; 0x5c52 <APP_VidLED_Mode+0x83c>
    5c50:	2d cf       	rjmp	.-422    	; 0x5aac <APP_VidLED_Mode+0x696>
    5c52:	70 c4       	rjmp	.+2272   	; 0x6534 <APP_VidLED_Mode+0x111e>

		}
		break  ;
		/*4- 2-LEDs Converging every 250 ms*/
	case switch4 :
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch4);
    5c60:	82 e3       	ldi	r24, 0x32	; 50
    5c62:	91 e0       	ldi	r25, 0x01	; 1
    5c64:	64 e0       	ldi	r22, 0x04	; 4
    5c66:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [4]");
    5c6a:	81 ed       	ldi	r24, 0xD1	; 209
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    5c72:	82 e0       	ldi	r24, 0x02	; 2
    5c74:	66 e0       	ldi	r22, 0x06	; 6
    5c76:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
    5c7a:	88 ea       	ldi	r24, 0xA8	; 168
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    5c82:	80 e0       	ldi	r24, 0x00	; 0
    5c84:	60 e0       	ldi	r22, 0x00	; 0
    5c86:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(s8 i =7 ; i>=4 ;i--)
    5c8a:	fe 01       	movw	r30, r28
    5c8c:	ee 56       	subi	r30, 0x6E	; 110
    5c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c90:	87 e0       	ldi	r24, 0x07	; 7
    5c92:	80 83       	st	Z, r24
    5c94:	d2 c0       	rjmp	.+420    	; 0x5e3a <APP_VidLED_Mode+0xa24>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    5c96:	80 e0       	ldi	r24, 0x00	; 0
    5c98:	60 e0       	ldi	r22, 0x00	; 0
    5c9a:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue((7-i),HLED_PORTA,PIN_HIGH);
    5c9e:	fe 01       	movw	r30, r28
    5ca0:	ee 56       	subi	r30, 0x6E	; 110
    5ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca4:	90 81       	ld	r25, Z
    5ca6:	87 e0       	ldi	r24, 0x07	; 7
    5ca8:	89 1b       	sub	r24, r25
    5caa:	60 e0       	ldi	r22, 0x00	; 0
    5cac:	41 e0       	ldi	r20, 0x01	; 1
    5cae:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    5cb2:	fe 01       	movw	r30, r28
    5cb4:	ee 56       	subi	r30, 0x6E	; 110
    5cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb8:	80 81       	ld	r24, Z
    5cba:	60 e0       	ldi	r22, 0x00	; 0
    5cbc:	41 e0       	ldi	r20, 0x01	; 1
    5cbe:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    5cc2:	fe 01       	movw	r30, r28
    5cc4:	ef 5a       	subi	r30, 0xAF	; 175
    5cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc8:	80 e0       	ldi	r24, 0x00	; 0
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	aa e7       	ldi	r26, 0x7A	; 122
    5cce:	b3 e4       	ldi	r27, 0x43	; 67
    5cd0:	80 83       	st	Z, r24
    5cd2:	91 83       	std	Z+1, r25	; 0x01
    5cd4:	a2 83       	std	Z+2, r26	; 0x02
    5cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cd8:	8e 01       	movw	r16, r28
    5cda:	03 5b       	subi	r16, 0xB3	; 179
    5cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    5cde:	fe 01       	movw	r30, r28
    5ce0:	ef 5a       	subi	r30, 0xAF	; 175
    5ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce4:	60 81       	ld	r22, Z
    5ce6:	71 81       	ldd	r23, Z+1	; 0x01
    5ce8:	82 81       	ldd	r24, Z+2	; 0x02
    5cea:	93 81       	ldd	r25, Z+3	; 0x03
    5cec:	20 e0       	ldi	r18, 0x00	; 0
    5cee:	30 e0       	ldi	r19, 0x00	; 0
    5cf0:	4a ef       	ldi	r20, 0xFA	; 250
    5cf2:	54 e4       	ldi	r21, 0x44	; 68
    5cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cf8:	dc 01       	movw	r26, r24
    5cfa:	cb 01       	movw	r24, r22
    5cfc:	f8 01       	movw	r30, r16
    5cfe:	80 83       	st	Z, r24
    5d00:	91 83       	std	Z+1, r25	; 0x01
    5d02:	a2 83       	std	Z+2, r26	; 0x02
    5d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d06:	fe 01       	movw	r30, r28
    5d08:	e3 5b       	subi	r30, 0xB3	; 179
    5d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0c:	60 81       	ld	r22, Z
    5d0e:	71 81       	ldd	r23, Z+1	; 0x01
    5d10:	82 81       	ldd	r24, Z+2	; 0x02
    5d12:	93 81       	ldd	r25, Z+3	; 0x03
    5d14:	20 e0       	ldi	r18, 0x00	; 0
    5d16:	30 e0       	ldi	r19, 0x00	; 0
    5d18:	40 e8       	ldi	r20, 0x80	; 128
    5d1a:	5f e3       	ldi	r21, 0x3F	; 63
    5d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5d20:	88 23       	and	r24, r24
    5d22:	44 f4       	brge	.+16     	; 0x5d34 <APP_VidLED_Mode+0x91e>
		__ticks = 1;
    5d24:	fe 01       	movw	r30, r28
    5d26:	e5 5b       	subi	r30, 0xB5	; 181
    5d28:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2a:	81 e0       	ldi	r24, 0x01	; 1
    5d2c:	90 e0       	ldi	r25, 0x00	; 0
    5d2e:	91 83       	std	Z+1, r25	; 0x01
    5d30:	80 83       	st	Z, r24
    5d32:	64 c0       	rjmp	.+200    	; 0x5dfc <APP_VidLED_Mode+0x9e6>
	else if (__tmp > 65535)
    5d34:	fe 01       	movw	r30, r28
    5d36:	e3 5b       	subi	r30, 0xB3	; 179
    5d38:	ff 4f       	sbci	r31, 0xFF	; 255
    5d3a:	60 81       	ld	r22, Z
    5d3c:	71 81       	ldd	r23, Z+1	; 0x01
    5d3e:	82 81       	ldd	r24, Z+2	; 0x02
    5d40:	93 81       	ldd	r25, Z+3	; 0x03
    5d42:	20 e0       	ldi	r18, 0x00	; 0
    5d44:	3f ef       	ldi	r19, 0xFF	; 255
    5d46:	4f e7       	ldi	r20, 0x7F	; 127
    5d48:	57 e4       	ldi	r21, 0x47	; 71
    5d4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5d4e:	18 16       	cp	r1, r24
    5d50:	0c f0       	brlt	.+2      	; 0x5d54 <APP_VidLED_Mode+0x93e>
    5d52:	43 c0       	rjmp	.+134    	; 0x5dda <APP_VidLED_Mode+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d54:	fe 01       	movw	r30, r28
    5d56:	ef 5a       	subi	r30, 0xAF	; 175
    5d58:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5a:	60 81       	ld	r22, Z
    5d5c:	71 81       	ldd	r23, Z+1	; 0x01
    5d5e:	82 81       	ldd	r24, Z+2	; 0x02
    5d60:	93 81       	ldd	r25, Z+3	; 0x03
    5d62:	20 e0       	ldi	r18, 0x00	; 0
    5d64:	30 e0       	ldi	r19, 0x00	; 0
    5d66:	40 e2       	ldi	r20, 0x20	; 32
    5d68:	51 e4       	ldi	r21, 0x41	; 65
    5d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d6e:	dc 01       	movw	r26, r24
    5d70:	cb 01       	movw	r24, r22
    5d72:	8e 01       	movw	r16, r28
    5d74:	05 5b       	subi	r16, 0xB5	; 181
    5d76:	1f 4f       	sbci	r17, 0xFF	; 255
    5d78:	bc 01       	movw	r22, r24
    5d7a:	cd 01       	movw	r24, r26
    5d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d80:	dc 01       	movw	r26, r24
    5d82:	cb 01       	movw	r24, r22
    5d84:	f8 01       	movw	r30, r16
    5d86:	91 83       	std	Z+1, r25	; 0x01
    5d88:	80 83       	st	Z, r24
    5d8a:	1f c0       	rjmp	.+62     	; 0x5dca <APP_VidLED_Mode+0x9b4>
    5d8c:	fe 01       	movw	r30, r28
    5d8e:	e7 5b       	subi	r30, 0xB7	; 183
    5d90:	ff 4f       	sbci	r31, 0xFF	; 255
    5d92:	88 ec       	ldi	r24, 0xC8	; 200
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	91 83       	std	Z+1, r25	; 0x01
    5d98:	80 83       	st	Z, r24
    5d9a:	fe 01       	movw	r30, r28
    5d9c:	e7 5b       	subi	r30, 0xB7	; 183
    5d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5da0:	80 81       	ld	r24, Z
    5da2:	91 81       	ldd	r25, Z+1	; 0x01
    5da4:	01 97       	sbiw	r24, 0x01	; 1
    5da6:	f1 f7       	brne	.-4      	; 0x5da4 <APP_VidLED_Mode+0x98e>
    5da8:	fe 01       	movw	r30, r28
    5daa:	e7 5b       	subi	r30, 0xB7	; 183
    5dac:	ff 4f       	sbci	r31, 0xFF	; 255
    5dae:	91 83       	std	Z+1, r25	; 0x01
    5db0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5db2:	de 01       	movw	r26, r28
    5db4:	a5 5b       	subi	r26, 0xB5	; 181
    5db6:	bf 4f       	sbci	r27, 0xFF	; 255
    5db8:	fe 01       	movw	r30, r28
    5dba:	e5 5b       	subi	r30, 0xB5	; 181
    5dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dbe:	80 81       	ld	r24, Z
    5dc0:	91 81       	ldd	r25, Z+1	; 0x01
    5dc2:	01 97       	sbiw	r24, 0x01	; 1
    5dc4:	11 96       	adiw	r26, 0x01	; 1
    5dc6:	9c 93       	st	X, r25
    5dc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dca:	fe 01       	movw	r30, r28
    5dcc:	e5 5b       	subi	r30, 0xB5	; 181
    5dce:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd0:	80 81       	ld	r24, Z
    5dd2:	91 81       	ldd	r25, Z+1	; 0x01
    5dd4:	00 97       	sbiw	r24, 0x00	; 0
    5dd6:	d1 f6       	brne	.-76     	; 0x5d8c <APP_VidLED_Mode+0x976>
    5dd8:	27 c0       	rjmp	.+78     	; 0x5e28 <APP_VidLED_Mode+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dda:	8e 01       	movw	r16, r28
    5ddc:	05 5b       	subi	r16, 0xB5	; 181
    5dde:	1f 4f       	sbci	r17, 0xFF	; 255
    5de0:	fe 01       	movw	r30, r28
    5de2:	e3 5b       	subi	r30, 0xB3	; 179
    5de4:	ff 4f       	sbci	r31, 0xFF	; 255
    5de6:	60 81       	ld	r22, Z
    5de8:	71 81       	ldd	r23, Z+1	; 0x01
    5dea:	82 81       	ldd	r24, Z+2	; 0x02
    5dec:	93 81       	ldd	r25, Z+3	; 0x03
    5dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5df2:	dc 01       	movw	r26, r24
    5df4:	cb 01       	movw	r24, r22
    5df6:	f8 01       	movw	r30, r16
    5df8:	91 83       	std	Z+1, r25	; 0x01
    5dfa:	80 83       	st	Z, r24
    5dfc:	de 01       	movw	r26, r28
    5dfe:	a9 5b       	subi	r26, 0xB9	; 185
    5e00:	bf 4f       	sbci	r27, 0xFF	; 255
    5e02:	fe 01       	movw	r30, r28
    5e04:	e5 5b       	subi	r30, 0xB5	; 181
    5e06:	ff 4f       	sbci	r31, 0xFF	; 255
    5e08:	80 81       	ld	r24, Z
    5e0a:	91 81       	ldd	r25, Z+1	; 0x01
    5e0c:	8d 93       	st	X+, r24
    5e0e:	9c 93       	st	X, r25
    5e10:	fe 01       	movw	r30, r28
    5e12:	e9 5b       	subi	r30, 0xB9	; 185
    5e14:	ff 4f       	sbci	r31, 0xFF	; 255
    5e16:	80 81       	ld	r24, Z
    5e18:	91 81       	ldd	r25, Z+1	; 0x01
    5e1a:	01 97       	sbiw	r24, 0x01	; 1
    5e1c:	f1 f7       	brne	.-4      	; 0x5e1a <APP_VidLED_Mode+0xa04>
    5e1e:	fe 01       	movw	r30, r28
    5e20:	e9 5b       	subi	r30, 0xB9	; 185
    5e22:	ff 4f       	sbci	r31, 0xFF	; 255
    5e24:	91 83       	std	Z+1, r25	; 0x01
    5e26:	80 83       	st	Z, r24
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch4);
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [4]");
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(s8 i =7 ; i>=4 ;i--)
    5e28:	de 01       	movw	r26, r28
    5e2a:	ae 56       	subi	r26, 0x6E	; 110
    5e2c:	bf 4f       	sbci	r27, 0xFF	; 255
    5e2e:	fe 01       	movw	r30, r28
    5e30:	ee 56       	subi	r30, 0x6E	; 110
    5e32:	ff 4f       	sbci	r31, 0xFF	; 255
    5e34:	80 81       	ld	r24, Z
    5e36:	81 50       	subi	r24, 0x01	; 1
    5e38:	8c 93       	st	X, r24
    5e3a:	fe 01       	movw	r30, r28
    5e3c:	ee 56       	subi	r30, 0x6E	; 110
    5e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e40:	80 81       	ld	r24, Z
    5e42:	84 30       	cpi	r24, 0x04	; 4
    5e44:	0c f0       	brlt	.+2      	; 0x5e48 <APP_VidLED_Mode+0xa32>
    5e46:	27 cf       	rjmp	.-434    	; 0x5c96 <APP_VidLED_Mode+0x880>
    5e48:	75 c3       	rjmp	.+1770   	; 0x6534 <APP_VidLED_Mode+0x111e>
			_delay_ms(250);
		}
		break  ;
		/*5- 2-LEDs Diverging every 250 ms*/
	case switch5 :
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    5e4a:	80 e0       	ldi	r24, 0x00	; 0
    5e4c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    5e50:	81 e0       	ldi	r24, 0x01	; 1
    5e52:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch5);
    5e56:	82 e3       	ldi	r24, 0x32	; 50
    5e58:	91 e0       	ldi	r25, 0x01	; 1
    5e5a:	65 e0       	ldi	r22, 0x05	; 5
    5e5c:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [5]");
    5e60:	80 ee       	ldi	r24, 0xE0	; 224
    5e62:	90 e0       	ldi	r25, 0x00	; 0
    5e64:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    5e68:	82 e0       	ldi	r24, 0x02	; 2
    5e6a:	66 e0       	ldi	r22, 0x06	; 6
    5e6c:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
    5e70:	88 ea       	ldi	r24, 0xA8	; 168
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    5e78:	80 e0       	ldi	r24, 0x00	; 0
    5e7a:	60 e0       	ldi	r22, 0x00	; 0
    5e7c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(s8 i =3 ; i>= 0 ;i--)
    5e80:	fe 01       	movw	r30, r28
    5e82:	ef 56       	subi	r30, 0x6F	; 111
    5e84:	ff 4f       	sbci	r31, 0xFF	; 255
    5e86:	83 e0       	ldi	r24, 0x03	; 3
    5e88:	80 83       	st	Z, r24
    5e8a:	a4 c0       	rjmp	.+328    	; 0x5fd4 <APP_VidLED_Mode+0xbbe>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    5e8c:	80 e0       	ldi	r24, 0x00	; 0
    5e8e:	60 e0       	ldi	r22, 0x00	; 0
    5e90:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    5e94:	fe 01       	movw	r30, r28
    5e96:	ef 56       	subi	r30, 0x6F	; 111
    5e98:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9a:	80 81       	ld	r24, Z
    5e9c:	60 e0       	ldi	r22, 0x00	; 0
    5e9e:	41 e0       	ldi	r20, 0x01	; 1
    5ea0:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue((7-i),HLED_PORTA,PIN_HIGH);
    5ea4:	fe 01       	movw	r30, r28
    5ea6:	ef 56       	subi	r30, 0x6F	; 111
    5ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eaa:	90 81       	ld	r25, Z
    5eac:	87 e0       	ldi	r24, 0x07	; 7
    5eae:	89 1b       	sub	r24, r25
    5eb0:	60 e0       	ldi	r22, 0x00	; 0
    5eb2:	41 e0       	ldi	r20, 0x01	; 1
    5eb4:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    5eb8:	fe 01       	movw	r30, r28
    5eba:	ed 5b       	subi	r30, 0xBD	; 189
    5ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ebe:	80 e0       	ldi	r24, 0x00	; 0
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	aa e7       	ldi	r26, 0x7A	; 122
    5ec4:	b3 e4       	ldi	r27, 0x43	; 67
    5ec6:	80 83       	st	Z, r24
    5ec8:	91 83       	std	Z+1, r25	; 0x01
    5eca:	a2 83       	std	Z+2, r26	; 0x02
    5ecc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ece:	8e 01       	movw	r16, r28
    5ed0:	01 5c       	subi	r16, 0xC1	; 193
    5ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ed4:	fe 01       	movw	r30, r28
    5ed6:	ed 5b       	subi	r30, 0xBD	; 189
    5ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eda:	60 81       	ld	r22, Z
    5edc:	71 81       	ldd	r23, Z+1	; 0x01
    5ede:	82 81       	ldd	r24, Z+2	; 0x02
    5ee0:	93 81       	ldd	r25, Z+3	; 0x03
    5ee2:	20 e0       	ldi	r18, 0x00	; 0
    5ee4:	30 e0       	ldi	r19, 0x00	; 0
    5ee6:	4a ef       	ldi	r20, 0xFA	; 250
    5ee8:	54 e4       	ldi	r21, 0x44	; 68
    5eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eee:	dc 01       	movw	r26, r24
    5ef0:	cb 01       	movw	r24, r22
    5ef2:	f8 01       	movw	r30, r16
    5ef4:	80 83       	st	Z, r24
    5ef6:	91 83       	std	Z+1, r25	; 0x01
    5ef8:	a2 83       	std	Z+2, r26	; 0x02
    5efa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5efc:	fe 01       	movw	r30, r28
    5efe:	ff 96       	adiw	r30, 0x3f	; 63
    5f00:	60 81       	ld	r22, Z
    5f02:	71 81       	ldd	r23, Z+1	; 0x01
    5f04:	82 81       	ldd	r24, Z+2	; 0x02
    5f06:	93 81       	ldd	r25, Z+3	; 0x03
    5f08:	20 e0       	ldi	r18, 0x00	; 0
    5f0a:	30 e0       	ldi	r19, 0x00	; 0
    5f0c:	40 e8       	ldi	r20, 0x80	; 128
    5f0e:	5f e3       	ldi	r21, 0x3F	; 63
    5f10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5f14:	88 23       	and	r24, r24
    5f16:	2c f4       	brge	.+10     	; 0x5f22 <APP_VidLED_Mode+0xb0c>
		__ticks = 1;
    5f18:	81 e0       	ldi	r24, 0x01	; 1
    5f1a:	90 e0       	ldi	r25, 0x00	; 0
    5f1c:	9e af       	std	Y+62, r25	; 0x3e
    5f1e:	8d af       	std	Y+61, r24	; 0x3d
    5f20:	46 c0       	rjmp	.+140    	; 0x5fae <APP_VidLED_Mode+0xb98>
	else if (__tmp > 65535)
    5f22:	fe 01       	movw	r30, r28
    5f24:	ff 96       	adiw	r30, 0x3f	; 63
    5f26:	60 81       	ld	r22, Z
    5f28:	71 81       	ldd	r23, Z+1	; 0x01
    5f2a:	82 81       	ldd	r24, Z+2	; 0x02
    5f2c:	93 81       	ldd	r25, Z+3	; 0x03
    5f2e:	20 e0       	ldi	r18, 0x00	; 0
    5f30:	3f ef       	ldi	r19, 0xFF	; 255
    5f32:	4f e7       	ldi	r20, 0x7F	; 127
    5f34:	57 e4       	ldi	r21, 0x47	; 71
    5f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5f3a:	18 16       	cp	r1, r24
    5f3c:	64 f5       	brge	.+88     	; 0x5f96 <APP_VidLED_Mode+0xb80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f3e:	fe 01       	movw	r30, r28
    5f40:	ed 5b       	subi	r30, 0xBD	; 189
    5f42:	ff 4f       	sbci	r31, 0xFF	; 255
    5f44:	60 81       	ld	r22, Z
    5f46:	71 81       	ldd	r23, Z+1	; 0x01
    5f48:	82 81       	ldd	r24, Z+2	; 0x02
    5f4a:	93 81       	ldd	r25, Z+3	; 0x03
    5f4c:	20 e0       	ldi	r18, 0x00	; 0
    5f4e:	30 e0       	ldi	r19, 0x00	; 0
    5f50:	40 e2       	ldi	r20, 0x20	; 32
    5f52:	51 e4       	ldi	r21, 0x41	; 65
    5f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f58:	dc 01       	movw	r26, r24
    5f5a:	cb 01       	movw	r24, r22
    5f5c:	bc 01       	movw	r22, r24
    5f5e:	cd 01       	movw	r24, r26
    5f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f64:	dc 01       	movw	r26, r24
    5f66:	cb 01       	movw	r24, r22
    5f68:	9e af       	std	Y+62, r25	; 0x3e
    5f6a:	8d af       	std	Y+61, r24	; 0x3d
    5f6c:	0f c0       	rjmp	.+30     	; 0x5f8c <APP_VidLED_Mode+0xb76>
    5f6e:	88 ec       	ldi	r24, 0xC8	; 200
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	9c af       	std	Y+60, r25	; 0x3c
    5f74:	8b af       	std	Y+59, r24	; 0x3b
    5f76:	8b ad       	ldd	r24, Y+59	; 0x3b
    5f78:	9c ad       	ldd	r25, Y+60	; 0x3c
    5f7a:	01 97       	sbiw	r24, 0x01	; 1
    5f7c:	f1 f7       	brne	.-4      	; 0x5f7a <APP_VidLED_Mode+0xb64>
    5f7e:	9c af       	std	Y+60, r25	; 0x3c
    5f80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f82:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f84:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f86:	01 97       	sbiw	r24, 0x01	; 1
    5f88:	9e af       	std	Y+62, r25	; 0x3e
    5f8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f90:	00 97       	sbiw	r24, 0x00	; 0
    5f92:	69 f7       	brne	.-38     	; 0x5f6e <APP_VidLED_Mode+0xb58>
    5f94:	16 c0       	rjmp	.+44     	; 0x5fc2 <APP_VidLED_Mode+0xbac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f96:	fe 01       	movw	r30, r28
    5f98:	ff 96       	adiw	r30, 0x3f	; 63
    5f9a:	60 81       	ld	r22, Z
    5f9c:	71 81       	ldd	r23, Z+1	; 0x01
    5f9e:	82 81       	ldd	r24, Z+2	; 0x02
    5fa0:	93 81       	ldd	r25, Z+3	; 0x03
    5fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fa6:	dc 01       	movw	r26, r24
    5fa8:	cb 01       	movw	r24, r22
    5faa:	9e af       	std	Y+62, r25	; 0x3e
    5fac:	8d af       	std	Y+61, r24	; 0x3d
    5fae:	8d ad       	ldd	r24, Y+61	; 0x3d
    5fb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5fb2:	9a af       	std	Y+58, r25	; 0x3a
    5fb4:	89 af       	std	Y+57, r24	; 0x39
    5fb6:	89 ad       	ldd	r24, Y+57	; 0x39
    5fb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    5fba:	01 97       	sbiw	r24, 0x01	; 1
    5fbc:	f1 f7       	brne	.-4      	; 0x5fba <APP_VidLED_Mode+0xba4>
    5fbe:	9a af       	std	Y+58, r25	; 0x3a
    5fc0:	89 af       	std	Y+57, r24	; 0x39
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch5);
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [5]");
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(s8 i =3 ; i>= 0 ;i--)
    5fc2:	de 01       	movw	r26, r28
    5fc4:	af 56       	subi	r26, 0x6F	; 111
    5fc6:	bf 4f       	sbci	r27, 0xFF	; 255
    5fc8:	fe 01       	movw	r30, r28
    5fca:	ef 56       	subi	r30, 0x6F	; 111
    5fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fce:	80 81       	ld	r24, Z
    5fd0:	81 50       	subi	r24, 0x01	; 1
    5fd2:	8c 93       	st	X, r24
    5fd4:	fe 01       	movw	r30, r28
    5fd6:	ef 56       	subi	r30, 0x6F	; 111
    5fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fda:	80 81       	ld	r24, Z
    5fdc:	88 23       	and	r24, r24
    5fde:	0c f0       	brlt	.+2      	; 0x5fe2 <APP_VidLED_Mode+0xbcc>
    5fe0:	55 cf       	rjmp	.-342    	; 0x5e8c <APP_VidLED_Mode+0xa76>
    5fe2:	a8 c2       	rjmp	.+1360   	; 0x6534 <APP_VidLED_Mode+0x111e>
			_delay_ms(250);
		}
		break  ;
		/*6- Incrementing (Snake effect) every 250 ms*/
	case switch6 :
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    5fe4:	80 e0       	ldi	r24, 0x00	; 0
    5fe6:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch6);
    5ff0:	82 e3       	ldi	r24, 0x32	; 50
    5ff2:	91 e0       	ldi	r25, 0x01	; 1
    5ff4:	66 e0       	ldi	r22, 0x06	; 6
    5ff6:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [6]");
    5ffa:	8f ee       	ldi	r24, 0xEF	; 239
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    6002:	82 e0       	ldi	r24, 0x02	; 2
    6004:	66 e0       	ldi	r22, 0x06	; 6
    6006:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
    600a:	88 ea       	ldi	r24, 0xA8	; 168
    600c:	90 e0       	ldi	r25, 0x00	; 0
    600e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    6012:	80 e0       	ldi	r24, 0x00	; 0
    6014:	60 e0       	ldi	r22, 0x00	; 0
    6016:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(u8 i = 0 ; i<8 ;i++)
    601a:	fe 01       	movw	r30, r28
    601c:	e0 57       	subi	r30, 0x70	; 112
    601e:	ff 4f       	sbci	r31, 0xFF	; 255
    6020:	10 82       	st	Z, r1
    6022:	83 c0       	rjmp	.+262    	; 0x612a <APP_VidLED_Mode+0xd14>
		{
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    6024:	fe 01       	movw	r30, r28
    6026:	e0 57       	subi	r30, 0x70	; 112
    6028:	ff 4f       	sbci	r31, 0xFF	; 255
    602a:	80 81       	ld	r24, Z
    602c:	60 e0       	ldi	r22, 0x00	; 0
    602e:	41 e0       	ldi	r20, 0x01	; 1
    6030:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    6034:	80 e0       	ldi	r24, 0x00	; 0
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	aa e7       	ldi	r26, 0x7A	; 122
    603a:	b3 e4       	ldi	r27, 0x43	; 67
    603c:	8d ab       	std	Y+53, r24	; 0x35
    603e:	9e ab       	std	Y+54, r25	; 0x36
    6040:	af ab       	std	Y+55, r26	; 0x37
    6042:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6044:	6d a9       	ldd	r22, Y+53	; 0x35
    6046:	7e a9       	ldd	r23, Y+54	; 0x36
    6048:	8f a9       	ldd	r24, Y+55	; 0x37
    604a:	98 ad       	ldd	r25, Y+56	; 0x38
    604c:	20 e0       	ldi	r18, 0x00	; 0
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	4a ef       	ldi	r20, 0xFA	; 250
    6052:	54 e4       	ldi	r21, 0x44	; 68
    6054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6058:	dc 01       	movw	r26, r24
    605a:	cb 01       	movw	r24, r22
    605c:	89 ab       	std	Y+49, r24	; 0x31
    605e:	9a ab       	std	Y+50, r25	; 0x32
    6060:	ab ab       	std	Y+51, r26	; 0x33
    6062:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6064:	69 a9       	ldd	r22, Y+49	; 0x31
    6066:	7a a9       	ldd	r23, Y+50	; 0x32
    6068:	8b a9       	ldd	r24, Y+51	; 0x33
    606a:	9c a9       	ldd	r25, Y+52	; 0x34
    606c:	20 e0       	ldi	r18, 0x00	; 0
    606e:	30 e0       	ldi	r19, 0x00	; 0
    6070:	40 e8       	ldi	r20, 0x80	; 128
    6072:	5f e3       	ldi	r21, 0x3F	; 63
    6074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6078:	88 23       	and	r24, r24
    607a:	2c f4       	brge	.+10     	; 0x6086 <APP_VidLED_Mode+0xc70>
		__ticks = 1;
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	98 ab       	std	Y+48, r25	; 0x30
    6082:	8f a7       	std	Y+47, r24	; 0x2f
    6084:	3f c0       	rjmp	.+126    	; 0x6104 <APP_VidLED_Mode+0xcee>
	else if (__tmp > 65535)
    6086:	69 a9       	ldd	r22, Y+49	; 0x31
    6088:	7a a9       	ldd	r23, Y+50	; 0x32
    608a:	8b a9       	ldd	r24, Y+51	; 0x33
    608c:	9c a9       	ldd	r25, Y+52	; 0x34
    608e:	20 e0       	ldi	r18, 0x00	; 0
    6090:	3f ef       	ldi	r19, 0xFF	; 255
    6092:	4f e7       	ldi	r20, 0x7F	; 127
    6094:	57 e4       	ldi	r21, 0x47	; 71
    6096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    609a:	18 16       	cp	r1, r24
    609c:	4c f5       	brge	.+82     	; 0x60f0 <APP_VidLED_Mode+0xcda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    609e:	6d a9       	ldd	r22, Y+53	; 0x35
    60a0:	7e a9       	ldd	r23, Y+54	; 0x36
    60a2:	8f a9       	ldd	r24, Y+55	; 0x37
    60a4:	98 ad       	ldd	r25, Y+56	; 0x38
    60a6:	20 e0       	ldi	r18, 0x00	; 0
    60a8:	30 e0       	ldi	r19, 0x00	; 0
    60aa:	40 e2       	ldi	r20, 0x20	; 32
    60ac:	51 e4       	ldi	r21, 0x41	; 65
    60ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60b2:	dc 01       	movw	r26, r24
    60b4:	cb 01       	movw	r24, r22
    60b6:	bc 01       	movw	r22, r24
    60b8:	cd 01       	movw	r24, r26
    60ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60be:	dc 01       	movw	r26, r24
    60c0:	cb 01       	movw	r24, r22
    60c2:	98 ab       	std	Y+48, r25	; 0x30
    60c4:	8f a7       	std	Y+47, r24	; 0x2f
    60c6:	0f c0       	rjmp	.+30     	; 0x60e6 <APP_VidLED_Mode+0xcd0>
    60c8:	88 ec       	ldi	r24, 0xC8	; 200
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	9e a7       	std	Y+46, r25	; 0x2e
    60ce:	8d a7       	std	Y+45, r24	; 0x2d
    60d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    60d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    60d4:	01 97       	sbiw	r24, 0x01	; 1
    60d6:	f1 f7       	brne	.-4      	; 0x60d4 <APP_VidLED_Mode+0xcbe>
    60d8:	9e a7       	std	Y+46, r25	; 0x2e
    60da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    60de:	98 a9       	ldd	r25, Y+48	; 0x30
    60e0:	01 97       	sbiw	r24, 0x01	; 1
    60e2:	98 ab       	std	Y+48, r25	; 0x30
    60e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    60e8:	98 a9       	ldd	r25, Y+48	; 0x30
    60ea:	00 97       	sbiw	r24, 0x00	; 0
    60ec:	69 f7       	brne	.-38     	; 0x60c8 <APP_VidLED_Mode+0xcb2>
    60ee:	14 c0       	rjmp	.+40     	; 0x6118 <APP_VidLED_Mode+0xd02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60f0:	69 a9       	ldd	r22, Y+49	; 0x31
    60f2:	7a a9       	ldd	r23, Y+50	; 0x32
    60f4:	8b a9       	ldd	r24, Y+51	; 0x33
    60f6:	9c a9       	ldd	r25, Y+52	; 0x34
    60f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60fc:	dc 01       	movw	r26, r24
    60fe:	cb 01       	movw	r24, r22
    6100:	98 ab       	std	Y+48, r25	; 0x30
    6102:	8f a7       	std	Y+47, r24	; 0x2f
    6104:	8f a5       	ldd	r24, Y+47	; 0x2f
    6106:	98 a9       	ldd	r25, Y+48	; 0x30
    6108:	9c a7       	std	Y+44, r25	; 0x2c
    610a:	8b a7       	std	Y+43, r24	; 0x2b
    610c:	8b a5       	ldd	r24, Y+43	; 0x2b
    610e:	9c a5       	ldd	r25, Y+44	; 0x2c
    6110:	01 97       	sbiw	r24, 0x01	; 1
    6112:	f1 f7       	brne	.-4      	; 0x6110 <APP_VidLED_Mode+0xcfa>
    6114:	9c a7       	std	Y+44, r25	; 0x2c
    6116:	8b a7       	std	Y+43, r24	; 0x2b
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch6);
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [6]");
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(u8 i = 0 ; i<8 ;i++)
    6118:	de 01       	movw	r26, r28
    611a:	a0 57       	subi	r26, 0x70	; 112
    611c:	bf 4f       	sbci	r27, 0xFF	; 255
    611e:	fe 01       	movw	r30, r28
    6120:	e0 57       	subi	r30, 0x70	; 112
    6122:	ff 4f       	sbci	r31, 0xFF	; 255
    6124:	80 81       	ld	r24, Z
    6126:	8f 5f       	subi	r24, 0xFF	; 255
    6128:	8c 93       	st	X, r24
    612a:	fe 01       	movw	r30, r28
    612c:	e0 57       	subi	r30, 0x70	; 112
    612e:	ff 4f       	sbci	r31, 0xFF	; 255
    6130:	80 81       	ld	r24, Z
    6132:	88 30       	cpi	r24, 0x08	; 8
    6134:	08 f4       	brcc	.+2      	; 0x6138 <APP_VidLED_Mode+0xd22>
    6136:	76 cf       	rjmp	.-276    	; 0x6024 <APP_VidLED_Mode+0xc0e>
    6138:	fd c1       	rjmp	.+1018   	; 0x6534 <APP_VidLED_Mode+0x111e>
		}
		break  ;
		/*7- Ping Pong effect every 250 ms*/

	case switch7 :
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    613a:	80 e0       	ldi	r24, 0x00	; 0
    613c:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    6140:	81 e0       	ldi	r24, 0x01	; 1
    6142:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch7);
    6146:	82 e3       	ldi	r24, 0x32	; 50
    6148:	91 e0       	ldi	r25, 0x01	; 1
    614a:	67 e0       	ldi	r22, 0x07	; 7
    614c:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [7]");
    6150:	8e ef       	ldi	r24, 0xFE	; 254
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    6158:	82 e0       	ldi	r24, 0x02	; 2
    615a:	66 e0       	ldi	r22, 0x06	; 6
    615c:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
    6160:	88 ea       	ldi	r24, 0xA8	; 168
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    6168:	80 e0       	ldi	r24, 0x00	; 0
    616a:	60 e0       	ldi	r22, 0x00	; 0
    616c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(u8 i = 0 ; i<8 ;i++)
    6170:	fe 01       	movw	r30, r28
    6172:	e1 57       	subi	r30, 0x71	; 113
    6174:	ff 4f       	sbci	r31, 0xFF	; 255
    6176:	10 82       	st	Z, r1
    6178:	87 c0       	rjmp	.+270    	; 0x6288 <APP_VidLED_Mode+0xe72>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    617a:	80 e0       	ldi	r24, 0x00	; 0
    617c:	60 e0       	ldi	r22, 0x00	; 0
    617e:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    6182:	fe 01       	movw	r30, r28
    6184:	e1 57       	subi	r30, 0x71	; 113
    6186:	ff 4f       	sbci	r31, 0xFF	; 255
    6188:	80 81       	ld	r24, Z
    618a:	60 e0       	ldi	r22, 0x00	; 0
    618c:	41 e0       	ldi	r20, 0x01	; 1
    618e:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    6192:	80 e0       	ldi	r24, 0x00	; 0
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	aa e7       	ldi	r26, 0x7A	; 122
    6198:	b3 e4       	ldi	r27, 0x43	; 67
    619a:	8f a3       	std	Y+39, r24	; 0x27
    619c:	98 a7       	std	Y+40, r25	; 0x28
    619e:	a9 a7       	std	Y+41, r26	; 0x29
    61a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61a2:	6f a1       	ldd	r22, Y+39	; 0x27
    61a4:	78 a5       	ldd	r23, Y+40	; 0x28
    61a6:	89 a5       	ldd	r24, Y+41	; 0x29
    61a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    61aa:	20 e0       	ldi	r18, 0x00	; 0
    61ac:	30 e0       	ldi	r19, 0x00	; 0
    61ae:	4a ef       	ldi	r20, 0xFA	; 250
    61b0:	54 e4       	ldi	r21, 0x44	; 68
    61b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61b6:	dc 01       	movw	r26, r24
    61b8:	cb 01       	movw	r24, r22
    61ba:	8b a3       	std	Y+35, r24	; 0x23
    61bc:	9c a3       	std	Y+36, r25	; 0x24
    61be:	ad a3       	std	Y+37, r26	; 0x25
    61c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    61c2:	6b a1       	ldd	r22, Y+35	; 0x23
    61c4:	7c a1       	ldd	r23, Y+36	; 0x24
    61c6:	8d a1       	ldd	r24, Y+37	; 0x25
    61c8:	9e a1       	ldd	r25, Y+38	; 0x26
    61ca:	20 e0       	ldi	r18, 0x00	; 0
    61cc:	30 e0       	ldi	r19, 0x00	; 0
    61ce:	40 e8       	ldi	r20, 0x80	; 128
    61d0:	5f e3       	ldi	r21, 0x3F	; 63
    61d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    61d6:	88 23       	and	r24, r24
    61d8:	2c f4       	brge	.+10     	; 0x61e4 <APP_VidLED_Mode+0xdce>
		__ticks = 1;
    61da:	81 e0       	ldi	r24, 0x01	; 1
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	9a a3       	std	Y+34, r25	; 0x22
    61e0:	89 a3       	std	Y+33, r24	; 0x21
    61e2:	3f c0       	rjmp	.+126    	; 0x6262 <APP_VidLED_Mode+0xe4c>
	else if (__tmp > 65535)
    61e4:	6b a1       	ldd	r22, Y+35	; 0x23
    61e6:	7c a1       	ldd	r23, Y+36	; 0x24
    61e8:	8d a1       	ldd	r24, Y+37	; 0x25
    61ea:	9e a1       	ldd	r25, Y+38	; 0x26
    61ec:	20 e0       	ldi	r18, 0x00	; 0
    61ee:	3f ef       	ldi	r19, 0xFF	; 255
    61f0:	4f e7       	ldi	r20, 0x7F	; 127
    61f2:	57 e4       	ldi	r21, 0x47	; 71
    61f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    61f8:	18 16       	cp	r1, r24
    61fa:	4c f5       	brge	.+82     	; 0x624e <APP_VidLED_Mode+0xe38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61fc:	6f a1       	ldd	r22, Y+39	; 0x27
    61fe:	78 a5       	ldd	r23, Y+40	; 0x28
    6200:	89 a5       	ldd	r24, Y+41	; 0x29
    6202:	9a a5       	ldd	r25, Y+42	; 0x2a
    6204:	20 e0       	ldi	r18, 0x00	; 0
    6206:	30 e0       	ldi	r19, 0x00	; 0
    6208:	40 e2       	ldi	r20, 0x20	; 32
    620a:	51 e4       	ldi	r21, 0x41	; 65
    620c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6210:	dc 01       	movw	r26, r24
    6212:	cb 01       	movw	r24, r22
    6214:	bc 01       	movw	r22, r24
    6216:	cd 01       	movw	r24, r26
    6218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    621c:	dc 01       	movw	r26, r24
    621e:	cb 01       	movw	r24, r22
    6220:	9a a3       	std	Y+34, r25	; 0x22
    6222:	89 a3       	std	Y+33, r24	; 0x21
    6224:	0f c0       	rjmp	.+30     	; 0x6244 <APP_VidLED_Mode+0xe2e>
    6226:	88 ec       	ldi	r24, 0xC8	; 200
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	98 a3       	std	Y+32, r25	; 0x20
    622c:	8f 8f       	std	Y+31, r24	; 0x1f
    622e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6230:	98 a1       	ldd	r25, Y+32	; 0x20
    6232:	01 97       	sbiw	r24, 0x01	; 1
    6234:	f1 f7       	brne	.-4      	; 0x6232 <APP_VidLED_Mode+0xe1c>
    6236:	98 a3       	std	Y+32, r25	; 0x20
    6238:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    623a:	89 a1       	ldd	r24, Y+33	; 0x21
    623c:	9a a1       	ldd	r25, Y+34	; 0x22
    623e:	01 97       	sbiw	r24, 0x01	; 1
    6240:	9a a3       	std	Y+34, r25	; 0x22
    6242:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6244:	89 a1       	ldd	r24, Y+33	; 0x21
    6246:	9a a1       	ldd	r25, Y+34	; 0x22
    6248:	00 97       	sbiw	r24, 0x00	; 0
    624a:	69 f7       	brne	.-38     	; 0x6226 <APP_VidLED_Mode+0xe10>
    624c:	14 c0       	rjmp	.+40     	; 0x6276 <APP_VidLED_Mode+0xe60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    624e:	6b a1       	ldd	r22, Y+35	; 0x23
    6250:	7c a1       	ldd	r23, Y+36	; 0x24
    6252:	8d a1       	ldd	r24, Y+37	; 0x25
    6254:	9e a1       	ldd	r25, Y+38	; 0x26
    6256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    625a:	dc 01       	movw	r26, r24
    625c:	cb 01       	movw	r24, r22
    625e:	9a a3       	std	Y+34, r25	; 0x22
    6260:	89 a3       	std	Y+33, r24	; 0x21
    6262:	89 a1       	ldd	r24, Y+33	; 0x21
    6264:	9a a1       	ldd	r25, Y+34	; 0x22
    6266:	9e 8f       	std	Y+30, r25	; 0x1e
    6268:	8d 8f       	std	Y+29, r24	; 0x1d
    626a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    626c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    626e:	01 97       	sbiw	r24, 0x01	; 1
    6270:	f1 f7       	brne	.-4      	; 0x626e <APP_VidLED_Mode+0xe58>
    6272:	9e 8f       	std	Y+30, r25	; 0x1e
    6274:	8d 8f       	std	Y+29, r24	; 0x1d
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch7);
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [7]");
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(u8 i = 0 ; i<8 ;i++)
    6276:	de 01       	movw	r26, r28
    6278:	a1 57       	subi	r26, 0x71	; 113
    627a:	bf 4f       	sbci	r27, 0xFF	; 255
    627c:	fe 01       	movw	r30, r28
    627e:	e1 57       	subi	r30, 0x71	; 113
    6280:	ff 4f       	sbci	r31, 0xFF	; 255
    6282:	80 81       	ld	r24, Z
    6284:	8f 5f       	subi	r24, 0xFF	; 255
    6286:	8c 93       	st	X, r24
    6288:	fe 01       	movw	r30, r28
    628a:	e1 57       	subi	r30, 0x71	; 113
    628c:	ff 4f       	sbci	r31, 0xFF	; 255
    628e:	80 81       	ld	r24, Z
    6290:	88 30       	cpi	r24, 0x08	; 8
    6292:	08 f4       	brcc	.+2      	; 0x6296 <APP_VidLED_Mode+0xe80>
    6294:	72 cf       	rjmp	.-284    	; 0x617a <APP_VidLED_Mode+0xd64>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
			_delay_ms(250);
		}
		for(s8 i =7 ; i>=0 ;i--)
    6296:	fe 01       	movw	r30, r28
    6298:	e2 57       	subi	r30, 0x72	; 114
    629a:	ff 4f       	sbci	r31, 0xFF	; 255
    629c:	87 e0       	ldi	r24, 0x07	; 7
    629e:	80 83       	st	Z, r24
    62a0:	87 c0       	rjmp	.+270    	; 0x63b0 <APP_VidLED_Mode+0xf9a>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    62a2:	80 e0       	ldi	r24, 0x00	; 0
    62a4:	60 e0       	ldi	r22, 0x00	; 0
    62a6:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    62aa:	fe 01       	movw	r30, r28
    62ac:	e2 57       	subi	r30, 0x72	; 114
    62ae:	ff 4f       	sbci	r31, 0xFF	; 255
    62b0:	80 81       	ld	r24, Z
    62b2:	60 e0       	ldi	r22, 0x00	; 0
    62b4:	41 e0       	ldi	r20, 0x01	; 1
    62b6:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    62ba:	80 e0       	ldi	r24, 0x00	; 0
    62bc:	90 e0       	ldi	r25, 0x00	; 0
    62be:	aa e7       	ldi	r26, 0x7A	; 122
    62c0:	b3 e4       	ldi	r27, 0x43	; 67
    62c2:	89 8f       	std	Y+25, r24	; 0x19
    62c4:	9a 8f       	std	Y+26, r25	; 0x1a
    62c6:	ab 8f       	std	Y+27, r26	; 0x1b
    62c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62ca:	69 8d       	ldd	r22, Y+25	; 0x19
    62cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    62ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62d2:	20 e0       	ldi	r18, 0x00	; 0
    62d4:	30 e0       	ldi	r19, 0x00	; 0
    62d6:	4a ef       	ldi	r20, 0xFA	; 250
    62d8:	54 e4       	ldi	r21, 0x44	; 68
    62da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62de:	dc 01       	movw	r26, r24
    62e0:	cb 01       	movw	r24, r22
    62e2:	8d 8b       	std	Y+21, r24	; 0x15
    62e4:	9e 8b       	std	Y+22, r25	; 0x16
    62e6:	af 8b       	std	Y+23, r26	; 0x17
    62e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    62ea:	6d 89       	ldd	r22, Y+21	; 0x15
    62ec:	7e 89       	ldd	r23, Y+22	; 0x16
    62ee:	8f 89       	ldd	r24, Y+23	; 0x17
    62f0:	98 8d       	ldd	r25, Y+24	; 0x18
    62f2:	20 e0       	ldi	r18, 0x00	; 0
    62f4:	30 e0       	ldi	r19, 0x00	; 0
    62f6:	40 e8       	ldi	r20, 0x80	; 128
    62f8:	5f e3       	ldi	r21, 0x3F	; 63
    62fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    62fe:	88 23       	and	r24, r24
    6300:	2c f4       	brge	.+10     	; 0x630c <APP_VidLED_Mode+0xef6>
		__ticks = 1;
    6302:	81 e0       	ldi	r24, 0x01	; 1
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	9c 8b       	std	Y+20, r25	; 0x14
    6308:	8b 8b       	std	Y+19, r24	; 0x13
    630a:	3f c0       	rjmp	.+126    	; 0x638a <APP_VidLED_Mode+0xf74>
	else if (__tmp > 65535)
    630c:	6d 89       	ldd	r22, Y+21	; 0x15
    630e:	7e 89       	ldd	r23, Y+22	; 0x16
    6310:	8f 89       	ldd	r24, Y+23	; 0x17
    6312:	98 8d       	ldd	r25, Y+24	; 0x18
    6314:	20 e0       	ldi	r18, 0x00	; 0
    6316:	3f ef       	ldi	r19, 0xFF	; 255
    6318:	4f e7       	ldi	r20, 0x7F	; 127
    631a:	57 e4       	ldi	r21, 0x47	; 71
    631c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6320:	18 16       	cp	r1, r24
    6322:	4c f5       	brge	.+82     	; 0x6376 <APP_VidLED_Mode+0xf60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6324:	69 8d       	ldd	r22, Y+25	; 0x19
    6326:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    632a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    632c:	20 e0       	ldi	r18, 0x00	; 0
    632e:	30 e0       	ldi	r19, 0x00	; 0
    6330:	40 e2       	ldi	r20, 0x20	; 32
    6332:	51 e4       	ldi	r21, 0x41	; 65
    6334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6338:	dc 01       	movw	r26, r24
    633a:	cb 01       	movw	r24, r22
    633c:	bc 01       	movw	r22, r24
    633e:	cd 01       	movw	r24, r26
    6340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6344:	dc 01       	movw	r26, r24
    6346:	cb 01       	movw	r24, r22
    6348:	9c 8b       	std	Y+20, r25	; 0x14
    634a:	8b 8b       	std	Y+19, r24	; 0x13
    634c:	0f c0       	rjmp	.+30     	; 0x636c <APP_VidLED_Mode+0xf56>
    634e:	88 ec       	ldi	r24, 0xC8	; 200
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	9a 8b       	std	Y+18, r25	; 0x12
    6354:	89 8b       	std	Y+17, r24	; 0x11
    6356:	89 89       	ldd	r24, Y+17	; 0x11
    6358:	9a 89       	ldd	r25, Y+18	; 0x12
    635a:	01 97       	sbiw	r24, 0x01	; 1
    635c:	f1 f7       	brne	.-4      	; 0x635a <APP_VidLED_Mode+0xf44>
    635e:	9a 8b       	std	Y+18, r25	; 0x12
    6360:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6362:	8b 89       	ldd	r24, Y+19	; 0x13
    6364:	9c 89       	ldd	r25, Y+20	; 0x14
    6366:	01 97       	sbiw	r24, 0x01	; 1
    6368:	9c 8b       	std	Y+20, r25	; 0x14
    636a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    636c:	8b 89       	ldd	r24, Y+19	; 0x13
    636e:	9c 89       	ldd	r25, Y+20	; 0x14
    6370:	00 97       	sbiw	r24, 0x00	; 0
    6372:	69 f7       	brne	.-38     	; 0x634e <APP_VidLED_Mode+0xf38>
    6374:	14 c0       	rjmp	.+40     	; 0x639e <APP_VidLED_Mode+0xf88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6376:	6d 89       	ldd	r22, Y+21	; 0x15
    6378:	7e 89       	ldd	r23, Y+22	; 0x16
    637a:	8f 89       	ldd	r24, Y+23	; 0x17
    637c:	98 8d       	ldd	r25, Y+24	; 0x18
    637e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6382:	dc 01       	movw	r26, r24
    6384:	cb 01       	movw	r24, r22
    6386:	9c 8b       	std	Y+20, r25	; 0x14
    6388:	8b 8b       	std	Y+19, r24	; 0x13
    638a:	8b 89       	ldd	r24, Y+19	; 0x13
    638c:	9c 89       	ldd	r25, Y+20	; 0x14
    638e:	98 8b       	std	Y+16, r25	; 0x10
    6390:	8f 87       	std	Y+15, r24	; 0x0f
    6392:	8f 85       	ldd	r24, Y+15	; 0x0f
    6394:	98 89       	ldd	r25, Y+16	; 0x10
    6396:	01 97       	sbiw	r24, 0x01	; 1
    6398:	f1 f7       	brne	.-4      	; 0x6396 <APP_VidLED_Mode+0xf80>
    639a:	98 8b       	std	Y+16, r25	; 0x10
    639c:	8f 87       	std	Y+15, r24	; 0x0f
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
			_delay_ms(250);
		}
		for(s8 i =7 ; i>=0 ;i--)
    639e:	de 01       	movw	r26, r28
    63a0:	a2 57       	subi	r26, 0x72	; 114
    63a2:	bf 4f       	sbci	r27, 0xFF	; 255
    63a4:	fe 01       	movw	r30, r28
    63a6:	e2 57       	subi	r30, 0x72	; 114
    63a8:	ff 4f       	sbci	r31, 0xFF	; 255
    63aa:	80 81       	ld	r24, Z
    63ac:	81 50       	subi	r24, 0x01	; 1
    63ae:	8c 93       	st	X, r24
    63b0:	fe 01       	movw	r30, r28
    63b2:	e2 57       	subi	r30, 0x72	; 114
    63b4:	ff 4f       	sbci	r31, 0xFF	; 255
    63b6:	80 81       	ld	r24, Z
    63b8:	88 23       	and	r24, r24
    63ba:	0c f0       	brlt	.+2      	; 0x63be <APP_VidLED_Mode+0xfa8>
    63bc:	72 cf       	rjmp	.-284    	; 0x62a2 <APP_VidLED_Mode+0xe8c>
    63be:	ba c0       	rjmp	.+372    	; 0x6534 <APP_VidLED_Mode+0x111e>
			_delay_ms(250);
		}
		break  ;
		/*8-	2-LEDs Converging/Diverging every 250 ms*/
	case switch8 :
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR>>4);
    63c0:	80 e0       	ldi	r24, 0x00	; 0
    63c2:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    63c6:	81 e0       	ldi	r24, 0x01	; 1
    63c8:	0e 94 ef 13 	call	0x27de	; 0x27de <HCLCD_Vid4Bits_SendCommand>
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch8);
    63cc:	82 e3       	ldi	r24, 0x32	; 50
    63ce:	91 e0       	ldi	r25, 0x01	; 1
    63d0:	68 e0       	ldi	r22, 0x08	; 8
    63d2:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [8]");
    63d6:	8d e0       	ldi	r24, 0x0D	; 13
    63d8:	91 e0       	ldi	r25, 0x01	; 1
    63da:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
    63de:	82 e0       	ldi	r24, 0x02	; 2
    63e0:	66 e0       	ldi	r22, 0x06	; 6
    63e2:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
    63e6:	88 ea       	ldi	r24, 0xA8	; 168
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <HCLCD_Vid4Bits_DisplayString>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    63ee:	80 e0       	ldi	r24, 0x00	; 0
    63f0:	60 e0       	ldi	r22, 0x00	; 0
    63f2:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(u8 i =0 ; i<8 ;i++)
    63f6:	fe 01       	movw	r30, r28
    63f8:	e3 57       	subi	r30, 0x73	; 115
    63fa:	ff 4f       	sbci	r31, 0xFF	; 255
    63fc:	10 82       	st	Z, r1
    63fe:	93 c0       	rjmp	.+294    	; 0x6526 <APP_VidLED_Mode+0x1110>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    6400:	80 e0       	ldi	r24, 0x00	; 0
    6402:	60 e0       	ldi	r22, 0x00	; 0
    6404:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue((7-i),HLED_PORTA,PIN_HIGH);
    6408:	fe 01       	movw	r30, r28
    640a:	e3 57       	subi	r30, 0x73	; 115
    640c:	ff 4f       	sbci	r31, 0xFF	; 255
    640e:	97 e0       	ldi	r25, 0x07	; 7
    6410:	80 81       	ld	r24, Z
    6412:	f9 2f       	mov	r31, r25
    6414:	f8 1b       	sub	r31, r24
    6416:	8f 2f       	mov	r24, r31
    6418:	60 e0       	ldi	r22, 0x00	; 0
    641a:	41 e0       	ldi	r20, 0x01	; 1
    641c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    6420:	fe 01       	movw	r30, r28
    6422:	e3 57       	subi	r30, 0x73	; 115
    6424:	ff 4f       	sbci	r31, 0xFF	; 255
    6426:	80 81       	ld	r24, Z
    6428:	60 e0       	ldi	r22, 0x00	; 0
    642a:	41 e0       	ldi	r20, 0x01	; 1
    642c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    6430:	80 e0       	ldi	r24, 0x00	; 0
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	aa e7       	ldi	r26, 0x7A	; 122
    6436:	b3 e4       	ldi	r27, 0x43	; 67
    6438:	8b 87       	std	Y+11, r24	; 0x0b
    643a:	9c 87       	std	Y+12, r25	; 0x0c
    643c:	ad 87       	std	Y+13, r26	; 0x0d
    643e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6440:	6b 85       	ldd	r22, Y+11	; 0x0b
    6442:	7c 85       	ldd	r23, Y+12	; 0x0c
    6444:	8d 85       	ldd	r24, Y+13	; 0x0d
    6446:	9e 85       	ldd	r25, Y+14	; 0x0e
    6448:	20 e0       	ldi	r18, 0x00	; 0
    644a:	30 e0       	ldi	r19, 0x00	; 0
    644c:	4a ef       	ldi	r20, 0xFA	; 250
    644e:	54 e4       	ldi	r21, 0x44	; 68
    6450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6454:	dc 01       	movw	r26, r24
    6456:	cb 01       	movw	r24, r22
    6458:	8f 83       	std	Y+7, r24	; 0x07
    645a:	98 87       	std	Y+8, r25	; 0x08
    645c:	a9 87       	std	Y+9, r26	; 0x09
    645e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6460:	6f 81       	ldd	r22, Y+7	; 0x07
    6462:	78 85       	ldd	r23, Y+8	; 0x08
    6464:	89 85       	ldd	r24, Y+9	; 0x09
    6466:	9a 85       	ldd	r25, Y+10	; 0x0a
    6468:	20 e0       	ldi	r18, 0x00	; 0
    646a:	30 e0       	ldi	r19, 0x00	; 0
    646c:	40 e8       	ldi	r20, 0x80	; 128
    646e:	5f e3       	ldi	r21, 0x3F	; 63
    6470:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6474:	88 23       	and	r24, r24
    6476:	2c f4       	brge	.+10     	; 0x6482 <APP_VidLED_Mode+0x106c>
		__ticks = 1;
    6478:	81 e0       	ldi	r24, 0x01	; 1
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	9e 83       	std	Y+6, r25	; 0x06
    647e:	8d 83       	std	Y+5, r24	; 0x05
    6480:	3f c0       	rjmp	.+126    	; 0x6500 <APP_VidLED_Mode+0x10ea>
	else if (__tmp > 65535)
    6482:	6f 81       	ldd	r22, Y+7	; 0x07
    6484:	78 85       	ldd	r23, Y+8	; 0x08
    6486:	89 85       	ldd	r24, Y+9	; 0x09
    6488:	9a 85       	ldd	r25, Y+10	; 0x0a
    648a:	20 e0       	ldi	r18, 0x00	; 0
    648c:	3f ef       	ldi	r19, 0xFF	; 255
    648e:	4f e7       	ldi	r20, 0x7F	; 127
    6490:	57 e4       	ldi	r21, 0x47	; 71
    6492:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6496:	18 16       	cp	r1, r24
    6498:	4c f5       	brge	.+82     	; 0x64ec <APP_VidLED_Mode+0x10d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    649a:	6b 85       	ldd	r22, Y+11	; 0x0b
    649c:	7c 85       	ldd	r23, Y+12	; 0x0c
    649e:	8d 85       	ldd	r24, Y+13	; 0x0d
    64a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    64a2:	20 e0       	ldi	r18, 0x00	; 0
    64a4:	30 e0       	ldi	r19, 0x00	; 0
    64a6:	40 e2       	ldi	r20, 0x20	; 32
    64a8:	51 e4       	ldi	r21, 0x41	; 65
    64aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64ae:	dc 01       	movw	r26, r24
    64b0:	cb 01       	movw	r24, r22
    64b2:	bc 01       	movw	r22, r24
    64b4:	cd 01       	movw	r24, r26
    64b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64ba:	dc 01       	movw	r26, r24
    64bc:	cb 01       	movw	r24, r22
    64be:	9e 83       	std	Y+6, r25	; 0x06
    64c0:	8d 83       	std	Y+5, r24	; 0x05
    64c2:	0f c0       	rjmp	.+30     	; 0x64e2 <APP_VidLED_Mode+0x10cc>
    64c4:	88 ec       	ldi	r24, 0xC8	; 200
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	9c 83       	std	Y+4, r25	; 0x04
    64ca:	8b 83       	std	Y+3, r24	; 0x03
    64cc:	8b 81       	ldd	r24, Y+3	; 0x03
    64ce:	9c 81       	ldd	r25, Y+4	; 0x04
    64d0:	01 97       	sbiw	r24, 0x01	; 1
    64d2:	f1 f7       	brne	.-4      	; 0x64d0 <APP_VidLED_Mode+0x10ba>
    64d4:	9c 83       	std	Y+4, r25	; 0x04
    64d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64d8:	8d 81       	ldd	r24, Y+5	; 0x05
    64da:	9e 81       	ldd	r25, Y+6	; 0x06
    64dc:	01 97       	sbiw	r24, 0x01	; 1
    64de:	9e 83       	std	Y+6, r25	; 0x06
    64e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64e2:	8d 81       	ldd	r24, Y+5	; 0x05
    64e4:	9e 81       	ldd	r25, Y+6	; 0x06
    64e6:	00 97       	sbiw	r24, 0x00	; 0
    64e8:	69 f7       	brne	.-38     	; 0x64c4 <APP_VidLED_Mode+0x10ae>
    64ea:	14 c0       	rjmp	.+40     	; 0x6514 <APP_VidLED_Mode+0x10fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64ec:	6f 81       	ldd	r22, Y+7	; 0x07
    64ee:	78 85       	ldd	r23, Y+8	; 0x08
    64f0:	89 85       	ldd	r24, Y+9	; 0x09
    64f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    64f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64f8:	dc 01       	movw	r26, r24
    64fa:	cb 01       	movw	r24, r22
    64fc:	9e 83       	std	Y+6, r25	; 0x06
    64fe:	8d 83       	std	Y+5, r24	; 0x05
    6500:	8d 81       	ldd	r24, Y+5	; 0x05
    6502:	9e 81       	ldd	r25, Y+6	; 0x06
    6504:	9a 83       	std	Y+2, r25	; 0x02
    6506:	89 83       	std	Y+1, r24	; 0x01
    6508:	89 81       	ldd	r24, Y+1	; 0x01
    650a:	9a 81       	ldd	r25, Y+2	; 0x02
    650c:	01 97       	sbiw	r24, 0x01	; 1
    650e:	f1 f7       	brne	.-4      	; 0x650c <APP_VidLED_Mode+0x10f6>
    6510:	9a 83       	std	Y+2, r25	; 0x02
    6512:	89 83       	std	Y+1, r24	; 0x01
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch8);
		HCLCD_Vid4Bits_DisplayString((u8*)"Switch No. [8]");
		HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,6);
		HCLCD_Vid4Bits_DisplayString((u8*)"is Pressed");
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(u8 i =0 ; i<8 ;i++)
    6514:	de 01       	movw	r26, r28
    6516:	a3 57       	subi	r26, 0x73	; 115
    6518:	bf 4f       	sbci	r27, 0xFF	; 255
    651a:	fe 01       	movw	r30, r28
    651c:	e3 57       	subi	r30, 0x73	; 115
    651e:	ff 4f       	sbci	r31, 0xFF	; 255
    6520:	80 81       	ld	r24, Z
    6522:	8f 5f       	subi	r24, 0xFF	; 255
    6524:	8c 93       	st	X, r24
    6526:	fe 01       	movw	r30, r28
    6528:	e3 57       	subi	r30, 0x73	; 115
    652a:	ff 4f       	sbci	r31, 0xFF	; 255
    652c:	80 81       	ld	r24, Z
    652e:	88 30       	cpi	r24, 0x08	; 8
    6530:	08 f4       	brcc	.+2      	; 0x6534 <APP_VidLED_Mode+0x111e>
    6532:	66 cf       	rjmp	.-308    	; 0x6400 <APP_VidLED_Mode+0xfea>
		break  ;
	default :
		break ;
		/*Do Nothing*/
	}
}
    6534:	c9 56       	subi	r28, 0x69	; 105
    6536:	df 4f       	sbci	r29, 0xFF	; 255
    6538:	0f b6       	in	r0, 0x3f	; 63
    653a:	f8 94       	cli
    653c:	de bf       	out	0x3e, r29	; 62
    653e:	0f be       	out	0x3f, r0	; 63
    6540:	cd bf       	out	0x3d, r28	; 61
    6542:	cf 91       	pop	r28
    6544:	df 91       	pop	r29
    6546:	1f 91       	pop	r17
    6548:	0f 91       	pop	r16
    654a:	08 95       	ret

0000654c <__udivmodsi4>:
    654c:	a1 e2       	ldi	r26, 0x21	; 33
    654e:	1a 2e       	mov	r1, r26
    6550:	aa 1b       	sub	r26, r26
    6552:	bb 1b       	sub	r27, r27
    6554:	fd 01       	movw	r30, r26
    6556:	0d c0       	rjmp	.+26     	; 0x6572 <__udivmodsi4_ep>

00006558 <__udivmodsi4_loop>:
    6558:	aa 1f       	adc	r26, r26
    655a:	bb 1f       	adc	r27, r27
    655c:	ee 1f       	adc	r30, r30
    655e:	ff 1f       	adc	r31, r31
    6560:	a2 17       	cp	r26, r18
    6562:	b3 07       	cpc	r27, r19
    6564:	e4 07       	cpc	r30, r20
    6566:	f5 07       	cpc	r31, r21
    6568:	20 f0       	brcs	.+8      	; 0x6572 <__udivmodsi4_ep>
    656a:	a2 1b       	sub	r26, r18
    656c:	b3 0b       	sbc	r27, r19
    656e:	e4 0b       	sbc	r30, r20
    6570:	f5 0b       	sbc	r31, r21

00006572 <__udivmodsi4_ep>:
    6572:	66 1f       	adc	r22, r22
    6574:	77 1f       	adc	r23, r23
    6576:	88 1f       	adc	r24, r24
    6578:	99 1f       	adc	r25, r25
    657a:	1a 94       	dec	r1
    657c:	69 f7       	brne	.-38     	; 0x6558 <__udivmodsi4_loop>
    657e:	60 95       	com	r22
    6580:	70 95       	com	r23
    6582:	80 95       	com	r24
    6584:	90 95       	com	r25
    6586:	9b 01       	movw	r18, r22
    6588:	ac 01       	movw	r20, r24
    658a:	bd 01       	movw	r22, r26
    658c:	cf 01       	movw	r24, r30
    658e:	08 95       	ret

00006590 <__prologue_saves__>:
    6590:	2f 92       	push	r2
    6592:	3f 92       	push	r3
    6594:	4f 92       	push	r4
    6596:	5f 92       	push	r5
    6598:	6f 92       	push	r6
    659a:	7f 92       	push	r7
    659c:	8f 92       	push	r8
    659e:	9f 92       	push	r9
    65a0:	af 92       	push	r10
    65a2:	bf 92       	push	r11
    65a4:	cf 92       	push	r12
    65a6:	df 92       	push	r13
    65a8:	ef 92       	push	r14
    65aa:	ff 92       	push	r15
    65ac:	0f 93       	push	r16
    65ae:	1f 93       	push	r17
    65b0:	cf 93       	push	r28
    65b2:	df 93       	push	r29
    65b4:	cd b7       	in	r28, 0x3d	; 61
    65b6:	de b7       	in	r29, 0x3e	; 62
    65b8:	ca 1b       	sub	r28, r26
    65ba:	db 0b       	sbc	r29, r27
    65bc:	0f b6       	in	r0, 0x3f	; 63
    65be:	f8 94       	cli
    65c0:	de bf       	out	0x3e, r29	; 62
    65c2:	0f be       	out	0x3f, r0	; 63
    65c4:	cd bf       	out	0x3d, r28	; 61
    65c6:	09 94       	ijmp

000065c8 <__epilogue_restores__>:
    65c8:	2a 88       	ldd	r2, Y+18	; 0x12
    65ca:	39 88       	ldd	r3, Y+17	; 0x11
    65cc:	48 88       	ldd	r4, Y+16	; 0x10
    65ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    65d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    65d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    65d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    65d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    65d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    65da:	b9 84       	ldd	r11, Y+9	; 0x09
    65dc:	c8 84       	ldd	r12, Y+8	; 0x08
    65de:	df 80       	ldd	r13, Y+7	; 0x07
    65e0:	ee 80       	ldd	r14, Y+6	; 0x06
    65e2:	fd 80       	ldd	r15, Y+5	; 0x05
    65e4:	0c 81       	ldd	r16, Y+4	; 0x04
    65e6:	1b 81       	ldd	r17, Y+3	; 0x03
    65e8:	aa 81       	ldd	r26, Y+2	; 0x02
    65ea:	b9 81       	ldd	r27, Y+1	; 0x01
    65ec:	ce 0f       	add	r28, r30
    65ee:	d1 1d       	adc	r29, r1
    65f0:	0f b6       	in	r0, 0x3f	; 63
    65f2:	f8 94       	cli
    65f4:	de bf       	out	0x3e, r29	; 62
    65f6:	0f be       	out	0x3f, r0	; 63
    65f8:	cd bf       	out	0x3d, r28	; 61
    65fa:	ed 01       	movw	r28, r26
    65fc:	08 95       	ret

000065fe <_exit>:
    65fe:	f8 94       	cli

00006600 <__stop_program>:
    6600:	ff cf       	rjmp	.-2      	; 0x6600 <__stop_program>
