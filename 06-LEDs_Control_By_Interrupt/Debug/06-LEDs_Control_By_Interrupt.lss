
06-LEDs_Control_By_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00003dde  00003e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00003e90  2**0
                  ALLOC
  3 .stab         000042a8  00000000  00000000  00003e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a0e  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ba3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d6d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e293  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <main>
      8a:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MEXTI0_VidInit>:
#include"MEXTI_Config.h"
#include"MEXTI_Interface.h"

/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
     b86:	a5 e5       	ldi	r26, 0x55	; 85
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e5 e5       	ldi	r30, 0x55	; 85
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
     b94:	a5 e5       	ldi	r26, 0x55	; 85
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e5 e5       	ldi	r30, 0x55	; 85
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
     ba2:	ab e5       	ldi	r26, 0x5B	; 91
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	eb e5       	ldi	r30, 0x5B	; 91
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
     bbe:	a5 e5       	ldi	r26, 0x55	; 85
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e5       	ldi	r30, 0x55	; 85
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	84 60       	ori	r24, 0x04	; 4
     bca:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
     bcc:	a5 e5       	ldi	r26, 0x55	; 85
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e5       	ldi	r30, 0x55	; 85
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	88 60       	ori	r24, 0x08	; 8
     bd8:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
     bda:	ab e5       	ldi	r26, 0x5B	; 91
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e5       	ldi	r30, 0x5B	; 91
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
     bf6:	a4 e5       	ldi	r26, 0x54	; 84
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e5       	ldi	r30, 0x54	; 84
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
     c04:	ab e5       	ldi	r26, 0x5B	; 91
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	eb e5       	ldi	r30, 0x5B	; 91
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	8c 93       	st	X, r24
}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <MEXTI_VidSenseControl+0x6>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <MEXTI_VidSenseControl+0x8>
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	3c 83       	std	Y+4, r19	; 0x04
     c30:	2b 83       	std	Y+3, r18	; 0x03
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <MEXTI_VidSenseControl+0x26>
     c3c:	54 c0       	rjmp	.+168    	; 0xce6 <MEXTI_VidSenseControl+0xce>
     c3e:	2b 81       	ldd	r18, Y+3	; 0x03
     c40:	3c 81       	ldd	r19, Y+4	; 0x04
     c42:	22 30       	cpi	r18, 0x02	; 2
     c44:	31 05       	cpc	r19, r1
     c46:	09 f4       	brne	.+2      	; 0xc4a <MEXTI_VidSenseControl+0x32>
     c48:	96 c0       	rjmp	.+300    	; 0xd76 <MEXTI_VidSenseControl+0x15e>
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	09 f0       	breq	.+2      	; 0xc54 <MEXTI_VidSenseControl+0x3c>
     c52:	a6 c0       	rjmp	.+332    	; 0xda0 <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	88 23       	and	r24, r24
     c58:	79 f4       	brne	.+30     	; 0xc78 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8e 7f       	andi	r24, 0xFE	; 254
     c66:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
     c68:	a5 e5       	ldi	r26, 0x55	; 85
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e5 e5       	ldi	r30, 0x55	; 85
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8d 7f       	andi	r24, 0xFD	; 253
     c74:	8c 93       	st	X, r24
     c76:	94 c0       	rjmp	.+296    	; 0xda0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	79 f4       	brne	.+30     	; 0xc9c <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
     c7e:	a5 e5       	ldi	r26, 0x55	; 85
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e5 e5       	ldi	r30, 0x55	; 85
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	81 60       	ori	r24, 0x01	; 1
     c8a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
     c8c:	a5 e5       	ldi	r26, 0x55	; 85
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e5 e5       	ldi	r30, 0x55	; 85
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8d 7f       	andi	r24, 0xFD	; 253
     c98:	8c 93       	st	X, r24
     c9a:	82 c0       	rjmp	.+260    	; 0xda0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	79 f4       	brne	.+30     	; 0xcc0 <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
     ca2:	a5 e5       	ldi	r26, 0x55	; 85
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e5 e5       	ldi	r30, 0x55	; 85
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
     cb0:	a5 e5       	ldi	r26, 0x55	; 85
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e5 e5       	ldi	r30, 0x55	; 85
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	82 60       	ori	r24, 0x02	; 2
     cbc:	8c 93       	st	X, r24
     cbe:	70 c0       	rjmp	.+224    	; 0xda0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <MEXTI_VidSenseControl+0xb0>
     cc6:	6c c0       	rjmp	.+216    	; 0xda0 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
     cc8:	a5 e5       	ldi	r26, 0x55	; 85
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e5 e5       	ldi	r30, 0x55	; 85
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	81 60       	ori	r24, 0x01	; 1
     cd4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
     cd6:	a5 e5       	ldi	r26, 0x55	; 85
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e5 e5       	ldi	r30, 0x55	; 85
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	82 60       	ori	r24, 0x02	; 2
     ce2:	8c 93       	st	X, r24
     ce4:	5d c0       	rjmp	.+186    	; 0xda0 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	88 23       	and	r24, r24
     cea:	79 f4       	brne	.+30     	; 0xd0a <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
     cec:	a5 e5       	ldi	r26, 0x55	; 85
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e5 e5       	ldi	r30, 0x55	; 85
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8b 7f       	andi	r24, 0xFB	; 251
     cf8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
     cfa:	a5 e5       	ldi	r26, 0x55	; 85
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e5       	ldi	r30, 0x55	; 85
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	8c 93       	st	X, r24
     d08:	4b c0       	rjmp	.+150    	; 0xda0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	79 f4       	brne	.+30     	; 0xd2e <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
     d10:	a5 e5       	ldi	r26, 0x55	; 85
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e5 e5       	ldi	r30, 0x55	; 85
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	84 60       	ori	r24, 0x04	; 4
     d1c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
     d1e:	a5 e5       	ldi	r26, 0x55	; 85
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e5       	ldi	r30, 0x55	; 85
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	8c 93       	st	X, r24
     d2c:	39 c0       	rjmp	.+114    	; 0xda0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	82 30       	cpi	r24, 0x02	; 2
     d32:	79 f4       	brne	.+30     	; 0xd52 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
     d34:	a5 e5       	ldi	r26, 0x55	; 85
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e5 e5       	ldi	r30, 0x55	; 85
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8b 7f       	andi	r24, 0xFB	; 251
     d40:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
     d42:	a5 e5       	ldi	r26, 0x55	; 85
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e5 e5       	ldi	r30, 0x55	; 85
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	88 60       	ori	r24, 0x08	; 8
     d4e:	8c 93       	st	X, r24
     d50:	27 c0       	rjmp	.+78     	; 0xda0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	21 f5       	brne	.+72     	; 0xda0 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
     d58:	a5 e5       	ldi	r26, 0x55	; 85
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e5       	ldi	r30, 0x55	; 85
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	84 60       	ori	r24, 0x04	; 4
     d64:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
     d66:	a5 e5       	ldi	r26, 0x55	; 85
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e5 e5       	ldi	r30, 0x55	; 85
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	88 60       	ori	r24, 0x08	; 8
     d72:	8c 93       	st	X, r24
     d74:	15 c0       	rjmp	.+42     	; 0xda0 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	41 f4       	brne	.+16     	; 0xd8c <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
     d7c:	a4 e5       	ldi	r26, 0x54	; 84
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e4 e5       	ldi	r30, 0x54	; 84
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 7b       	andi	r24, 0xBF	; 191
     d88:	8c 93       	st	X, r24
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	39 f4       	brne	.+14     	; 0xda0 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
     d92:	a4 e5       	ldi	r26, 0x54	; 84
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e4 e5       	ldi	r30, 0x54	; 84
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 64       	ori	r24, 0x40	; 64
     d9e:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <MDIO_Error_State_SetPinDirection+0x6>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <MDIO_Error_State_SetPinDirection+0x8>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <MDIO_Error_State_SetPinDirection+0xa>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	8a 83       	std	Y+2, r24	; 0x02
     dbe:	6b 83       	std	Y+3, r22	; 0x03
     dc0:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	08 f0       	brcs	.+2      	; 0xdce <MDIO_Error_State_SetPinDirection+0x20>
     dcc:	e8 c0       	rjmp	.+464    	; 0xf9e <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	3e 83       	std	Y+6, r19	; 0x06
     dd6:	2d 83       	std	Y+5, r18	; 0x05
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	91 05       	cpc	r25, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <MDIO_Error_State_SetPinDirection+0x36>
     de2:	48 c0       	rjmp	.+144    	; 0xe74 <MDIO_Error_State_SetPinDirection+0xc6>
     de4:	2d 81       	ldd	r18, Y+5	; 0x05
     de6:	3e 81       	ldd	r19, Y+6	; 0x06
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	2c f4       	brge	.+10     	; 0xdf8 <MDIO_Error_State_SetPinDirection+0x4a>
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	71 f0       	breq	.+28     	; 0xe12 <MDIO_Error_State_SetPinDirection+0x64>
     df6:	d1 c0       	rjmp	.+418    	; 0xf9a <MDIO_Error_State_SetPinDirection+0x1ec>
     df8:	2d 81       	ldd	r18, Y+5	; 0x05
     dfa:	3e 81       	ldd	r19, Y+6	; 0x06
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <MDIO_Error_State_SetPinDirection+0x56>
     e02:	69 c0       	rjmp	.+210    	; 0xed6 <MDIO_Error_State_SetPinDirection+0x128>
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	91 05       	cpc	r25, r1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <MDIO_Error_State_SetPinDirection+0x62>
     e0e:	94 c0       	rjmp	.+296    	; 0xf38 <MDIO_Error_State_SetPinDirection+0x18a>
     e10:	c4 c0       	rjmp	.+392    	; 0xf9a <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	a1 f4       	brne	.+40     	; 0xe40 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
     e18:	aa e3       	ldi	r26, 0x3A	; 58
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	ea e3       	ldi	r30, 0x3A	; 58
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <MDIO_Error_State_SetPinDirection+0x88>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <MDIO_Error_State_SetPinDirection+0x84>
     e3a:	84 2b       	or	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	b0 c0       	rjmp	.+352    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	88 23       	and	r24, r24
     e44:	a9 f4       	brne	.+42     	; 0xe70 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
     e46:	aa e3       	ldi	r26, 0x3A	; 58
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ea e3       	ldi	r30, 0x3A	; 58
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <MDIO_Error_State_SetPinDirection+0xb6>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <MDIO_Error_State_SetPinDirection+0xb2>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	98 c0       	rjmp	.+304    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     e70:	19 82       	std	Y+1, r1	; 0x01
     e72:	96 c0       	rjmp	.+300    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	a1 f4       	brne	.+40     	; 0xea2 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
     e7a:	a7 e3       	ldi	r26, 0x37	; 55
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e7 e3       	ldi	r30, 0x37	; 55
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <MDIO_Error_State_SetPinDirection+0xea>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <MDIO_Error_State_SetPinDirection+0xe6>
     e9c:	84 2b       	or	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	7f c0       	rjmp	.+254    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	88 23       	and	r24, r24
     ea6:	a9 f4       	brne	.+42     	; 0xed2 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
     ea8:	a7 e3       	ldi	r26, 0x37	; 55
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e7 e3       	ldi	r30, 0x37	; 55
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <MDIO_Error_State_SetPinDirection+0x118>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <MDIO_Error_State_SetPinDirection+0x114>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	67 c0       	rjmp	.+206    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     ed2:	19 82       	std	Y+1, r1	; 0x01
     ed4:	65 c0       	rjmp	.+202    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	a1 f4       	brne	.+40     	; 0xf04 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
     edc:	a4 e3       	ldi	r26, 0x34	; 52
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e4 e3       	ldi	r30, 0x34	; 52
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <MDIO_Error_State_SetPinDirection+0x14c>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <MDIO_Error_State_SetPinDirection+0x148>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	4e c0       	rjmp	.+156    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	88 23       	and	r24, r24
     f08:	a9 f4       	brne	.+42     	; 0xf34 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
     f0a:	a4 e3       	ldi	r26, 0x34	; 52
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e4 e3       	ldi	r30, 0x34	; 52
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <MDIO_Error_State_SetPinDirection+0x17a>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <MDIO_Error_State_SetPinDirection+0x176>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	36 c0       	rjmp	.+108    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     f34:	19 82       	std	Y+1, r1	; 0x01
     f36:	34 c0       	rjmp	.+104    	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	a1 f4       	brne	.+40     	; 0xf66 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
     f3e:	a1 e3       	ldi	r26, 0x31	; 49
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e1 e3       	ldi	r30, 0x31	; 49
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <MDIO_Error_State_SetPinDirection+0x1ae>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <MDIO_Error_State_SetPinDirection+0x1aa>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	1d c0       	rjmp	.+58     	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	88 23       	and	r24, r24
     f6a:	a9 f4       	brne	.+42     	; 0xf96 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
     f6c:	a1 e3       	ldi	r26, 0x31	; 49
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e1 e3       	ldi	r30, 0x31	; 49
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <MDIO_Error_State_SetPinDirection+0x1dc>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <MDIO_Error_State_SetPinDirection+0x1d8>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     f96:	19 82       	std	Y+1, r1	; 0x01
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
     f9a:	19 82       	std	Y+1, r1	; 0x01
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
     f9e:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01

}
     fa2:	26 96       	adiw	r28, 0x06	; 6
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <MDIO_Error_State_SetPortDirection+0x6>
     fba:	00 d0       	rcall	.+0      	; 0xfbc <MDIO_Error_State_SetPortDirection+0x8>
     fbc:	0f 92       	push	r0
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	8a 83       	std	Y+2, r24	; 0x02
     fc4:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	19 f0       	breq	.+6      	; 0xfd6 <MDIO_Error_State_SetPortDirection+0x22>
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	88 23       	and	r24, r24
     fd4:	a9 f5       	brne	.+106    	; 0x1040 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	3d 83       	std	Y+5, r19	; 0x05
     fde:	2c 83       	std	Y+4, r18	; 0x04
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	91 05       	cpc	r25, r1
     fe8:	d1 f0       	breq	.+52     	; 0x101e <MDIO_Error_State_SetPortDirection+0x6a>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	2c f4       	brge	.+10     	; 0xffe <MDIO_Error_State_SetPortDirection+0x4a>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	61 f0       	breq	.+24     	; 0x1014 <MDIO_Error_State_SetPortDirection+0x60>
     ffc:	1f c0       	rjmp	.+62     	; 0x103c <MDIO_Error_State_SetPortDirection+0x88>
     ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    1000:	3d 81       	ldd	r19, Y+5	; 0x05
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	81 f0       	breq	.+32     	; 0x1028 <MDIO_Error_State_SetPortDirection+0x74>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	91 05       	cpc	r25, r1
    1010:	81 f0       	breq	.+32     	; 0x1032 <MDIO_Error_State_SetPortDirection+0x7e>
    1012:	14 c0       	rjmp	.+40     	; 0x103c <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    1014:	ea e3       	ldi	r30, 0x3A	; 58
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	80 83       	st	Z, r24
    101c:	12 c0       	rjmp	.+36     	; 0x1042 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    101e:	e7 e3       	ldi	r30, 0x37	; 55
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	80 83       	st	Z, r24
    1026:	0d c0       	rjmp	.+26     	; 0x1042 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    1028:	e4 e3       	ldi	r30, 0x34	; 52
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	80 83       	st	Z, r24
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    1032:	e1 e3       	ldi	r30, 0x31	; 49
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	80 83       	st	Z, r24
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    103c:	19 82       	std	Y+1, r1	; 0x01
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1040:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <MDIO_Error_State_SetPinValue+0x6>
    105a:	00 d0       	rcall	.+0      	; 0x105c <MDIO_Error_State_SetPinValue+0x8>
    105c:	00 d0       	rcall	.+0      	; 0x105e <MDIO_Error_State_SetPinValue+0xa>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	8a 83       	std	Y+2, r24	; 0x02
    1064:	6b 83       	std	Y+3, r22	; 0x03
    1066:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	88 30       	cpi	r24, 0x08	; 8
    1070:	08 f0       	brcs	.+2      	; 0x1074 <MDIO_Error_State_SetPinValue+0x20>
    1072:	e8 c0       	rjmp	.+464    	; 0x1244 <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3e 83       	std	Y+6, r19	; 0x06
    107c:	2d 83       	std	Y+5, r18	; 0x05
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	91 05       	cpc	r25, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <MDIO_Error_State_SetPinValue+0x36>
    1088:	48 c0       	rjmp	.+144    	; 0x111a <MDIO_Error_State_SetPinValue+0xc6>
    108a:	2d 81       	ldd	r18, Y+5	; 0x05
    108c:	3e 81       	ldd	r19, Y+6	; 0x06
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	2c f4       	brge	.+10     	; 0x109e <MDIO_Error_State_SetPinValue+0x4a>
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	71 f0       	breq	.+28     	; 0x10b8 <MDIO_Error_State_SetPinValue+0x64>
    109c:	d1 c0       	rjmp	.+418    	; 0x1240 <MDIO_Error_State_SetPinValue+0x1ec>
    109e:	2d 81       	ldd	r18, Y+5	; 0x05
    10a0:	3e 81       	ldd	r19, Y+6	; 0x06
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <MDIO_Error_State_SetPinValue+0x56>
    10a8:	69 c0       	rjmp	.+210    	; 0x117c <MDIO_Error_State_SetPinValue+0x128>
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <MDIO_Error_State_SetPinValue+0x62>
    10b4:	94 c0       	rjmp	.+296    	; 0x11de <MDIO_Error_State_SetPinValue+0x18a>
    10b6:	c4 c0       	rjmp	.+392    	; 0x1240 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	a1 f4       	brne	.+40     	; 0x10e6 <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    10be:	ab e3       	ldi	r26, 0x3B	; 59
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	eb e3       	ldi	r30, 0x3B	; 59
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <MDIO_Error_State_SetPinValue+0x88>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <MDIO_Error_State_SetPinValue+0x84>
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	b0 c0       	rjmp	.+352    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	88 23       	and	r24, r24
    10ea:	a9 f4       	brne	.+42     	; 0x1116 <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    10ec:	ab e3       	ldi	r26, 0x3B	; 59
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	eb e3       	ldi	r30, 0x3B	; 59
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <MDIO_Error_State_SetPinValue+0xb6>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <MDIO_Error_State_SetPinValue+0xb2>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	98 c0       	rjmp	.+304    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1116:	19 82       	std	Y+1, r1	; 0x01
    1118:	96 c0       	rjmp	.+300    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	a1 f4       	brne	.+40     	; 0x1148 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    1120:	a8 e3       	ldi	r26, 0x38	; 56
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e8 e3       	ldi	r30, 0x38	; 56
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <MDIO_Error_State_SetPinValue+0xea>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <MDIO_Error_State_SetPinValue+0xe6>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	7f c0       	rjmp	.+254    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	88 23       	and	r24, r24
    114c:	a9 f4       	brne	.+42     	; 0x1178 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    114e:	a8 e3       	ldi	r26, 0x38	; 56
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e3       	ldi	r30, 0x38	; 56
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <MDIO_Error_State_SetPinValue+0x118>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <MDIO_Error_State_SetPinValue+0x114>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	67 c0       	rjmp	.+206    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	65 c0       	rjmp	.+202    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	a1 f4       	brne	.+40     	; 0x11aa <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <MDIO_Error_State_SetPinValue+0x14c>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <MDIO_Error_State_SetPinValue+0x148>
    11a4:	84 2b       	or	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	4e c0       	rjmp	.+156    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	88 23       	and	r24, r24
    11ae:	a9 f4       	brne	.+42     	; 0x11da <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    11b0:	a5 e3       	ldi	r26, 0x35	; 53
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e5 e3       	ldi	r30, 0x35	; 53
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <MDIO_Error_State_SetPinValue+0x17a>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <MDIO_Error_State_SetPinValue+0x176>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	36 c0       	rjmp	.+108    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    11da:	19 82       	std	Y+1, r1	; 0x01
    11dc:	34 c0       	rjmp	.+104    	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	a1 f4       	brne	.+40     	; 0x120c <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    11e4:	a2 e3       	ldi	r26, 0x32	; 50
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e2 e3       	ldi	r30, 0x32	; 50
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <MDIO_Error_State_SetPinValue+0x1ae>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <MDIO_Error_State_SetPinValue+0x1aa>
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	1d c0       	rjmp	.+58     	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	88 23       	and	r24, r24
    1210:	a9 f4       	brne	.+42     	; 0x123c <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    1212:	a2 e3       	ldi	r26, 0x32	; 50
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e2 e3       	ldi	r30, 0x32	; 50
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <MDIO_Error_State_SetPinValue+0x1dc>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <MDIO_Error_State_SetPinValue+0x1d8>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    123c:	19 82       	std	Y+1, r1	; 0x01
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    1240:	19 82       	std	Y+1, r1	; 0x01
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    1244:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    1246:	89 81       	ldd	r24, Y+1	; 0x01

}
    1248:	26 96       	adiw	r28, 0x06	; 6
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <MDIO_Error_State_SetPortValue+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <MDIO_Error_State_SetPortValue+0x8>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	8a 83       	std	Y+2, r24	; 0x02
    126a:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	91 05       	cpc	r25, r1
    1282:	d1 f0       	breq	.+52     	; 0x12b8 <MDIO_Error_State_SetPortValue+0x5e>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	2c f4       	brge	.+10     	; 0x1298 <MDIO_Error_State_SetPortValue+0x3e>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	61 f0       	breq	.+24     	; 0x12ae <MDIO_Error_State_SetPortValue+0x54>
    1296:	1f c0       	rjmp	.+62     	; 0x12d6 <MDIO_Error_State_SetPortValue+0x7c>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 05       	cpc	r19, r1
    12a0:	81 f0       	breq	.+32     	; 0x12c2 <MDIO_Error_State_SetPortValue+0x68>
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	91 05       	cpc	r25, r1
    12aa:	81 f0       	breq	.+32     	; 0x12cc <MDIO_Error_State_SetPortValue+0x72>
    12ac:	14 c0       	rjmp	.+40     	; 0x12d6 <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    12ae:	eb e3       	ldi	r30, 0x3B	; 59
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	80 83       	st	Z, r24
    12b6:	10 c0       	rjmp	.+32     	; 0x12d8 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	80 83       	st	Z, r24
    12c0:	0b c0       	rjmp	.+22     	; 0x12d8 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    12c2:	e5 e3       	ldi	r30, 0x35	; 53
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	80 83       	st	Z, r24
    12ca:	06 c0       	rjmp	.+12     	; 0x12d8 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    12cc:	e2 e3       	ldi	r30, 0x32	; 50
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	80 83       	st	Z, r24
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    12d6:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	27 97       	sbiw	r28, 0x07	; 7
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	6b 83       	std	Y+3, r22	; 0x03
    1302:	5d 83       	std	Y+5, r21	; 0x05
    1304:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	88 30       	cpi	r24, 0x08	; 8
    130e:	08 f0       	brcs	.+2      	; 0x1312 <MDIO_Error_State_GetPinValue+0x28>
    1310:	79 c0       	rjmp	.+242    	; 0x1404 <MDIO_Error_State_GetPinValue+0x11a>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <MDIO_Error_State_GetPinValue+0x34>
    131c:	73 c0       	rjmp	.+230    	; 0x1404 <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3f 83       	std	Y+7, r19	; 0x07
    1326:	2e 83       	std	Y+6, r18	; 0x06
    1328:	4e 81       	ldd	r20, Y+6	; 0x06
    132a:	5f 81       	ldd	r21, Y+7	; 0x07
    132c:	41 30       	cpi	r20, 0x01	; 1
    132e:	51 05       	cpc	r21, r1
    1330:	59 f1       	breq	.+86     	; 0x1388 <MDIO_Error_State_GetPinValue+0x9e>
    1332:	8e 81       	ldd	r24, Y+6	; 0x06
    1334:	9f 81       	ldd	r25, Y+7	; 0x07
    1336:	82 30       	cpi	r24, 0x02	; 2
    1338:	91 05       	cpc	r25, r1
    133a:	34 f4       	brge	.+12     	; 0x1348 <MDIO_Error_State_GetPinValue+0x5e>
    133c:	2e 81       	ldd	r18, Y+6	; 0x06
    133e:	3f 81       	ldd	r19, Y+7	; 0x07
    1340:	21 15       	cp	r18, r1
    1342:	31 05       	cpc	r19, r1
    1344:	69 f0       	breq	.+26     	; 0x1360 <MDIO_Error_State_GetPinValue+0x76>
    1346:	5c c0       	rjmp	.+184    	; 0x1400 <MDIO_Error_State_GetPinValue+0x116>
    1348:	4e 81       	ldd	r20, Y+6	; 0x06
    134a:	5f 81       	ldd	r21, Y+7	; 0x07
    134c:	42 30       	cpi	r20, 0x02	; 2
    134e:	51 05       	cpc	r21, r1
    1350:	79 f1       	breq	.+94     	; 0x13b0 <MDIO_Error_State_GetPinValue+0xc6>
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	91 05       	cpc	r25, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <MDIO_Error_State_GetPinValue+0x74>
    135c:	3d c0       	rjmp	.+122    	; 0x13d8 <MDIO_Error_State_GetPinValue+0xee>
    135e:	50 c0       	rjmp	.+160    	; 0x1400 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    1360:	e9 e3       	ldi	r30, 0x39	; 57
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a9 01       	movw	r20, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <MDIO_Error_State_GetPinValue+0x8e>
    1374:	55 95       	asr	r21
    1376:	47 95       	ror	r20
    1378:	8a 95       	dec	r24
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <MDIO_Error_State_GetPinValue+0x8a>
    137c:	ca 01       	movw	r24, r20
    137e:	81 70       	andi	r24, 0x01	; 1
    1380:	ec 81       	ldd	r30, Y+4	; 0x04
    1382:	fd 81       	ldd	r31, Y+5	; 0x05
    1384:	80 83       	st	Z, r24
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1388:	e6 e3       	ldi	r30, 0x36	; 54
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <MDIO_Error_State_GetPinValue+0xb6>
    139c:	55 95       	asr	r21
    139e:	47 95       	ror	r20
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <MDIO_Error_State_GetPinValue+0xb2>
    13a4:	ca 01       	movw	r24, r20
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	ec 81       	ldd	r30, Y+4	; 0x04
    13aa:	fd 81       	ldd	r31, Y+5	; 0x05
    13ac:	80 83       	st	Z, r24
    13ae:	2b c0       	rjmp	.+86     	; 0x1406 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    13b0:	e3 e3       	ldi	r30, 0x33	; 51
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <MDIO_Error_State_GetPinValue+0xde>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <MDIO_Error_State_GetPinValue+0xda>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	ec 81       	ldd	r30, Y+4	; 0x04
    13d2:	fd 81       	ldd	r31, Y+5	; 0x05
    13d4:	80 83       	st	Z, r24
    13d6:	17 c0       	rjmp	.+46     	; 0x1406 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    13d8:	e0 e3       	ldi	r30, 0x30	; 48
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <MDIO_Error_State_GetPinValue+0x106>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <MDIO_Error_State_GetPinValue+0x102>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	ec 81       	ldd	r30, Y+4	; 0x04
    13fa:	fd 81       	ldd	r31, Y+5	; 0x05
    13fc:	80 83       	st	Z, r24
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1404:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1406:	89 81       	ldd	r24, Y+1	; 0x01

}
    1408:	27 96       	adiw	r28, 0x07	; 7
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <MDIO_Error_State_SetNippleValue+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <MDIO_Error_State_SetNippleValue+0x8>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <MDIO_Error_State_SetNippleValue+0xa>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	6b 83       	std	Y+3, r22	; 0x03
    142c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	85 30       	cpi	r24, 0x05	; 5
    1436:	08 f0       	brcs	.+2      	; 0x143a <MDIO_Error_State_SetNippleValue+0x20>
    1438:	c9 c0       	rjmp	.+402    	; 0x15cc <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3e 83       	std	Y+6, r19	; 0x06
    1442:	2d 83       	std	Y+5, r18	; 0x05
    1444:	6d 81       	ldd	r22, Y+5	; 0x05
    1446:	7e 81       	ldd	r23, Y+6	; 0x06
    1448:	61 30       	cpi	r22, 0x01	; 1
    144a:	71 05       	cpc	r23, r1
    144c:	09 f4       	brne	.+2      	; 0x1450 <MDIO_Error_State_SetNippleValue+0x36>
    144e:	41 c0       	rjmp	.+130    	; 0x14d2 <MDIO_Error_State_SetNippleValue+0xb8>
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	91 05       	cpc	r25, r1
    1458:	34 f4       	brge	.+12     	; 0x1466 <MDIO_Error_State_SetNippleValue+0x4c>
    145a:	2d 81       	ldd	r18, Y+5	; 0x05
    145c:	3e 81       	ldd	r19, Y+6	; 0x06
    145e:	21 15       	cp	r18, r1
    1460:	31 05       	cpc	r19, r1
    1462:	71 f0       	breq	.+28     	; 0x1480 <MDIO_Error_State_SetNippleValue+0x66>
    1464:	b1 c0       	rjmp	.+354    	; 0x15c8 <MDIO_Error_State_SetNippleValue+0x1ae>
    1466:	6d 81       	ldd	r22, Y+5	; 0x05
    1468:	7e 81       	ldd	r23, Y+6	; 0x06
    146a:	62 30       	cpi	r22, 0x02	; 2
    146c:	71 05       	cpc	r23, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <MDIO_Error_State_SetNippleValue+0x58>
    1470:	59 c0       	rjmp	.+178    	; 0x1524 <MDIO_Error_State_SetNippleValue+0x10a>
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <MDIO_Error_State_SetNippleValue+0x64>
    147c:	7c c0       	rjmp	.+248    	; 0x1576 <MDIO_Error_State_SetNippleValue+0x15c>
    147e:	a4 c0       	rjmp	.+328    	; 0x15c8 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1480:	ab e3       	ldi	r26, 0x3B	; 59
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	eb e3       	ldi	r30, 0x3B	; 59
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8f e0       	ldi	r24, 0x0F	; 15
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <MDIO_Error_State_SetNippleValue+0x82>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	2a 95       	dec	r18
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <MDIO_Error_State_SetNippleValue+0x7e>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    14a6:	ab e3       	ldi	r26, 0x3B	; 59
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	eb e3       	ldi	r30, 0x3B	; 59
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	b9 01       	movw	r22, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <MDIO_Error_State_SetNippleValue+0xac>
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <MDIO_Error_State_SetNippleValue+0xa8>
    14ca:	cb 01       	movw	r24, r22
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	7e c0       	rjmp	.+252    	; 0x15ce <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    14d2:	a8 e3       	ldi	r26, 0x38	; 56
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e8 e3       	ldi	r30, 0x38	; 56
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8f e0       	ldi	r24, 0x0F	; 15
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <MDIO_Error_State_SetNippleValue+0xd4>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <MDIO_Error_State_SetNippleValue+0xd0>
    14f2:	80 95       	com	r24
    14f4:	84 23       	and	r24, r20
    14f6:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    14f8:	a8 e3       	ldi	r26, 0x38	; 56
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e8 e3       	ldi	r30, 0x38	; 56
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	b9 01       	movw	r22, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <MDIO_Error_State_SetNippleValue+0xfe>
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	8a 95       	dec	r24
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <MDIO_Error_State_SetNippleValue+0xfa>
    151c:	cb 01       	movw	r24, r22
    151e:	84 2b       	or	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	55 c0       	rjmp	.+170    	; 0x15ce <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1524:	a5 e3       	ldi	r26, 0x35	; 53
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e5 e3       	ldi	r30, 0x35	; 53
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8f e0       	ldi	r24, 0x0F	; 15
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <MDIO_Error_State_SetNippleValue+0x126>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	2a 95       	dec	r18
    1542:	e2 f7       	brpl	.-8      	; 0x153c <MDIO_Error_State_SetNippleValue+0x122>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    154a:	a5 e3       	ldi	r26, 0x35	; 53
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e3       	ldi	r30, 0x35	; 53
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	b9 01       	movw	r22, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <MDIO_Error_State_SetNippleValue+0x150>
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	8a 95       	dec	r24
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <MDIO_Error_State_SetNippleValue+0x14c>
    156e:	cb 01       	movw	r24, r22
    1570:	84 2b       	or	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	2c c0       	rjmp	.+88     	; 0x15ce <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1576:	a2 e3       	ldi	r26, 0x32	; 50
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e2 e3       	ldi	r30, 0x32	; 50
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	8f e0       	ldi	r24, 0x0F	; 15
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <MDIO_Error_State_SetNippleValue+0x178>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	2a 95       	dec	r18
    1594:	e2 f7       	brpl	.-8      	; 0x158e <MDIO_Error_State_SetNippleValue+0x174>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    159c:	a2 e3       	ldi	r26, 0x32	; 50
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e2 e3       	ldi	r30, 0x32	; 50
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	b9 01       	movw	r22, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <MDIO_Error_State_SetNippleValue+0x1a2>
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	8a 95       	dec	r24
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <MDIO_Error_State_SetNippleValue+0x19e>
    15c0:	cb 01       	movw	r24, r22
    15c2:	84 2b       	or	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    15cc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d0:	26 96       	adiw	r28, 0x06	; 6
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <MDIO_VidActivePullUP+0x6>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	6a 81       	ldd	r22, Y+2	; 0x02
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	6a 81       	ldd	r22, Y+2	; 0x02
    15fe:	41 e0       	ldi	r20, 0x01	; 1
    1600:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>

}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <HSWITCH_VidInit_PullUP+0x6>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    161c:	e9 81       	ldd	r30, Y+1	; 0x01
    161e:	fa 81       	ldd	r31, Y+2	; 0x02
    1620:	81 81       	ldd	r24, Z+1	; 0x01
    1622:	e9 81       	ldd	r30, Y+1	; 0x01
    1624:	fa 81       	ldd	r31, Y+2	; 0x02
    1626:	90 81       	ld	r25, Z
    1628:	69 2f       	mov	r22, r25
    162a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MDIO_VidActivePullUP>
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <HSWITCH_u8SwitchState+0x6>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	9b 83       	std	Y+3, r25	; 0x03
    1646:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    164c:	ea 81       	ldd	r30, Y+2	; 0x02
    164e:	fb 81       	ldd	r31, Y+3	; 0x03
    1650:	81 81       	ldd	r24, Z+1	; 0x01
    1652:	ea 81       	ldd	r30, Y+2	; 0x02
    1654:	fb 81       	ldd	r31, Y+3	; 0x03
    1656:	90 81       	ld	r25, Z
    1658:	69 2f       	mov	r22, r25
    165a:	9e 01       	movw	r18, r28
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	3f 4f       	sbci	r19, 0xFF	; 255
    1660:	a9 01       	movw	r20, r18
    1662:	0e 94 75 09 	call	0x12ea	; 0x12ea <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <HSEVEN_SEGMENT_VidInit+0x6>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1682:	e9 81       	ldd	r30, Y+1	; 0x01
    1684:	fa 81       	ldd	r31, Y+2	; 0x02
    1686:	80 81       	ld	r24, Z
    1688:	6f ef       	ldi	r22, 0xFF	; 255
    168a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <MDIO_Error_State_SetPortDirection>
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <HSEVEN_SEGMENT_VidOff+0x6>
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    16aa:	e9 81       	ldd	r30, Y+1	; 0x01
    16ac:	fa 81       	ldd	r31, Y+2	; 0x02
    16ae:	81 81       	ldd	r24, Z+1	; 0x01
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	31 f4       	brne	.+12     	; 0x16c0 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    16b4:	e9 81       	ldd	r30, Y+1	; 0x01
    16b6:	fa 81       	ldd	r31, Y+2	; 0x02
    16b8:	80 81       	ld	r24, Z
    16ba:	6b 81       	ldd	r22, Y+3	; 0x03
    16bc:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	fa 81       	ldd	r31, Y+2	; 0x02
    16c4:	81 81       	ldd	r24, Z+1	; 0x01
    16c6:	88 23       	and	r24, r24
    16c8:	51 f4       	brne	.+20     	; 0x16de <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    16ca:	e9 81       	ldd	r30, Y+1	; 0x01
    16cc:	fa 81       	ldd	r31, Y+2	; 0x02
    16ce:	20 81       	ld	r18, Z
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	98 2f       	mov	r25, r24
    16d4:	90 95       	com	r25
    16d6:	82 2f       	mov	r24, r18
    16d8:	69 2f       	mov	r22, r25
    16da:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
	}
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	27 97       	sbiw	r28, 0x07	; 7
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	81 81       	ldd	r24, Z+1	; 0x01
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	09 f0       	breq	.+2      	; 0x1710 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    170e:	9b c0       	rjmp	.+310    	; 0x1846 <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	3f 83       	std	Y+7, r19	; 0x07
    1718:	2e 83       	std	Y+6, r18	; 0x06
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	9f 81       	ldd	r25, Y+7	; 0x07
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	91 05       	cpc	r25, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1724:	5f c0       	rjmp	.+190    	; 0x17e4 <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1726:	2e 81       	ldd	r18, Y+6	; 0x06
    1728:	3f 81       	ldd	r19, Y+7	; 0x07
    172a:	25 30       	cpi	r18, 0x05	; 5
    172c:	31 05       	cpc	r19, r1
    172e:	dc f4       	brge	.+54     	; 0x1766 <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1730:	8e 81       	ldd	r24, Y+6	; 0x06
    1732:	9f 81       	ldd	r25, Y+7	; 0x07
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    173a:	3f c0       	rjmp	.+126    	; 0x17ba <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    173c:	2e 81       	ldd	r18, Y+6	; 0x06
    173e:	3f 81       	ldd	r19, Y+7	; 0x07
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	2c f4       	brge	.+10     	; 0x1750 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1746:	8e 81       	ldd	r24, Y+6	; 0x06
    1748:	9f 81       	ldd	r25, Y+7	; 0x07
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	79 f1       	breq	.+94     	; 0x17ac <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    174e:	74 c0       	rjmp	.+232    	; 0x1838 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1750:	2e 81       	ldd	r18, Y+6	; 0x06
    1752:	3f 81       	ldd	r19, Y+7	; 0x07
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	b9 f1       	breq	.+110    	; 0x17c8 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    175a:	8e 81       	ldd	r24, Y+6	; 0x06
    175c:	9f 81       	ldd	r25, Y+7	; 0x07
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	c9 f1       	breq	.+114    	; 0x17d6 <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1764:	69 c0       	rjmp	.+210    	; 0x1838 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1766:	2e 81       	ldd	r18, Y+6	; 0x06
    1768:	3f 81       	ldd	r19, Y+7	; 0x07
    176a:	27 30       	cpi	r18, 0x07	; 7
    176c:	31 05       	cpc	r19, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1770:	4e c0       	rjmp	.+156    	; 0x180e <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	88 30       	cpi	r24, 0x08	; 8
    1778:	91 05       	cpc	r25, r1
    177a:	5c f4       	brge	.+22     	; 0x1792 <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    177c:	2e 81       	ldd	r18, Y+6	; 0x06
    177e:	3f 81       	ldd	r19, Y+7	; 0x07
    1780:	25 30       	cpi	r18, 0x05	; 5
    1782:	31 05       	cpc	r19, r1
    1784:	b1 f1       	breq	.+108    	; 0x17f2 <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1786:	8e 81       	ldd	r24, Y+6	; 0x06
    1788:	9f 81       	ldd	r25, Y+7	; 0x07
    178a:	86 30       	cpi	r24, 0x06	; 6
    178c:	91 05       	cpc	r25, r1
    178e:	c1 f1       	breq	.+112    	; 0x1800 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1790:	53 c0       	rjmp	.+166    	; 0x1838 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1792:	2e 81       	ldd	r18, Y+6	; 0x06
    1794:	3f 81       	ldd	r19, Y+7	; 0x07
    1796:	28 30       	cpi	r18, 0x08	; 8
    1798:	31 05       	cpc	r19, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    179c:	3f c0       	rjmp	.+126    	; 0x181c <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	89 30       	cpi	r24, 0x09	; 9
    17a4:	91 05       	cpc	r25, r1
    17a6:	09 f4       	brne	.+2      	; 0x17aa <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    17a8:	40 c0       	rjmp	.+128    	; 0x182a <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    17aa:	46 c0       	rjmp	.+140    	; 0x1838 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    17ac:	e9 81       	ldd	r30, Y+1	; 0x01
    17ae:	fa 81       	ldd	r31, Y+2	; 0x02
    17b0:	80 81       	ld	r24, Z
    17b2:	6f e3       	ldi	r22, 0x3F	; 63
    17b4:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    17b8:	e6 c0       	rjmp	.+460    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    17ba:	e9 81       	ldd	r30, Y+1	; 0x01
    17bc:	fa 81       	ldd	r31, Y+2	; 0x02
    17be:	80 81       	ld	r24, Z
    17c0:	66 e0       	ldi	r22, 0x06	; 6
    17c2:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    17c6:	df c0       	rjmp	.+446    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	80 81       	ld	r24, Z
    17ce:	6b e5       	ldi	r22, 0x5B	; 91
    17d0:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    17d4:	d8 c0       	rjmp	.+432    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    17d6:	e9 81       	ldd	r30, Y+1	; 0x01
    17d8:	fa 81       	ldd	r31, Y+2	; 0x02
    17da:	80 81       	ld	r24, Z
    17dc:	6f e4       	ldi	r22, 0x4F	; 79
    17de:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    17e2:	d1 c0       	rjmp	.+418    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    17e4:	e9 81       	ldd	r30, Y+1	; 0x01
    17e6:	fa 81       	ldd	r31, Y+2	; 0x02
    17e8:	80 81       	ld	r24, Z
    17ea:	66 e6       	ldi	r22, 0x66	; 102
    17ec:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    17f0:	ca c0       	rjmp	.+404    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	80 81       	ld	r24, Z
    17f8:	6d e6       	ldi	r22, 0x6D	; 109
    17fa:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    17fe:	c3 c0       	rjmp	.+390    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	80 81       	ld	r24, Z
    1806:	6d e7       	ldi	r22, 0x7D	; 125
    1808:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    180c:	bc c0       	rjmp	.+376    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    180e:	e9 81       	ldd	r30, Y+1	; 0x01
    1810:	fa 81       	ldd	r31, Y+2	; 0x02
    1812:	80 81       	ld	r24, Z
    1814:	67 e0       	ldi	r22, 0x07	; 7
    1816:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    181a:	b5 c0       	rjmp	.+362    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	80 81       	ld	r24, Z
    1822:	6f e7       	ldi	r22, 0x7F	; 127
    1824:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1828:	ae c0       	rjmp	.+348    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	80 81       	ld	r24, Z
    1830:	6f e6       	ldi	r22, 0x6F	; 111
    1832:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1836:	a7 c0       	rjmp	.+334    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	80 81       	ld	r24, Z
    183e:	69 e7       	ldi	r22, 0x79	; 121
    1840:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1844:	a0 c0       	rjmp	.+320    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    1846:	e9 81       	ldd	r30, Y+1	; 0x01
    1848:	fa 81       	ldd	r31, Y+2	; 0x02
    184a:	81 81       	ldd	r24, Z+1	; 0x01
    184c:	88 23       	and	r24, r24
    184e:	09 f0       	breq	.+2      	; 0x1852 <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    1850:	9a c0       	rjmp	.+308    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3d 83       	std	Y+5, r19	; 0x05
    185a:	2c 83       	std	Y+4, r18	; 0x04
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	84 30       	cpi	r24, 0x04	; 4
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    1866:	5f c0       	rjmp	.+190    	; 0x1926 <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	25 30       	cpi	r18, 0x05	; 5
    186e:	31 05       	cpc	r19, r1
    1870:	dc f4       	brge	.+54     	; 0x18a8 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	22 30       	cpi	r18, 0x02	; 2
    1884:	31 05       	cpc	r19, r1
    1886:	2c f4       	brge	.+10     	; 0x1892 <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	79 f1       	breq	.+94     	; 0x18ee <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1890:	74 c0       	rjmp	.+232    	; 0x197a <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1892:	2c 81       	ldd	r18, Y+4	; 0x04
    1894:	3d 81       	ldd	r19, Y+5	; 0x05
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	b9 f1       	breq	.+110    	; 0x190a <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	9d 81       	ldd	r25, Y+5	; 0x05
    18a0:	83 30       	cpi	r24, 0x03	; 3
    18a2:	91 05       	cpc	r25, r1
    18a4:	c9 f1       	breq	.+114    	; 0x1918 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    18a6:	69 c0       	rjmp	.+210    	; 0x197a <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    18a8:	2c 81       	ldd	r18, Y+4	; 0x04
    18aa:	3d 81       	ldd	r19, Y+5	; 0x05
    18ac:	27 30       	cpi	r18, 0x07	; 7
    18ae:	31 05       	cpc	r19, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    18b2:	4e c0       	rjmp	.+156    	; 0x1950 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	9d 81       	ldd	r25, Y+5	; 0x05
    18b8:	88 30       	cpi	r24, 0x08	; 8
    18ba:	91 05       	cpc	r25, r1
    18bc:	5c f4       	brge	.+22     	; 0x18d4 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    18be:	2c 81       	ldd	r18, Y+4	; 0x04
    18c0:	3d 81       	ldd	r19, Y+5	; 0x05
    18c2:	25 30       	cpi	r18, 0x05	; 5
    18c4:	31 05       	cpc	r19, r1
    18c6:	b1 f1       	breq	.+108    	; 0x1934 <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	9d 81       	ldd	r25, Y+5	; 0x05
    18cc:	86 30       	cpi	r24, 0x06	; 6
    18ce:	91 05       	cpc	r25, r1
    18d0:	c1 f1       	breq	.+112    	; 0x1942 <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    18d2:	53 c0       	rjmp	.+166    	; 0x197a <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    18d4:	2c 81       	ldd	r18, Y+4	; 0x04
    18d6:	3d 81       	ldd	r19, Y+5	; 0x05
    18d8:	28 30       	cpi	r18, 0x08	; 8
    18da:	31 05       	cpc	r19, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    18de:	3f c0       	rjmp	.+126    	; 0x195e <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	89 30       	cpi	r24, 0x09	; 9
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    18ea:	40 c0       	rjmp	.+128    	; 0x196c <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    18ec:	46 c0       	rjmp	.+140    	; 0x197a <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    18ee:	e9 81       	ldd	r30, Y+1	; 0x01
    18f0:	fa 81       	ldd	r31, Y+2	; 0x02
    18f2:	80 81       	ld	r24, Z
    18f4:	60 ec       	ldi	r22, 0xC0	; 192
    18f6:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    18fa:	45 c0       	rjmp	.+138    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    18fc:	e9 81       	ldd	r30, Y+1	; 0x01
    18fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1900:	80 81       	ld	r24, Z
    1902:	69 ef       	ldi	r22, 0xF9	; 249
    1904:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1908:	3e c0       	rjmp	.+124    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    190a:	e9 81       	ldd	r30, Y+1	; 0x01
    190c:	fa 81       	ldd	r31, Y+2	; 0x02
    190e:	80 81       	ld	r24, Z
    1910:	64 ea       	ldi	r22, 0xA4	; 164
    1912:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1916:	37 c0       	rjmp	.+110    	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    1918:	e9 81       	ldd	r30, Y+1	; 0x01
    191a:	fa 81       	ldd	r31, Y+2	; 0x02
    191c:	80 81       	ld	r24, Z
    191e:	60 eb       	ldi	r22, 0xB0	; 176
    1920:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1924:	30 c0       	rjmp	.+96     	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	80 81       	ld	r24, Z
    192c:	69 e9       	ldi	r22, 0x99	; 153
    192e:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1932:	29 c0       	rjmp	.+82     	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    1934:	e9 81       	ldd	r30, Y+1	; 0x01
    1936:	fa 81       	ldd	r31, Y+2	; 0x02
    1938:	80 81       	ld	r24, Z
    193a:	62 e9       	ldi	r22, 0x92	; 146
    193c:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1940:	22 c0       	rjmp	.+68     	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	80 81       	ld	r24, Z
    1948:	62 e8       	ldi	r22, 0x82	; 130
    194a:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    194e:	1b c0       	rjmp	.+54     	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	80 81       	ld	r24, Z
    1956:	68 ef       	ldi	r22, 0xF8	; 248
    1958:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    195e:	e9 81       	ldd	r30, Y+1	; 0x01
    1960:	fa 81       	ldd	r31, Y+2	; 0x02
    1962:	80 81       	ld	r24, Z
    1964:	60 e8       	ldi	r22, 0x80	; 128
    1966:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    196a:	0d c0       	rjmp	.+26     	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	80 81       	ld	r24, Z
    1972:	60 e9       	ldi	r22, 0x90	; 144
    1974:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    197a:	e9 81       	ldd	r30, Y+1	; 0x01
    197c:	fa 81       	ldd	r31, Y+2	; 0x02
    197e:	80 81       	ld	r24, Z
    1980:	66 e8       	ldi	r22, 0x86	; 134
    1982:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
	}
}
}
    1986:	27 96       	adiw	r28, 0x07	; 7
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <HLED_VidInit+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    19a6:	e9 81       	ldd	r30, Y+1	; 0x01
    19a8:	fa 81       	ldd	r31, Y+2	; 0x02
    19aa:	81 81       	ldd	r24, Z+1	; 0x01
    19ac:	e9 81       	ldd	r30, Y+1	; 0x01
    19ae:	fa 81       	ldd	r31, Y+2	; 0x02
    19b0:	90 81       	ld	r25, Z
    19b2:	69 2f       	mov	r22, r25
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <HLED_VidLed_On+0x6>
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	81 81       	ldd	r24, Z+1	; 0x01
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	90 81       	ld	r25, Z
    19de:	69 2f       	mov	r22, r25
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <HLED_VidLed_Off+0x6>
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	81 81       	ldd	r24, Z+1	; 0x01
    1a04:	e9 81       	ldd	r30, Y+1	; 0x01
    1a06:	fa 81       	ldd	r31, Y+2	; 0x02
    1a08:	90 81       	ld	r25, Z
    1a0a:	69 2f       	mov	r22, r25
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <HLED_VidLed_Toggle+0x6>
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    1a2a:	80 91 7e 00 	lds	r24, 0x007E
    1a2e:	88 23       	and	r24, r24
    1a30:	71 f4       	brne	.+28     	; 0x1a4e <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1a32:	e9 81       	ldd	r30, Y+1	; 0x01
    1a34:	fa 81       	ldd	r31, Y+2	; 0x02
    1a36:	81 81       	ldd	r24, Z+1	; 0x01
    1a38:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3c:	90 81       	ld	r25, Z
    1a3e:	69 2f       	mov	r22, r25
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
		Flag=1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	80 93 7e 00 	sts	0x007E, r24
    1a4c:	0c c0       	rjmp	.+24     	; 0x1a66 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	81 81       	ldd	r24, Z+1	; 0x01
    1a54:	e9 81       	ldd	r30, Y+1	; 0x01
    1a56:	fa 81       	ldd	r31, Y+2	; 0x02
    1a58:	90 81       	ld	r25, Z
    1a5a:	69 2f       	mov	r22, r25
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
		Flag=0;
    1a62:	10 92 7e 00 	sts	0x007E, r1
	}
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	62 e0       	ldi	r22, 0x02	; 2
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	62 e0       	ldi	r22, 0x02	; 2
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	62 e0       	ldi	r22, 0x02	; 2
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    1aaa:	85 e0       	ldi	r24, 0x05	; 5
    1aac:	62 e0       	ldi	r22, 0x02	; 2
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    1ab4:	86 e0       	ldi	r24, 0x06	; 6
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    1abe:	87 e0       	ldi	r24, 0x07	; 7
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	62 e0       	ldi	r22, 0x02	; 2
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	62 e0       	ldi	r22, 0x02	; 2
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	62 e0       	ldi	r22, 0x02	; 2
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	62 e0       	ldi	r22, 0x02	; 2
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    1af0:	84 e0       	ldi	r24, 0x04	; 4
    1af2:	62 e0       	ldi	r22, 0x02	; 2
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    1afa:	85 e0       	ldi	r24, 0x05	; 5
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    1b04:	86 e0       	ldi	r24, 0x06	; 6
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    1b0e:	87 e0       	ldi	r24, 0x07	; 7
    1b10:	62 e0       	ldi	r22, 0x02	; 2
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>

}
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	62 97       	sbiw	r28, 0x12	; 18
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	88 8b       	std	Y+16, r24	; 0x10
    1b3a:	b5 c0       	rjmp	.+362    	; 0x1ca6 <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    1b3c:	88 89       	ldd	r24, Y+16	; 0x10
    1b3e:	62 e0       	ldi	r22, 0x02	; 2
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    1b46:	19 8a       	std	Y+17, r1	; 0x11
    1b48:	a2 c0       	rjmp	.+324    	; 0x1c8e <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    1b4a:	9e 01       	movw	r18, r28
    1b4c:	2e 5e       	subi	r18, 0xEE	; 238
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	89 89       	ldd	r24, Y+17	; 0x11
    1b52:	62 e0       	ldi	r22, 0x02	; 2
    1b54:	a9 01       	movw	r20, r18
    1b56:	0e 94 75 09 	call	0x12ea	; 0x12ea <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    1b5a:	8a 89       	ldd	r24, Y+18	; 0x12
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <HKPD_U8GetKeyPressed+0x44>
    1b60:	93 c0       	rjmp	.+294    	; 0x1c88 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    1b62:	88 89       	ldd	r24, Y+16	; 0x10
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	ac 01       	movw	r20, r24
    1b6a:	44 50       	subi	r20, 0x04	; 4
    1b6c:	50 40       	sbci	r21, 0x00	; 0
    1b6e:	89 89       	ldd	r24, Y+17	; 0x11
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	ca 01       	movw	r24, r20
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	82 0f       	add	r24, r18
    1b80:	93 1f       	adc	r25, r19
    1b82:	fc 01       	movw	r30, r24
    1b84:	e2 59       	subi	r30, 0x92	; 146
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 81       	ld	r24, Z
    1b8a:	8f 87       	std	Y+15, r24	; 0x0f
    1b8c:	08 c0       	rjmp	.+16     	; 0x1b9e <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    1b8e:	9e 01       	movw	r18, r28
    1b90:	2e 5e       	subi	r18, 0xEE	; 238
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	89 89       	ldd	r24, Y+17	; 0x11
    1b96:	62 e0       	ldi	r22, 0x02	; 2
    1b98:	a9 01       	movw	r20, r18
    1b9a:	0e 94 75 09 	call	0x12ea	; 0x12ea <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    1b9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1ba0:	88 23       	and	r24, r24
    1ba2:	a9 f3       	breq	.-22     	; 0x1b8e <HKPD_U8GetKeyPressed+0x70>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e2       	ldi	r26, 0x20	; 32
    1baa:	b1 e4       	ldi	r27, 0x41	; 65
    1bac:	8b 87       	std	Y+11, r24	; 0x0b
    1bae:	9c 87       	std	Y+12, r25	; 0x0c
    1bb0:	ad 87       	std	Y+13, r26	; 0x0d
    1bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8f 83       	std	Y+7, r24	; 0x07
    1bce:	98 87       	std	Y+8, r25	; 0x08
    1bd0:	a9 87       	std	Y+9, r26	; 0x09
    1bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <HKPD_U8GetKeyPressed+0x138>
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <HKPD_U8GetKeyPressed+0x126>
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <HKPD_U8GetKeyPressed+0x11a>
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <HKPD_U8GetKeyPressed+0x162>
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    1c88:	89 89       	ldd	r24, Y+17	; 0x11
    1c8a:	8f 5f       	subi	r24, 0xFF	; 255
    1c8c:	89 8b       	std	Y+17, r24	; 0x11
    1c8e:	89 89       	ldd	r24, Y+17	; 0x11
    1c90:	84 30       	cpi	r24, 0x04	; 4
    1c92:	08 f4       	brcc	.+2      	; 0x1c96 <HKPD_U8GetKeyPressed+0x178>
    1c94:	5a cf       	rjmp	.-332    	; 0x1b4a <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    1c96:	88 89       	ldd	r24, Y+16	; 0x10
    1c98:	62 e0       	ldi	r22, 0x02	; 2
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    1ca0:	88 89       	ldd	r24, Y+16	; 0x10
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	88 8b       	std	Y+16, r24	; 0x10
    1ca6:	88 89       	ldd	r24, Y+16	; 0x10
    1ca8:	88 30       	cpi	r24, 0x08	; 8
    1caa:	08 f4       	brcc	.+2      	; 0x1cae <HKPD_U8GetKeyPressed+0x190>
    1cac:	47 cf       	rjmp	.-370    	; 0x1b3c <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    1cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <HKPD_U8GetKeyPressed+0x198>
    1cb4:	40 cf       	rjmp	.-384    	; 0x1b36 <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    1cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    1cb8:	62 96       	adiw	r28, 0x12	; 18
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	6d 97       	sbiw	r28, 0x1d	; 29
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	63 e0       	ldi	r22, 0x03	; 3
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	63 e0       	ldi	r22, 0x03	; 3
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cf8:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	63 e0       	ldi	r22, 0x03	; 3
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a0 e0       	ldi	r26, 0x00	; 0
    1d0c:	b0 e4       	ldi	r27, 0x40	; 64
    1d0e:	89 8f       	std	Y+25, r24	; 0x19
    1d10:	9a 8f       	std	Y+26, r25	; 0x1a
    1d12:	ab 8f       	std	Y+27, r26	; 0x1b
    1d14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d16:	69 8d       	ldd	r22, Y+25	; 0x19
    1d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4a ef       	ldi	r20, 0xFA	; 250
    1d24:	54 e4       	ldi	r21, 0x44	; 68
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8d 8b       	std	Y+21, r24	; 0x15
    1d30:	9e 8b       	std	Y+22, r25	; 0x16
    1d32:	af 8b       	std	Y+23, r26	; 0x17
    1d34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d36:	6d 89       	ldd	r22, Y+21	; 0x15
    1d38:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e8       	ldi	r20, 0x80	; 128
    1d44:	5f e3       	ldi	r21, 0x3F	; 63
    1d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 8b       	std	Y+20, r25	; 0x14
    1d54:	8b 8b       	std	Y+19, r24	; 0x13
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    1d58:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	3f ef       	ldi	r19, 0xFF	; 255
    1d64:	4f e7       	ldi	r20, 0x7F	; 127
    1d66:	57 e4       	ldi	r21, 0x47	; 71
    1d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f5       	brge	.+82     	; 0x1dc2 <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	69 8d       	ldd	r22, Y+25	; 0x19
    1d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9c 8b       	std	Y+20, r25	; 0x14
    1d96:	8b 8b       	std	Y+19, r24	; 0x13
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <HCLCD_Vid8Bits_SendCommand+0xee>
    1d9a:	88 ec       	ldi	r24, 0xC8	; 200
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9a 8b       	std	Y+18, r25	; 0x12
    1da0:	89 8b       	std	Y+17, r24	; 0x11
    1da2:	89 89       	ldd	r24, Y+17	; 0x11
    1da4:	9a 89       	ldd	r25, Y+18	; 0x12
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <HCLCD_Vid8Bits_SendCommand+0xdc>
    1daa:	9a 8b       	std	Y+18, r25	; 0x12
    1dac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dae:	8b 89       	ldd	r24, Y+19	; 0x13
    1db0:	9c 89       	ldd	r25, Y+20	; 0x14
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dba:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	69 f7       	brne	.-38     	; 0x1d9a <HCLCD_Vid8Bits_SendCommand+0xd0>
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9c 8b       	std	Y+20, r25	; 0x14
    1dd4:	8b 8b       	std	Y+19, r24	; 0x13
    1dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dda:	98 8b       	std	Y+16, r25	; 0x10
    1ddc:	8f 87       	std	Y+15, r24	; 0x0f
    1dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de0:	98 89       	ldd	r25, Y+16	; 0x10
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <HCLCD_Vid8Bits_SendCommand+0x118>
    1de6:	98 8b       	std	Y+16, r25	; 0x10
    1de8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	63 e0       	ldi	r22, 0x03	; 3
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e4       	ldi	r27, 0x40	; 64
    1dfc:	8b 87       	std	Y+11, r24	; 0x0b
    1dfe:	9c 87       	std	Y+12, r25	; 0x0c
    1e00:	ad 87       	std	Y+13, r26	; 0x0d
    1e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a ef       	ldi	r20, 0xFA	; 250
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8f 83       	std	Y+7, r24	; 0x07
    1e1e:	98 87       	std	Y+8, r25	; 0x08
    1e20:	a9 87       	std	Y+9, r26	; 0x09
    1e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	8d 83       	std	Y+5, r24	; 0x05
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <HCLCD_Vid8Bits_SendCommand+0x1dc>
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <HCLCD_Vid8Bits_SendCommand+0x1ca>
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <HCLCD_Vid8Bits_SendCommand+0x1be>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <HCLCD_Vid8Bits_SendCommand+0x206>
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	63 e0       	ldi	r22, 0x03	; 3
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
}
    1ee2:	6d 96       	adiw	r28, 0x1d	; 29
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	e8 97       	sbiw	r28, 0x38	; 56
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	6f ef       	ldi	r22, 0xFF	; 255
    1f0c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	63 e0       	ldi	r22, 0x03	; 3
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	63 e0       	ldi	r22, 0x03	; 3
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	63 e0       	ldi	r22, 0x03	; 3
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 ef       	ldi	r26, 0xF0	; 240
    1f34:	b1 e4       	ldi	r27, 0x41	; 65
    1f36:	8d ab       	std	Y+53, r24	; 0x35
    1f38:	9e ab       	std	Y+54, r25	; 0x36
    1f3a:	af ab       	std	Y+55, r26	; 0x37
    1f3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f40:	7e a9       	ldd	r23, Y+54	; 0x36
    1f42:	8f a9       	ldd	r24, Y+55	; 0x37
    1f44:	98 ad       	ldd	r25, Y+56	; 0x38
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a ef       	ldi	r20, 0xFA	; 250
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	89 ab       	std	Y+49, r24	; 0x31
    1f58:	9a ab       	std	Y+50, r25	; 0x32
    1f5a:	ab ab       	std	Y+51, r26	; 0x33
    1f5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f60:	7a a9       	ldd	r23, Y+50	; 0x32
    1f62:	8b a9       	ldd	r24, Y+51	; 0x33
    1f64:	9c a9       	ldd	r25, Y+52	; 0x34
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	98 ab       	std	Y+48, r25	; 0x30
    1f7c:	8f a7       	std	Y+47, r24	; 0x2f
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    1f80:	69 a9       	ldd	r22, Y+49	; 0x31
    1f82:	7a a9       	ldd	r23, Y+50	; 0x32
    1f84:	8b a9       	ldd	r24, Y+51	; 0x33
    1f86:	9c a9       	ldd	r25, Y+52	; 0x34
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	98 ab       	std	Y+48, r25	; 0x30
    1fbe:	8f a7       	std	Y+47, r24	; 0x2f
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <HCLCD_Vid8Bits_Init+0xec>
    1fc2:	88 ec       	ldi	r24, 0xC8	; 200
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9e a7       	std	Y+46, r25	; 0x2e
    1fc8:	8d a7       	std	Y+45, r24	; 0x2d
    1fca:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fcc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <HCLCD_Vid8Bits_Init+0xda>
    1fd2:	9e a7       	std	Y+46, r25	; 0x2e
    1fd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	98 ab       	std	Y+48, r25	; 0x30
    1fde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <HCLCD_Vid8Bits_Init+0xce>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	69 a9       	ldd	r22, Y+49	; 0x31
    1fec:	7a a9       	ldd	r23, Y+50	; 0x32
    1fee:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	98 ab       	std	Y+48, r25	; 0x30
    1ffc:	8f a7       	std	Y+47, r24	; 0x2f
    1ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2000:	98 a9       	ldd	r25, Y+48	; 0x30
    2002:	9c a7       	std	Y+44, r25	; 0x2c
    2004:	8b a7       	std	Y+43, r24	; 0x2b
    2006:	8b a5       	ldd	r24, Y+43	; 0x2b
    2008:	9c a5       	ldd	r25, Y+44	; 0x2c
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <HCLCD_Vid8Bits_Init+0x116>
    200e:	9c a7       	std	Y+44, r25	; 0x2c
    2010:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    2012:	88 e2       	ldi	r24, 0x28	; 40
    2014:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e8       	ldi	r26, 0x80	; 128
    201e:	bf e3       	ldi	r27, 0x3F	; 63
    2020:	8f a3       	std	Y+39, r24	; 0x27
    2022:	98 a7       	std	Y+40, r25	; 0x28
    2024:	a9 a7       	std	Y+41, r26	; 0x29
    2026:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6f a1       	ldd	r22, Y+39	; 0x27
    202a:	78 a5       	ldd	r23, Y+40	; 0x28
    202c:	89 a5       	ldd	r24, Y+41	; 0x29
    202e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8b a3       	std	Y+35, r24	; 0x23
    2042:	9c a3       	std	Y+36, r25	; 0x24
    2044:	ad a3       	std	Y+37, r26	; 0x25
    2046:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2048:	6b a1       	ldd	r22, Y+35	; 0x23
    204a:	7c a1       	ldd	r23, Y+36	; 0x24
    204c:	8d a1       	ldd	r24, Y+37	; 0x25
    204e:	9e a1       	ldd	r25, Y+38	; 0x26
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9a a3       	std	Y+34, r25	; 0x22
    2066:	89 a3       	std	Y+33, r24	; 0x21
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    206a:	6b a1       	ldd	r22, Y+35	; 0x23
    206c:	7c a1       	ldd	r23, Y+36	; 0x24
    206e:	8d a1       	ldd	r24, Y+37	; 0x25
    2070:	9e a1       	ldd	r25, Y+38	; 0x26
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6f a1       	ldd	r22, Y+39	; 0x27
    2084:	78 a5       	ldd	r23, Y+40	; 0x28
    2086:	89 a5       	ldd	r24, Y+41	; 0x29
    2088:	9a a5       	ldd	r25, Y+42	; 0x2a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9a a3       	std	Y+34, r25	; 0x22
    20a8:	89 a3       	std	Y+33, r24	; 0x21
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <HCLCD_Vid8Bits_Init+0x1d6>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	98 a3       	std	Y+32, r25	; 0x20
    20b2:	8f 8f       	std	Y+31, r24	; 0x1f
    20b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20b6:	98 a1       	ldd	r25, Y+32	; 0x20
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <HCLCD_Vid8Bits_Init+0x1c4>
    20bc:	98 a3       	std	Y+32, r25	; 0x20
    20be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	89 a1       	ldd	r24, Y+33	; 0x21
    20c2:	9a a1       	ldd	r25, Y+34	; 0x22
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9a a3       	std	Y+34, r25	; 0x22
    20c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	89 a1       	ldd	r24, Y+33	; 0x21
    20cc:	9a a1       	ldd	r25, Y+34	; 0x22
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <HCLCD_Vid8Bits_Init+0x1b8>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6b a1       	ldd	r22, Y+35	; 0x23
    20d6:	7c a1       	ldd	r23, Y+36	; 0x24
    20d8:	8d a1       	ldd	r24, Y+37	; 0x25
    20da:	9e a1       	ldd	r25, Y+38	; 0x26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9a a3       	std	Y+34, r25	; 0x22
    20e6:	89 a3       	std	Y+33, r24	; 0x21
    20e8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ea:	9a a1       	ldd	r25, Y+34	; 0x22
    20ec:	9e 8f       	std	Y+30, r25	; 0x1e
    20ee:	8d 8f       	std	Y+29, r24	; 0x1d
    20f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <HCLCD_Vid8Bits_Init+0x200>
    20f8:	9e 8f       	std	Y+30, r25	; 0x1e
    20fa:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    20fc:	8f e0       	ldi	r24, 0x0F	; 15
    20fe:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e8       	ldi	r26, 0x80	; 128
    2108:	bf e3       	ldi	r27, 0x3F	; 63
    210a:	89 8f       	std	Y+25, r24	; 0x19
    210c:	9a 8f       	std	Y+26, r25	; 0x1a
    210e:	ab 8f       	std	Y+27, r26	; 0x1b
    2110:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	69 8d       	ldd	r22, Y+25	; 0x19
    2114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a ef       	ldi	r20, 0xFA	; 250
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8d 8b       	std	Y+21, r24	; 0x15
    212c:	9e 8b       	std	Y+22, r25	; 0x16
    212e:	af 8b       	std	Y+23, r26	; 0x17
    2130:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2132:	6d 89       	ldd	r22, Y+21	; 0x15
    2134:	7e 89       	ldd	r23, Y+22	; 0x16
    2136:	8f 89       	ldd	r24, Y+23	; 0x17
    2138:	98 8d       	ldd	r25, Y+24	; 0x18
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	8b 8b       	std	Y+19, r24	; 0x13
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    2154:	6d 89       	ldd	r22, Y+21	; 0x15
    2156:	7e 89       	ldd	r23, Y+22	; 0x16
    2158:	8f 89       	ldd	r24, Y+23	; 0x17
    215a:	98 8d       	ldd	r25, Y+24	; 0x18
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	69 8d       	ldd	r22, Y+25	; 0x19
    216e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2172:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9c 8b       	std	Y+20, r25	; 0x14
    2192:	8b 8b       	std	Y+19, r24	; 0x13
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <HCLCD_Vid8Bits_Init+0x2c0>
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9a 8b       	std	Y+18, r25	; 0x12
    219c:	89 8b       	std	Y+17, r24	; 0x11
    219e:	89 89       	ldd	r24, Y+17	; 0x11
    21a0:	9a 89       	ldd	r25, Y+18	; 0x12
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <HCLCD_Vid8Bits_Init+0x2ae>
    21a6:	9a 8b       	std	Y+18, r25	; 0x12
    21a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8b 89       	ldd	r24, Y+19	; 0x13
    21b6:	9c 89       	ldd	r25, Y+20	; 0x14
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <HCLCD_Vid8Bits_Init+0x2a2>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	6d 89       	ldd	r22, Y+21	; 0x15
    21c0:	7e 89       	ldd	r23, Y+22	; 0x16
    21c2:	8f 89       	ldd	r24, Y+23	; 0x17
    21c4:	98 8d       	ldd	r25, Y+24	; 0x18
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9c 8b       	std	Y+20, r25	; 0x14
    21d0:	8b 8b       	std	Y+19, r24	; 0x13
    21d2:	8b 89       	ldd	r24, Y+19	; 0x13
    21d4:	9c 89       	ldd	r25, Y+20	; 0x14
    21d6:	98 8b       	std	Y+16, r25	; 0x10
    21d8:	8f 87       	std	Y+15, r24	; 0x0f
    21da:	8f 85       	ldd	r24, Y+15	; 0x0f
    21dc:	98 89       	ldd	r25, Y+16	; 0x10
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <HCLCD_Vid8Bits_Init+0x2ea>
    21e2:	98 8b       	std	Y+16, r25	; 0x10
    21e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e0       	ldi	r26, 0x00	; 0
    21f2:	b0 e4       	ldi	r27, 0x40	; 64
    21f4:	8b 87       	std	Y+11, r24	; 0x0b
    21f6:	9c 87       	std	Y+12, r25	; 0x0c
    21f8:	ad 87       	std	Y+13, r26	; 0x0d
    21fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2200:	8d 85       	ldd	r24, Y+13	; 0x0d
    2202:	9e 85       	ldd	r25, Y+14	; 0x0e
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a ef       	ldi	r20, 0xFA	; 250
    220a:	54 e4       	ldi	r21, 0x44	; 68
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8f 83       	std	Y+7, r24	; 0x07
    2216:	98 87       	std	Y+8, r25	; 0x08
    2218:	a9 87       	std	Y+9, r26	; 0x09
    221a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    221c:	6f 81       	ldd	r22, Y+7	; 0x07
    221e:	78 85       	ldd	r23, Y+8	; 0x08
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    223e:	6f 81       	ldd	r22, Y+7	; 0x07
    2240:	78 85       	ldd	r23, Y+8	; 0x08
    2242:	89 85       	ldd	r24, Y+9	; 0x09
    2244:	9a 85       	ldd	r25, Y+10	; 0x0a
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	4c f5       	brge	.+82     	; 0x22a8 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	6b 85       	ldd	r22, Y+11	; 0x0b
    2258:	7c 85       	ldd	r23, Y+12	; 0x0c
    225a:	8d 85       	ldd	r24, Y+13	; 0x0d
    225c:	9e 85       	ldd	r25, Y+14	; 0x0e
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	51 e4       	ldi	r21, 0x41	; 65
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	0f c0       	rjmp	.+30     	; 0x229e <HCLCD_Vid8Bits_Init+0x3aa>
    2280:	88 ec       	ldi	r24, 0xC8	; 200
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <HCLCD_Vid8Bits_Init+0x398>
    2290:	9c 83       	std	Y+4, r25	; 0x04
    2292:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	69 f7       	brne	.-38     	; 0x2280 <HCLCD_Vid8Bits_Init+0x38c>
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <HCLCD_Vid8Bits_Init+0x3d4>
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    22d0:	86 e0       	ldi	r24, 0x06	; 6
    22d2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
}
    22d6:	e8 96       	adiw	r28, 0x38	; 56
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	6d 97       	sbiw	r28, 0x1d	; 29
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	63 e0       	ldi	r22, 0x03	; 3
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	63 e0       	ldi	r22, 0x03	; 3
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2312:	83 e0       	ldi	r24, 0x03	; 3
    2314:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2316:	0e 94 2d 09 	call	0x125a	; 0x125a <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	63 e0       	ldi	r22, 0x03	; 3
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e0       	ldi	r26, 0x00	; 0
    232a:	b0 e4       	ldi	r27, 0x40	; 64
    232c:	89 8f       	std	Y+25, r24	; 0x19
    232e:	9a 8f       	std	Y+26, r25	; 0x1a
    2330:	ab 8f       	std	Y+27, r26	; 0x1b
    2332:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	69 8d       	ldd	r22, Y+25	; 0x19
    2336:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    233a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a ef       	ldi	r20, 0xFA	; 250
    2342:	54 e4       	ldi	r21, 0x44	; 68
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8d 8b       	std	Y+21, r24	; 0x15
    234e:	9e 8b       	std	Y+22, r25	; 0x16
    2350:	af 8b       	std	Y+23, r26	; 0x17
    2352:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2376:	6d 89       	ldd	r22, Y+21	; 0x15
    2378:	7e 89       	ldd	r23, Y+22	; 0x16
    237a:	8f 89       	ldd	r24, Y+23	; 0x17
    237c:	98 8d       	ldd	r25, Y+24	; 0x18
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	69 8d       	ldd	r22, Y+25	; 0x19
    2390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    23b8:	88 ec       	ldi	r24, 0xC8	; 200
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
    23c0:	89 89       	ldd	r24, Y+17	; 0x11
    23c2:	9a 89       	ldd	r25, Y+18	; 0x12
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    23c8:	9a 8b       	std	Y+18, r25	; 0x12
    23ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
    23fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fe:	98 89       	ldd	r25, Y+16	; 0x10
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2404:	98 8b       	std	Y+16, r25	; 0x10
    2406:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	63 e0       	ldi	r22, 0x03	; 3
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 e0       	ldi	r26, 0x00	; 0
    2418:	b0 e4       	ldi	r27, 0x40	; 64
    241a:	8b 87       	std	Y+11, r24	; 0x0b
    241c:	9c 87       	std	Y+12, r25	; 0x0c
    241e:	ad 87       	std	Y+13, r26	; 0x0d
    2420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6b 85       	ldd	r22, Y+11	; 0x0b
    2424:	7c 85       	ldd	r23, Y+12	; 0x0c
    2426:	8d 85       	ldd	r24, Y+13	; 0x0d
    2428:	9e 85       	ldd	r25, Y+14	; 0x0e
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a ef       	ldi	r20, 0xFA	; 250
    2430:	54 e4       	ldi	r21, 0x44	; 68
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	8f 83       	std	Y+7, r24	; 0x07
    243c:	98 87       	std	Y+8, r25	; 0x08
    243e:	a9 87       	std	Y+9, r26	; 0x09
    2440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2464:	6f 81       	ldd	r22, Y+7	; 0x07
    2466:	78 85       	ldd	r23, Y+8	; 0x08
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	6b 85       	ldd	r22, Y+11	; 0x0b
    247e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2480:	8d 85       	ldd	r24, Y+13	; 0x0d
    2482:	9e 85       	ldd	r25, Y+14	; 0x0e
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    24b6:	9c 83       	std	Y+4, r25	; 0x04
    24b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	63 e0       	ldi	r22, 0x03	; 3
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
}
    2500:	6d 96       	adiw	r28, 0x1d	; 29
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <HCLCD_Vid8Bits_DisplayString+0x6>
    2518:	0f 92       	push	r0
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	9b 83       	std	Y+3, r25	; 0x03
    2520:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2522:	19 82       	std	Y+1, r1	; 0x01
    2524:	0e c0       	rjmp	.+28     	; 0x2542 <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	fc 01       	movw	r30, r24
    2532:	e2 0f       	add	r30, r18
    2534:	f3 1f       	adc	r31, r19
    2536:	80 81       	ld	r24, Z
    2538:	0e 94 74 11 	call	0x22e8	; 0x22e8 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	8f 5f       	subi	r24, 0xFF	; 255
    2540:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	fc 01       	movw	r30, r24
    254e:	e2 0f       	add	r30, r18
    2550:	f3 1f       	adc	r31, r19
    2552:	80 81       	ld	r24, Z
    2554:	88 23       	and	r24, r24
    2556:	39 f7       	brne	.-50     	; 0x2526 <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	60 97       	sbiw	r28, 0x10	; 16
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	6d 87       	std	Y+13, r22	; 0x0d
    257e:	7e 87       	std	Y+14, r23	; 0x0e
    2580:	8f 87       	std	Y+15, r24	; 0x0f
    2582:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2584:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2586:	8d 85       	ldd	r24, Y+13	; 0x0d
    2588:	9e 85       	ldd	r25, Y+14	; 0x0e
    258a:	af 85       	ldd	r26, Y+15	; 0x0f
    258c:	b8 89       	ldd	r27, Y+16	; 0x10
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	a1 05       	cpc	r26, r1
    2592:	b1 05       	cpc	r27, r1
    2594:	09 f4       	brne	.+2      	; 0x2598 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2596:	4f c0       	rjmp	.+158    	; 0x2636 <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2598:	2d c0       	rjmp	.+90     	; 0x25f4 <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	08 2f       	mov	r16, r24
    259e:	10 e0       	ldi	r17, 0x00	; 0
    25a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a4:	af 85       	ldd	r26, Y+15	; 0x0f
    25a6:	b8 89       	ldd	r27, Y+16	; 0x10
    25a8:	2a e0       	ldi	r18, 0x0A	; 10
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__udivmodsi4>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	28 2f       	mov	r18, r24
    25be:	ce 01       	movw	r24, r28
    25c0:	03 96       	adiw	r24, 0x03	; 3
    25c2:	fc 01       	movw	r30, r24
    25c4:	e0 0f       	add	r30, r16
    25c6:	f1 1f       	adc	r31, r17
    25c8:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    25ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    25cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ce:	af 85       	ldd	r26, Y+15	; 0x0f
    25d0:	b8 89       	ldd	r27, Y+16	; 0x10
    25d2:	2a e0       	ldi	r18, 0x0A	; 10
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__udivmodsi4>
    25e2:	da 01       	movw	r26, r20
    25e4:	c9 01       	movw	r24, r18
    25e6:	8d 87       	std	Y+13, r24	; 0x0d
    25e8:	9e 87       	std	Y+14, r25	; 0x0e
    25ea:	af 87       	std	Y+15, r26	; 0x0f
    25ec:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    25f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f8:	af 85       	ldd	r26, Y+15	; 0x0f
    25fa:	b8 89       	ldd	r27, Y+16	; 0x10
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	a1 05       	cpc	r26, r1
    2600:	b1 05       	cpc	r27, r1
    2602:	59 f6       	brne	.-106    	; 0x259a <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	81 50       	subi	r24, 0x01	; 1
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	11 c0       	rjmp	.+34     	; 0x262e <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	28 2f       	mov	r18, r24
    2610:	33 27       	eor	r19, r19
    2612:	27 fd       	sbrc	r18, 7
    2614:	30 95       	com	r19
    2616:	ce 01       	movw	r24, r28
    2618:	03 96       	adiw	r24, 0x03	; 3
    261a:	fc 01       	movw	r30, r24
    261c:	e2 0f       	add	r30, r18
    261e:	f3 1f       	adc	r31, r19
    2620:	80 81       	ld	r24, Z
    2622:	80 5d       	subi	r24, 0xD0	; 208
    2624:	0e 94 74 11 	call	0x22e8	; 0x22e8 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	81 50       	subi	r24, 0x01	; 1
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	88 23       	and	r24, r24
    2632:	64 f7       	brge	.-40     	; 0x260c <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2634:	03 c0       	rjmp	.+6      	; 0x263c <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	0e 94 74 11 	call	0x22e8	; 0x22e8 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    263c:	60 96       	adiw	r28, 0x10	; 16
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret

00002652 <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	00 d0       	rcall	.+0      	; 0x2658 <HCLCD_Vid8Bits_SetPosition+0x6>
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	81 30       	cpi	r24, 0x01	; 1
    2664:	41 f4       	brne	.+16     	; 0x2676 <HCLCD_Vid8Bits_SetPosition+0x24>
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	80 31       	cpi	r24, 0x10	; 16
    266a:	28 f4       	brcc	.+10     	; 0x2676 <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	80 58       	subi	r24, 0x80	; 128
    2670:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    2674:	0a c0       	rjmp	.+20     	; 0x268a <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	82 30       	cpi	r24, 0x02	; 2
    267a:	39 f4       	brne	.+14     	; 0x268a <HCLCD_Vid8Bits_SetPosition+0x38>
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	80 31       	cpi	r24, 0x10	; 16
    2680:	20 f4       	brcc	.+8      	; 0x268a <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	80 54       	subi	r24, 0x40	; 64
    2686:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	00 d0       	rcall	.+0      	; 0x269a <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    269a:	00 d0       	rcall	.+0      	; 0x269c <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	8a 83       	std	Y+2, r24	; 0x02
    26a2:	7c 83       	std	Y+4, r23	; 0x04
    26a4:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	88 30       	cpi	r24, 0x08	; 8
    26aa:	f8 f4       	brcc	.+62     	; 0x26ea <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	88 2f       	mov	r24, r24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	08 96       	adiw	r24, 0x08	; 8
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    26c4:	19 82       	std	Y+1, r1	; 0x01
    26c6:	0e c0       	rjmp	.+28     	; 0x26e4 <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	fc 01       	movw	r30, r24
    26d4:	e2 0f       	add	r30, r18
    26d6:	f3 1f       	adc	r31, r19
    26d8:	80 81       	ld	r24, Z
    26da:	0e 94 74 11 	call	0x22e8	; 0x22e8 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	8f 5f       	subi	r24, 0xFF	; 255
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	88 30       	cpi	r24, 0x08	; 8
    26e8:	78 f3       	brcs	.-34     	; 0x26c8 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	2e 97       	sbiw	r28, 0x0e	; 14
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a0 e0       	ldi	r26, 0x00	; 0
    2718:	b0 e4       	ldi	r27, 0x40	; 64
    271a:	8b 87       	std	Y+11, r24	; 0x0b
    271c:	9c 87       	std	Y+12, r25	; 0x0c
    271e:	ad 87       	std	Y+13, r26	; 0x0d
    2720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2722:	6b 85       	ldd	r22, Y+11	; 0x0b
    2724:	7c 85       	ldd	r23, Y+12	; 0x0c
    2726:	8d 85       	ldd	r24, Y+13	; 0x0d
    2728:	9e 85       	ldd	r25, Y+14	; 0x0e
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4a ef       	ldi	r20, 0xFA	; 250
    2730:	54 e4       	ldi	r21, 0x44	; 68
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8f 83       	std	Y+7, r24	; 0x07
    273c:	98 87       	std	Y+8, r25	; 0x08
    273e:	a9 87       	std	Y+9, r26	; 0x09
    2740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2742:	6f 81       	ldd	r22, Y+7	; 0x07
    2744:	78 85       	ldd	r23, Y+8	; 0x08
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2756:	88 23       	and	r24, r24
    2758:	2c f4       	brge	.+10     	; 0x2764 <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	3f c0       	rjmp	.+126    	; 0x27e2 <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    2764:	6f 81       	ldd	r22, Y+7	; 0x07
    2766:	78 85       	ldd	r23, Y+8	; 0x08
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2778:	18 16       	cp	r1, r24
    277a:	4c f5       	brge	.+82     	; 0x27ce <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277c:	6b 85       	ldd	r22, Y+11	; 0x0b
    277e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2780:	8d 85       	ldd	r24, Y+13	; 0x0d
    2782:	9e 85       	ldd	r25, Y+14	; 0x0e
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	0f c0       	rjmp	.+30     	; 0x27c4 <HCLCD_Vid8Bits_ClearScreen+0xcc>
    27a6:	88 ec       	ldi	r24, 0xC8	; 200
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9c 83       	std	Y+4, r25	; 0x04
    27ac:	8b 83       	std	Y+3, r24	; 0x03
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <HCLCD_Vid8Bits_ClearScreen+0xba>
    27b6:	9c 83       	std	Y+4, r25	; 0x04
    27b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	69 f7       	brne	.-38     	; 0x27a6 <HCLCD_Vid8Bits_ClearScreen+0xae>
    27cc:	14 c0       	rjmp	.+40     	; 0x27f6 <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ce:	6f 81       	ldd	r22, Y+7	; 0x07
    27d0:	78 85       	ldd	r23, Y+8	; 0x08
    27d2:	89 85       	ldd	r24, Y+9	; 0x09
    27d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <HCLCD_Vid8Bits_ClearScreen+0xf6>
    27f2:	9a 83       	std	Y+2, r25	; 0x02
    27f4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    27f6:	2e 96       	adiw	r28, 0x0e	; 14
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	60 97       	sbiw	r28, 0x10	; 16
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    281e:	1f 86       	std	Y+15, r1	; 0x0f
    2820:	78 c0       	rjmp	.+240    	; 0x2912 <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2822:	88 e1       	ldi	r24, 0x18	; 24
    2824:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a6 e9       	ldi	r26, 0x96	; 150
    282e:	b3 e4       	ldi	r27, 0x43	; 67
    2830:	8b 87       	std	Y+11, r24	; 0x0b
    2832:	9c 87       	std	Y+12, r25	; 0x0c
    2834:	ad 87       	std	Y+13, r26	; 0x0d
    2836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6b 85       	ldd	r22, Y+11	; 0x0b
    283a:	7c 85       	ldd	r23, Y+12	; 0x0c
    283c:	8d 85       	ldd	r24, Y+13	; 0x0d
    283e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a ef       	ldi	r20, 0xFA	; 250
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8f 83       	std	Y+7, r24	; 0x07
    2852:	98 87       	std	Y+8, r25	; 0x08
    2854:	a9 87       	std	Y+9, r26	; 0x09
    2856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2858:	6f 81       	ldd	r22, Y+7	; 0x07
    285a:	78 85       	ldd	r23, Y+8	; 0x08
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6b 85       	ldd	r22, Y+11	; 0x0b
    2894:	7c 85       	ldd	r23, Y+12	; 0x0c
    2896:	8d 85       	ldd	r24, Y+13	; 0x0d
    2898:	9e 85       	ldd	r25, Y+14	; 0x0e
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    28bc:	88 ec       	ldi	r24, 0xC8	; 200
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6f 81       	ldd	r22, Y+7	; 0x07
    28e6:	78 85       	ldd	r23, Y+8	; 0x08
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    290c:	8f 85       	ldd	r24, Y+15	; 0x0f
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	8f 87       	std	Y+15, r24	; 0x0f
    2912:	9f 85       	ldd	r25, Y+15	; 0x0f
    2914:	88 89       	ldd	r24, Y+16	; 0x10
    2916:	98 17       	cp	r25, r24
    2918:	08 f4       	brcc	.+2      	; 0x291c <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    291a:	83 cf       	rjmp	.-250    	; 0x2822 <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    291c:	60 96       	adiw	r28, 0x10	; 16
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	60 97       	sbiw	r28, 0x10	; 16
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2944:	1f 86       	std	Y+15, r1	; 0x0f
    2946:	78 c0       	rjmp	.+240    	; 0x2a38 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    2948:	8c e1       	ldi	r24, 0x1C	; 28
    294a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a6 e9       	ldi	r26, 0x96	; 150
    2954:	b3 e4       	ldi	r27, 0x43	; 67
    2956:	8b 87       	std	Y+11, r24	; 0x0b
    2958:	9c 87       	std	Y+12, r25	; 0x0c
    295a:	ad 87       	std	Y+13, r26	; 0x0d
    295c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2960:	7c 85       	ldd	r23, Y+12	; 0x0c
    2962:	8d 85       	ldd	r24, Y+13	; 0x0d
    2964:	9e 85       	ldd	r25, Y+14	; 0x0e
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a ef       	ldi	r20, 0xFA	; 250
    296c:	54 e4       	ldi	r21, 0x44	; 68
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8f 83       	std	Y+7, r24	; 0x07
    2978:	98 87       	std	Y+8, r25	; 0x08
    297a:	a9 87       	std	Y+9, r26	; 0x09
    297c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    297e:	6f 81       	ldd	r22, Y+7	; 0x07
    2980:	78 85       	ldd	r23, Y+8	; 0x08
    2982:	89 85       	ldd	r24, Y+9	; 0x09
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    29a0:	6f 81       	ldd	r22, Y+7	; 0x07
    29a2:	78 85       	ldd	r23, Y+8	; 0x08
    29a4:	89 85       	ldd	r24, Y+9	; 0x09
    29a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    29bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29be:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9e 83       	std	Y+6, r25	; 0x06
    29de:	8d 83       	std	Y+5, r24	; 0x05
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    29e2:	88 ec       	ldi	r24, 0xC8	; 200
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9c 83       	std	Y+4, r25	; 0x04
    29e8:	8b 83       	std	Y+3, r24	; 0x03
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0c:	78 85       	ldd	r23, Y+8	; 0x08
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a34:	8f 5f       	subi	r24, 0xFF	; 255
    2a36:	8f 87       	std	Y+15, r24	; 0x0f
    2a38:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a3a:	88 89       	ldd	r24, Y+16	; 0x10
    2a3c:	98 17       	cp	r25, r24
    2a3e:	08 f4       	brcc	.+2      	; 0x2a42 <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    2a40:	83 cf       	rjmp	.-250    	; 0x2948 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    2a42:	60 96       	adiw	r28, 0x10	; 16
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	60 97       	sbiw	r28, 0x10	; 16
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2a6a:	1f 86       	std	Y+15, r1	; 0x0f
    2a6c:	78 c0       	rjmp	.+240    	; 0x2b5e <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    2a6e:	80 e1       	ldi	r24, 0x10	; 16
    2a70:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	a6 e9       	ldi	r26, 0x96	; 150
    2a7a:	b3 e4       	ldi	r27, 0x43	; 67
    2a7c:	8b 87       	std	Y+11, r24	; 0x0b
    2a7e:	9c 87       	std	Y+12, r25	; 0x0c
    2a80:	ad 87       	std	Y+13, r26	; 0x0d
    2a82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	4a ef       	ldi	r20, 0xFA	; 250
    2a92:	54 e4       	ldi	r21, 0x44	; 68
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	8f 83       	std	Y+7, r24	; 0x07
    2a9e:	98 87       	std	Y+8, r25	; 0x08
    2aa0:	a9 87       	std	Y+9, r26	; 0x09
    2aa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa6:	78 85       	ldd	r23, Y+8	; 0x08
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e8       	ldi	r20, 0x80	; 128
    2ab2:	5f e3       	ldi	r21, 0x3F	; 63
    2ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab8:	88 23       	and	r24, r24
    2aba:	2c f4       	brge	.+10     	; 0x2ac6 <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	9e 83       	std	Y+6, r25	; 0x06
    2ac2:	8d 83       	std	Y+5, r24	; 0x05
    2ac4:	3f c0       	rjmp	.+126    	; 0x2b44 <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	3f ef       	ldi	r19, 0xFF	; 255
    2ad2:	4f e7       	ldi	r20, 0x7F	; 127
    2ad4:	57 e4       	ldi	r21, 0x47	; 71
    2ad6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ada:	18 16       	cp	r1, r24
    2adc:	4c f5       	brge	.+82     	; 0x2b30 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e2       	ldi	r20, 0x20	; 32
    2aec:	51 e4       	ldi	r21, 0x41	; 65
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	bc 01       	movw	r22, r24
    2af8:	cd 01       	movw	r24, r26
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	0f c0       	rjmp	.+30     	; 0x2b26 <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    2b08:	88 ec       	ldi	r24, 0xC8	; 200
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	9c 83       	std	Y+4, r25	; 0x04
    2b0e:	8b 83       	std	Y+3, r24	; 0x03
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    2b18:	9c 83       	std	Y+4, r25	; 0x04
    2b1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	69 f7       	brne	.-38     	; 0x2b08 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    2b2e:	14 c0       	rjmp	.+40     	; 0x2b58 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b30:	6f 81       	ldd	r22, Y+7	; 0x07
    2b32:	78 85       	ldd	r23, Y+8	; 0x08
    2b34:	89 85       	ldd	r24, Y+9	; 0x09
    2b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	8d 83       	std	Y+5, r24	; 0x05
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    2b54:	9a 83       	std	Y+2, r25	; 0x02
    2b56:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b5a:	8f 5f       	subi	r24, 0xFF	; 255
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
    2b5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b60:	88 89       	ldd	r24, Y+16	; 0x10
    2b62:	98 17       	cp	r25, r24
    2b64:	08 f4       	brcc	.+2      	; 0x2b68 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    2b66:	83 cf       	rjmp	.-250    	; 0x2a6e <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    2b68:	60 96       	adiw	r28, 0x10	; 16
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	60 97       	sbiw	r28, 0x10	; 16
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2b90:	1f 86       	std	Y+15, r1	; 0x0f
    2b92:	78 c0       	rjmp	.+240    	; 0x2c84 <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    2b94:	84 e1       	ldi	r24, 0x14	; 20
    2b96:	0e 94 65 0e 	call	0x1cca	; 0x1cca <HCLCD_Vid8Bits_SendCommand>
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	a6 e9       	ldi	r26, 0x96	; 150
    2ba0:	b3 e4       	ldi	r27, 0x43	; 67
    2ba2:	8b 87       	std	Y+11, r24	; 0x0b
    2ba4:	9c 87       	std	Y+12, r25	; 0x0c
    2ba6:	ad 87       	std	Y+13, r26	; 0x0d
    2ba8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	4a ef       	ldi	r20, 0xFA	; 250
    2bb8:	54 e4       	ldi	r21, 0x44	; 68
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	8f 83       	std	Y+7, r24	; 0x07
    2bc4:	98 87       	std	Y+8, r25	; 0x08
    2bc6:	a9 87       	std	Y+9, r26	; 0x09
    2bc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e8       	ldi	r20, 0x80	; 128
    2bd8:	5f e3       	ldi	r21, 0x3F	; 63
    2bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bde:	88 23       	and	r24, r24
    2be0:	2c f4       	brge	.+10     	; 0x2bec <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	8d 83       	std	Y+5, r24	; 0x05
    2bea:	3f c0       	rjmp	.+126    	; 0x2c6a <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    2bec:	6f 81       	ldd	r22, Y+7	; 0x07
    2bee:	78 85       	ldd	r23, Y+8	; 0x08
    2bf0:	89 85       	ldd	r24, Y+9	; 0x09
    2bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	3f ef       	ldi	r19, 0xFF	; 255
    2bf8:	4f e7       	ldi	r20, 0x7F	; 127
    2bfa:	57 e4       	ldi	r21, 0x47	; 71
    2bfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c00:	18 16       	cp	r1, r24
    2c02:	4c f5       	brge	.+82     	; 0x2c56 <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e2       	ldi	r20, 0x20	; 32
    2c12:	51 e4       	ldi	r21, 0x41	; 65
    2c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	cd 01       	movw	r24, r26
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
    2c2c:	0f c0       	rjmp	.+30     	; 0x2c4c <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    2c2e:	88 ec       	ldi	r24, 0xC8	; 200
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	9c 83       	std	Y+4, r25	; 0x04
    2c34:	8b 83       	std	Y+3, r24	; 0x03
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    2c3e:	9c 83       	std	Y+4, r25	; 0x04
    2c40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	9e 81       	ldd	r25, Y+6	; 0x06
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	69 f7       	brne	.-38     	; 0x2c2e <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    2c54:	14 c0       	rjmp	.+40     	; 0x2c7e <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c56:	6f 81       	ldd	r22, Y+7	; 0x07
    2c58:	78 85       	ldd	r23, Y+8	; 0x08
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6e:	9a 83       	std	Y+2, r25	; 0x02
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	9a 81       	ldd	r25, Y+2	; 0x02
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    2c7a:	9a 83       	std	Y+2, r25	; 0x02
    2c7c:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	8f 87       	std	Y+15, r24	; 0x0f
    2c84:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c86:	88 89       	ldd	r24, Y+16	; 0x10
    2c88:	98 17       	cp	r25, r24
    2c8a:	08 f4       	brcc	.+2      	; 0x2c8e <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    2c8c:	83 cf       	rjmp	.-250    	; 0x2b94 <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    2c8e:	60 96       	adiw	r28, 0x10	; 16
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	2f 97       	sbiw	r28, 0x0f	; 15
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	63 e0       	ldi	r22, 0x03	; 3
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	63 e0       	ldi	r22, 0x03	; 3
    2cc4:	40 e0       	ldi	r20, 0x00	; 0
    2cc6:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    2cca:	84 e0       	ldi	r24, 0x04	; 4
    2ccc:	63 e0       	ldi	r22, 0x03	; 3
    2cce:	4f 85       	ldd	r20, Y+15	; 0x0f
    2cd0:	0e 94 0d 0a 	call	0x141a	; 0x141a <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	63 e0       	ldi	r22, 0x03	; 3
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	a0 e0       	ldi	r26, 0x00	; 0
    2ce4:	b0 e4       	ldi	r27, 0x40	; 64
    2ce6:	8b 87       	std	Y+11, r24	; 0x0b
    2ce8:	9c 87       	std	Y+12, r25	; 0x0c
    2cea:	ad 87       	std	Y+13, r26	; 0x0d
    2cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a ef       	ldi	r20, 0xFA	; 250
    2cfc:	54 e4       	ldi	r21, 0x44	; 68
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8f 83       	std	Y+7, r24	; 0x07
    2d08:	98 87       	std	Y+8, r25	; 0x08
    2d0a:	a9 87       	std	Y+9, r26	; 0x09
    2d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d10:	78 85       	ldd	r23, Y+8	; 0x08
    2d12:	89 85       	ldd	r24, Y+9	; 0x09
    2d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    2d30:	6f 81       	ldd	r22, Y+7	; 0x07
    2d32:	78 85       	ldd	r23, Y+8	; 0x08
    2d34:	89 85       	ldd	r24, Y+9	; 0x09
    2d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9e 83       	std	Y+6, r25	; 0x06
    2d6e:	8d 83       	std	Y+5, r24	; 0x05
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <HCLCD_Vid4Bits_SendCommand+0xf0>
    2d72:	88 ec       	ldi	r24, 0xC8	; 200
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	8b 83       	std	Y+3, r24	; 0x03
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <HCLCD_Vid4Bits_SendCommand+0xde>
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <HCLCD_Vid4Bits_SendCommand+0xd2>
    2d98:	14 c0       	rjmp	.+40     	; 0x2dc2 <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <HCLCD_Vid4Bits_SendCommand+0x11a>
    2dbe:	9a 83       	std	Y+2, r25	; 0x02
    2dc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2dc2:	82 e0       	ldi	r24, 0x02	; 2
    2dc4:	63 e0       	ldi	r22, 0x03	; 3
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
}
    2dcc:	2f 96       	adiw	r28, 0x0f	; 15
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	e9 97       	sbiw	r28, 0x39	; 57
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    2df2:	87 e0       	ldi	r24, 0x07	; 7
    2df4:	89 af       	std	Y+57, r24	; 0x39
    2df6:	08 c0       	rjmp	.+16     	; 0x2e08 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    2df8:	89 ad       	ldd	r24, Y+57	; 0x39
    2dfa:	63 e0       	ldi	r22, 0x03	; 3
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    2e02:	89 ad       	ldd	r24, Y+57	; 0x39
    2e04:	81 50       	subi	r24, 0x01	; 1
    2e06:	89 af       	std	Y+57, r24	; 0x39
    2e08:	89 ad       	ldd	r24, Y+57	; 0x39
    2e0a:	84 30       	cpi	r24, 0x04	; 4
    2e0c:	ac f7       	brge	.-22     	; 0x2df8 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	63 e0       	ldi	r22, 0x03	; 3
    2e12:	41 e0       	ldi	r20, 0x01	; 1
    2e14:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	63 e0       	ldi	r22, 0x03	; 3
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2e22:	82 e0       	ldi	r24, 0x02	; 2
    2e24:	63 e0       	ldi	r22, 0x03	; 3
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	0e 94 d7 06 	call	0xdae	; 0xdae <MDIO_Error_State_SetPinDirection>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	a0 ef       	ldi	r26, 0xF0	; 240
    2e32:	b1 e4       	ldi	r27, 0x41	; 65
    2e34:	8d ab       	std	Y+53, r24	; 0x35
    2e36:	9e ab       	std	Y+54, r25	; 0x36
    2e38:	af ab       	std	Y+55, r26	; 0x37
    2e3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e3e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e40:	8f a9       	ldd	r24, Y+55	; 0x37
    2e42:	98 ad       	ldd	r25, Y+56	; 0x38
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a ef       	ldi	r20, 0xFA	; 250
    2e4a:	54 e4       	ldi	r21, 0x44	; 68
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	89 ab       	std	Y+49, r24	; 0x31
    2e56:	9a ab       	std	Y+50, r25	; 0x32
    2e58:	ab ab       	std	Y+51, r26	; 0x33
    2e5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e5c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e5e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e60:	8b a9       	ldd	r24, Y+51	; 0x33
    2e62:	9c a9       	ldd	r25, Y+52	; 0x34
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e8       	ldi	r20, 0x80	; 128
    2e6a:	5f e3       	ldi	r21, 0x3F	; 63
    2e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e70:	88 23       	and	r24, r24
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	98 ab       	std	Y+48, r25	; 0x30
    2e7a:	8f a7       	std	Y+47, r24	; 0x2f
    2e7c:	3f c0       	rjmp	.+126    	; 0x2efc <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    2e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e80:	7a a9       	ldd	r23, Y+50	; 0x32
    2e82:	8b a9       	ldd	r24, Y+51	; 0x33
    2e84:	9c a9       	ldd	r25, Y+52	; 0x34
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	3f ef       	ldi	r19, 0xFF	; 255
    2e8a:	4f e7       	ldi	r20, 0x7F	; 127
    2e8c:	57 e4       	ldi	r21, 0x47	; 71
    2e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e92:	18 16       	cp	r1, r24
    2e94:	4c f5       	brge	.+82     	; 0x2ee8 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e96:	6d a9       	ldd	r22, Y+53	; 0x35
    2e98:	7e a9       	ldd	r23, Y+54	; 0x36
    2e9a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	98 ab       	std	Y+48, r25	; 0x30
    2ebc:	8f a7       	std	Y+47, r24	; 0x2f
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <HCLCD_Vid4Bits_Init+0x100>
    2ec0:	88 ec       	ldi	r24, 0xC8	; 200
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9e a7       	std	Y+46, r25	; 0x2e
    2ec6:	8d a7       	std	Y+45, r24	; 0x2d
    2ec8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eca:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <HCLCD_Vid4Bits_Init+0xee>
    2ed0:	9e a7       	std	Y+46, r25	; 0x2e
    2ed2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	98 ab       	std	Y+48, r25	; 0x30
    2edc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <HCLCD_Vid4Bits_Init+0xe2>
    2ee6:	14 c0       	rjmp	.+40     	; 0x2f10 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eea:	7a a9       	ldd	r23, Y+50	; 0x32
    2eec:	8b a9       	ldd	r24, Y+51	; 0x33
    2eee:	9c a9       	ldd	r25, Y+52	; 0x34
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	98 ab       	std	Y+48, r25	; 0x30
    2efa:	8f a7       	std	Y+47, r24	; 0x2f
    2efc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2efe:	98 a9       	ldd	r25, Y+48	; 0x30
    2f00:	9c a7       	std	Y+44, r25	; 0x2c
    2f02:	8b a7       	std	Y+43, r24	; 0x2b
    2f04:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f06:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <HCLCD_Vid4Bits_Init+0x12a>
    2f0c:	9c a7       	std	Y+44, r25	; 0x2c
    2f0e:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    2f16:	82 e0       	ldi	r24, 0x02	; 2
    2f18:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    2f1c:	88 e2       	ldi	r24, 0x28	; 40
    2f1e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	a0 e8       	ldi	r26, 0x80	; 128
    2f28:	bf e3       	ldi	r27, 0x3F	; 63
    2f2a:	8f a3       	std	Y+39, r24	; 0x27
    2f2c:	98 a7       	std	Y+40, r25	; 0x28
    2f2e:	a9 a7       	std	Y+41, r26	; 0x29
    2f30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f32:	6f a1       	ldd	r22, Y+39	; 0x27
    2f34:	78 a5       	ldd	r23, Y+40	; 0x28
    2f36:	89 a5       	ldd	r24, Y+41	; 0x29
    2f38:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ef       	ldi	r20, 0xFA	; 250
    2f40:	54 e4       	ldi	r21, 0x44	; 68
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8b a3       	std	Y+35, r24	; 0x23
    2f4c:	9c a3       	std	Y+36, r25	; 0x24
    2f4e:	ad a3       	std	Y+37, r26	; 0x25
    2f50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f52:	6b a1       	ldd	r22, Y+35	; 0x23
    2f54:	7c a1       	ldd	r23, Y+36	; 0x24
    2f56:	8d a1       	ldd	r24, Y+37	; 0x25
    2f58:	9e a1       	ldd	r25, Y+38	; 0x26
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e8       	ldi	r20, 0x80	; 128
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f66:	88 23       	and	r24, r24
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	9a a3       	std	Y+34, r25	; 0x22
    2f70:	89 a3       	std	Y+33, r24	; 0x21
    2f72:	3f c0       	rjmp	.+126    	; 0x2ff2 <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    2f74:	6b a1       	ldd	r22, Y+35	; 0x23
    2f76:	7c a1       	ldd	r23, Y+36	; 0x24
    2f78:	8d a1       	ldd	r24, Y+37	; 0x25
    2f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	3f ef       	ldi	r19, 0xFF	; 255
    2f80:	4f e7       	ldi	r20, 0x7F	; 127
    2f82:	57 e4       	ldi	r21, 0x47	; 71
    2f84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f88:	18 16       	cp	r1, r24
    2f8a:	4c f5       	brge	.+82     	; 0x2fde <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f90:	89 a5       	ldd	r24, Y+41	; 0x29
    2f92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e2       	ldi	r20, 0x20	; 32
    2f9a:	51 e4       	ldi	r21, 0x41	; 65
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9a a3       	std	Y+34, r25	; 0x22
    2fb2:	89 a3       	std	Y+33, r24	; 0x21
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <HCLCD_Vid4Bits_Init+0x1f6>
    2fb6:	88 ec       	ldi	r24, 0xC8	; 200
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	98 a3       	std	Y+32, r25	; 0x20
    2fbc:	8f 8f       	std	Y+31, r24	; 0x1f
    2fbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fc0:	98 a1       	ldd	r25, Y+32	; 0x20
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <HCLCD_Vid4Bits_Init+0x1e4>
    2fc6:	98 a3       	std	Y+32, r25	; 0x20
    2fc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	89 a1       	ldd	r24, Y+33	; 0x21
    2fcc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	9a a3       	std	Y+34, r25	; 0x22
    2fd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	69 f7       	brne	.-38     	; 0x2fb6 <HCLCD_Vid4Bits_Init+0x1d8>
    2fdc:	14 c0       	rjmp	.+40     	; 0x3006 <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fde:	6b a1       	ldd	r22, Y+35	; 0x23
    2fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9a a3       	std	Y+34, r25	; 0x22
    2ff0:	89 a3       	std	Y+33, r24	; 0x21
    2ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ff8:	8d 8f       	std	Y+29, r24	; 0x1d
    2ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ffc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <HCLCD_Vid4Bits_Init+0x220>
    3002:	9e 8f       	std	Y+30, r25	; 0x1e
    3004:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    300c:	8f e0       	ldi	r24, 0x0F	; 15
    300e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	a0 e8       	ldi	r26, 0x80	; 128
    3018:	bf e3       	ldi	r27, 0x3F	; 63
    301a:	89 8f       	std	Y+25, r24	; 0x19
    301c:	9a 8f       	std	Y+26, r25	; 0x1a
    301e:	ab 8f       	std	Y+27, r26	; 0x1b
    3020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3022:	69 8d       	ldd	r22, Y+25	; 0x19
    3024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	4a ef       	ldi	r20, 0xFA	; 250
    3030:	54 e4       	ldi	r21, 0x44	; 68
    3032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	8d 8b       	std	Y+21, r24	; 0x15
    303c:	9e 8b       	std	Y+22, r25	; 0x16
    303e:	af 8b       	std	Y+23, r26	; 0x17
    3040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3042:	6d 89       	ldd	r22, Y+21	; 0x15
    3044:	7e 89       	ldd	r23, Y+22	; 0x16
    3046:	8f 89       	ldd	r24, Y+23	; 0x17
    3048:	98 8d       	ldd	r25, Y+24	; 0x18
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e8       	ldi	r20, 0x80	; 128
    3050:	5f e3       	ldi	r21, 0x3F	; 63
    3052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3056:	88 23       	and	r24, r24
    3058:	2c f4       	brge	.+10     	; 0x3064 <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	9c 8b       	std	Y+20, r25	; 0x14
    3060:	8b 8b       	std	Y+19, r24	; 0x13
    3062:	3f c0       	rjmp	.+126    	; 0x30e2 <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    3064:	6d 89       	ldd	r22, Y+21	; 0x15
    3066:	7e 89       	ldd	r23, Y+22	; 0x16
    3068:	8f 89       	ldd	r24, Y+23	; 0x17
    306a:	98 8d       	ldd	r25, Y+24	; 0x18
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	3f ef       	ldi	r19, 0xFF	; 255
    3070:	4f e7       	ldi	r20, 0x7F	; 127
    3072:	57 e4       	ldi	r21, 0x47	; 71
    3074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3078:	18 16       	cp	r1, r24
    307a:	4c f5       	brge	.+82     	; 0x30ce <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    307c:	69 8d       	ldd	r22, Y+25	; 0x19
    307e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e2       	ldi	r20, 0x20	; 32
    308a:	51 e4       	ldi	r21, 0x41	; 65
    308c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	bc 01       	movw	r22, r24
    3096:	cd 01       	movw	r24, r26
    3098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	9c 8b       	std	Y+20, r25	; 0x14
    30a2:	8b 8b       	std	Y+19, r24	; 0x13
    30a4:	0f c0       	rjmp	.+30     	; 0x30c4 <HCLCD_Vid4Bits_Init+0x2e6>
    30a6:	88 ec       	ldi	r24, 0xC8	; 200
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	9a 8b       	std	Y+18, r25	; 0x12
    30ac:	89 8b       	std	Y+17, r24	; 0x11
    30ae:	89 89       	ldd	r24, Y+17	; 0x11
    30b0:	9a 89       	ldd	r25, Y+18	; 0x12
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	f1 f7       	brne	.-4      	; 0x30b2 <HCLCD_Vid4Bits_Init+0x2d4>
    30b6:	9a 8b       	std	Y+18, r25	; 0x12
    30b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ba:	8b 89       	ldd	r24, Y+19	; 0x13
    30bc:	9c 89       	ldd	r25, Y+20	; 0x14
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	9c 8b       	std	Y+20, r25	; 0x14
    30c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c4:	8b 89       	ldd	r24, Y+19	; 0x13
    30c6:	9c 89       	ldd	r25, Y+20	; 0x14
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	69 f7       	brne	.-38     	; 0x30a6 <HCLCD_Vid4Bits_Init+0x2c8>
    30cc:	14 c0       	rjmp	.+40     	; 0x30f6 <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ce:	6d 89       	ldd	r22, Y+21	; 0x15
    30d0:	7e 89       	ldd	r23, Y+22	; 0x16
    30d2:	8f 89       	ldd	r24, Y+23	; 0x17
    30d4:	98 8d       	ldd	r25, Y+24	; 0x18
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	9c 8b       	std	Y+20, r25	; 0x14
    30e0:	8b 8b       	std	Y+19, r24	; 0x13
    30e2:	8b 89       	ldd	r24, Y+19	; 0x13
    30e4:	9c 89       	ldd	r25, Y+20	; 0x14
    30e6:	98 8b       	std	Y+16, r25	; 0x10
    30e8:	8f 87       	std	Y+15, r24	; 0x0f
    30ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ec:	98 89       	ldd	r25, Y+16	; 0x10
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <HCLCD_Vid4Bits_Init+0x310>
    30f2:	98 8b       	std	Y+16, r25	; 0x10
    30f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	a0 e0       	ldi	r26, 0x00	; 0
    3108:	b0 e4       	ldi	r27, 0x40	; 64
    310a:	8b 87       	std	Y+11, r24	; 0x0b
    310c:	9c 87       	std	Y+12, r25	; 0x0c
    310e:	ad 87       	std	Y+13, r26	; 0x0d
    3110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3112:	6b 85       	ldd	r22, Y+11	; 0x0b
    3114:	7c 85       	ldd	r23, Y+12	; 0x0c
    3116:	8d 85       	ldd	r24, Y+13	; 0x0d
    3118:	9e 85       	ldd	r25, Y+14	; 0x0e
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	4a ef       	ldi	r20, 0xFA	; 250
    3120:	54 e4       	ldi	r21, 0x44	; 68
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	8f 83       	std	Y+7, r24	; 0x07
    312c:	98 87       	std	Y+8, r25	; 0x08
    312e:	a9 87       	std	Y+9, r26	; 0x09
    3130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3132:	6f 81       	ldd	r22, Y+7	; 0x07
    3134:	78 85       	ldd	r23, Y+8	; 0x08
    3136:	89 85       	ldd	r24, Y+9	; 0x09
    3138:	9a 85       	ldd	r25, Y+10	; 0x0a
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e8       	ldi	r20, 0x80	; 128
    3140:	5f e3       	ldi	r21, 0x3F	; 63
    3142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3146:	88 23       	and	r24, r24
    3148:	2c f4       	brge	.+10     	; 0x3154 <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
    3152:	3f c0       	rjmp	.+126    	; 0x31d2 <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    3154:	6f 81       	ldd	r22, Y+7	; 0x07
    3156:	78 85       	ldd	r23, Y+8	; 0x08
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	3f ef       	ldi	r19, 0xFF	; 255
    3160:	4f e7       	ldi	r20, 0x7F	; 127
    3162:	57 e4       	ldi	r21, 0x47	; 71
    3164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3168:	18 16       	cp	r1, r24
    316a:	4c f5       	brge	.+82     	; 0x31be <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316c:	6b 85       	ldd	r22, Y+11	; 0x0b
    316e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3170:	8d 85       	ldd	r24, Y+13	; 0x0d
    3172:	9e 85       	ldd	r25, Y+14	; 0x0e
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e2       	ldi	r20, 0x20	; 32
    317a:	51 e4       	ldi	r21, 0x41	; 65
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	bc 01       	movw	r22, r24
    3186:	cd 01       	movw	r24, r26
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	9e 83       	std	Y+6, r25	; 0x06
    3192:	8d 83       	std	Y+5, r24	; 0x05
    3194:	0f c0       	rjmp	.+30     	; 0x31b4 <HCLCD_Vid4Bits_Init+0x3d6>
    3196:	88 ec       	ldi	r24, 0xC8	; 200
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	9c 83       	std	Y+4, r25	; 0x04
    319c:	8b 83       	std	Y+3, r24	; 0x03
    319e:	8b 81       	ldd	r24, Y+3	; 0x03
    31a0:	9c 81       	ldd	r25, Y+4	; 0x04
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <HCLCD_Vid4Bits_Init+0x3c4>
    31a6:	9c 83       	std	Y+4, r25	; 0x04
    31a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	9e 81       	ldd	r25, Y+6	; 0x06
    31b8:	00 97       	sbiw	r24, 0x00	; 0
    31ba:	69 f7       	brne	.-38     	; 0x3196 <HCLCD_Vid4Bits_Init+0x3b8>
    31bc:	14 c0       	rjmp	.+40     	; 0x31e6 <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31be:	6f 81       	ldd	r22, Y+7	; 0x07
    31c0:	78 85       	ldd	r23, Y+8	; 0x08
    31c2:	89 85       	ldd	r24, Y+9	; 0x09
    31c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9e 83       	std	Y+6, r25	; 0x06
    31d0:	8d 83       	std	Y+5, r24	; 0x05
    31d2:	8d 81       	ldd	r24, Y+5	; 0x05
    31d4:	9e 81       	ldd	r25, Y+6	; 0x06
    31d6:	9a 83       	std	Y+2, r25	; 0x02
    31d8:	89 83       	std	Y+1, r24	; 0x01
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	9a 81       	ldd	r25, Y+2	; 0x02
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	f1 f7       	brne	.-4      	; 0x31de <HCLCD_Vid4Bits_Init+0x400>
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    31ec:	86 e0       	ldi	r24, 0x06	; 6
    31ee:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
}
    31f2:	e9 96       	adiw	r28, 0x39	; 57
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	de bf       	out	0x3e, r29	; 62
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	2f 97       	sbiw	r28, 0x0f	; 15
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	63 e0       	ldi	r22, 0x03	; 3
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	63 e0       	ldi	r22, 0x03	; 3
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    322e:	84 e0       	ldi	r24, 0x04	; 4
    3230:	63 e0       	ldi	r22, 0x03	; 3
    3232:	4f 85       	ldd	r20, Y+15	; 0x0f
    3234:	0e 94 0d 0a 	call	0x141a	; 0x141a <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3238:	82 e0       	ldi	r24, 0x02	; 2
    323a:	63 e0       	ldi	r22, 0x03	; 3
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a0 e0       	ldi	r26, 0x00	; 0
    3248:	b0 e4       	ldi	r27, 0x40	; 64
    324a:	8b 87       	std	Y+11, r24	; 0x0b
    324c:	9c 87       	std	Y+12, r25	; 0x0c
    324e:	ad 87       	std	Y+13, r26	; 0x0d
    3250:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	6b 85       	ldd	r22, Y+11	; 0x0b
    3254:	7c 85       	ldd	r23, Y+12	; 0x0c
    3256:	8d 85       	ldd	r24, Y+13	; 0x0d
    3258:	9e 85       	ldd	r25, Y+14	; 0x0e
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a ef       	ldi	r20, 0xFA	; 250
    3260:	54 e4       	ldi	r21, 0x44	; 68
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8f 83       	std	Y+7, r24	; 0x07
    326c:	98 87       	std	Y+8, r25	; 0x08
    326e:	a9 87       	std	Y+9, r26	; 0x09
    3270:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3272:	6f 81       	ldd	r22, Y+7	; 0x07
    3274:	78 85       	ldd	r23, Y+8	; 0x08
    3276:	89 85       	ldd	r24, Y+9	; 0x09
    3278:	9a 85       	ldd	r25, Y+10	; 0x0a
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9e 83       	std	Y+6, r25	; 0x06
    3290:	8d 83       	std	Y+5, r24	; 0x05
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    3294:	6f 81       	ldd	r22, Y+7	; 0x07
    3296:	78 85       	ldd	r23, Y+8	; 0x08
    3298:	89 85       	ldd	r24, Y+9	; 0x09
    329a:	9a 85       	ldd	r25, Y+10	; 0x0a
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9e 83       	std	Y+6, r25	; 0x06
    32d2:	8d 83       	std	Y+5, r24	; 0x05
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <HCLCD_VidWriteChar_4Bits+0xf0>
    32d6:	88 ec       	ldi	r24, 0xC8	; 200
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	9c 83       	std	Y+4, r25	; 0x04
    32dc:	8b 83       	std	Y+3, r24	; 0x03
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	9c 81       	ldd	r25, Y+4	; 0x04
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <HCLCD_VidWriteChar_4Bits+0xde>
    32e6:	9c 83       	std	Y+4, r25	; 0x04
    32e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	8d 81       	ldd	r24, Y+5	; 0x05
    32f6:	9e 81       	ldd	r25, Y+6	; 0x06
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <HCLCD_VidWriteChar_4Bits+0xd2>
    32fc:	14 c0       	rjmp	.+40     	; 0x3326 <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3300:	78 85       	ldd	r23, Y+8	; 0x08
    3302:	89 85       	ldd	r24, Y+9	; 0x09
    3304:	9a 85       	ldd	r25, Y+10	; 0x0a
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	8d 83       	std	Y+5, r24	; 0x05
    3312:	8d 81       	ldd	r24, Y+5	; 0x05
    3314:	9e 81       	ldd	r25, Y+6	; 0x06
    3316:	9a 83       	std	Y+2, r25	; 0x02
    3318:	89 83       	std	Y+1, r24	; 0x01
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	9a 81       	ldd	r25, Y+2	; 0x02
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <HCLCD_VidWriteChar_4Bits+0x11a>
    3322:	9a 83       	std	Y+2, r25	; 0x02
    3324:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	63 e0       	ldi	r22, 0x03	; 3
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 2a 08 	call	0x1054	; 0x1054 <MDIO_Error_State_SetPinValue>
}
    3330:	2f 96       	adiw	r28, 0x0f	; 15
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	0f 92       	push	r0
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	82 95       	swap	r24
    3352:	8f 70       	andi	r24, 0x0F	; 15
    3354:	0e 94 02 19 	call	0x3204	; 0x3204 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	0e 94 02 19 	call	0x3204	; 0x3204 <HCLCD_VidWriteChar_4Bits>
}
    335e:	0f 90       	pop	r0
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	00 d0       	rcall	.+0      	; 0x336c <HCLCD_Vid4Bits_DisplayString+0x6>
    336c:	0f 92       	push	r0
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	9b 83       	std	Y+3, r25	; 0x03
    3374:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3376:	19 82       	std	Y+1, r1	; 0x01
    3378:	0e c0       	rjmp	.+28     	; 0x3396 <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	9b 81       	ldd	r25, Y+3	; 0x03
    3384:	fc 01       	movw	r30, r24
    3386:	e2 0f       	add	r30, r18
    3388:	f3 1f       	adc	r31, r19
    338a:	80 81       	ld	r24, Z
    338c:	0e 94 a1 19 	call	0x3342	; 0x3342 <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	8f 5f       	subi	r24, 0xFF	; 255
    3394:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	9b 81       	ldd	r25, Y+3	; 0x03
    33a0:	fc 01       	movw	r30, r24
    33a2:	e2 0f       	add	r30, r18
    33a4:	f3 1f       	adc	r31, r19
    33a6:	80 81       	ld	r24, Z
    33a8:	88 23       	and	r24, r24
    33aa:	39 f7       	brne	.-50     	; 0x337a <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	60 97       	sbiw	r28, 0x10	; 16
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	6d 87       	std	Y+13, r22	; 0x0d
    33d2:	7e 87       	std	Y+14, r23	; 0x0e
    33d4:	8f 87       	std	Y+15, r24	; 0x0f
    33d6:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    33d8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    33da:	8d 85       	ldd	r24, Y+13	; 0x0d
    33dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33de:	af 85       	ldd	r26, Y+15	; 0x0f
    33e0:	b8 89       	ldd	r27, Y+16	; 0x10
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	a1 05       	cpc	r26, r1
    33e6:	b1 05       	cpc	r27, r1
    33e8:	09 f4       	brne	.+2      	; 0x33ec <HCLCD_Vid4Bits_DisplayNumber+0x34>
    33ea:	4f c0       	rjmp	.+158    	; 0x348a <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    33ec:	2d c0       	rjmp	.+90     	; 0x3448 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	08 2f       	mov	r16, r24
    33f2:	10 e0       	ldi	r17, 0x00	; 0
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	af 85       	ldd	r26, Y+15	; 0x0f
    33fa:	b8 89       	ldd	r27, Y+16	; 0x10
    33fc:	2a e0       	ldi	r18, 0x0A	; 10
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	bc 01       	movw	r22, r24
    3406:	cd 01       	movw	r24, r26
    3408:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__udivmodsi4>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	28 2f       	mov	r18, r24
    3412:	ce 01       	movw	r24, r28
    3414:	03 96       	adiw	r24, 0x03	; 3
    3416:	fc 01       	movw	r30, r24
    3418:	e0 0f       	add	r30, r16
    341a:	f1 1f       	adc	r31, r17
    341c:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    341e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3420:	9e 85       	ldd	r25, Y+14	; 0x0e
    3422:	af 85       	ldd	r26, Y+15	; 0x0f
    3424:	b8 89       	ldd	r27, Y+16	; 0x10
    3426:	2a e0       	ldi	r18, 0x0A	; 10
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__udivmodsi4>
    3436:	da 01       	movw	r26, r20
    3438:	c9 01       	movw	r24, r18
    343a:	8d 87       	std	Y+13, r24	; 0x0d
    343c:	9e 87       	std	Y+14, r25	; 0x0e
    343e:	af 87       	std	Y+15, r26	; 0x0f
    3440:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	8f 5f       	subi	r24, 0xFF	; 255
    3446:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3448:	8d 85       	ldd	r24, Y+13	; 0x0d
    344a:	9e 85       	ldd	r25, Y+14	; 0x0e
    344c:	af 85       	ldd	r26, Y+15	; 0x0f
    344e:	b8 89       	ldd	r27, Y+16	; 0x10
    3450:	00 97       	sbiw	r24, 0x00	; 0
    3452:	a1 05       	cpc	r26, r1
    3454:	b1 05       	cpc	r27, r1
    3456:	59 f6       	brne	.-106    	; 0x33ee <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	81 50       	subi	r24, 0x01	; 1
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	11 c0       	rjmp	.+34     	; 0x3482 <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	28 2f       	mov	r18, r24
    3464:	33 27       	eor	r19, r19
    3466:	27 fd       	sbrc	r18, 7
    3468:	30 95       	com	r19
    346a:	ce 01       	movw	r24, r28
    346c:	03 96       	adiw	r24, 0x03	; 3
    346e:	fc 01       	movw	r30, r24
    3470:	e2 0f       	add	r30, r18
    3472:	f3 1f       	adc	r31, r19
    3474:	80 81       	ld	r24, Z
    3476:	80 5d       	subi	r24, 0xD0	; 208
    3478:	0e 94 a1 19 	call	0x3342	; 0x3342 <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	81 50       	subi	r24, 0x01	; 1
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	88 23       	and	r24, r24
    3486:	64 f7       	brge	.-40     	; 0x3460 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3488:	03 c0       	rjmp	.+6      	; 0x3490 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    348a:	80 e3       	ldi	r24, 0x30	; 48
    348c:	0e 94 a1 19 	call	0x3342	; 0x3342 <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3490:	60 96       	adiw	r28, 0x10	; 16
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	cf 91       	pop	r28
    349e:	df 91       	pop	r29
    34a0:	1f 91       	pop	r17
    34a2:	0f 91       	pop	r16
    34a4:	08 95       	ret

000034a6 <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	00 d0       	rcall	.+0      	; 0x34ac <HCLCD_Vid4Bits_SetPosition+0x6>
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	89 83       	std	Y+1, r24	; 0x01
    34b2:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	81 30       	cpi	r24, 0x01	; 1
    34b8:	b9 f4       	brne	.+46     	; 0x34e8 <HCLCD_Vid4Bits_SetPosition+0x42>
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	80 31       	cpi	r24, 0x10	; 16
    34be:	a0 f4       	brcc	.+40     	; 0x34e8 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	88 2f       	mov	r24, r24
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	80 58       	subi	r24, 0x80	; 128
    34c8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ca:	95 95       	asr	r25
    34cc:	87 95       	ror	r24
    34ce:	95 95       	asr	r25
    34d0:	87 95       	ror	r24
    34d2:	95 95       	asr	r25
    34d4:	87 95       	ror	r24
    34d6:	95 95       	asr	r25
    34d8:	87 95       	ror	r24
    34da:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	80 58       	subi	r24, 0x80	; 128
    34e2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    34e6:	19 c0       	rjmp	.+50     	; 0x351a <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	82 30       	cpi	r24, 0x02	; 2
    34ec:	b1 f4       	brne	.+44     	; 0x351a <HCLCD_Vid4Bits_SetPosition+0x74>
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	80 31       	cpi	r24, 0x10	; 16
    34f2:	98 f4       	brcc	.+38     	; 0x351a <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	88 2f       	mov	r24, r24
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	80 54       	subi	r24, 0x40	; 64
    34fc:	9f 4f       	sbci	r25, 0xFF	; 255
    34fe:	95 95       	asr	r25
    3500:	87 95       	ror	r24
    3502:	95 95       	asr	r25
    3504:	87 95       	ror	r24
    3506:	95 95       	asr	r25
    3508:	87 95       	ror	r24
    350a:	95 95       	asr	r25
    350c:	87 95       	ror	r24
    350e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	80 54       	subi	r24, 0x40	; 64
    3516:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	08 95       	ret

00003524 <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3524:	df 93       	push	r29
    3526:	cf 93       	push	r28
    3528:	00 d0       	rcall	.+0      	; 0x352a <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    352a:	00 d0       	rcall	.+0      	; 0x352c <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	8a 83       	std	Y+2, r24	; 0x02
    3532:	7c 83       	std	Y+4, r23	; 0x04
    3534:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	88 30       	cpi	r24, 0x08	; 8
    353a:	98 f5       	brcc	.+102    	; 0x35a2 <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	88 2f       	mov	r24, r24
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	08 96       	adiw	r24, 0x08	; 8
    3544:	88 0f       	add	r24, r24
    3546:	99 1f       	adc	r25, r25
    3548:	88 0f       	add	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	95 95       	asr	r25
    3552:	87 95       	ror	r24
    3554:	95 95       	asr	r25
    3556:	87 95       	ror	r24
    3558:	95 95       	asr	r25
    355a:	87 95       	ror	r24
    355c:	95 95       	asr	r25
    355e:	87 95       	ror	r24
    3560:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3564:	8a 81       	ldd	r24, Y+2	; 0x02
    3566:	88 2f       	mov	r24, r24
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	08 96       	adiw	r24, 0x08	; 8
    356c:	88 0f       	add	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	88 0f       	add	r24, r24
    3576:	99 1f       	adc	r25, r25
    3578:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    357c:	19 82       	std	Y+1, r1	; 0x01
    357e:	0e c0       	rjmp	.+28     	; 0x359c <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	28 2f       	mov	r18, r24
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	8b 81       	ldd	r24, Y+3	; 0x03
    3588:	9c 81       	ldd	r25, Y+4	; 0x04
    358a:	fc 01       	movw	r30, r24
    358c:	e2 0f       	add	r30, r18
    358e:	f3 1f       	adc	r31, r19
    3590:	80 81       	ld	r24, Z
    3592:	0e 94 a1 19 	call	0x3342	; 0x3342 <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	8f 5f       	subi	r24, 0xFF	; 255
    359a:	89 83       	std	Y+1, r24	; 0x01
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	88 30       	cpi	r24, 0x08	; 8
    35a0:	78 f3       	brcs	.-34     	; 0x3580 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	cf 91       	pop	r28
    35ac:	df 91       	pop	r29
    35ae:	08 95       	ret

000035b0 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    35b0:	df 93       	push	r29
    35b2:	cf 93       	push	r28
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	2e 97       	sbiw	r28, 0x0e	; 14
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	a0 e0       	ldi	r26, 0x00	; 0
    35d6:	b0 e4       	ldi	r27, 0x40	; 64
    35d8:	8b 87       	std	Y+11, r24	; 0x0b
    35da:	9c 87       	std	Y+12, r25	; 0x0c
    35dc:	ad 87       	std	Y+13, r26	; 0x0d
    35de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	4a ef       	ldi	r20, 0xFA	; 250
    35ee:	54 e4       	ldi	r21, 0x44	; 68
    35f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	8f 83       	std	Y+7, r24	; 0x07
    35fa:	98 87       	std	Y+8, r25	; 0x08
    35fc:	a9 87       	std	Y+9, r26	; 0x09
    35fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3600:	6f 81       	ldd	r22, Y+7	; 0x07
    3602:	78 85       	ldd	r23, Y+8	; 0x08
    3604:	89 85       	ldd	r24, Y+9	; 0x09
    3606:	9a 85       	ldd	r25, Y+10	; 0x0a
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e8       	ldi	r20, 0x80	; 128
    360e:	5f e3       	ldi	r21, 0x3F	; 63
    3610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3614:	88 23       	and	r24, r24
    3616:	2c f4       	brge	.+10     	; 0x3622 <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	9e 83       	std	Y+6, r25	; 0x06
    361e:	8d 83       	std	Y+5, r24	; 0x05
    3620:	3f c0       	rjmp	.+126    	; 0x36a0 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3622:	6f 81       	ldd	r22, Y+7	; 0x07
    3624:	78 85       	ldd	r23, Y+8	; 0x08
    3626:	89 85       	ldd	r24, Y+9	; 0x09
    3628:	9a 85       	ldd	r25, Y+10	; 0x0a
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	3f ef       	ldi	r19, 0xFF	; 255
    362e:	4f e7       	ldi	r20, 0x7F	; 127
    3630:	57 e4       	ldi	r21, 0x47	; 71
    3632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3636:	18 16       	cp	r1, r24
    3638:	4c f5       	brge	.+82     	; 0x368c <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363a:	6b 85       	ldd	r22, Y+11	; 0x0b
    363c:	7c 85       	ldd	r23, Y+12	; 0x0c
    363e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3640:	9e 85       	ldd	r25, Y+14	; 0x0e
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e2       	ldi	r20, 0x20	; 32
    3648:	51 e4       	ldi	r21, 0x41	; 65
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	9e 83       	std	Y+6, r25	; 0x06
    3660:	8d 83       	std	Y+5, r24	; 0x05
    3662:	0f c0       	rjmp	.+30     	; 0x3682 <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3664:	88 ec       	ldi	r24, 0xC8	; 200
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9c 83       	std	Y+4, r25	; 0x04
    366a:	8b 83       	std	Y+3, r24	; 0x03
    366c:	8b 81       	ldd	r24, Y+3	; 0x03
    366e:	9c 81       	ldd	r25, Y+4	; 0x04
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3674:	9c 83       	std	Y+4, r25	; 0x04
    3676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3678:	8d 81       	ldd	r24, Y+5	; 0x05
    367a:	9e 81       	ldd	r25, Y+6	; 0x06
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	9e 81       	ldd	r25, Y+6	; 0x06
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	69 f7       	brne	.-38     	; 0x3664 <HCLCD_Vid4Bits_ClearScreen+0xb4>
    368a:	14 c0       	rjmp	.+40     	; 0x36b4 <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368c:	6f 81       	ldd	r22, Y+7	; 0x07
    368e:	78 85       	ldd	r23, Y+8	; 0x08
    3690:	89 85       	ldd	r24, Y+9	; 0x09
    3692:	9a 85       	ldd	r25, Y+10	; 0x0a
    3694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	9e 83       	std	Y+6, r25	; 0x06
    369e:	8d 83       	std	Y+5, r24	; 0x05
    36a0:	8d 81       	ldd	r24, Y+5	; 0x05
    36a2:	9e 81       	ldd	r25, Y+6	; 0x06
    36a4:	9a 83       	std	Y+2, r25	; 0x02
    36a6:	89 83       	std	Y+1, r24	; 0x01
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <HCLCD_Vid4Bits_ClearScreen+0xfc>
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    36b4:	2e 96       	adiw	r28, 0x0e	; 14
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
    36ce:	60 97       	sbiw	r28, 0x10	; 16
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	f8 94       	cli
    36d4:	de bf       	out	0x3e, r29	; 62
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    36dc:	1f 86       	std	Y+15, r1	; 0x0f
    36de:	7b c0       	rjmp	.+246    	; 0x37d6 <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    36e6:	88 e1       	ldi	r24, 0x18	; 24
    36e8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a6 e9       	ldi	r26, 0x96	; 150
    36f2:	b3 e4       	ldi	r27, 0x43	; 67
    36f4:	8b 87       	std	Y+11, r24	; 0x0b
    36f6:	9c 87       	std	Y+12, r25	; 0x0c
    36f8:	ad 87       	std	Y+13, r26	; 0x0d
    36fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3700:	8d 85       	ldd	r24, Y+13	; 0x0d
    3702:	9e 85       	ldd	r25, Y+14	; 0x0e
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4a ef       	ldi	r20, 0xFA	; 250
    370a:	54 e4       	ldi	r21, 0x44	; 68
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	8f 83       	std	Y+7, r24	; 0x07
    3716:	98 87       	std	Y+8, r25	; 0x08
    3718:	a9 87       	std	Y+9, r26	; 0x09
    371a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    371c:	6f 81       	ldd	r22, Y+7	; 0x07
    371e:	78 85       	ldd	r23, Y+8	; 0x08
    3720:	89 85       	ldd	r24, Y+9	; 0x09
    3722:	9a 85       	ldd	r25, Y+10	; 0x0a
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e8       	ldi	r20, 0x80	; 128
    372a:	5f e3       	ldi	r21, 0x3F	; 63
    372c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3730:	88 23       	and	r24, r24
    3732:	2c f4       	brge	.+10     	; 0x373e <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9e 83       	std	Y+6, r25	; 0x06
    373a:	8d 83       	std	Y+5, r24	; 0x05
    373c:	3f c0       	rjmp	.+126    	; 0x37bc <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    373e:	6f 81       	ldd	r22, Y+7	; 0x07
    3740:	78 85       	ldd	r23, Y+8	; 0x08
    3742:	89 85       	ldd	r24, Y+9	; 0x09
    3744:	9a 85       	ldd	r25, Y+10	; 0x0a
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	3f ef       	ldi	r19, 0xFF	; 255
    374a:	4f e7       	ldi	r20, 0x7F	; 127
    374c:	57 e4       	ldi	r21, 0x47	; 71
    374e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3752:	18 16       	cp	r1, r24
    3754:	4c f5       	brge	.+82     	; 0x37a8 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3756:	6b 85       	ldd	r22, Y+11	; 0x0b
    3758:	7c 85       	ldd	r23, Y+12	; 0x0c
    375a:	8d 85       	ldd	r24, Y+13	; 0x0d
    375c:	9e 85       	ldd	r25, Y+14	; 0x0e
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e2       	ldi	r20, 0x20	; 32
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	9e 83       	std	Y+6, r25	; 0x06
    377c:	8d 83       	std	Y+5, r24	; 0x05
    377e:	0f c0       	rjmp	.+30     	; 0x379e <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3780:	88 ec       	ldi	r24, 0xC8	; 200
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9c 83       	std	Y+4, r25	; 0x04
    3786:	8b 83       	std	Y+3, r24	; 0x03
    3788:	8b 81       	ldd	r24, Y+3	; 0x03
    378a:	9c 81       	ldd	r25, Y+4	; 0x04
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3790:	9c 83       	std	Y+4, r25	; 0x04
    3792:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3794:	8d 81       	ldd	r24, Y+5	; 0x05
    3796:	9e 81       	ldd	r25, Y+6	; 0x06
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	9e 83       	std	Y+6, r25	; 0x06
    379c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379e:	8d 81       	ldd	r24, Y+5	; 0x05
    37a0:	9e 81       	ldd	r25, Y+6	; 0x06
    37a2:	00 97       	sbiw	r24, 0x00	; 0
    37a4:	69 f7       	brne	.-38     	; 0x3780 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    37a6:	14 c0       	rjmp	.+40     	; 0x37d0 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a8:	6f 81       	ldd	r22, Y+7	; 0x07
    37aa:	78 85       	ldd	r23, Y+8	; 0x08
    37ac:	89 85       	ldd	r24, Y+9	; 0x09
    37ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9e 83       	std	Y+6, r25	; 0x06
    37ba:	8d 83       	std	Y+5, r24	; 0x05
    37bc:	8d 81       	ldd	r24, Y+5	; 0x05
    37be:	9e 81       	ldd	r25, Y+6	; 0x06
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	9a 81       	ldd	r25, Y+2	; 0x02
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    37cc:	9a 83       	std	Y+2, r25	; 0x02
    37ce:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    37d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d2:	8f 5f       	subi	r24, 0xFF	; 255
    37d4:	8f 87       	std	Y+15, r24	; 0x0f
    37d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    37d8:	88 89       	ldd	r24, Y+16	; 0x10
    37da:	98 17       	cp	r25, r24
    37dc:	08 f4       	brcc	.+2      	; 0x37e0 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    37de:	80 cf       	rjmp	.-256    	; 0x36e0 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    37e0:	60 96       	adiw	r28, 0x10	; 16
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	60 97       	sbiw	r28, 0x10	; 16
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	cd bf       	out	0x3d, r28	; 61
    3806:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3808:	1f 86       	std	Y+15, r1	; 0x0f
    380a:	7b c0       	rjmp	.+246    	; 0x3902 <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3812:	8c e1       	ldi	r24, 0x1C	; 28
    3814:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	a6 e9       	ldi	r26, 0x96	; 150
    381e:	b3 e4       	ldi	r27, 0x43	; 67
    3820:	8b 87       	std	Y+11, r24	; 0x0b
    3822:	9c 87       	std	Y+12, r25	; 0x0c
    3824:	ad 87       	std	Y+13, r26	; 0x0d
    3826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3828:	6b 85       	ldd	r22, Y+11	; 0x0b
    382a:	7c 85       	ldd	r23, Y+12	; 0x0c
    382c:	8d 85       	ldd	r24, Y+13	; 0x0d
    382e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	4a ef       	ldi	r20, 0xFA	; 250
    3836:	54 e4       	ldi	r21, 0x44	; 68
    3838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	8f 83       	std	Y+7, r24	; 0x07
    3842:	98 87       	std	Y+8, r25	; 0x08
    3844:	a9 87       	std	Y+9, r26	; 0x09
    3846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3848:	6f 81       	ldd	r22, Y+7	; 0x07
    384a:	78 85       	ldd	r23, Y+8	; 0x08
    384c:	89 85       	ldd	r24, Y+9	; 0x09
    384e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e8       	ldi	r20, 0x80	; 128
    3856:	5f e3       	ldi	r21, 0x3F	; 63
    3858:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    385c:	88 23       	and	r24, r24
    385e:	2c f4       	brge	.+10     	; 0x386a <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9e 83       	std	Y+6, r25	; 0x06
    3866:	8d 83       	std	Y+5, r24	; 0x05
    3868:	3f c0       	rjmp	.+126    	; 0x38e8 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    386a:	6f 81       	ldd	r22, Y+7	; 0x07
    386c:	78 85       	ldd	r23, Y+8	; 0x08
    386e:	89 85       	ldd	r24, Y+9	; 0x09
    3870:	9a 85       	ldd	r25, Y+10	; 0x0a
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	3f ef       	ldi	r19, 0xFF	; 255
    3876:	4f e7       	ldi	r20, 0x7F	; 127
    3878:	57 e4       	ldi	r21, 0x47	; 71
    387a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    387e:	18 16       	cp	r1, r24
    3880:	4c f5       	brge	.+82     	; 0x38d4 <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3882:	6b 85       	ldd	r22, Y+11	; 0x0b
    3884:	7c 85       	ldd	r23, Y+12	; 0x0c
    3886:	8d 85       	ldd	r24, Y+13	; 0x0d
    3888:	9e 85       	ldd	r25, Y+14	; 0x0e
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	40 e2       	ldi	r20, 0x20	; 32
    3890:	51 e4       	ldi	r21, 0x41	; 65
    3892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	bc 01       	movw	r22, r24
    389c:	cd 01       	movw	r24, r26
    389e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	0f c0       	rjmp	.+30     	; 0x38ca <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    38ac:	88 ec       	ldi	r24, 0xC8	; 200
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	9c 83       	std	Y+4, r25	; 0x04
    38b2:	8b 83       	std	Y+3, r24	; 0x03
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	9c 81       	ldd	r25, Y+4	; 0x04
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	f1 f7       	brne	.-4      	; 0x38b8 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    38bc:	9c 83       	std	Y+4, r25	; 0x04
    38be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c0:	8d 81       	ldd	r24, Y+5	; 0x05
    38c2:	9e 81       	ldd	r25, Y+6	; 0x06
    38c4:	01 97       	sbiw	r24, 0x01	; 1
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	69 f7       	brne	.-38     	; 0x38ac <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    38d2:	14 c0       	rjmp	.+40     	; 0x38fc <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d4:	6f 81       	ldd	r22, Y+7	; 0x07
    38d6:	78 85       	ldd	r23, Y+8	; 0x08
    38d8:	89 85       	ldd	r24, Y+9	; 0x09
    38da:	9a 85       	ldd	r25, Y+10	; 0x0a
    38dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	9e 83       	std	Y+6, r25	; 0x06
    38e6:	8d 83       	std	Y+5, r24	; 0x05
    38e8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ea:	9e 81       	ldd	r25, Y+6	; 0x06
    38ec:	9a 83       	std	Y+2, r25	; 0x02
    38ee:	89 83       	std	Y+1, r24	; 0x01
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    38f8:	9a 83       	std	Y+2, r25	; 0x02
    38fa:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    38fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38fe:	8f 5f       	subi	r24, 0xFF	; 255
    3900:	8f 87       	std	Y+15, r24	; 0x0f
    3902:	9f 85       	ldd	r25, Y+15	; 0x0f
    3904:	88 89       	ldd	r24, Y+16	; 0x10
    3906:	98 17       	cp	r25, r24
    3908:	08 f4       	brcc	.+2      	; 0x390c <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    390a:	80 cf       	rjmp	.-256    	; 0x380c <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    390c:	60 96       	adiw	r28, 0x10	; 16
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	f8 94       	cli
    3912:	de bf       	out	0x3e, r29	; 62
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	cd bf       	out	0x3d, r28	; 61
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	08 95       	ret

0000391e <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    391e:	df 93       	push	r29
    3920:	cf 93       	push	r28
    3922:	cd b7       	in	r28, 0x3d	; 61
    3924:	de b7       	in	r29, 0x3e	; 62
    3926:	60 97       	sbiw	r28, 0x10	; 16
    3928:	0f b6       	in	r0, 0x3f	; 63
    392a:	f8 94       	cli
    392c:	de bf       	out	0x3e, r29	; 62
    392e:	0f be       	out	0x3f, r0	; 63
    3930:	cd bf       	out	0x3d, r28	; 61
    3932:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3934:	1f 86       	std	Y+15, r1	; 0x0f
    3936:	7b c0       	rjmp	.+246    	; 0x3a2e <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    393e:	80 e1       	ldi	r24, 0x10	; 16
    3940:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	a6 e9       	ldi	r26, 0x96	; 150
    394a:	b3 e4       	ldi	r27, 0x43	; 67
    394c:	8b 87       	std	Y+11, r24	; 0x0b
    394e:	9c 87       	std	Y+12, r25	; 0x0c
    3950:	ad 87       	std	Y+13, r26	; 0x0d
    3952:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3954:	6b 85       	ldd	r22, Y+11	; 0x0b
    3956:	7c 85       	ldd	r23, Y+12	; 0x0c
    3958:	8d 85       	ldd	r24, Y+13	; 0x0d
    395a:	9e 85       	ldd	r25, Y+14	; 0x0e
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	4a ef       	ldi	r20, 0xFA	; 250
    3962:	54 e4       	ldi	r21, 0x44	; 68
    3964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	8f 83       	std	Y+7, r24	; 0x07
    396e:	98 87       	std	Y+8, r25	; 0x08
    3970:	a9 87       	std	Y+9, r26	; 0x09
    3972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3974:	6f 81       	ldd	r22, Y+7	; 0x07
    3976:	78 85       	ldd	r23, Y+8	; 0x08
    3978:	89 85       	ldd	r24, Y+9	; 0x09
    397a:	9a 85       	ldd	r25, Y+10	; 0x0a
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e8       	ldi	r20, 0x80	; 128
    3982:	5f e3       	ldi	r21, 0x3F	; 63
    3984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3988:	88 23       	and	r24, r24
    398a:	2c f4       	brge	.+10     	; 0x3996 <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9e 83       	std	Y+6, r25	; 0x06
    3992:	8d 83       	std	Y+5, r24	; 0x05
    3994:	3f c0       	rjmp	.+126    	; 0x3a14 <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    3996:	6f 81       	ldd	r22, Y+7	; 0x07
    3998:	78 85       	ldd	r23, Y+8	; 0x08
    399a:	89 85       	ldd	r24, Y+9	; 0x09
    399c:	9a 85       	ldd	r25, Y+10	; 0x0a
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	3f ef       	ldi	r19, 0xFF	; 255
    39a2:	4f e7       	ldi	r20, 0x7F	; 127
    39a4:	57 e4       	ldi	r21, 0x47	; 71
    39a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39aa:	18 16       	cp	r1, r24
    39ac:	4c f5       	brge	.+82     	; 0x3a00 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e2       	ldi	r20, 0x20	; 32
    39bc:	51 e4       	ldi	r21, 0x41	; 65
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	9e 83       	std	Y+6, r25	; 0x06
    39d4:	8d 83       	std	Y+5, r24	; 0x05
    39d6:	0f c0       	rjmp	.+30     	; 0x39f6 <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    39d8:	88 ec       	ldi	r24, 0xC8	; 200
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9c 83       	std	Y+4, r25	; 0x04
    39de:	8b 83       	std	Y+3, r24	; 0x03
    39e0:	8b 81       	ldd	r24, Y+3	; 0x03
    39e2:	9c 81       	ldd	r25, Y+4	; 0x04
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    39e8:	9c 83       	std	Y+4, r25	; 0x04
    39ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ec:	8d 81       	ldd	r24, Y+5	; 0x05
    39ee:	9e 81       	ldd	r25, Y+6	; 0x06
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	9e 83       	std	Y+6, r25	; 0x06
    39f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	9e 81       	ldd	r25, Y+6	; 0x06
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	69 f7       	brne	.-38     	; 0x39d8 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    39fe:	14 c0       	rjmp	.+40     	; 0x3a28 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a00:	6f 81       	ldd	r22, Y+7	; 0x07
    3a02:	78 85       	ldd	r23, Y+8	; 0x08
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	8d 81       	ldd	r24, Y+5	; 0x05
    3a16:	9e 81       	ldd	r25, Y+6	; 0x06
    3a18:	9a 83       	std	Y+2, r25	; 0x02
    3a1a:	89 83       	std	Y+1, r24	; 0x01
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	f1 f7       	brne	.-4      	; 0x3a20 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    3a24:	9a 83       	std	Y+2, r25	; 0x02
    3a26:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a2a:	8f 5f       	subi	r24, 0xFF	; 255
    3a2c:	8f 87       	std	Y+15, r24	; 0x0f
    3a2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a30:	88 89       	ldd	r24, Y+16	; 0x10
    3a32:	98 17       	cp	r25, r24
    3a34:	08 f4       	brcc	.+2      	; 0x3a38 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    3a36:	80 cf       	rjmp	.-256    	; 0x3938 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3a38:	60 96       	adiw	r28, 0x10	; 16
    3a3a:	0f b6       	in	r0, 0x3f	; 63
    3a3c:	f8 94       	cli
    3a3e:	de bf       	out	0x3e, r29	; 62
    3a40:	0f be       	out	0x3f, r0	; 63
    3a42:	cd bf       	out	0x3d, r28	; 61
    3a44:	cf 91       	pop	r28
    3a46:	df 91       	pop	r29
    3a48:	08 95       	ret

00003a4a <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3a4a:	df 93       	push	r29
    3a4c:	cf 93       	push	r28
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	60 97       	sbiw	r28, 0x10	; 16
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	de bf       	out	0x3e, r29	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	cd bf       	out	0x3d, r28	; 61
    3a5e:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3a60:	1f 86       	std	Y+15, r1	; 0x0f
    3a62:	7b c0       	rjmp	.+246    	; 0x3b5a <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    3a6a:	84 e1       	ldi	r24, 0x14	; 20
    3a6c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <HCLCD_Vid4Bits_SendCommand>
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	a6 e9       	ldi	r26, 0x96	; 150
    3a76:	b3 e4       	ldi	r27, 0x43	; 67
    3a78:	8b 87       	std	Y+11, r24	; 0x0b
    3a7a:	9c 87       	std	Y+12, r25	; 0x0c
    3a7c:	ad 87       	std	Y+13, r26	; 0x0d
    3a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	4a ef       	ldi	r20, 0xFA	; 250
    3a8e:	54 e4       	ldi	r21, 0x44	; 68
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	8f 83       	std	Y+7, r24	; 0x07
    3a9a:	98 87       	std	Y+8, r25	; 0x08
    3a9c:	a9 87       	std	Y+9, r26	; 0x09
    3a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa2:	78 85       	ldd	r23, Y+8	; 0x08
    3aa4:	89 85       	ldd	r24, Y+9	; 0x09
    3aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e8       	ldi	r20, 0x80	; 128
    3aae:	5f e3       	ldi	r21, 0x3F	; 63
    3ab0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ab4:	88 23       	and	r24, r24
    3ab6:	2c f4       	brge	.+10     	; 0x3ac2 <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	9e 83       	std	Y+6, r25	; 0x06
    3abe:	8d 83       	std	Y+5, r24	; 0x05
    3ac0:	3f c0       	rjmp	.+126    	; 0x3b40 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    3ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac4:	78 85       	ldd	r23, Y+8	; 0x08
    3ac6:	89 85       	ldd	r24, Y+9	; 0x09
    3ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	3f ef       	ldi	r19, 0xFF	; 255
    3ace:	4f e7       	ldi	r20, 0x7F	; 127
    3ad0:	57 e4       	ldi	r21, 0x47	; 71
    3ad2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ad6:	18 16       	cp	r1, r24
    3ad8:	4c f5       	brge	.+82     	; 0x3b2c <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    3adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e2       	ldi	r20, 0x20	; 32
    3ae8:	51 e4       	ldi	r21, 0x41	; 65
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	bc 01       	movw	r22, r24
    3af4:	cd 01       	movw	r24, r26
    3af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	9e 83       	std	Y+6, r25	; 0x06
    3b00:	8d 83       	std	Y+5, r24	; 0x05
    3b02:	0f c0       	rjmp	.+30     	; 0x3b22 <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    3b04:	88 ec       	ldi	r24, 0xC8	; 200
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	9c 83       	std	Y+4, r25	; 0x04
    3b0a:	8b 83       	std	Y+3, r24	; 0x03
    3b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    3b14:	9c 83       	std	Y+4, r25	; 0x04
    3b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b18:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	9e 83       	std	Y+6, r25	; 0x06
    3b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b22:	8d 81       	ldd	r24, Y+5	; 0x05
    3b24:	9e 81       	ldd	r25, Y+6	; 0x06
    3b26:	00 97       	sbiw	r24, 0x00	; 0
    3b28:	69 f7       	brne	.-38     	; 0x3b04 <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    3b2a:	14 c0       	rjmp	.+40     	; 0x3b54 <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2e:	78 85       	ldd	r23, Y+8	; 0x08
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	9e 81       	ldd	r25, Y+6	; 0x06
    3b44:	9a 83       	std	Y+2, r25	; 0x02
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    3b50:	9a 83       	std	Y+2, r25	; 0x02
    3b52:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3b54:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b56:	8f 5f       	subi	r24, 0xFF	; 255
    3b58:	8f 87       	std	Y+15, r24	; 0x0f
    3b5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b5c:	88 89       	ldd	r24, Y+16	; 0x10
    3b5e:	98 17       	cp	r25, r24
    3b60:	08 f4       	brcc	.+2      	; 0x3b64 <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    3b62:	80 cf       	rjmp	.-256    	; 0x3a64 <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    3b64:	60 96       	adiw	r28, 0x10	; 16
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	de bf       	out	0x3e, r29	; 62
    3b6c:	0f be       	out	0x3f, r0	; 63
    3b6e:	cd bf       	out	0x3d, r28	; 61
    3b70:	cf 91       	pop	r28
    3b72:	df 91       	pop	r29
    3b74:	08 95       	ret

00003b76 <main>:
/*Define Switch*/
SWITCH_t Switch_1 ={HSWITCH_PORTD,PIN3} ;

static u8 Flag = 0 ;
int main(void)
{
    3b76:	df 93       	push	r29
    3b78:	cf 93       	push	r28
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62
    3b7e:	2e 97       	sbiw	r28, 0x0e	; 14
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	cd bf       	out	0x3d, r28	; 61

	/*Initialize LEDs Positive Logic */

	HLED_VidInit(&B_LED1);
    3b8a:	8f e7       	ldi	r24, 0x7F	; 127
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <HLED_VidInit>
	HLED_VidInit(&R_LED2);
    3b92:	88 e6       	ldi	r24, 0x68	; 104
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	0e 94 cc 0c 	call	0x1998	; 0x1998 <HLED_VidInit>
	HLED_VidInit(&G_LED3);
    3b9a:	8a e6       	ldi	r24, 0x6A	; 106
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <HLED_VidInit>
	/*Initialize Switch interface as Pull resistance */
	HSWITCH_VidInit_PullUP(&Switch_1);
    3ba2:	8c e6       	ldi	r24, 0x6C	; 108
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 07 0b 	call	0x160e	; 0x160e <HSWITCH_VidInit_PullUP>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	aa ef       	ldi	r26, 0xFA	; 250
    3bb0:	b4 e4       	ldi	r27, 0x44	; 68
    3bb2:	8b 87       	std	Y+11, r24	; 0x0b
    3bb4:	9c 87       	std	Y+12, r25	; 0x0c
    3bb6:	ad 87       	std	Y+13, r26	; 0x0d
    3bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a ef       	ldi	r20, 0xFA	; 250
    3bc8:	54 e4       	ldi	r21, 0x44	; 68
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	8f 83       	std	Y+7, r24	; 0x07
    3bd4:	98 87       	std	Y+8, r25	; 0x08
    3bd6:	a9 87       	std	Y+9, r26	; 0x09
    3bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bda:	6f 81       	ldd	r22, Y+7	; 0x07
    3bdc:	78 85       	ldd	r23, Y+8	; 0x08
    3bde:	89 85       	ldd	r24, Y+9	; 0x09
    3be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bee:	88 23       	and	r24, r24
    3bf0:	2c f4       	brge	.+10     	; 0x3bfc <main+0x86>
		__ticks = 1;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	9e 83       	std	Y+6, r25	; 0x06
    3bf8:	8d 83       	std	Y+5, r24	; 0x05
    3bfa:	3f c0       	rjmp	.+126    	; 0x3c7a <main+0x104>
	else if (__tmp > 65535)
    3bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfe:	78 85       	ldd	r23, Y+8	; 0x08
    3c00:	89 85       	ldd	r24, Y+9	; 0x09
    3c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	3f ef       	ldi	r19, 0xFF	; 255
    3c08:	4f e7       	ldi	r20, 0x7F	; 127
    3c0a:	57 e4       	ldi	r21, 0x47	; 71
    3c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c10:	18 16       	cp	r1, r24
    3c12:	4c f5       	brge	.+82     	; 0x3c66 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e2       	ldi	r20, 0x20	; 32
    3c22:	51 e4       	ldi	r21, 0x41	; 65
    3c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	9e 83       	std	Y+6, r25	; 0x06
    3c3a:	8d 83       	std	Y+5, r24	; 0x05
    3c3c:	0f c0       	rjmp	.+30     	; 0x3c5c <main+0xe6>
    3c3e:	88 ec       	ldi	r24, 0xC8	; 200
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	9c 83       	std	Y+4, r25	; 0x04
    3c44:	8b 83       	std	Y+3, r24	; 0x03
    3c46:	8b 81       	ldd	r24, Y+3	; 0x03
    3c48:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <main+0xd4>
    3c4e:	9c 83       	std	Y+4, r25	; 0x04
    3c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c52:	8d 81       	ldd	r24, Y+5	; 0x05
    3c54:	9e 81       	ldd	r25, Y+6	; 0x06
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	9e 83       	std	Y+6, r25	; 0x06
    3c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	00 97       	sbiw	r24, 0x00	; 0
    3c62:	69 f7       	brne	.-38     	; 0x3c3e <main+0xc8>
    3c64:	14 c0       	rjmp	.+40     	; 0x3c8e <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c66:	6f 81       	ldd	r22, Y+7	; 0x07
    3c68:	78 85       	ldd	r23, Y+8	; 0x08
    3c6a:	89 85       	ldd	r24, Y+9	; 0x09
    3c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	8d 83       	std	Y+5, r24	; 0x05
    3c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7e:	9a 83       	std	Y+2, r25	; 0x02
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	9a 81       	ldd	r25, Y+2	; 0x02
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <main+0x110>
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);

	MEXTI1_VidInit();
    3c8e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MEXTI1_VidInit>
	MGIE_VidEnable();
    3c92:	0e 94 a3 05 	call	0xb46	; 0xb46 <MGIE_VidEnable>
	while(1)
	{
		if(Flag == 0)
    3c96:	80 91 81 00 	lds	r24, 0x0081
    3c9a:	88 23       	and	r24, r24
    3c9c:	69 f4       	brne	.+26     	; 0x3cb8 <main+0x142>
		{
			HLED_VidLed_Off(&B_LED1);
    3c9e:	8f e7       	ldi	r24, 0x7F	; 127
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <HLED_VidLed_Off>
			HLED_VidLed_Off(&R_LED2);
    3ca6:	88 e6       	ldi	r24, 0x68	; 104
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <HLED_VidLed_Off>
			HLED_VidLed_Off(&G_LED3);
    3cae:	8a e6       	ldi	r24, 0x6A	; 106
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <HLED_VidLed_Off>
    3cb6:	ef cf       	rjmp	.-34     	; 0x3c96 <main+0x120>
		}
		else if(Flag == 1)
    3cb8:	80 91 81 00 	lds	r24, 0x0081
    3cbc:	81 30       	cpi	r24, 0x01	; 1
    3cbe:	29 f4       	brne	.+10     	; 0x3cca <main+0x154>
		{
			HLED_VidLed_On(&B_LED1);
    3cc0:	8f e7       	ldi	r24, 0x7F	; 127
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <HLED_VidLed_On>
    3cc8:	e6 cf       	rjmp	.-52     	; 0x3c96 <main+0x120>
		}
		else if(Flag == 2)
    3cca:	80 91 81 00 	lds	r24, 0x0081
    3cce:	82 30       	cpi	r24, 0x02	; 2
    3cd0:	29 f4       	brne	.+10     	; 0x3cdc <main+0x166>
		{
			HLED_VidLed_On(&R_LED2);
    3cd2:	88 e6       	ldi	r24, 0x68	; 104
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <HLED_VidLed_On>
    3cda:	dd cf       	rjmp	.-70     	; 0x3c96 <main+0x120>
		}
		else if(Flag == 3)
    3cdc:	80 91 81 00 	lds	r24, 0x0081
    3ce0:	83 30       	cpi	r24, 0x03	; 3
    3ce2:	c9 f6       	brne	.-78     	; 0x3c96 <main+0x120>
		{
			HLED_VidLed_On(&G_LED3);
    3ce4:	8a e6       	ldi	r24, 0x6A	; 106
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <HLED_VidLed_On>
    3cec:	d4 cf       	rjmp	.-88     	; 0x3c96 <main+0x120>

00003cee <__vector_2>:
	return 0 ;
}

	void __vector_2(void)       __attribute__((signal));
	void __vector_2(void)
	{
    3cee:	1f 92       	push	r1
    3cf0:	0f 92       	push	r0
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	0f 92       	push	r0
    3cf6:	11 24       	eor	r1, r1
    3cf8:	8f 93       	push	r24
    3cfa:	df 93       	push	r29
    3cfc:	cf 93       	push	r28
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
		//HLED_VidLed_Toggle(&LED1);
		Flag++;
    3d02:	80 91 81 00 	lds	r24, 0x0081
    3d06:	8f 5f       	subi	r24, 0xFF	; 255
    3d08:	80 93 81 00 	sts	0x0081, r24
		if(Flag==4)
    3d0c:	80 91 81 00 	lds	r24, 0x0081
    3d10:	84 30       	cpi	r24, 0x04	; 4
    3d12:	11 f4       	brne	.+4      	; 0x3d18 <__vector_2+0x2a>
		{
			Flag = 0;
    3d14:	10 92 81 00 	sts	0x0081, r1
		}
	}
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	8f 91       	pop	r24
    3d1e:	0f 90       	pop	r0
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	0f 90       	pop	r0
    3d24:	1f 90       	pop	r1
    3d26:	18 95       	reti

00003d28 <__udivmodsi4>:
    3d28:	a1 e2       	ldi	r26, 0x21	; 33
    3d2a:	1a 2e       	mov	r1, r26
    3d2c:	aa 1b       	sub	r26, r26
    3d2e:	bb 1b       	sub	r27, r27
    3d30:	fd 01       	movw	r30, r26
    3d32:	0d c0       	rjmp	.+26     	; 0x3d4e <__udivmodsi4_ep>

00003d34 <__udivmodsi4_loop>:
    3d34:	aa 1f       	adc	r26, r26
    3d36:	bb 1f       	adc	r27, r27
    3d38:	ee 1f       	adc	r30, r30
    3d3a:	ff 1f       	adc	r31, r31
    3d3c:	a2 17       	cp	r26, r18
    3d3e:	b3 07       	cpc	r27, r19
    3d40:	e4 07       	cpc	r30, r20
    3d42:	f5 07       	cpc	r31, r21
    3d44:	20 f0       	brcs	.+8      	; 0x3d4e <__udivmodsi4_ep>
    3d46:	a2 1b       	sub	r26, r18
    3d48:	b3 0b       	sbc	r27, r19
    3d4a:	e4 0b       	sbc	r30, r20
    3d4c:	f5 0b       	sbc	r31, r21

00003d4e <__udivmodsi4_ep>:
    3d4e:	66 1f       	adc	r22, r22
    3d50:	77 1f       	adc	r23, r23
    3d52:	88 1f       	adc	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	1a 94       	dec	r1
    3d58:	69 f7       	brne	.-38     	; 0x3d34 <__udivmodsi4_loop>
    3d5a:	60 95       	com	r22
    3d5c:	70 95       	com	r23
    3d5e:	80 95       	com	r24
    3d60:	90 95       	com	r25
    3d62:	9b 01       	movw	r18, r22
    3d64:	ac 01       	movw	r20, r24
    3d66:	bd 01       	movw	r22, r26
    3d68:	cf 01       	movw	r24, r30
    3d6a:	08 95       	ret

00003d6c <__prologue_saves__>:
    3d6c:	2f 92       	push	r2
    3d6e:	3f 92       	push	r3
    3d70:	4f 92       	push	r4
    3d72:	5f 92       	push	r5
    3d74:	6f 92       	push	r6
    3d76:	7f 92       	push	r7
    3d78:	8f 92       	push	r8
    3d7a:	9f 92       	push	r9
    3d7c:	af 92       	push	r10
    3d7e:	bf 92       	push	r11
    3d80:	cf 92       	push	r12
    3d82:	df 92       	push	r13
    3d84:	ef 92       	push	r14
    3d86:	ff 92       	push	r15
    3d88:	0f 93       	push	r16
    3d8a:	1f 93       	push	r17
    3d8c:	cf 93       	push	r28
    3d8e:	df 93       	push	r29
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    3d94:	ca 1b       	sub	r28, r26
    3d96:	db 0b       	sbc	r29, r27
    3d98:	0f b6       	in	r0, 0x3f	; 63
    3d9a:	f8 94       	cli
    3d9c:	de bf       	out	0x3e, r29	; 62
    3d9e:	0f be       	out	0x3f, r0	; 63
    3da0:	cd bf       	out	0x3d, r28	; 61
    3da2:	09 94       	ijmp

00003da4 <__epilogue_restores__>:
    3da4:	2a 88       	ldd	r2, Y+18	; 0x12
    3da6:	39 88       	ldd	r3, Y+17	; 0x11
    3da8:	48 88       	ldd	r4, Y+16	; 0x10
    3daa:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dac:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dae:	7d 84       	ldd	r7, Y+13	; 0x0d
    3db0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3db2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3db4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3db6:	b9 84       	ldd	r11, Y+9	; 0x09
    3db8:	c8 84       	ldd	r12, Y+8	; 0x08
    3dba:	df 80       	ldd	r13, Y+7	; 0x07
    3dbc:	ee 80       	ldd	r14, Y+6	; 0x06
    3dbe:	fd 80       	ldd	r15, Y+5	; 0x05
    3dc0:	0c 81       	ldd	r16, Y+4	; 0x04
    3dc2:	1b 81       	ldd	r17, Y+3	; 0x03
    3dc4:	aa 81       	ldd	r26, Y+2	; 0x02
    3dc6:	b9 81       	ldd	r27, Y+1	; 0x01
    3dc8:	ce 0f       	add	r28, r30
    3dca:	d1 1d       	adc	r29, r1
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	f8 94       	cli
    3dd0:	de bf       	out	0x3e, r29	; 62
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	cd bf       	out	0x3d, r28	; 61
    3dd6:	ed 01       	movw	r28, r26
    3dd8:	08 95       	ret

00003dda <_exit>:
    3dda:	f8 94       	cli

00003ddc <__stop_program>:
    3ddc:	ff cf       	rjmp	.-2      	; 0x3ddc <__stop_program>
