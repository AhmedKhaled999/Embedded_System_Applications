
TEST_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000467c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000467c  00004710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800084  00800084  00004734  2**0
                  ALLOC
  3 .stab         0000534c  00000000  00000000  00004734  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ef6  00000000  00000000  00009a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b976  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000bab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000bc26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d86f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000100c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_9>
      28:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_10>
      2c:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 21 	call	0x4278	; 0x4278 <main>
      8a:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 23 	jmp	0x460a	; 0x460a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 23 	jmp	0x460a	; 0x460a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 15 23 	jmp	0x462a	; 0x462a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 31 23 	jmp	0x4662	; 0x4662 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MWDT_VidEnable>:
#include"MWDT_Private.h"

#define F_CPU  8000000UL
#include<util\delay.h>
void MWDT_VidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,3);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MWDT_VidDisable>:
void MWDT_VidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	 *************************************************************************************/
	/*******************************************Not Accepted*******************************
		                 WDTCR = 0b00011000;
			             WDTCR = 0b11110111;
    *************************************************************************************/
	 WDTCR =0b00011000; // in one instruction 1 cycle
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24

     WDTCR = 0x00;     	// must be all bits in this Register assigned with zeros
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
		WDTCR = 0b00011000;   //in one instruction 1 cycle
		WDTCR = 0x00;         //must be all bits in this Register assigned with zeros
	 ************************************************************************************/


}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MWDT_VidWDT_Sleep>:
void MWDT_VidWDT_Sleep(u8 Copy_u8SleepValue)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	WDTCR&=0xF8;
     b8a:	a1 e4       	ldi	r26, 0x41	; 65
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e1 e4       	ldi	r30, 0x41	; 65
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	88 7f       	andi	r24, 0xF8	; 248
     b96:	8c 93       	st	X, r24
	WDTCR|=Copy_u8SleepValue;
     b98:	a1 e4       	ldi	r26, 0x41	; 65
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e1 e4       	ldi	r30, 0x41	; 65
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	90 81       	ld	r25, Z
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24
}
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <MUSART_VidInit>:

//#include<util\delay.h>

/*USART Initialization*/
void MUSART_VidInit(void)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Copy_UCSRC = 0;
     bba:	19 82       	std	Y+1, r1	; 0x01
	/*1- Select USART Mode*/
#if USART_SET_MODE == USART_ASYNCHRONOUS_MODE
	CLR_BIT(LOC_u8Copy_UCSRC,6);
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	8f 7b       	andi	r24, 0xBF	; 191
     bc0:	89 83       	std	Y+1, r24	; 0x01
#else
#error "USART Mode Is not valid..."
#endif
	/*2- Select Parity Mode*/
#if USART_SET_PARITY_MODE == USART_DISABLED_PARITY
	CLR_BIT(LOC_u8Copy_UCSRC,4);
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	8f 7e       	andi	r24, 0xEF	; 239
     bc6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LOC_u8Copy_UCSRC,5);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	8f 7d       	andi	r24, 0xDF	; 223
     bcc:	89 83       	std	Y+1, r24	; 0x01
#else
#error "USART Parity Mode Is not valid..."
#endif
	/*3- Select USART Stop Bit Number */
#if USART_SET_STOP_BIT == USART_STOP_ONE_BIT
	CLR_BIT(LOC_u8Copy_UCSRC,3);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	87 7f       	andi	r24, 0xF7	; 247
     bd2:	89 83       	std	Y+1, r24	; 0x01
#elif  USART_SET_CHR_SIZE == USART_CHR_SIZE_7
	CLR_BIT(LOC_u8Copy_UCSRC,1);
	SET_BIT(LOC_u8Copy_UCSRC,2);
	CLR_BIT(UCSRB,2);
#elif  USART_SET_CHR_SIZE == USART_CHR_SIZE_8
	SET_BIT(LOC_u8Copy_UCSRC,1);
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LOC_u8Copy_UCSRC,2);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	84 60       	ori	r24, 0x04	; 4
     bde:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB , 2);
     be0:	aa e2       	ldi	r26, 0x2A	; 42
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ea e2       	ldi	r30, 0x2A	; 42
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8b 7f       	andi	r24, 0xFB	; 251
     bec:	8c 93       	st	X, r24
#else
#error "USART CHR Size Is not valid..."
#endif
	/*Set LOC_u8Copy_UCSRC value in UCSRC Register
	 * and Select UCSRC Register */
	SET_BIT(LOC_u8Copy_UCSRC,7);
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	80 68       	ori	r24, 0x80	; 128
     bf2:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = LOC_u8Copy_UCSRC;
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	80 83       	st	Z, r24
	/*Set BaudRate -->9600*/
	UBRRL = 103;
     bfc:	e9 e2       	ldi	r30, 0x29	; 41
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	87 e6       	ldi	r24, 0x67	; 103
     c02:	80 83       	st	Z, r24
	/*Enable To TX and RX*/
	SET_BIT(UCSRB,4);
     c04:	aa e2       	ldi	r26, 0x2A	; 42
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	8c 93       	st	X, r24
	SET_BIT(UCSRB,3);
     c12:	aa e2       	ldi	r26, 0x2A	; 42
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ea e2       	ldi	r30, 0x2A	; 42
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 60       	ori	r24, 0x08	; 8
     c1e:	8c 93       	st	X, r24
}
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <MUSART_VidSendChar>:

/*USART Send Data*/
void MUSART_VidSendChar(u8 Copy_u8Data)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until Register Empty Flag is set*/
	while(GET_BIT(UCSRA,5)==0);
     c34:	eb e2       	ldi	r30, 0x2B	; 43
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	82 95       	swap	r24
     c3c:	86 95       	lsr	r24
     c3e:	87 70       	andi	r24, 0x07	; 7
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	a1 f3       	breq	.-24     	; 0xc34 <MUSART_VidSendChar+0xc>
	/**/
	UDR=Copy_u8Data;
     c4c:	ec e2       	ldi	r30, 0x2C	; 44
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	80 83       	st	Z, r24
}
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <MUSART_VidReceiveData>:
/*USART Receive Data*/
u8 MUSART_VidReceiveData(void)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
	/*Wait until Receive Complete Flag  is set*/
	while(GET_BIT(UCSRA,7)==0);
     c64:	eb e2       	ldi	r30, 0x2B	; 43
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	88 23       	and	r24, r24
     c6c:	dc f7       	brge	.-10     	; 0xc64 <MUSART_VidReceiveData+0x8>
	return UDR;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
}
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <MUSART_VidSendString>:

/*USART Send String*/
void MUSART_VidSendString(u8 *Copy_u8Data)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <MUSART_VidSendString+0x6>
     c80:	0f 92       	push	r0
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8CharCount= 0;
     c8a:	19 82       	std	Y+1, r1	; 0x01
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <MUSART_VidSendString+0x30>
	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
	{
		MUSART_VidSendChar(Copy_u8Data[LOC_u8CharCount]);
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	9b 81       	ldd	r25, Y+3	; 0x03
     c98:	fc 01       	movw	r30, r24
     c9a:	e2 0f       	add	r30, r18
     c9c:	f3 1f       	adc	r31, r19
     c9e:	80 81       	ld	r24, Z
     ca0:	0e 94 14 06 	call	0xc28	; 0xc28 <MUSART_VidSendChar>
		/*Wait few ms to make anther node receive data */
		//_delay_ms(100);
		LOC_u8CharCount++;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	89 83       	std	Y+1, r24	; 0x01

/*USART Send String*/
void MUSART_VidSendString(u8 *Copy_u8Data)
{
	u8 LOC_u8CharCount= 0;
	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	fc 01       	movw	r30, r24
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	39 f7       	brne	.-50     	; 0xc8e <MUSART_VidSendString+0x14>
		MUSART_VidSendChar(Copy_u8Data[LOC_u8CharCount]);
		/*Wait few ms to make anther node receive data */
		//_delay_ms(100);
		LOC_u8CharCount++;
	}
	MUSART_VidSendChar('\0');
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 14 06 	call	0xc28	; 0xc28 <MUSART_VidSendChar>

}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <MUSART_VidReceiveString>:

/*USART Receive String*/
void MUSART_VidReceiveString(u8 *Copy_u8Data)
{
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <MUSART_VidReceiveString+0xa>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9b 83       	std	Y+3, r25	; 0x03
     ce4:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8CharCount= 0;
     ce6:	19 82       	std	Y+1, r1	; 0x01
	Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	9b 81       	ldd	r25, Y+3	; 0x03
     cf2:	8c 01       	movw	r16, r24
     cf4:	02 0f       	add	r16, r18
     cf6:	13 1f       	adc	r17, r19
     cf8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <MUSART_VidReceiveData>
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <MUSART_VidReceiveString+0x4e>
	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
	{
		LOC_u8CharCount++;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	9b 81       	ldd	r25, Y+3	; 0x03
     d12:	8c 01       	movw	r16, r24
     d14:	02 0f       	add	r16, r18
     d16:	13 1f       	adc	r17, r19
     d18:	0e 94 2e 06 	call	0xc5c	; 0xc5c <MUSART_VidReceiveData>
     d1c:	f8 01       	movw	r30, r16
     d1e:	80 83       	st	Z, r24
/*USART Receive String*/
void MUSART_VidReceiveString(u8 *Copy_u8Data)
{
	u8 LOC_u8CharCount= 0;
	Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	31 f7       	brne	.-52     	; 0xd02 <MUSART_VidReceiveString+0x30>
	{
		LOC_u8CharCount++;
		Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
	}
	Copy_u8Data[LOC_u8CharCount] = '\0';
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	fc 01       	movw	r30, r24
     d42:	e2 0f       	add	r30, r18
     d44:	f3 1f       	adc	r31, r19
     d46:	10 82       	st	Z, r1

}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	08 95       	ret

00000d58 <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     d60:	a3 e5       	ldi	r26, 0x53	; 83
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e3 e5       	ldi	r30, 0x53	; 83
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	88 7f       	andi	r24, 0xF8	; 248
     d6c:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     d6e:	a3 e5       	ldi	r26, 0x53	; 83
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e3 e5       	ldi	r30, 0x53	; 83
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	83 60       	ori	r24, 0x03	; 3
     d7a:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     d7c:	a3 e5       	ldi	r26, 0x53	; 83
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e3 e5       	ldi	r30, 0x53	; 83
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     d8a:	a3 e5       	ldi	r26, 0x53	; 83
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e3 e5       	ldi	r30, 0x53	; 83
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	87 7f       	andi	r24, 0xF7	; 247
     d96:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     d98:	a3 e5       	ldi	r26, 0x53	; 83
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e3 e5       	ldi	r30, 0x53	; 83
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	80 62       	ori	r24, 0x20	; 32
     da4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     da6:	a3 e5       	ldi	r26, 0x53	; 83
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e3 e5       	ldi	r30, 0x53	; 83
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 7e       	andi	r24, 0xEF	; 239
     db2:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     dc6:	e2 e5       	ldi	r30, 0x52	; 82
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	80 83       	st	Z, r24
}
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	0f 92       	push	r0
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     de2:	ec e5       	ldi	r30, 0x5C	; 92
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	80 83       	st	Z, r24
}
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <MTIMER0_VidOVF_SetCallBack+0x6>
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	90 93 88 00 	sts	0x0088, r25
     e08:	80 93 87 00 	sts	0x0087, r24
}
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <MTIMER0_VidCTC_SetCallBack+0x6>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	90 93 88 00 	sts	0x0088, r25
     e2c:	80 93 87 00 	sts	0x0087, r24
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     e64:	e0 91 87 00 	lds	r30, 0x0087
     e68:	f0 91 88 00 	lds	r31, 0x0088
     e6c:	09 95       	icall
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     ebe:	e0 91 87 00 	lds	r30, 0x0087
     ec2:	f0 91 88 00 	lds	r31, 0x0088
     ec6:	09 95       	icall
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     ef6:	ae e4       	ldi	r26, 0x4E	; 78
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ee e4       	ldi	r30, 0x4E	; 78
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	88 7f       	andi	r24, 0xF8	; 248
     f02:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     f04:	ae e4       	ldi	r26, 0x4E	; 78
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ee e4       	ldi	r30, 0x4E	; 78
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	81 60       	ori	r24, 0x01	; 1
     f10:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);

#elif TIMER1_SET_MODE == TIMER1_ICU_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     f12:	ae e4       	ldi	r26, 0x4E	; 78
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ee e4       	ldi	r30, 0x4E	; 78
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 7e       	andi	r24, 0xEF	; 239
     f1e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     f20:	ae e4       	ldi	r26, 0x4E	; 78
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	ee e4       	ldi	r30, 0x4E	; 78
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     f2e:	af e4       	ldi	r26, 0x4F	; 79
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ef e4       	ldi	r30, 0x4F	; 79
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8d 7f       	andi	r24, 0xFD	; 253
     f3a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
     f3c:	af e4       	ldi	r26, 0x4F	; 79
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	ef e4       	ldi	r30, 0x4F	; 79
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
     f4a:	a9 e5       	ldi	r26, 0x59	; 89
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e9 e5       	ldi	r30, 0x59	; 89
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
     f58:	a9 e5       	ldi	r26, 0x59	; 89
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e9 e5       	ldi	r30, 0x59	; 89
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	8c 93       	st	X, r24
	/*ICU Edge Select-->Rising edge*/
#if TIMER1_ICU_EDGE_SELECT == TIMER1_ICU_RISING_EDGE
	SET_BIT(TCCR1B,6);
     f66:	ae e4       	ldi	r26, 0x4E	; 78
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ee e4       	ldi	r30, 0x4E	; 78
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	80 64       	ori	r24, 0x40	; 64
     f72:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <MTIMER1_VidSetPreload+0x6>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
     f88:	ec e4       	ldi	r30, 0x4C	; 76
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
     fa6:	ec e4       	ldi	r30, 0x4C	; 76
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
     fbc:	e6 e4       	ldi	r30, 0x46	; 70
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	88 23       	and	r24, r24
     fda:	41 f4       	brne	.+16     	; 0xfec <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
     fdc:	ae e4       	ldi	r26, 0x4E	; 78
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ee e4       	ldi	r30, 0x4E	; 78
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	8c 93       	st	X, r24
     fea:	0a c0       	rjmp	.+20     	; 0x1000 <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	39 f4       	brne	.+14     	; 0x1000 <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
     ff2:	ae e4       	ldi	r26, 0x4E	; 78
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	ee e4       	ldi	r30, 0x4E	; 78
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <MTIMER1_VidOVF_SetCallBack+0x6>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	90 93 8a 00 	sts	0x008A, r25
    101e:	80 93 89 00 	sts	0x0089, r24
}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <MTIMER1_VidICF_SetCallBack+0x6>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	90 93 8c 00 	sts	0x008C, r25
    1042:	80 93 8b 00 	sts	0x008B, r24
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    107a:	e0 91 89 00 	lds	r30, 0x0089
    107e:	f0 91 8a 00 	lds	r31, 0x008A
    1082:	09 95       	icall
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
    10d4:	e0 91 8b 00 	lds	r30, 0x008B
    10d8:	f0 91 8c 00 	lds	r31, 0x008C
    10dc:	09 95       	icall
}
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    110c:	af e5       	ldi	r26, 0x5F	; 95
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ef e5       	ldi	r30, 0x5F	; 95
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	8c 93       	st	X, r24
}
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1128:	af e5       	ldi	r26, 0x5F	; 95
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ef e5       	ldi	r30, 0x5F	; 95
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8f 77       	andi	r24, 0x7F	; 127
    1134:	8c 93       	st	X, r24
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    1144:	a5 e5       	ldi	r26, 0x55	; 85
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e5       	ldi	r30, 0x55	; 85
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	81 60       	ori	r24, 0x01	; 1
    1150:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    1152:	a5 e5       	ldi	r26, 0x55	; 85
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e5       	ldi	r30, 0x55	; 85
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	82 60       	ori	r24, 0x02	; 2
    115e:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    1160:	ab e5       	ldi	r26, 0x5B	; 91
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	eb e5       	ldi	r30, 0x5B	; 91
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 64       	ori	r24, 0x40	; 64
    116c:	8c 93       	st	X, r24
}
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    117c:	a5 e5       	ldi	r26, 0x55	; 85
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e5 e5       	ldi	r30, 0x55	; 85
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	84 60       	ori	r24, 0x04	; 4
    1188:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    118a:	a5 e5       	ldi	r26, 0x55	; 85
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e5 e5       	ldi	r30, 0x55	; 85
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	88 60       	ori	r24, 0x08	; 8
    1196:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    1198:	ab e5       	ldi	r26, 0x5B	; 91
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	eb e5       	ldi	r30, 0x5B	; 91
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	80 68       	ori	r24, 0x80	; 128
    11a4:	8c 93       	st	X, r24
}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    11b4:	a4 e5       	ldi	r26, 0x54	; 84
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e4 e5       	ldi	r30, 0x54	; 84
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 64       	ori	r24, 0x40	; 64
    11c0:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    11c2:	ab e5       	ldi	r26, 0x5B	; 91
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	eb e5       	ldi	r30, 0x5B	; 91
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 62       	ori	r24, 0x20	; 32
    11ce:	8c 93       	st	X, r24
}
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <MEXTI_VidSenseControl+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <MEXTI_VidSenseControl+0x8>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <MEXTI_VidSenseControl+0x26>
    11fa:	54 c0       	rjmp	.+168    	; 0x12a4 <MEXTI_VidSenseControl+0xce>
    11fc:	2b 81       	ldd	r18, Y+3	; 0x03
    11fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <MEXTI_VidSenseControl+0x32>
    1206:	96 c0       	rjmp	.+300    	; 0x1334 <MEXTI_VidSenseControl+0x15e>
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	09 f0       	breq	.+2      	; 0x1212 <MEXTI_VidSenseControl+0x3c>
    1210:	a6 c0       	rjmp	.+332    	; 0x135e <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	88 23       	and	r24, r24
    1216:	79 f4       	brne	.+30     	; 0x1236 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    1218:	a5 e5       	ldi	r26, 0x55	; 85
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e5 e5       	ldi	r30, 0x55	; 85
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8e 7f       	andi	r24, 0xFE	; 254
    1224:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1226:	a5 e5       	ldi	r26, 0x55	; 85
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e5       	ldi	r30, 0x55	; 85
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8d 7f       	andi	r24, 0xFD	; 253
    1232:	8c 93       	st	X, r24
    1234:	94 c0       	rjmp	.+296    	; 0x135e <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	79 f4       	brne	.+30     	; 0x125a <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    123c:	a5 e5       	ldi	r26, 0x55	; 85
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e5       	ldi	r30, 0x55	; 85
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	81 60       	ori	r24, 0x01	; 1
    1248:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    124a:	a5 e5       	ldi	r26, 0x55	; 85
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e5       	ldi	r30, 0x55	; 85
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8d 7f       	andi	r24, 0xFD	; 253
    1256:	8c 93       	st	X, r24
    1258:	82 c0       	rjmp	.+260    	; 0x135e <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	79 f4       	brne	.+30     	; 0x127e <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    1260:	a5 e5       	ldi	r26, 0x55	; 85
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e5       	ldi	r30, 0x55	; 85
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	8e 7f       	andi	r24, 0xFE	; 254
    126c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    126e:	a5 e5       	ldi	r26, 0x55	; 85
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e5 e5       	ldi	r30, 0x55	; 85
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	82 60       	ori	r24, 0x02	; 2
    127a:	8c 93       	st	X, r24
    127c:	70 c0       	rjmp	.+224    	; 0x135e <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	09 f0       	breq	.+2      	; 0x1286 <MEXTI_VidSenseControl+0xb0>
    1284:	6c c0       	rjmp	.+216    	; 0x135e <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    1286:	a5 e5       	ldi	r26, 0x55	; 85
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e5       	ldi	r30, 0x55	; 85
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1294:	a5 e5       	ldi	r26, 0x55	; 85
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e5       	ldi	r30, 0x55	; 85
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	82 60       	ori	r24, 0x02	; 2
    12a0:	8c 93       	st	X, r24
    12a2:	5d c0       	rjmp	.+186    	; 0x135e <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	88 23       	and	r24, r24
    12a8:	79 f4       	brne	.+30     	; 0x12c8 <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    12aa:	a5 e5       	ldi	r26, 0x55	; 85
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e5       	ldi	r30, 0x55	; 85
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8b 7f       	andi	r24, 0xFB	; 251
    12b6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    12b8:	a5 e5       	ldi	r26, 0x55	; 85
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e5 e5       	ldi	r30, 0x55	; 85
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	87 7f       	andi	r24, 0xF7	; 247
    12c4:	8c 93       	st	X, r24
    12c6:	4b c0       	rjmp	.+150    	; 0x135e <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	79 f4       	brne	.+30     	; 0x12ec <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    12ce:	a5 e5       	ldi	r26, 0x55	; 85
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e5       	ldi	r30, 0x55	; 85
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	84 60       	ori	r24, 0x04	; 4
    12da:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    12dc:	a5 e5       	ldi	r26, 0x55	; 85
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e5       	ldi	r30, 0x55	; 85
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	87 7f       	andi	r24, 0xF7	; 247
    12e8:	8c 93       	st	X, r24
    12ea:	39 c0       	rjmp	.+114    	; 0x135e <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	82 30       	cpi	r24, 0x02	; 2
    12f0:	79 f4       	brne	.+30     	; 0x1310 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    12f2:	a5 e5       	ldi	r26, 0x55	; 85
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e5       	ldi	r30, 0x55	; 85
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	8b 7f       	andi	r24, 0xFB	; 251
    12fe:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1300:	a5 e5       	ldi	r26, 0x55	; 85
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e5       	ldi	r30, 0x55	; 85
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	88 60       	ori	r24, 0x08	; 8
    130c:	8c 93       	st	X, r24
    130e:	27 c0       	rjmp	.+78     	; 0x135e <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	21 f5       	brne	.+72     	; 0x135e <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    1316:	a5 e5       	ldi	r26, 0x55	; 85
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e5 e5       	ldi	r30, 0x55	; 85
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	84 60       	ori	r24, 0x04	; 4
    1322:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1324:	a5 e5       	ldi	r26, 0x55	; 85
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e5 e5       	ldi	r30, 0x55	; 85
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	88 60       	ori	r24, 0x08	; 8
    1330:	8c 93       	st	X, r24
    1332:	15 c0       	rjmp	.+42     	; 0x135e <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	82 30       	cpi	r24, 0x02	; 2
    1338:	41 f4       	brne	.+16     	; 0x134a <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    133a:	a4 e5       	ldi	r26, 0x54	; 84
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e4 e5       	ldi	r30, 0x54	; 84
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8f 7b       	andi	r24, 0xBF	; 191
    1346:	8c 93       	st	X, r24
    1348:	0a c0       	rjmp	.+20     	; 0x135e <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	39 f4       	brne	.+14     	; 0x135e <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    1350:	a4 e5       	ldi	r26, 0x54	; 84
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e4 e5       	ldi	r30, 0x54	; 84
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	80 64       	ori	r24, 0x40	; 64
    135c:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <MEXTI0_Set_CallBackFunction+0x6>
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	90 93 8e 00 	sts	0x008E, r25
    1382:	80 93 8d 00 	sts	0x008D, r24
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    1390:	1f 92       	push	r1
    1392:	0f 92       	push	r0
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	0f 92       	push	r0
    1398:	11 24       	eor	r1, r1
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    13ba:	e0 91 8d 00 	lds	r30, 0x008D
    13be:	f0 91 8e 00 	lds	r31, 0x008E
    13c2:	09 95       	icall
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <MDIO_Error_State_SetPinDirection+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <MDIO_Error_State_SetPinDirection+0x8>
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <MDIO_Error_State_SetPinDirection+0xa>
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	6b 83       	std	Y+3, r22	; 0x03
    13fc:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	88 30       	cpi	r24, 0x08	; 8
    1406:	08 f0       	brcs	.+2      	; 0x140a <MDIO_Error_State_SetPinDirection+0x20>
    1408:	e8 c0       	rjmp	.+464    	; 0x15da <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3e 83       	std	Y+6, r19	; 0x06
    1412:	2d 83       	std	Y+5, r18	; 0x05
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	91 05       	cpc	r25, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <MDIO_Error_State_SetPinDirection+0x36>
    141e:	48 c0       	rjmp	.+144    	; 0x14b0 <MDIO_Error_State_SetPinDirection+0xc6>
    1420:	2d 81       	ldd	r18, Y+5	; 0x05
    1422:	3e 81       	ldd	r19, Y+6	; 0x06
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	2c f4       	brge	.+10     	; 0x1434 <MDIO_Error_State_SetPinDirection+0x4a>
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	71 f0       	breq	.+28     	; 0x144e <MDIO_Error_State_SetPinDirection+0x64>
    1432:	d1 c0       	rjmp	.+418    	; 0x15d6 <MDIO_Error_State_SetPinDirection+0x1ec>
    1434:	2d 81       	ldd	r18, Y+5	; 0x05
    1436:	3e 81       	ldd	r19, Y+6	; 0x06
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	09 f4       	brne	.+2      	; 0x1440 <MDIO_Error_State_SetPinDirection+0x56>
    143e:	69 c0       	rjmp	.+210    	; 0x1512 <MDIO_Error_State_SetPinDirection+0x128>
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	09 f4       	brne	.+2      	; 0x144c <MDIO_Error_State_SetPinDirection+0x62>
    144a:	94 c0       	rjmp	.+296    	; 0x1574 <MDIO_Error_State_SetPinDirection+0x18a>
    144c:	c4 c0       	rjmp	.+392    	; 0x15d6 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	a1 f4       	brne	.+40     	; 0x147c <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    1454:	aa e3       	ldi	r26, 0x3A	; 58
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ea e3       	ldi	r30, 0x3A	; 58
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <MDIO_Error_State_SetPinDirection+0x88>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <MDIO_Error_State_SetPinDirection+0x84>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	b0 c0       	rjmp	.+352    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	88 23       	and	r24, r24
    1480:	a9 f4       	brne	.+42     	; 0x14ac <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    1482:	aa e3       	ldi	r26, 0x3A	; 58
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ea e3       	ldi	r30, 0x3A	; 58
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <MDIO_Error_State_SetPinDirection+0xb6>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <MDIO_Error_State_SetPinDirection+0xb2>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	98 c0       	rjmp	.+304    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    14ac:	19 82       	std	Y+1, r1	; 0x01
    14ae:	96 c0       	rjmp	.+300    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	a1 f4       	brne	.+40     	; 0x14de <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    14b6:	a7 e3       	ldi	r26, 0x37	; 55
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e7 e3       	ldi	r30, 0x37	; 55
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <MDIO_Error_State_SetPinDirection+0xea>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <MDIO_Error_State_SetPinDirection+0xe6>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	7f c0       	rjmp	.+254    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	88 23       	and	r24, r24
    14e2:	a9 f4       	brne	.+42     	; 0x150e <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    14e4:	a7 e3       	ldi	r26, 0x37	; 55
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e7 e3       	ldi	r30, 0x37	; 55
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <MDIO_Error_State_SetPinDirection+0x118>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <MDIO_Error_State_SetPinDirection+0x114>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	67 c0       	rjmp	.+206    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    150e:	19 82       	std	Y+1, r1	; 0x01
    1510:	65 c0       	rjmp	.+202    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	a1 f4       	brne	.+40     	; 0x1540 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1518:	a4 e3       	ldi	r26, 0x34	; 52
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e4 e3       	ldi	r30, 0x34	; 52
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <MDIO_Error_State_SetPinDirection+0x14c>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <MDIO_Error_State_SetPinDirection+0x148>
    153a:	84 2b       	or	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	4e c0       	rjmp	.+156    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	88 23       	and	r24, r24
    1544:	a9 f4       	brne	.+42     	; 0x1570 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    1546:	a4 e3       	ldi	r26, 0x34	; 52
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e4 e3       	ldi	r30, 0x34	; 52
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <MDIO_Error_State_SetPinDirection+0x17a>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <MDIO_Error_State_SetPinDirection+0x176>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	36 c0       	rjmp	.+108    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1570:	19 82       	std	Y+1, r1	; 0x01
    1572:	34 c0       	rjmp	.+104    	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	a1 f4       	brne	.+40     	; 0x15a2 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    157a:	a1 e3       	ldi	r26, 0x31	; 49
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e1 e3       	ldi	r30, 0x31	; 49
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <MDIO_Error_State_SetPinDirection+0x1ae>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <MDIO_Error_State_SetPinDirection+0x1aa>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	1d c0       	rjmp	.+58     	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	88 23       	and	r24, r24
    15a6:	a9 f4       	brne	.+42     	; 0x15d2 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    15a8:	a1 e3       	ldi	r26, 0x31	; 49
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e1 e3       	ldi	r30, 0x31	; 49
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <MDIO_Error_State_SetPinDirection+0x1dc>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <MDIO_Error_State_SetPinDirection+0x1d8>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    15d2:	19 82       	std	Y+1, r1	; 0x01
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    15d6:	19 82       	std	Y+1, r1	; 0x01
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    15da:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    15de:	26 96       	adiw	r28, 0x06	; 6
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <MDIO_Error_State_SetPortDirection+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <MDIO_Error_State_SetPortDirection+0x8>
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
    1600:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	8f 3f       	cpi	r24, 0xFF	; 255
    160a:	19 f0       	breq	.+6      	; 0x1612 <MDIO_Error_State_SetPortDirection+0x22>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	88 23       	and	r24, r24
    1610:	a9 f5       	brne	.+106    	; 0x167c <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	3d 83       	std	Y+5, r19	; 0x05
    161a:	2c 83       	std	Y+4, r18	; 0x04
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	9d 81       	ldd	r25, Y+5	; 0x05
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	91 05       	cpc	r25, r1
    1624:	d1 f0       	breq	.+52     	; 0x165a <MDIO_Error_State_SetPortDirection+0x6a>
    1626:	2c 81       	ldd	r18, Y+4	; 0x04
    1628:	3d 81       	ldd	r19, Y+5	; 0x05
    162a:	22 30       	cpi	r18, 0x02	; 2
    162c:	31 05       	cpc	r19, r1
    162e:	2c f4       	brge	.+10     	; 0x163a <MDIO_Error_State_SetPortDirection+0x4a>
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	61 f0       	breq	.+24     	; 0x1650 <MDIO_Error_State_SetPortDirection+0x60>
    1638:	1f c0       	rjmp	.+62     	; 0x1678 <MDIO_Error_State_SetPortDirection+0x88>
    163a:	2c 81       	ldd	r18, Y+4	; 0x04
    163c:	3d 81       	ldd	r19, Y+5	; 0x05
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	81 f0       	breq	.+32     	; 0x1664 <MDIO_Error_State_SetPortDirection+0x74>
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	83 30       	cpi	r24, 0x03	; 3
    164a:	91 05       	cpc	r25, r1
    164c:	81 f0       	breq	.+32     	; 0x166e <MDIO_Error_State_SetPortDirection+0x7e>
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	80 83       	st	Z, r24
    1658:	12 c0       	rjmp	.+36     	; 0x167e <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    165a:	e7 e3       	ldi	r30, 0x37	; 55
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	80 83       	st	Z, r24
    1662:	0d c0       	rjmp	.+26     	; 0x167e <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    1664:	e4 e3       	ldi	r30, 0x34	; 52
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	80 83       	st	Z, r24
    166c:	08 c0       	rjmp	.+16     	; 0x167e <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    166e:	e1 e3       	ldi	r30, 0x31	; 49
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	80 83       	st	Z, r24
    1676:	03 c0       	rjmp	.+6      	; 0x167e <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    1678:	19 82       	std	Y+1, r1	; 0x01
    167a:	01 c0       	rjmp	.+2      	; 0x167e <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    167c:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <MDIO_Error_State_SetPinValue+0x6>
    1696:	00 d0       	rcall	.+0      	; 0x1698 <MDIO_Error_State_SetPinValue+0x8>
    1698:	00 d0       	rcall	.+0      	; 0x169a <MDIO_Error_State_SetPinValue+0xa>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	8a 83       	std	Y+2, r24	; 0x02
    16a0:	6b 83       	std	Y+3, r22	; 0x03
    16a2:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	88 30       	cpi	r24, 0x08	; 8
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <MDIO_Error_State_SetPinValue+0x20>
    16ae:	e8 c0       	rjmp	.+464    	; 0x1880 <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3e 83       	std	Y+6, r19	; 0x06
    16b8:	2d 83       	std	Y+5, r18	; 0x05
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <MDIO_Error_State_SetPinValue+0x36>
    16c4:	48 c0       	rjmp	.+144    	; 0x1756 <MDIO_Error_State_SetPinValue+0xc6>
    16c6:	2d 81       	ldd	r18, Y+5	; 0x05
    16c8:	3e 81       	ldd	r19, Y+6	; 0x06
    16ca:	22 30       	cpi	r18, 0x02	; 2
    16cc:	31 05       	cpc	r19, r1
    16ce:	2c f4       	brge	.+10     	; 0x16da <MDIO_Error_State_SetPinValue+0x4a>
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	71 f0       	breq	.+28     	; 0x16f4 <MDIO_Error_State_SetPinValue+0x64>
    16d8:	d1 c0       	rjmp	.+418    	; 0x187c <MDIO_Error_State_SetPinValue+0x1ec>
    16da:	2d 81       	ldd	r18, Y+5	; 0x05
    16dc:	3e 81       	ldd	r19, Y+6	; 0x06
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <MDIO_Error_State_SetPinValue+0x56>
    16e4:	69 c0       	rjmp	.+210    	; 0x17b8 <MDIO_Error_State_SetPinValue+0x128>
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	91 05       	cpc	r25, r1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <MDIO_Error_State_SetPinValue+0x62>
    16f0:	94 c0       	rjmp	.+296    	; 0x181a <MDIO_Error_State_SetPinValue+0x18a>
    16f2:	c4 c0       	rjmp	.+392    	; 0x187c <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	a1 f4       	brne	.+40     	; 0x1722 <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    16fa:	ab e3       	ldi	r26, 0x3B	; 59
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	eb e3       	ldi	r30, 0x3B	; 59
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <MDIO_Error_State_SetPinValue+0x88>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <MDIO_Error_State_SetPinValue+0x84>
    171c:	84 2b       	or	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	b0 c0       	rjmp	.+352    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	88 23       	and	r24, r24
    1726:	a9 f4       	brne	.+42     	; 0x1752 <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1728:	ab e3       	ldi	r26, 0x3B	; 59
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	eb e3       	ldi	r30, 0x3B	; 59
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <MDIO_Error_State_SetPinValue+0xb6>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <MDIO_Error_State_SetPinValue+0xb2>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	98 c0       	rjmp	.+304    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1752:	19 82       	std	Y+1, r1	; 0x01
    1754:	96 c0       	rjmp	.+300    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	a1 f4       	brne	.+40     	; 0x1784 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    175c:	a8 e3       	ldi	r26, 0x38	; 56
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e8 e3       	ldi	r30, 0x38	; 56
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <MDIO_Error_State_SetPinValue+0xea>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <MDIO_Error_State_SetPinValue+0xe6>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	7f c0       	rjmp	.+254    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	88 23       	and	r24, r24
    1788:	a9 f4       	brne	.+42     	; 0x17b4 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <MDIO_Error_State_SetPinValue+0x118>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <MDIO_Error_State_SetPinValue+0x114>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	67 c0       	rjmp	.+206    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    17b4:	19 82       	std	Y+1, r1	; 0x01
    17b6:	65 c0       	rjmp	.+202    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	a1 f4       	brne	.+40     	; 0x17e6 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    17be:	a5 e3       	ldi	r26, 0x35	; 53
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 e3       	ldi	r30, 0x35	; 53
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <MDIO_Error_State_SetPinValue+0x14c>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <MDIO_Error_State_SetPinValue+0x148>
    17e0:	84 2b       	or	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	4e c0       	rjmp	.+156    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	88 23       	and	r24, r24
    17ea:	a9 f4       	brne	.+42     	; 0x1816 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    17ec:	a5 e3       	ldi	r26, 0x35	; 53
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e3       	ldi	r30, 0x35	; 53
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <MDIO_Error_State_SetPinValue+0x17a>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <MDIO_Error_State_SetPinValue+0x176>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	36 c0       	rjmp	.+108    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1816:	19 82       	std	Y+1, r1	; 0x01
    1818:	34 c0       	rjmp	.+104    	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	a1 f4       	brne	.+40     	; 0x1848 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    1820:	a2 e3       	ldi	r26, 0x32	; 50
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e2 e3       	ldi	r30, 0x32	; 50
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <MDIO_Error_State_SetPinValue+0x1ae>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <MDIO_Error_State_SetPinValue+0x1aa>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	1d c0       	rjmp	.+58     	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	88 23       	and	r24, r24
    184c:	a9 f4       	brne	.+42     	; 0x1878 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    184e:	a2 e3       	ldi	r26, 0x32	; 50
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e2 e3       	ldi	r30, 0x32	; 50
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <MDIO_Error_State_SetPinValue+0x1dc>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <MDIO_Error_State_SetPinValue+0x1d8>
    1870:	80 95       	com	r24
    1872:	84 23       	and	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1878:	19 82       	std	Y+1, r1	; 0x01
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    187c:	19 82       	std	Y+1, r1	; 0x01
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    1880:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    1882:	89 81       	ldd	r24, Y+1	; 0x01

}
    1884:	26 96       	adiw	r28, 0x06	; 6
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <MDIO_Error_State_SetPortValue+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <MDIO_Error_State_SetPortValue+0x8>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3d 83       	std	Y+5, r19	; 0x05
    18b4:	2c 83       	std	Y+4, r18	; 0x04
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	91 05       	cpc	r25, r1
    18be:	d1 f0       	breq	.+52     	; 0x18f4 <MDIO_Error_State_SetPortValue+0x5e>
    18c0:	2c 81       	ldd	r18, Y+4	; 0x04
    18c2:	3d 81       	ldd	r19, Y+5	; 0x05
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <MDIO_Error_State_SetPortValue+0x3e>
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	61 f0       	breq	.+24     	; 0x18ea <MDIO_Error_State_SetPortValue+0x54>
    18d2:	1f c0       	rjmp	.+62     	; 0x1912 <MDIO_Error_State_SetPortValue+0x7c>
    18d4:	2c 81       	ldd	r18, Y+4	; 0x04
    18d6:	3d 81       	ldd	r19, Y+5	; 0x05
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	81 f0       	breq	.+32     	; 0x18fe <MDIO_Error_State_SetPortValue+0x68>
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	91 05       	cpc	r25, r1
    18e6:	81 f0       	breq	.+32     	; 0x1908 <MDIO_Error_State_SetPortValue+0x72>
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	80 83       	st	Z, r24
    18f2:	10 c0       	rjmp	.+32     	; 0x1914 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    18f4:	e8 e3       	ldi	r30, 0x38	; 56
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	80 83       	st	Z, r24
    18fc:	0b c0       	rjmp	.+22     	; 0x1914 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	80 83       	st	Z, r24
    1906:	06 c0       	rjmp	.+12     	; 0x1914 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1908:	e2 e3       	ldi	r30, 0x32	; 50
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	80 83       	st	Z, r24
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    1912:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	27 97       	sbiw	r28, 0x07	; 7
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	8a 83       	std	Y+2, r24	; 0x02
    193c:	6b 83       	std	Y+3, r22	; 0x03
    193e:	5d 83       	std	Y+5, r21	; 0x05
    1940:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	88 30       	cpi	r24, 0x08	; 8
    194a:	08 f0       	brcs	.+2      	; 0x194e <MDIO_Error_State_GetPinValue+0x28>
    194c:	79 c0       	rjmp	.+242    	; 0x1a40 <MDIO_Error_State_GetPinValue+0x11a>
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <MDIO_Error_State_GetPinValue+0x34>
    1958:	73 c0       	rjmp	.+230    	; 0x1a40 <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3f 83       	std	Y+7, r19	; 0x07
    1962:	2e 83       	std	Y+6, r18	; 0x06
    1964:	4e 81       	ldd	r20, Y+6	; 0x06
    1966:	5f 81       	ldd	r21, Y+7	; 0x07
    1968:	41 30       	cpi	r20, 0x01	; 1
    196a:	51 05       	cpc	r21, r1
    196c:	59 f1       	breq	.+86     	; 0x19c4 <MDIO_Error_State_GetPinValue+0x9e>
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	91 05       	cpc	r25, r1
    1976:	34 f4       	brge	.+12     	; 0x1984 <MDIO_Error_State_GetPinValue+0x5e>
    1978:	2e 81       	ldd	r18, Y+6	; 0x06
    197a:	3f 81       	ldd	r19, Y+7	; 0x07
    197c:	21 15       	cp	r18, r1
    197e:	31 05       	cpc	r19, r1
    1980:	69 f0       	breq	.+26     	; 0x199c <MDIO_Error_State_GetPinValue+0x76>
    1982:	5c c0       	rjmp	.+184    	; 0x1a3c <MDIO_Error_State_GetPinValue+0x116>
    1984:	4e 81       	ldd	r20, Y+6	; 0x06
    1986:	5f 81       	ldd	r21, Y+7	; 0x07
    1988:	42 30       	cpi	r20, 0x02	; 2
    198a:	51 05       	cpc	r21, r1
    198c:	79 f1       	breq	.+94     	; 0x19ec <MDIO_Error_State_GetPinValue+0xc6>
    198e:	8e 81       	ldd	r24, Y+6	; 0x06
    1990:	9f 81       	ldd	r25, Y+7	; 0x07
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <MDIO_Error_State_GetPinValue+0x74>
    1998:	3d c0       	rjmp	.+122    	; 0x1a14 <MDIO_Error_State_GetPinValue+0xee>
    199a:	50 c0       	rjmp	.+160    	; 0x1a3c <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    199c:	e9 e3       	ldi	r30, 0x39	; 57
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	a9 01       	movw	r20, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <MDIO_Error_State_GetPinValue+0x8e>
    19b0:	55 95       	asr	r21
    19b2:	47 95       	ror	r20
    19b4:	8a 95       	dec	r24
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <MDIO_Error_State_GetPinValue+0x8a>
    19b8:	ca 01       	movw	r24, r20
    19ba:	81 70       	andi	r24, 0x01	; 1
    19bc:	ec 81       	ldd	r30, Y+4	; 0x04
    19be:	fd 81       	ldd	r31, Y+5	; 0x05
    19c0:	80 83       	st	Z, r24
    19c2:	3f c0       	rjmp	.+126    	; 0x1a42 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    19c4:	e6 e3       	ldi	r30, 0x36	; 54
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a9 01       	movw	r20, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <MDIO_Error_State_GetPinValue+0xb6>
    19d8:	55 95       	asr	r21
    19da:	47 95       	ror	r20
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <MDIO_Error_State_GetPinValue+0xb2>
    19e0:	ca 01       	movw	r24, r20
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	ec 81       	ldd	r30, Y+4	; 0x04
    19e6:	fd 81       	ldd	r31, Y+5	; 0x05
    19e8:	80 83       	st	Z, r24
    19ea:	2b c0       	rjmp	.+86     	; 0x1a42 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    19ec:	e3 e3       	ldi	r30, 0x33	; 51
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	88 2f       	mov	r24, r24
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a9 01       	movw	r20, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <MDIO_Error_State_GetPinValue+0xde>
    1a00:	55 95       	asr	r21
    1a02:	47 95       	ror	r20
    1a04:	8a 95       	dec	r24
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <MDIO_Error_State_GetPinValue+0xda>
    1a08:	ca 01       	movw	r24, r20
    1a0a:	81 70       	andi	r24, 0x01	; 1
    1a0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a10:	80 83       	st	Z, r24
    1a12:	17 c0       	rjmp	.+46     	; 0x1a42 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1a14:	e0 e3       	ldi	r30, 0x30	; 48
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a9 01       	movw	r20, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <MDIO_Error_State_GetPinValue+0x106>
    1a28:	55 95       	asr	r21
    1a2a:	47 95       	ror	r20
    1a2c:	8a 95       	dec	r24
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <MDIO_Error_State_GetPinValue+0x102>
    1a30:	ca 01       	movw	r24, r20
    1a32:	81 70       	andi	r24, 0x01	; 1
    1a34:	ec 81       	ldd	r30, Y+4	; 0x04
    1a36:	fd 81       	ldd	r31, Y+5	; 0x05
    1a38:	80 83       	st	Z, r24
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1a40:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a44:	27 96       	adiw	r28, 0x07	; 7
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <MDIO_Error_State_SetNippleValue+0x6>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <MDIO_Error_State_SetNippleValue+0x8>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <MDIO_Error_State_SetNippleValue+0xa>
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	8a 83       	std	Y+2, r24	; 0x02
    1a66:	6b 83       	std	Y+3, r22	; 0x03
    1a68:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	85 30       	cpi	r24, 0x05	; 5
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <MDIO_Error_State_SetNippleValue+0x20>
    1a74:	c9 c0       	rjmp	.+402    	; 0x1c08 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	3e 83       	std	Y+6, r19	; 0x06
    1a7e:	2d 83       	std	Y+5, r18	; 0x05
    1a80:	6d 81       	ldd	r22, Y+5	; 0x05
    1a82:	7e 81       	ldd	r23, Y+6	; 0x06
    1a84:	61 30       	cpi	r22, 0x01	; 1
    1a86:	71 05       	cpc	r23, r1
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <MDIO_Error_State_SetNippleValue+0x36>
    1a8a:	41 c0       	rjmp	.+130    	; 0x1b0e <MDIO_Error_State_SetNippleValue+0xb8>
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	91 05       	cpc	r25, r1
    1a94:	34 f4       	brge	.+12     	; 0x1aa2 <MDIO_Error_State_SetNippleValue+0x4c>
    1a96:	2d 81       	ldd	r18, Y+5	; 0x05
    1a98:	3e 81       	ldd	r19, Y+6	; 0x06
    1a9a:	21 15       	cp	r18, r1
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	71 f0       	breq	.+28     	; 0x1abc <MDIO_Error_State_SetNippleValue+0x66>
    1aa0:	b1 c0       	rjmp	.+354    	; 0x1c04 <MDIO_Error_State_SetNippleValue+0x1ae>
    1aa2:	6d 81       	ldd	r22, Y+5	; 0x05
    1aa4:	7e 81       	ldd	r23, Y+6	; 0x06
    1aa6:	62 30       	cpi	r22, 0x02	; 2
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <MDIO_Error_State_SetNippleValue+0x58>
    1aac:	59 c0       	rjmp	.+178    	; 0x1b60 <MDIO_Error_State_SetNippleValue+0x10a>
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	83 30       	cpi	r24, 0x03	; 3
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <MDIO_Error_State_SetNippleValue+0x64>
    1ab8:	7c c0       	rjmp	.+248    	; 0x1bb2 <MDIO_Error_State_SetNippleValue+0x15c>
    1aba:	a4 c0       	rjmp	.+328    	; 0x1c04 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1abc:	ab e3       	ldi	r26, 0x3B	; 59
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	eb e3       	ldi	r30, 0x3B	; 59
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	8f e0       	ldi	r24, 0x0F	; 15
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <MDIO_Error_State_SetNippleValue+0x82>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	2a 95       	dec	r18
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <MDIO_Error_State_SetNippleValue+0x7e>
    1adc:	80 95       	com	r24
    1ade:	84 23       	and	r24, r20
    1ae0:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1ae2:	ab e3       	ldi	r26, 0x3B	; 59
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	eb e3       	ldi	r30, 0x3B	; 59
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	b9 01       	movw	r22, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <MDIO_Error_State_SetNippleValue+0xac>
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	8a 95       	dec	r24
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <MDIO_Error_State_SetNippleValue+0xa8>
    1b06:	cb 01       	movw	r24, r22
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	7e c0       	rjmp	.+252    	; 0x1c0a <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1b0e:	a8 e3       	ldi	r26, 0x38	; 56
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	8f e0       	ldi	r24, 0x0F	; 15
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <MDIO_Error_State_SetNippleValue+0xd4>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	2a 95       	dec	r18
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <MDIO_Error_State_SetNippleValue+0xd0>
    1b2e:	80 95       	com	r24
    1b30:	84 23       	and	r24, r20
    1b32:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1b34:	a8 e3       	ldi	r26, 0x38	; 56
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e8 e3       	ldi	r30, 0x38	; 56
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	b9 01       	movw	r22, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <MDIO_Error_State_SetNippleValue+0xfe>
    1b50:	66 0f       	add	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	8a 95       	dec	r24
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <MDIO_Error_State_SetNippleValue+0xfa>
    1b58:	cb 01       	movw	r24, r22
    1b5a:	84 2b       	or	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	55 c0       	rjmp	.+170    	; 0x1c0a <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1b60:	a5 e3       	ldi	r26, 0x35	; 53
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e5 e3       	ldi	r30, 0x35	; 53
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	8f e0       	ldi	r24, 0x0F	; 15
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <MDIO_Error_State_SetNippleValue+0x126>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	2a 95       	dec	r18
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <MDIO_Error_State_SetNippleValue+0x122>
    1b80:	80 95       	com	r24
    1b82:	84 23       	and	r24, r20
    1b84:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1b86:	a5 e3       	ldi	r26, 0x35	; 53
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e5 e3       	ldi	r30, 0x35	; 53
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	b9 01       	movw	r22, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <MDIO_Error_State_SetNippleValue+0x150>
    1ba2:	66 0f       	add	r22, r22
    1ba4:	77 1f       	adc	r23, r23
    1ba6:	8a 95       	dec	r24
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <MDIO_Error_State_SetNippleValue+0x14c>
    1baa:	cb 01       	movw	r24, r22
    1bac:	84 2b       	or	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	2c c0       	rjmp	.+88     	; 0x1c0a <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1bb2:	a2 e3       	ldi	r26, 0x32	; 50
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e2 e3       	ldi	r30, 0x32	; 50
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	8f e0       	ldi	r24, 0x0F	; 15
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <MDIO_Error_State_SetNippleValue+0x178>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	2a 95       	dec	r18
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <MDIO_Error_State_SetNippleValue+0x174>
    1bd2:	80 95       	com	r24
    1bd4:	84 23       	and	r24, r20
    1bd6:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1bd8:	a2 e3       	ldi	r26, 0x32	; 50
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	b9 01       	movw	r22, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <MDIO_Error_State_SetNippleValue+0x1a2>
    1bf4:	66 0f       	add	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	8a 95       	dec	r24
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <MDIO_Error_State_SetNippleValue+0x19e>
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	84 2b       	or	r24, r20
    1c00:	8c 93       	st	X, r24
    1c02:	03 c0       	rjmp	.+6      	; 0x1c0a <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1c08:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0c:	26 96       	adiw	r28, 0x06	; 6
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <MDIO_VidActivePullUP+0x6>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	6a 81       	ldd	r22, Y+2	; 0x02
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	6a 81       	ldd	r22, Y+2	; 0x02
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>

}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1c52:	a7 e2       	ldi	r26, 0x27	; 39
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e7 e2       	ldi	r30, 0x27	; 39
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 64       	ori	r24, 0x40	; 64
    1c5e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1c60:	a7 e2       	ldi	r26, 0x27	; 39
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e7 e2       	ldi	r30, 0x27	; 39
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 77       	andi	r24, 0x7F	; 127
    1c6c:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1c6e:	a6 e2       	ldi	r26, 0x26	; 38
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e6 e2       	ldi	r30, 0x26	; 38
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	88 7f       	andi	r24, 0xF8	; 248
    1c7a:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1c7c:	a6 e2       	ldi	r26, 0x26	; 38
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e6 e2       	ldi	r30, 0x26	; 38
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	83 60       	ori	r24, 0x03	; 3
    1c88:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1c8a:	a7 e2       	ldi	r26, 0x27	; 39
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e7 e2       	ldi	r30, 0x27	; 39
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 7d       	andi	r24, 0xDF	; 223
    1c96:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1c98:	a6 e2       	ldi	r26, 0x26	; 38
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e6 e2       	ldi	r30, 0x26	; 38
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	80 68       	ori	r24, 0x80	; 128
    1ca4:	8c 93       	st	X, r24
}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	87 70       	andi	r24, 0x07	; 7
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1cbe:	a7 e2       	ldi	r26, 0x27	; 39
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e7 e2       	ldi	r30, 0x27	; 39
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 7e       	andi	r24, 0xE0	; 224
    1cca:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1ccc:	a7 e2       	ldi	r26, 0x27	; 39
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e7 e2       	ldi	r30, 0x27	; 39
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	90 81       	ld	r25, Z
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	89 2b       	or	r24, r25
    1cda:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1cdc:	a6 e2       	ldi	r26, 0x26	; 38
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e6 e2       	ldi	r30, 0x26	; 38
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	80 64       	ori	r24, 0x40	; 64
    1ce8:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1cea:	e6 e2       	ldi	r30, 0x26	; 38
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	82 95       	swap	r24
    1cf2:	8f 70       	andi	r24, 0x0F	; 15
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	81 70       	andi	r24, 0x01	; 1
    1cfa:	90 70       	andi	r25, 0x00	; 0
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	a9 f3       	breq	.-22     	; 0x1cea <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1d00:	e4 e2       	ldi	r30, 0x24	; 36
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d08:	0f 90       	pop	r0
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <HSWITCH_VidInit_PullUP+0x6>
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d20:	fa 81       	ldd	r31, Y+2	; 0x02
    1d22:	81 81       	ldd	r24, Z+1	; 0x01
    1d24:	e9 81       	ldd	r30, Y+1	; 0x01
    1d26:	fa 81       	ldd	r31, Y+2	; 0x02
    1d28:	90 81       	ld	r25, Z
    1d2a:	69 2f       	mov	r22, r25
    1d2c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <MDIO_VidActivePullUP>
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <HSWITCH_u8SwitchState+0x6>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9b 83       	std	Y+3, r25	; 0x03
    1d48:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d50:	fb 81       	ldd	r31, Y+3	; 0x03
    1d52:	81 81       	ldd	r24, Z+1	; 0x01
    1d54:	ea 81       	ldd	r30, Y+2	; 0x02
    1d56:	fb 81       	ldd	r31, Y+3	; 0x03
    1d58:	90 81       	ld	r25, Z
    1d5a:	69 2f       	mov	r22, r25
    1d5c:	9e 01       	movw	r18, r28
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	a9 01       	movw	r20, r18
    1d64:	0e 94 93 0c 	call	0x1926	; 0x1926 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <HSEVEN_SEGMENT_VidInit+0x6>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1d84:	e9 81       	ldd	r30, Y+1	; 0x01
    1d86:	fa 81       	ldd	r31, Y+2	; 0x02
    1d88:	80 81       	ld	r24, Z
    1d8a:	6f ef       	ldi	r22, 0xFF	; 255
    1d8c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <MDIO_Error_State_SetPortDirection>
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <HSEVEN_SEGMENT_VidOff+0x6>
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	81 81       	ldd	r24, Z+1	; 0x01
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	31 f4       	brne	.+12     	; 0x1dc2 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1db6:	e9 81       	ldd	r30, Y+1	; 0x01
    1db8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dba:	80 81       	ld	r24, Z
    1dbc:	6b 81       	ldd	r22, Y+3	; 0x03
    1dbe:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc6:	81 81       	ldd	r24, Z+1	; 0x01
    1dc8:	88 23       	and	r24, r24
    1dca:	51 f4       	brne	.+20     	; 0x1de0 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dce:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd0:	20 81       	ld	r18, Z
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	98 2f       	mov	r25, r24
    1dd6:	90 95       	com	r25
    1dd8:	82 2f       	mov	r24, r18
    1dda:	69 2f       	mov	r22, r25
    1ddc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
	}
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	27 97       	sbiw	r28, 0x07	; 7
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1e06:	e9 81       	ldd	r30, Y+1	; 0x01
    1e08:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0a:	81 81       	ldd	r24, Z+1	; 0x01
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1e10:	9b c0       	rjmp	.+310    	; 0x1f48 <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3f 83       	std	Y+7, r19	; 0x07
    1e1a:	2e 83       	std	Y+6, r18	; 0x06
    1e1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	91 05       	cpc	r25, r1
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1e26:	5f c0       	rjmp	.+190    	; 0x1ee6 <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1e28:	2e 81       	ldd	r18, Y+6	; 0x06
    1e2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2c:	25 30       	cpi	r18, 0x05	; 5
    1e2e:	31 05       	cpc	r19, r1
    1e30:	dc f4       	brge	.+54     	; 0x1e68 <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	91 05       	cpc	r25, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    1e3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e40:	3f 81       	ldd	r19, Y+7	; 0x07
    1e42:	22 30       	cpi	r18, 0x02	; 2
    1e44:	31 05       	cpc	r19, r1
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	79 f1       	breq	.+94     	; 0x1eae <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    1e50:	74 c0       	rjmp	.+232    	; 0x1f3a <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1e52:	2e 81       	ldd	r18, Y+6	; 0x06
    1e54:	3f 81       	ldd	r19, Y+7	; 0x07
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	b9 f1       	breq	.+110    	; 0x1eca <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    1e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e60:	83 30       	cpi	r24, 0x03	; 3
    1e62:	91 05       	cpc	r25, r1
    1e64:	c9 f1       	breq	.+114    	; 0x1ed8 <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1e66:	69 c0       	rjmp	.+210    	; 0x1f3a <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1e68:	2e 81       	ldd	r18, Y+6	; 0x06
    1e6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e6c:	27 30       	cpi	r18, 0x07	; 7
    1e6e:	31 05       	cpc	r19, r1
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1e72:	4e c0       	rjmp	.+156    	; 0x1f10 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1e74:	8e 81       	ldd	r24, Y+6	; 0x06
    1e76:	9f 81       	ldd	r25, Y+7	; 0x07
    1e78:	88 30       	cpi	r24, 0x08	; 8
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	5c f4       	brge	.+22     	; 0x1e94 <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1e7e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e80:	3f 81       	ldd	r19, Y+7	; 0x07
    1e82:	25 30       	cpi	r18, 0x05	; 5
    1e84:	31 05       	cpc	r19, r1
    1e86:	b1 f1       	breq	.+108    	; 0x1ef4 <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1e88:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8c:	86 30       	cpi	r24, 0x06	; 6
    1e8e:	91 05       	cpc	r25, r1
    1e90:	c1 f1       	breq	.+112    	; 0x1f02 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1e92:	53 c0       	rjmp	.+166    	; 0x1f3a <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1e94:	2e 81       	ldd	r18, Y+6	; 0x06
    1e96:	3f 81       	ldd	r19, Y+7	; 0x07
    1e98:	28 30       	cpi	r18, 0x08	; 8
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea4:	89 30       	cpi	r24, 0x09	; 9
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1eaa:	40 c0       	rjmp	.+128    	; 0x1f2c <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1eac:	46 c0       	rjmp	.+140    	; 0x1f3a <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	80 81       	ld	r24, Z
    1eb4:	6f e3       	ldi	r22, 0x3F	; 63
    1eb6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1eba:	e6 c0       	rjmp	.+460    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	80 81       	ld	r24, Z
    1ec2:	66 e0       	ldi	r22, 0x06	; 6
    1ec4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1ec8:	df c0       	rjmp	.+446    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1eca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ece:	80 81       	ld	r24, Z
    1ed0:	6b e5       	ldi	r22, 0x5B	; 91
    1ed2:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1ed6:	d8 c0       	rjmp	.+432    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    1ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eda:	fa 81       	ldd	r31, Y+2	; 0x02
    1edc:	80 81       	ld	r24, Z
    1ede:	6f e4       	ldi	r22, 0x4F	; 79
    1ee0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1ee4:	d1 c0       	rjmp	.+418    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	80 81       	ld	r24, Z
    1eec:	66 e6       	ldi	r22, 0x66	; 102
    1eee:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1ef2:	ca c0       	rjmp	.+404    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	80 81       	ld	r24, Z
    1efa:	6d e6       	ldi	r22, 0x6D	; 109
    1efc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1f00:	c3 c0       	rjmp	.+390    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	80 81       	ld	r24, Z
    1f08:	6d e7       	ldi	r22, 0x7D	; 125
    1f0a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1f0e:	bc c0       	rjmp	.+376    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    1f10:	e9 81       	ldd	r30, Y+1	; 0x01
    1f12:	fa 81       	ldd	r31, Y+2	; 0x02
    1f14:	80 81       	ld	r24, Z
    1f16:	67 e0       	ldi	r22, 0x07	; 7
    1f18:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1f1c:	b5 c0       	rjmp	.+362    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    1f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f20:	fa 81       	ldd	r31, Y+2	; 0x02
    1f22:	80 81       	ld	r24, Z
    1f24:	6f e7       	ldi	r22, 0x7F	; 127
    1f26:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1f2a:	ae c0       	rjmp	.+348    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	80 81       	ld	r24, Z
    1f32:	6f e6       	ldi	r22, 0x6F	; 111
    1f34:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1f38:	a7 c0       	rjmp	.+334    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    1f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3e:	80 81       	ld	r24, Z
    1f40:	69 e7       	ldi	r22, 0x79	; 121
    1f42:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1f46:	a0 c0       	rjmp	.+320    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    1f48:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4c:	81 81       	ldd	r24, Z+1	; 0x01
    1f4e:	88 23       	and	r24, r24
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    1f52:	9a c0       	rjmp	.+308    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	3d 83       	std	Y+5, r19	; 0x05
    1f5c:	2c 83       	std	Y+4, r18	; 0x04
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	91 05       	cpc	r25, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    1f68:	5f c0       	rjmp	.+190    	; 0x2028 <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    1f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6e:	25 30       	cpi	r18, 0x05	; 5
    1f70:	31 05       	cpc	r19, r1
    1f72:	dc f4       	brge	.+54     	; 0x1faa <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    1f74:	8c 81       	ldd	r24, Y+4	; 0x04
    1f76:	9d 81       	ldd	r25, Y+5	; 0x05
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    1f80:	2c 81       	ldd	r18, Y+4	; 0x04
    1f82:	3d 81       	ldd	r19, Y+5	; 0x05
    1f84:	22 30       	cpi	r18, 0x02	; 2
    1f86:	31 05       	cpc	r19, r1
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	79 f1       	breq	.+94     	; 0x1ff0 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1f92:	74 c0       	rjmp	.+232    	; 0x207c <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1f94:	2c 81       	ldd	r18, Y+4	; 0x04
    1f96:	3d 81       	ldd	r19, Y+5	; 0x05
    1f98:	22 30       	cpi	r18, 0x02	; 2
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	b9 f1       	breq	.+110    	; 0x200c <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	83 30       	cpi	r24, 0x03	; 3
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	c9 f1       	breq	.+114    	; 0x201a <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    1fa8:	69 c0       	rjmp	.+210    	; 0x207c <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1faa:	2c 81       	ldd	r18, Y+4	; 0x04
    1fac:	3d 81       	ldd	r19, Y+5	; 0x05
    1fae:	27 30       	cpi	r18, 0x07	; 7
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    1fb4:	4e c0       	rjmp	.+156    	; 0x2052 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fba:	88 30       	cpi	r24, 0x08	; 8
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	5c f4       	brge	.+22     	; 0x1fd6 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    1fc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc4:	25 30       	cpi	r18, 0x05	; 5
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	b1 f1       	breq	.+108    	; 0x2036 <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    1fca:	8c 81       	ldd	r24, Y+4	; 0x04
    1fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fce:	86 30       	cpi	r24, 0x06	; 6
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	c1 f1       	breq	.+112    	; 0x2044 <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    1fd4:	53 c0       	rjmp	.+166    	; 0x207c <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	28 30       	cpi	r18, 0x08	; 8
    1fdc:	31 05       	cpc	r19, r1
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    1fe0:	3f c0       	rjmp	.+126    	; 0x2060 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	89 30       	cpi	r24, 0x09	; 9
    1fe8:	91 05       	cpc	r25, r1
    1fea:	09 f4       	brne	.+2      	; 0x1fee <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    1fec:	40 c0       	rjmp	.+128    	; 0x206e <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    1fee:	46 c0       	rjmp	.+140    	; 0x207c <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	80 81       	ld	r24, Z
    1ff6:	60 ec       	ldi	r22, 0xC0	; 192
    1ff8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    1ffc:	45 c0       	rjmp	.+138    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    1ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    2000:	fa 81       	ldd	r31, Y+2	; 0x02
    2002:	80 81       	ld	r24, Z
    2004:	69 ef       	ldi	r22, 0xF9	; 249
    2006:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    200a:	3e c0       	rjmp	.+124    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	80 81       	ld	r24, Z
    2012:	64 ea       	ldi	r22, 0xA4	; 164
    2014:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    2018:	37 c0       	rjmp	.+110    	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    201a:	e9 81       	ldd	r30, Y+1	; 0x01
    201c:	fa 81       	ldd	r31, Y+2	; 0x02
    201e:	80 81       	ld	r24, Z
    2020:	60 eb       	ldi	r22, 0xB0	; 176
    2022:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    2026:	30 c0       	rjmp	.+96     	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    2028:	e9 81       	ldd	r30, Y+1	; 0x01
    202a:	fa 81       	ldd	r31, Y+2	; 0x02
    202c:	80 81       	ld	r24, Z
    202e:	69 e9       	ldi	r22, 0x99	; 153
    2030:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    2034:	29 c0       	rjmp	.+82     	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    2036:	e9 81       	ldd	r30, Y+1	; 0x01
    2038:	fa 81       	ldd	r31, Y+2	; 0x02
    203a:	80 81       	ld	r24, Z
    203c:	62 e9       	ldi	r22, 0x92	; 146
    203e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    2042:	22 c0       	rjmp	.+68     	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	80 81       	ld	r24, Z
    204a:	62 e8       	ldi	r22, 0x82	; 130
    204c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    2050:	1b c0       	rjmp	.+54     	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	80 81       	ld	r24, Z
    2058:	68 ef       	ldi	r22, 0xF8	; 248
    205a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    2060:	e9 81       	ldd	r30, Y+1	; 0x01
    2062:	fa 81       	ldd	r31, Y+2	; 0x02
    2064:	80 81       	ld	r24, Z
    2066:	60 e8       	ldi	r22, 0x80	; 128
    2068:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    206c:	0d c0       	rjmp	.+26     	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    206e:	e9 81       	ldd	r30, Y+1	; 0x01
    2070:	fa 81       	ldd	r31, Y+2	; 0x02
    2072:	80 81       	ld	r24, Z
    2074:	60 e9       	ldi	r22, 0x90	; 144
    2076:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	80 81       	ld	r24, Z
    2082:	66 e8       	ldi	r22, 0x86	; 134
    2084:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
	}
}
}
    2088:	27 96       	adiw	r28, 0x07	; 7
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <HLED_VidInit+0x6>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    20a8:	e9 81       	ldd	r30, Y+1	; 0x01
    20aa:	fa 81       	ldd	r31, Y+2	; 0x02
    20ac:	81 81       	ldd	r24, Z+1	; 0x01
    20ae:	e9 81       	ldd	r30, Y+1	; 0x01
    20b0:	fa 81       	ldd	r31, Y+2	; 0x02
    20b2:	90 81       	ld	r25, Z
    20b4:	69 2f       	mov	r22, r25
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <HLED_VidLed_On+0x6>
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    20d4:	e9 81       	ldd	r30, Y+1	; 0x01
    20d6:	fa 81       	ldd	r31, Y+2	; 0x02
    20d8:	81 81       	ldd	r24, Z+1	; 0x01
    20da:	e9 81       	ldd	r30, Y+1	; 0x01
    20dc:	fa 81       	ldd	r31, Y+2	; 0x02
    20de:	90 81       	ld	r25, Z
    20e0:	69 2f       	mov	r22, r25
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <HLED_VidLed_Off+0x6>
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	9a 83       	std	Y+2, r25	; 0x02
    20fe:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    2100:	e9 81       	ldd	r30, Y+1	; 0x01
    2102:	fa 81       	ldd	r31, Y+2	; 0x02
    2104:	81 81       	ldd	r24, Z+1	; 0x01
    2106:	e9 81       	ldd	r30, Y+1	; 0x01
    2108:	fa 81       	ldd	r31, Y+2	; 0x02
    210a:	90 81       	ld	r25, Z
    210c:	69 2f       	mov	r22, r25
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <HLED_VidLed_Toggle+0x6>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    212c:	80 91 84 00 	lds	r24, 0x0084
    2130:	88 23       	and	r24, r24
    2132:	71 f4       	brne	.+28     	; 0x2150 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    2134:	e9 81       	ldd	r30, Y+1	; 0x01
    2136:	fa 81       	ldd	r31, Y+2	; 0x02
    2138:	81 81       	ldd	r24, Z+1	; 0x01
    213a:	e9 81       	ldd	r30, Y+1	; 0x01
    213c:	fa 81       	ldd	r31, Y+2	; 0x02
    213e:	90 81       	ld	r25, Z
    2140:	69 2f       	mov	r22, r25
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
		Flag=1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	80 93 84 00 	sts	0x0084, r24
    214e:	0c c0       	rjmp	.+24     	; 0x2168 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	81 81       	ldd	r24, Z+1	; 0x01
    2156:	e9 81       	ldd	r30, Y+1	; 0x01
    2158:	fa 81       	ldd	r31, Y+2	; 0x02
    215a:	90 81       	ld	r25, Z
    215c:	69 2f       	mov	r22, r25
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
		Flag=0;
    2164:	10 92 84 00 	sts	0x0084, r1
	}
}
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	62 e0       	ldi	r22, 0x02	; 2
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	62 e0       	ldi	r22, 0x02	; 2
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	62 e0       	ldi	r22, 0x02	; 2
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	62 e0       	ldi	r22, 0x02	; 2
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    21a2:	84 e0       	ldi	r24, 0x04	; 4
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    21ac:	85 e0       	ldi	r24, 0x05	; 5
    21ae:	62 e0       	ldi	r22, 0x02	; 2
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    21b6:	86 e0       	ldi	r24, 0x06	; 6
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    21c0:	87 e0       	ldi	r24, 0x07	; 7
    21c2:	62 e0       	ldi	r22, 0x02	; 2
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	62 e0       	ldi	r22, 0x02	; 2
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	62 e0       	ldi	r22, 0x02	; 2
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	62 e0       	ldi	r22, 0x02	; 2
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	62 e0       	ldi	r22, 0x02	; 2
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    21f2:	84 e0       	ldi	r24, 0x04	; 4
    21f4:	62 e0       	ldi	r22, 0x02	; 2
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    21fc:	85 e0       	ldi	r24, 0x05	; 5
    21fe:	62 e0       	ldi	r22, 0x02	; 2
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    2206:	86 e0       	ldi	r24, 0x06	; 6
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    2210:	87 e0       	ldi	r24, 0x07	; 7
    2212:	62 e0       	ldi	r22, 0x02	; 2
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>

}
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	62 97       	sbiw	r28, 0x12	; 18
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2238:	84 e0       	ldi	r24, 0x04	; 4
    223a:	88 8b       	std	Y+16, r24	; 0x10
    223c:	b5 c0       	rjmp	.+362    	; 0x23a8 <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    223e:	88 89       	ldd	r24, Y+16	; 0x10
    2240:	62 e0       	ldi	r22, 0x02	; 2
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2248:	19 8a       	std	Y+17, r1	; 0x11
    224a:	a2 c0       	rjmp	.+324    	; 0x2390 <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    224c:	9e 01       	movw	r18, r28
    224e:	2e 5e       	subi	r18, 0xEE	; 238
    2250:	3f 4f       	sbci	r19, 0xFF	; 255
    2252:	89 89       	ldd	r24, Y+17	; 0x11
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	a9 01       	movw	r20, r18
    2258:	0e 94 93 0c 	call	0x1926	; 0x1926 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    225c:	8a 89       	ldd	r24, Y+18	; 0x12
    225e:	88 23       	and	r24, r24
    2260:	09 f0       	breq	.+2      	; 0x2264 <HKPD_U8GetKeyPressed+0x44>
    2262:	93 c0       	rjmp	.+294    	; 0x238a <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    2264:	88 89       	ldd	r24, Y+16	; 0x10
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	ac 01       	movw	r20, r24
    226c:	44 50       	subi	r20, 0x04	; 4
    226e:	50 40       	sbci	r21, 0x00	; 0
    2270:	89 89       	ldd	r24, Y+17	; 0x11
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	ca 01       	movw	r24, r20
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	82 0f       	add	r24, r18
    2282:	93 1f       	adc	r25, r19
    2284:	fc 01       	movw	r30, r24
    2286:	ed 58       	subi	r30, 0x8D	; 141
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	8f 87       	std	Y+15, r24	; 0x0f
    228e:	08 c0       	rjmp	.+16     	; 0x22a0 <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2290:	9e 01       	movw	r18, r28
    2292:	2e 5e       	subi	r18, 0xEE	; 238
    2294:	3f 4f       	sbci	r19, 0xFF	; 255
    2296:	89 89       	ldd	r24, Y+17	; 0x11
    2298:	62 e0       	ldi	r22, 0x02	; 2
    229a:	a9 01       	movw	r20, r18
    229c:	0e 94 93 0c 	call	0x1926	; 0x1926 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    22a0:	8a 89       	ldd	r24, Y+18	; 0x12
    22a2:	88 23       	and	r24, r24
    22a4:	a9 f3       	breq	.-22     	; 0x2290 <HKPD_U8GetKeyPressed+0x70>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e2       	ldi	r26, 0x20	; 32
    22ac:	b1 e4       	ldi	r27, 0x41	; 65
    22ae:	8b 87       	std	Y+11, r24	; 0x0b
    22b0:	9c 87       	std	Y+12, r25	; 0x0c
    22b2:	ad 87       	std	Y+13, r26	; 0x0d
    22b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    22bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a ef       	ldi	r20, 0xFA	; 250
    22c4:	54 e4       	ldi	r21, 0x44	; 68
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8f 83       	std	Y+7, r24	; 0x07
    22d0:	98 87       	std	Y+8, r25	; 0x08
    22d2:	a9 87       	std	Y+9, r26	; 0x09
    22d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <HKPD_U8GetKeyPressed+0x138>
    233a:	88 ec       	ldi	r24, 0xC8	; 200
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9c 83       	std	Y+4, r25	; 0x04
    2340:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <HKPD_U8GetKeyPressed+0x126>
    234a:	9c 83       	std	Y+4, r25	; 0x04
    234c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <HKPD_U8GetKeyPressed+0x11a>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	9a 81       	ldd	r25, Y+2	; 0x02
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <HKPD_U8GetKeyPressed+0x162>
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    238a:	89 89       	ldd	r24, Y+17	; 0x11
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	89 8b       	std	Y+17, r24	; 0x11
    2390:	89 89       	ldd	r24, Y+17	; 0x11
    2392:	84 30       	cpi	r24, 0x04	; 4
    2394:	08 f4       	brcc	.+2      	; 0x2398 <HKPD_U8GetKeyPressed+0x178>
    2396:	5a cf       	rjmp	.-332    	; 0x224c <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    2398:	88 89       	ldd	r24, Y+16	; 0x10
    239a:	62 e0       	ldi	r22, 0x02	; 2
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    23a2:	88 89       	ldd	r24, Y+16	; 0x10
    23a4:	8f 5f       	subi	r24, 0xFF	; 255
    23a6:	88 8b       	std	Y+16, r24	; 0x10
    23a8:	88 89       	ldd	r24, Y+16	; 0x10
    23aa:	88 30       	cpi	r24, 0x08	; 8
    23ac:	08 f4       	brcc	.+2      	; 0x23b0 <HKPD_U8GetKeyPressed+0x190>
    23ae:	47 cf       	rjmp	.-370    	; 0x223e <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    23b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b2:	8f 3f       	cpi	r24, 0xFF	; 255
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <HKPD_U8GetKeyPressed+0x198>
    23b6:	40 cf       	rjmp	.-384    	; 0x2238 <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    23b8:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    23ba:	62 96       	adiw	r28, 0x12	; 18
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	6d 97       	sbiw	r28, 0x1d	; 29
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	62 e0       	ldi	r22, 0x02	; 2
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	62 e0       	ldi	r22, 0x02	; 2
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    23f6:	82 e0       	ldi	r24, 0x02	; 2
    23f8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23fa:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	62 e0       	ldi	r22, 0x02	; 2
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e0       	ldi	r26, 0x00	; 0
    240e:	b0 e4       	ldi	r27, 0x40	; 64
    2410:	89 8f       	std	Y+25, r24	; 0x19
    2412:	9a 8f       	std	Y+26, r25	; 0x1a
    2414:	ab 8f       	std	Y+27, r26	; 0x1b
    2416:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	69 8d       	ldd	r22, Y+25	; 0x19
    241a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8d 8b       	std	Y+21, r24	; 0x15
    2432:	9e 8b       	std	Y+22, r25	; 0x16
    2434:	af 8b       	std	Y+23, r26	; 0x17
    2436:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2438:	6d 89       	ldd	r22, Y+21	; 0x15
    243a:	7e 89       	ldd	r23, Y+22	; 0x16
    243c:	8f 89       	ldd	r24, Y+23	; 0x17
    243e:	98 8d       	ldd	r25, Y+24	; 0x18
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    245a:	6d 89       	ldd	r22, Y+21	; 0x15
    245c:	7e 89       	ldd	r23, Y+22	; 0x16
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	98 8d       	ldd	r25, Y+24	; 0x18
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	69 8d       	ldd	r22, Y+25	; 0x19
    2474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <HCLCD_Vid8Bits_SendCommand+0xee>
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9a 8b       	std	Y+18, r25	; 0x12
    24a2:	89 8b       	std	Y+17, r24	; 0x11
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <HCLCD_Vid8Bits_SendCommand+0xdc>
    24ac:	9a 8b       	std	Y+18, r25	; 0x12
    24ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9c 8b       	std	Y+20, r25	; 0x14
    24b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8b 89       	ldd	r24, Y+19	; 0x13
    24bc:	9c 89       	ldd	r25, Y+20	; 0x14
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <HCLCD_Vid8Bits_SendCommand+0xd0>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9c 8b       	std	Y+20, r25	; 0x14
    24d6:	8b 8b       	std	Y+19, r24	; 0x13
    24d8:	8b 89       	ldd	r24, Y+19	; 0x13
    24da:	9c 89       	ldd	r25, Y+20	; 0x14
    24dc:	98 8b       	std	Y+16, r25	; 0x10
    24de:	8f 87       	std	Y+15, r24	; 0x0f
    24e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e2:	98 89       	ldd	r25, Y+16	; 0x10
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <HCLCD_Vid8Bits_SendCommand+0x118>
    24e8:	98 8b       	std	Y+16, r25	; 0x10
    24ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	62 e0       	ldi	r22, 0x02	; 2
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e0       	ldi	r26, 0x00	; 0
    24fc:	b0 e4       	ldi	r27, 0x40	; 64
    24fe:	8b 87       	std	Y+11, r24	; 0x0b
    2500:	9c 87       	std	Y+12, r25	; 0x0c
    2502:	ad 87       	std	Y+13, r26	; 0x0d
    2504:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	6b 85       	ldd	r22, Y+11	; 0x0b
    2508:	7c 85       	ldd	r23, Y+12	; 0x0c
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	9e 85       	ldd	r25, Y+14	; 0x0e
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a ef       	ldi	r20, 0xFA	; 250
    2514:	54 e4       	ldi	r21, 0x44	; 68
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8f 83       	std	Y+7, r24	; 0x07
    2520:	98 87       	std	Y+8, r25	; 0x08
    2522:	a9 87       	std	Y+9, r26	; 0x09
    2524:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	6b 85       	ldd	r22, Y+11	; 0x0b
    2562:	7c 85       	ldd	r23, Y+12	; 0x0c
    2564:	8d 85       	ldd	r24, Y+13	; 0x0d
    2566:	9e 85       	ldd	r25, Y+14	; 0x0e
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <HCLCD_Vid8Bits_SendCommand+0x1dc>
    258a:	88 ec       	ldi	r24, 0xC8	; 200
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <HCLCD_Vid8Bits_SendCommand+0x1ca>
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <HCLCD_Vid8Bits_SendCommand+0x1be>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6f 81       	ldd	r22, Y+7	; 0x07
    25b4:	78 85       	ldd	r23, Y+8	; 0x08
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	9a 81       	ldd	r25, Y+2	; 0x02
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <HCLCD_Vid8Bits_SendCommand+0x206>
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    25da:	82 e0       	ldi	r24, 0x02	; 2
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
}
    25e4:	6d 96       	adiw	r28, 0x1d	; 29
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	e8 97       	sbiw	r28, 0x38	; 56
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    260a:	82 e0       	ldi	r24, 0x02	; 2
    260c:	6f ef       	ldi	r22, 0xFF	; 255
    260e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	62 e0       	ldi	r22, 0x02	; 2
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	62 e0       	ldi	r22, 0x02	; 2
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a0 ef       	ldi	r26, 0xF0	; 240
    2636:	b1 e4       	ldi	r27, 0x41	; 65
    2638:	8d ab       	std	Y+53, r24	; 0x35
    263a:	9e ab       	std	Y+54, r25	; 0x36
    263c:	af ab       	std	Y+55, r26	; 0x37
    263e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2640:	6d a9       	ldd	r22, Y+53	; 0x35
    2642:	7e a9       	ldd	r23, Y+54	; 0x36
    2644:	8f a9       	ldd	r24, Y+55	; 0x37
    2646:	98 ad       	ldd	r25, Y+56	; 0x38
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4a ef       	ldi	r20, 0xFA	; 250
    264e:	54 e4       	ldi	r21, 0x44	; 68
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	89 ab       	std	Y+49, r24	; 0x31
    265a:	9a ab       	std	Y+50, r25	; 0x32
    265c:	ab ab       	std	Y+51, r26	; 0x33
    265e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2660:	69 a9       	ldd	r22, Y+49	; 0x31
    2662:	7a a9       	ldd	r23, Y+50	; 0x32
    2664:	8b a9       	ldd	r24, Y+51	; 0x33
    2666:	9c a9       	ldd	r25, Y+52	; 0x34
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e8       	ldi	r20, 0x80	; 128
    266e:	5f e3       	ldi	r21, 0x3F	; 63
    2670:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2674:	88 23       	and	r24, r24
    2676:	2c f4       	brge	.+10     	; 0x2682 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	98 ab       	std	Y+48, r25	; 0x30
    267e:	8f a7       	std	Y+47, r24	; 0x2f
    2680:	3f c0       	rjmp	.+126    	; 0x2700 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    2682:	69 a9       	ldd	r22, Y+49	; 0x31
    2684:	7a a9       	ldd	r23, Y+50	; 0x32
    2686:	8b a9       	ldd	r24, Y+51	; 0x33
    2688:	9c a9       	ldd	r25, Y+52	; 0x34
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	4c f5       	brge	.+82     	; 0x26ec <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269a:	6d a9       	ldd	r22, Y+53	; 0x35
    269c:	7e a9       	ldd	r23, Y+54	; 0x36
    269e:	8f a9       	ldd	r24, Y+55	; 0x37
    26a0:	98 ad       	ldd	r25, Y+56	; 0x38
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	98 ab       	std	Y+48, r25	; 0x30
    26c0:	8f a7       	std	Y+47, r24	; 0x2f
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <HCLCD_Vid8Bits_Init+0xec>
    26c4:	88 ec       	ldi	r24, 0xC8	; 200
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9e a7       	std	Y+46, r25	; 0x2e
    26ca:	8d a7       	std	Y+45, r24	; 0x2d
    26cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    26ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <HCLCD_Vid8Bits_Init+0xda>
    26d4:	9e a7       	std	Y+46, r25	; 0x2e
    26d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26da:	98 a9       	ldd	r25, Y+48	; 0x30
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	98 ab       	std	Y+48, r25	; 0x30
    26e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e4:	98 a9       	ldd	r25, Y+48	; 0x30
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	69 f7       	brne	.-38     	; 0x26c4 <HCLCD_Vid8Bits_Init+0xce>
    26ea:	14 c0       	rjmp	.+40     	; 0x2714 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ec:	69 a9       	ldd	r22, Y+49	; 0x31
    26ee:	7a a9       	ldd	r23, Y+50	; 0x32
    26f0:	8b a9       	ldd	r24, Y+51	; 0x33
    26f2:	9c a9       	ldd	r25, Y+52	; 0x34
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	98 ab       	std	Y+48, r25	; 0x30
    26fe:	8f a7       	std	Y+47, r24	; 0x2f
    2700:	8f a5       	ldd	r24, Y+47	; 0x2f
    2702:	98 a9       	ldd	r25, Y+48	; 0x30
    2704:	9c a7       	std	Y+44, r25	; 0x2c
    2706:	8b a7       	std	Y+43, r24	; 0x2b
    2708:	8b a5       	ldd	r24, Y+43	; 0x2b
    270a:	9c a5       	ldd	r25, Y+44	; 0x2c
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <HCLCD_Vid8Bits_Init+0x116>
    2710:	9c a7       	std	Y+44, r25	; 0x2c
    2712:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    2714:	88 e2       	ldi	r24, 0x28	; 40
    2716:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 e8       	ldi	r26, 0x80	; 128
    2720:	bf e3       	ldi	r27, 0x3F	; 63
    2722:	8f a3       	std	Y+39, r24	; 0x27
    2724:	98 a7       	std	Y+40, r25	; 0x28
    2726:	a9 a7       	std	Y+41, r26	; 0x29
    2728:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	6f a1       	ldd	r22, Y+39	; 0x27
    272c:	78 a5       	ldd	r23, Y+40	; 0x28
    272e:	89 a5       	ldd	r24, Y+41	; 0x29
    2730:	9a a5       	ldd	r25, Y+42	; 0x2a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a ef       	ldi	r20, 0xFA	; 250
    2738:	54 e4       	ldi	r21, 0x44	; 68
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8b a3       	std	Y+35, r24	; 0x23
    2744:	9c a3       	std	Y+36, r25	; 0x24
    2746:	ad a3       	std	Y+37, r26	; 0x25
    2748:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    274a:	6b a1       	ldd	r22, Y+35	; 0x23
    274c:	7c a1       	ldd	r23, Y+36	; 0x24
    274e:	8d a1       	ldd	r24, Y+37	; 0x25
    2750:	9e a1       	ldd	r25, Y+38	; 0x26
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9a a3       	std	Y+34, r25	; 0x22
    2768:	89 a3       	std	Y+33, r24	; 0x21
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    276c:	6b a1       	ldd	r22, Y+35	; 0x23
    276e:	7c a1       	ldd	r23, Y+36	; 0x24
    2770:	8d a1       	ldd	r24, Y+37	; 0x25
    2772:	9e a1       	ldd	r25, Y+38	; 0x26
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	6f a1       	ldd	r22, Y+39	; 0x27
    2786:	78 a5       	ldd	r23, Y+40	; 0x28
    2788:	89 a5       	ldd	r24, Y+41	; 0x29
    278a:	9a a5       	ldd	r25, Y+42	; 0x2a
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9a a3       	std	Y+34, r25	; 0x22
    27aa:	89 a3       	std	Y+33, r24	; 0x21
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <HCLCD_Vid8Bits_Init+0x1d6>
    27ae:	88 ec       	ldi	r24, 0xC8	; 200
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	98 a3       	std	Y+32, r25	; 0x20
    27b4:	8f 8f       	std	Y+31, r24	; 0x1f
    27b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b8:	98 a1       	ldd	r25, Y+32	; 0x20
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <HCLCD_Vid8Bits_Init+0x1c4>
    27be:	98 a3       	std	Y+32, r25	; 0x20
    27c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	89 a1       	ldd	r24, Y+33	; 0x21
    27c4:	9a a1       	ldd	r25, Y+34	; 0x22
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9a a3       	std	Y+34, r25	; 0x22
    27ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	89 a1       	ldd	r24, Y+33	; 0x21
    27ce:	9a a1       	ldd	r25, Y+34	; 0x22
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f7       	brne	.-38     	; 0x27ae <HCLCD_Vid8Bits_Init+0x1b8>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	6b a1       	ldd	r22, Y+35	; 0x23
    27d8:	7c a1       	ldd	r23, Y+36	; 0x24
    27da:	8d a1       	ldd	r24, Y+37	; 0x25
    27dc:	9e a1       	ldd	r25, Y+38	; 0x26
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9a a3       	std	Y+34, r25	; 0x22
    27e8:	89 a3       	std	Y+33, r24	; 0x21
    27ea:	89 a1       	ldd	r24, Y+33	; 0x21
    27ec:	9a a1       	ldd	r25, Y+34	; 0x22
    27ee:	9e 8f       	std	Y+30, r25	; 0x1e
    27f0:	8d 8f       	std	Y+29, r24	; 0x1d
    27f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <HCLCD_Vid8Bits_Init+0x200>
    27fa:	9e 8f       	std	Y+30, r25	; 0x1e
    27fc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    27fe:	8f e0       	ldi	r24, 0x0F	; 15
    2800:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 e8       	ldi	r26, 0x80	; 128
    280a:	bf e3       	ldi	r27, 0x3F	; 63
    280c:	89 8f       	std	Y+25, r24	; 0x19
    280e:	9a 8f       	std	Y+26, r25	; 0x1a
    2810:	ab 8f       	std	Y+27, r26	; 0x1b
    2812:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2814:	69 8d       	ldd	r22, Y+25	; 0x19
    2816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a ef       	ldi	r20, 0xFA	; 250
    2822:	54 e4       	ldi	r21, 0x44	; 68
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8d 8b       	std	Y+21, r24	; 0x15
    282e:	9e 8b       	std	Y+22, r25	; 0x16
    2830:	af 8b       	std	Y+23, r26	; 0x17
    2832:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2834:	6d 89       	ldd	r22, Y+21	; 0x15
    2836:	7e 89       	ldd	r23, Y+22	; 0x16
    2838:	8f 89       	ldd	r24, Y+23	; 0x17
    283a:	98 8d       	ldd	r25, Y+24	; 0x18
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9c 8b       	std	Y+20, r25	; 0x14
    2852:	8b 8b       	std	Y+19, r24	; 0x13
    2854:	3f c0       	rjmp	.+126    	; 0x28d4 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    2856:	6d 89       	ldd	r22, Y+21	; 0x15
    2858:	7e 89       	ldd	r23, Y+22	; 0x16
    285a:	8f 89       	ldd	r24, Y+23	; 0x17
    285c:	98 8d       	ldd	r25, Y+24	; 0x18
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	4c f5       	brge	.+82     	; 0x28c0 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	69 8d       	ldd	r22, Y+25	; 0x19
    2870:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9c 8b       	std	Y+20, r25	; 0x14
    2894:	8b 8b       	std	Y+19, r24	; 0x13
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <HCLCD_Vid8Bits_Init+0x2c0>
    2898:	88 ec       	ldi	r24, 0xC8	; 200
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9a 8b       	std	Y+18, r25	; 0x12
    289e:	89 8b       	std	Y+17, r24	; 0x11
    28a0:	89 89       	ldd	r24, Y+17	; 0x11
    28a2:	9a 89       	ldd	r25, Y+18	; 0x12
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <HCLCD_Vid8Bits_Init+0x2ae>
    28a8:	9a 8b       	std	Y+18, r25	; 0x12
    28aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	8b 89       	ldd	r24, Y+19	; 0x13
    28ae:	9c 89       	ldd	r25, Y+20	; 0x14
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	9c 8b       	std	Y+20, r25	; 0x14
    28b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	8b 89       	ldd	r24, Y+19	; 0x13
    28b8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	69 f7       	brne	.-38     	; 0x2898 <HCLCD_Vid8Bits_Init+0x2a2>
    28be:	14 c0       	rjmp	.+40     	; 0x28e8 <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	6d 89       	ldd	r22, Y+21	; 0x15
    28c2:	7e 89       	ldd	r23, Y+22	; 0x16
    28c4:	8f 89       	ldd	r24, Y+23	; 0x17
    28c6:	98 8d       	ldd	r25, Y+24	; 0x18
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9c 8b       	std	Y+20, r25	; 0x14
    28d2:	8b 8b       	std	Y+19, r24	; 0x13
    28d4:	8b 89       	ldd	r24, Y+19	; 0x13
    28d6:	9c 89       	ldd	r25, Y+20	; 0x14
    28d8:	98 8b       	std	Y+16, r25	; 0x10
    28da:	8f 87       	std	Y+15, r24	; 0x0f
    28dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28de:	98 89       	ldd	r25, Y+16	; 0x10
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <HCLCD_Vid8Bits_Init+0x2ea>
    28e4:	98 8b       	std	Y+16, r25	; 0x10
    28e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 e0       	ldi	r26, 0x00	; 0
    28f4:	b0 e4       	ldi	r27, 0x40	; 64
    28f6:	8b 87       	std	Y+11, r24	; 0x0b
    28f8:	9c 87       	std	Y+12, r25	; 0x0c
    28fa:	ad 87       	std	Y+13, r26	; 0x0d
    28fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2900:	7c 85       	ldd	r23, Y+12	; 0x0c
    2902:	8d 85       	ldd	r24, Y+13	; 0x0d
    2904:	9e 85       	ldd	r25, Y+14	; 0x0e
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4a ef       	ldi	r20, 0xFA	; 250
    290c:	54 e4       	ldi	r21, 0x44	; 68
    290e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	8f 83       	std	Y+7, r24	; 0x07
    2918:	98 87       	std	Y+8, r25	; 0x08
    291a:	a9 87       	std	Y+9, r26	; 0x09
    291c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    291e:	6f 81       	ldd	r22, Y+7	; 0x07
    2920:	78 85       	ldd	r23, Y+8	; 0x08
    2922:	89 85       	ldd	r24, Y+9	; 0x09
    2924:	9a 85       	ldd	r25, Y+10	; 0x0a
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e8       	ldi	r20, 0x80	; 128
    292c:	5f e3       	ldi	r21, 0x3F	; 63
    292e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2932:	88 23       	and	r24, r24
    2934:	2c f4       	brge	.+10     	; 0x2940 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9e 83       	std	Y+6, r25	; 0x06
    293c:	8d 83       	std	Y+5, r24	; 0x05
    293e:	3f c0       	rjmp	.+126    	; 0x29be <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    2940:	6f 81       	ldd	r22, Y+7	; 0x07
    2942:	78 85       	ldd	r23, Y+8	; 0x08
    2944:	89 85       	ldd	r24, Y+9	; 0x09
    2946:	9a 85       	ldd	r25, Y+10	; 0x0a
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	4c f5       	brge	.+82     	; 0x29aa <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2958:	6b 85       	ldd	r22, Y+11	; 0x0b
    295a:	7c 85       	ldd	r23, Y+12	; 0x0c
    295c:	8d 85       	ldd	r24, Y+13	; 0x0d
    295e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e2       	ldi	r20, 0x20	; 32
    2966:	51 e4       	ldi	r21, 0x41	; 65
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	0f c0       	rjmp	.+30     	; 0x29a0 <HCLCD_Vid8Bits_Init+0x3aa>
    2982:	88 ec       	ldi	r24, 0xC8	; 200
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	9c 83       	std	Y+4, r25	; 0x04
    2988:	8b 83       	std	Y+3, r24	; 0x03
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <HCLCD_Vid8Bits_Init+0x398>
    2992:	9c 83       	std	Y+4, r25	; 0x04
    2994:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a0:	8d 81       	ldd	r24, Y+5	; 0x05
    29a2:	9e 81       	ldd	r25, Y+6	; 0x06
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	69 f7       	brne	.-38     	; 0x2982 <HCLCD_Vid8Bits_Init+0x38c>
    29a8:	14 c0       	rjmp	.+40     	; 0x29d2 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	9a 83       	std	Y+2, r25	; 0x02
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <HCLCD_Vid8Bits_Init+0x3d4>
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    29d2:	86 e0       	ldi	r24, 0x06	; 6
    29d4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
}
    29d8:	e8 96       	adiw	r28, 0x38	; 56
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	6d 97       	sbiw	r28, 0x1d	; 29
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	62 e0       	ldi	r22, 0x02	; 2
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	62 e0       	ldi	r22, 0x02	; 2
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2a14:	82 e0       	ldi	r24, 0x02	; 2
    2a16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a18:	0e 94 4b 0c 	call	0x1896	; 0x1896 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	62 e0       	ldi	r22, 0x02	; 2
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a0 e0       	ldi	r26, 0x00	; 0
    2a2c:	b0 e4       	ldi	r27, 0x40	; 64
    2a2e:	89 8f       	std	Y+25, r24	; 0x19
    2a30:	9a 8f       	std	Y+26, r25	; 0x1a
    2a32:	ab 8f       	std	Y+27, r26	; 0x1b
    2a34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	69 8d       	ldd	r22, Y+25	; 0x19
    2a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a ef       	ldi	r20, 0xFA	; 250
    2a44:	54 e4       	ldi	r21, 0x44	; 68
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8d 8b       	std	Y+21, r24	; 0x15
    2a50:	9e 8b       	std	Y+22, r25	; 0x16
    2a52:	af 8b       	std	Y+23, r26	; 0x17
    2a54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a56:	6d 89       	ldd	r22, Y+21	; 0x15
    2a58:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9c 8b       	std	Y+20, r25	; 0x14
    2a74:	8b 8b       	std	Y+19, r24	; 0x13
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2a78:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	69 8d       	ldd	r22, Y+25	; 0x19
    2a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9c 8b       	std	Y+20, r25	; 0x14
    2ab6:	8b 8b       	std	Y+19, r24	; 0x13
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2aba:	88 ec       	ldi	r24, 0xC8	; 200
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9a 8b       	std	Y+18, r25	; 0x12
    2ac0:	89 8b       	std	Y+17, r24	; 0x11
    2ac2:	89 89       	ldd	r24, Y+17	; 0x11
    2ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2aca:	9a 8b       	std	Y+18, r25	; 0x12
    2acc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	9c 8b       	std	Y+20, r25	; 0x14
    2ad6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ada:	9c 89       	ldd	r25, Y+20	; 0x14
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9c 8b       	std	Y+20, r25	; 0x14
    2af4:	8b 8b       	std	Y+19, r24	; 0x13
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	98 8b       	std	Y+16, r25	; 0x10
    2afc:	8f 87       	std	Y+15, r24	; 0x0f
    2afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b00:	98 89       	ldd	r25, Y+16	; 0x10
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2b06:	98 8b       	std	Y+16, r25	; 0x10
    2b08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	62 e0       	ldi	r22, 0x02	; 2
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a0 e0       	ldi	r26, 0x00	; 0
    2b1a:	b0 e4       	ldi	r27, 0x40	; 64
    2b1c:	8b 87       	std	Y+11, r24	; 0x0b
    2b1e:	9c 87       	std	Y+12, r25	; 0x0c
    2b20:	ad 87       	std	Y+13, r26	; 0x0d
    2b22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	4a ef       	ldi	r20, 0xFA	; 250
    2b32:	54 e4       	ldi	r21, 0x44	; 68
    2b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	8f 83       	std	Y+7, r24	; 0x07
    2b3e:	98 87       	std	Y+8, r25	; 0x08
    2b40:	a9 87       	std	Y+9, r26	; 0x09
    2b42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b44:	6f 81       	ldd	r22, Y+7	; 0x07
    2b46:	78 85       	ldd	r23, Y+8	; 0x08
    2b48:	89 85       	ldd	r24, Y+9	; 0x09
    2b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e8       	ldi	r20, 0x80	; 128
    2b52:	5f e3       	ldi	r21, 0x3F	; 63
    2b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b58:	88 23       	and	r24, r24
    2b5a:	2c f4       	brge	.+10     	; 0x2b66 <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	3f c0       	rjmp	.+126    	; 0x2be4 <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2b66:	6f 81       	ldd	r22, Y+7	; 0x07
    2b68:	78 85       	ldd	r23, Y+8	; 0x08
    2b6a:	89 85       	ldd	r24, Y+9	; 0x09
    2b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	3f ef       	ldi	r19, 0xFF	; 255
    2b72:	4f e7       	ldi	r20, 0x7F	; 127
    2b74:	57 e4       	ldi	r21, 0x47	; 71
    2b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7a:	18 16       	cp	r1, r24
    2b7c:	4c f5       	brge	.+82     	; 0x2bd0 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e2       	ldi	r20, 0x20	; 32
    2b8c:	51 e4       	ldi	r21, 0x41	; 65
    2b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
    2ba6:	0f c0       	rjmp	.+30     	; 0x2bc6 <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2ba8:	88 ec       	ldi	r24, 0xC8	; 200
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	9c 83       	std	Y+4, r25	; 0x04
    2bae:	8b 83       	std	Y+3, r24	; 0x03
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2bb8:	9c 83       	std	Y+4, r25	; 0x04
    2bba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	9e 83       	std	Y+6, r25	; 0x06
    2bc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	69 f7       	brne	.-38     	; 0x2ba8 <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2bce:	14 c0       	rjmp	.+40     	; 0x2bf8 <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd2:	78 85       	ldd	r23, Y+8	; 0x08
    2bd4:	89 85       	ldd	r24, Y+9	; 0x09
    2bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9e 83       	std	Y+6, r25	; 0x06
    2be2:	8d 83       	std	Y+5, r24	; 0x05
    2be4:	8d 81       	ldd	r24, Y+5	; 0x05
    2be6:	9e 81       	ldd	r25, Y+6	; 0x06
    2be8:	9a 83       	std	Y+2, r25	; 0x02
    2bea:	89 83       	std	Y+1, r24	; 0x01
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2bf4:	9a 83       	std	Y+2, r25	; 0x02
    2bf6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	62 e0       	ldi	r22, 0x02	; 2
    2bfc:	41 e0       	ldi	r20, 0x01	; 1
    2bfe:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
}
    2c02:	6d 96       	adiw	r28, 0x1d	; 29
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <HCLCD_Vid8Bits_DisplayString+0x6>
    2c1a:	0f 92       	push	r0
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	9b 83       	std	Y+3, r25	; 0x03
    2c22:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	0e c0       	rjmp	.+28     	; 0x2c44 <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	fc 01       	movw	r30, r24
    2c34:	e2 0f       	add	r30, r18
    2c36:	f3 1f       	adc	r31, r19
    2c38:	80 81       	ld	r24, Z
    2c3a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e2 0f       	add	r30, r18
    2c52:	f3 1f       	adc	r31, r19
    2c54:	80 81       	ld	r24, Z
    2c56:	88 23       	and	r24, r24
    2c58:	39 f7       	brne	.-50     	; 0x2c28 <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	60 97       	sbiw	r28, 0x10	; 16
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	6d 87       	std	Y+13, r22	; 0x0d
    2c80:	7e 87       	std	Y+14, r23	; 0x0e
    2c82:	8f 87       	std	Y+15, r24	; 0x0f
    2c84:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2c86:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8c:	af 85       	ldd	r26, Y+15	; 0x0f
    2c8e:	b8 89       	ldd	r27, Y+16	; 0x10
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	a1 05       	cpc	r26, r1
    2c94:	b1 05       	cpc	r27, r1
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2c98:	4f c0       	rjmp	.+158    	; 0x2d38 <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2c9a:	2d c0       	rjmp	.+90     	; 0x2cf6 <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	08 2f       	mov	r16, r24
    2ca0:	10 e0       	ldi	r17, 0x00	; 0
    2ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca6:	af 85       	ldd	r26, Y+15	; 0x0f
    2ca8:	b8 89       	ldd	r27, Y+16	; 0x10
    2caa:	2a e0       	ldi	r18, 0x0A	; 10
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__udivmodsi4>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	03 96       	adiw	r24, 0x03	; 3
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	e0 0f       	add	r30, r16
    2cc8:	f1 1f       	adc	r31, r17
    2cca:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd0:	af 85       	ldd	r26, Y+15	; 0x0f
    2cd2:	b8 89       	ldd	r27, Y+16	; 0x10
    2cd4:	2a e0       	ldi	r18, 0x0A	; 10
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__udivmodsi4>
    2ce4:	da 01       	movw	r26, r20
    2ce6:	c9 01       	movw	r24, r18
    2ce8:	8d 87       	std	Y+13, r24	; 0x0d
    2cea:	9e 87       	std	Y+14, r25	; 0x0e
    2cec:	af 87       	std	Y+15, r26	; 0x0f
    2cee:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cfa:	af 85       	ldd	r26, Y+15	; 0x0f
    2cfc:	b8 89       	ldd	r27, Y+16	; 0x10
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	a1 05       	cpc	r26, r1
    2d02:	b1 05       	cpc	r27, r1
    2d04:	59 f6       	brne	.-106    	; 0x2c9c <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	81 50       	subi	r24, 0x01	; 1
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	11 c0       	rjmp	.+34     	; 0x2d30 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	28 2f       	mov	r18, r24
    2d12:	33 27       	eor	r19, r19
    2d14:	27 fd       	sbrc	r18, 7
    2d16:	30 95       	com	r19
    2d18:	ce 01       	movw	r24, r28
    2d1a:	03 96       	adiw	r24, 0x03	; 3
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	e2 0f       	add	r30, r18
    2d20:	f3 1f       	adc	r31, r19
    2d22:	80 81       	ld	r24, Z
    2d24:	80 5d       	subi	r24, 0xD0	; 208
    2d26:	0e 94 f5 14 	call	0x29ea	; 0x29ea <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	81 50       	subi	r24, 0x01	; 1
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	88 23       	and	r24, r24
    2d34:	64 f7       	brge	.-40     	; 0x2d0e <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2d36:	03 c0       	rjmp	.+6      	; 0x2d3e <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2d38:	80 e3       	ldi	r24, 0x30	; 48
    2d3a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2d3e:	60 96       	adiw	r28, 0x10	; 16
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	08 95       	ret

00002d54 <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <HCLCD_Vid8Bits_SetPosition+0x6>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	81 30       	cpi	r24, 0x01	; 1
    2d66:	41 f4       	brne	.+16     	; 0x2d78 <HCLCD_Vid8Bits_SetPosition+0x24>
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	80 31       	cpi	r24, 0x10	; 16
    2d6c:	28 f4       	brcc	.+10     	; 0x2d78 <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	80 58       	subi	r24, 0x80	; 128
    2d72:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    2d76:	0a c0       	rjmp	.+20     	; 0x2d8c <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	82 30       	cpi	r24, 0x02	; 2
    2d7c:	39 f4       	brne	.+14     	; 0x2d8c <HCLCD_Vid8Bits_SetPosition+0x38>
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	80 31       	cpi	r24, 0x10	; 16
    2d82:	20 f4       	brcc	.+8      	; 0x2d8c <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	80 54       	subi	r24, 0x40	; 64
    2d88:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	8a 83       	std	Y+2, r24	; 0x02
    2da4:	7c 83       	std	Y+4, r23	; 0x04
    2da6:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	88 30       	cpi	r24, 0x08	; 8
    2dac:	f8 f4       	brcc	.+62     	; 0x2dec <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	88 2f       	mov	r24, r24
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	08 96       	adiw	r24, 0x08	; 8
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2dc6:	19 82       	std	Y+1, r1	; 0x01
    2dc8:	0e c0       	rjmp	.+28     	; 0x2de6 <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	e2 0f       	add	r30, r18
    2dd8:	f3 1f       	adc	r31, r19
    2dda:	80 81       	ld	r24, Z
    2ddc:	0e 94 f5 14 	call	0x29ea	; 0x29ea <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	8f 5f       	subi	r24, 0xFF	; 255
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	88 30       	cpi	r24, 0x08	; 8
    2dea:	78 f3       	brcs	.-34     	; 0x2dca <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	2e 97       	sbiw	r28, 0x0e	; 14
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	a0 e0       	ldi	r26, 0x00	; 0
    2e1a:	b0 e4       	ldi	r27, 0x40	; 64
    2e1c:	8b 87       	std	Y+11, r24	; 0x0b
    2e1e:	9c 87       	std	Y+12, r25	; 0x0c
    2e20:	ad 87       	std	Y+13, r26	; 0x0d
    2e22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	4a ef       	ldi	r20, 0xFA	; 250
    2e32:	54 e4       	ldi	r21, 0x44	; 68
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	8f 83       	std	Y+7, r24	; 0x07
    2e3e:	98 87       	std	Y+8, r25	; 0x08
    2e40:	a9 87       	std	Y+9, r26	; 0x09
    2e42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e44:	6f 81       	ldd	r22, Y+7	; 0x07
    2e46:	78 85       	ldd	r23, Y+8	; 0x08
    2e48:	89 85       	ldd	r24, Y+9	; 0x09
    2e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e8       	ldi	r20, 0x80	; 128
    2e52:	5f e3       	ldi	r21, 0x3F	; 63
    2e54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e58:	88 23       	and	r24, r24
    2e5a:	2c f4       	brge	.+10     	; 0x2e66 <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
    2e64:	3f c0       	rjmp	.+126    	; 0x2ee4 <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    2e66:	6f 81       	ldd	r22, Y+7	; 0x07
    2e68:	78 85       	ldd	r23, Y+8	; 0x08
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	3f ef       	ldi	r19, 0xFF	; 255
    2e72:	4f e7       	ldi	r20, 0x7F	; 127
    2e74:	57 e4       	ldi	r21, 0x47	; 71
    2e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e7a:	18 16       	cp	r1, r24
    2e7c:	4c f5       	brge	.+82     	; 0x2ed0 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e2       	ldi	r20, 0x20	; 32
    2e8c:	51 e4       	ldi	r21, 0x41	; 65
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
    2ea6:	0f c0       	rjmp	.+30     	; 0x2ec6 <HCLCD_Vid8Bits_ClearScreen+0xcc>
    2ea8:	88 ec       	ldi	r24, 0xC8	; 200
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9c 83       	std	Y+4, r25	; 0x04
    2eae:	8b 83       	std	Y+3, r24	; 0x03
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <HCLCD_Vid8Bits_ClearScreen+0xba>
    2eb8:	9c 83       	std	Y+4, r25	; 0x04
    2eba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	69 f7       	brne	.-38     	; 0x2ea8 <HCLCD_Vid8Bits_ClearScreen+0xae>
    2ece:	14 c0       	rjmp	.+40     	; 0x2ef8 <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed2:	78 85       	ldd	r23, Y+8	; 0x08
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	89 83       	std	Y+1, r24	; 0x01
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    2ef4:	9a 83       	std	Y+2, r25	; 0x02
    2ef6:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2ef8:	2e 96       	adiw	r28, 0x0e	; 14
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	60 97       	sbiw	r28, 0x10	; 16
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2f20:	1f 86       	std	Y+15, r1	; 0x0f
    2f22:	78 c0       	rjmp	.+240    	; 0x3014 <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2f24:	88 e1       	ldi	r24, 0x18	; 24
    2f26:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a6 e9       	ldi	r26, 0x96	; 150
    2f30:	b3 e4       	ldi	r27, 0x43	; 67
    2f32:	8b 87       	std	Y+11, r24	; 0x0b
    2f34:	9c 87       	std	Y+12, r25	; 0x0c
    2f36:	ad 87       	std	Y+13, r26	; 0x0d
    2f38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	4a ef       	ldi	r20, 0xFA	; 250
    2f48:	54 e4       	ldi	r21, 0x44	; 68
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	8f 83       	std	Y+7, r24	; 0x07
    2f54:	98 87       	std	Y+8, r25	; 0x08
    2f56:	a9 87       	std	Y+9, r26	; 0x09
    2f58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5c:	78 85       	ldd	r23, Y+8	; 0x08
    2f5e:	89 85       	ldd	r24, Y+9	; 0x09
    2f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	2c f4       	brge	.+10     	; 0x2f7c <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	9e 83       	std	Y+6, r25	; 0x06
    2f78:	8d 83       	std	Y+5, r24	; 0x05
    2f7a:	3f c0       	rjmp	.+126    	; 0x2ffa <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    2f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7e:	78 85       	ldd	r23, Y+8	; 0x08
    2f80:	89 85       	ldd	r24, Y+9	; 0x09
    2f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	3f ef       	ldi	r19, 0xFF	; 255
    2f88:	4f e7       	ldi	r20, 0x7F	; 127
    2f8a:	57 e4       	ldi	r21, 0x47	; 71
    2f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f90:	18 16       	cp	r1, r24
    2f92:	4c f5       	brge	.+82     	; 0x2fe6 <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e2       	ldi	r20, 0x20	; 32
    2fa2:	51 e4       	ldi	r21, 0x41	; 65
    2fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
    2fbc:	0f c0       	rjmp	.+30     	; 0x2fdc <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    2fbe:	88 ec       	ldi	r24, 0xC8	; 200
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	9c 83       	std	Y+4, r25	; 0x04
    2fc4:	8b 83       	std	Y+3, r24	; 0x03
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    2fce:	9c 83       	std	Y+4, r25	; 0x04
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	9e 83       	std	Y+6, r25	; 0x06
    2fda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fde:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	69 f7       	brne	.-38     	; 0x2fbe <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    2fe4:	14 c0       	rjmp	.+40     	; 0x300e <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe8:	78 85       	ldd	r23, Y+8	; 0x08
    2fea:	89 85       	ldd	r24, Y+9	; 0x09
    2fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	9a 83       	std	Y+2, r25	; 0x02
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	9a 81       	ldd	r25, Y+2	; 0x02
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    300a:	9a 83       	std	Y+2, r25	; 0x02
    300c:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    300e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3010:	8f 5f       	subi	r24, 0xFF	; 255
    3012:	8f 87       	std	Y+15, r24	; 0x0f
    3014:	9f 85       	ldd	r25, Y+15	; 0x0f
    3016:	88 89       	ldd	r24, Y+16	; 0x10
    3018:	98 17       	cp	r25, r24
    301a:	08 f4       	brcc	.+2      	; 0x301e <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    301c:	83 cf       	rjmp	.-250    	; 0x2f24 <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    301e:	60 96       	adiw	r28, 0x10	; 16
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	60 97       	sbiw	r28, 0x10	; 16
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3046:	1f 86       	std	Y+15, r1	; 0x0f
    3048:	78 c0       	rjmp	.+240    	; 0x313a <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    304a:	8c e1       	ldi	r24, 0x1C	; 28
    304c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a6 e9       	ldi	r26, 0x96	; 150
    3056:	b3 e4       	ldi	r27, 0x43	; 67
    3058:	8b 87       	std	Y+11, r24	; 0x0b
    305a:	9c 87       	std	Y+12, r25	; 0x0c
    305c:	ad 87       	std	Y+13, r26	; 0x0d
    305e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3060:	6b 85       	ldd	r22, Y+11	; 0x0b
    3062:	7c 85       	ldd	r23, Y+12	; 0x0c
    3064:	8d 85       	ldd	r24, Y+13	; 0x0d
    3066:	9e 85       	ldd	r25, Y+14	; 0x0e
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	4a ef       	ldi	r20, 0xFA	; 250
    306e:	54 e4       	ldi	r21, 0x44	; 68
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	8f 83       	std	Y+7, r24	; 0x07
    307a:	98 87       	std	Y+8, r25	; 0x08
    307c:	a9 87       	std	Y+9, r26	; 0x09
    307e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3080:	6f 81       	ldd	r22, Y+7	; 0x07
    3082:	78 85       	ldd	r23, Y+8	; 0x08
    3084:	89 85       	ldd	r24, Y+9	; 0x09
    3086:	9a 85       	ldd	r25, Y+10	; 0x0a
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e8       	ldi	r20, 0x80	; 128
    308e:	5f e3       	ldi	r21, 0x3F	; 63
    3090:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3094:	88 23       	and	r24, r24
    3096:	2c f4       	brge	.+10     	; 0x30a2 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	9e 83       	std	Y+6, r25	; 0x06
    309e:	8d 83       	std	Y+5, r24	; 0x05
    30a0:	3f c0       	rjmp	.+126    	; 0x3120 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    30a2:	6f 81       	ldd	r22, Y+7	; 0x07
    30a4:	78 85       	ldd	r23, Y+8	; 0x08
    30a6:	89 85       	ldd	r24, Y+9	; 0x09
    30a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	3f ef       	ldi	r19, 0xFF	; 255
    30ae:	4f e7       	ldi	r20, 0x7F	; 127
    30b0:	57 e4       	ldi	r21, 0x47	; 71
    30b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b6:	18 16       	cp	r1, r24
    30b8:	4c f5       	brge	.+82     	; 0x310c <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    30bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30be:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e2       	ldi	r20, 0x20	; 32
    30c8:	51 e4       	ldi	r21, 0x41	; 65
    30ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	9e 83       	std	Y+6, r25	; 0x06
    30e0:	8d 83       	std	Y+5, r24	; 0x05
    30e2:	0f c0       	rjmp	.+30     	; 0x3102 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    30e4:	88 ec       	ldi	r24, 0xC8	; 200
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	9c 83       	std	Y+4, r25	; 0x04
    30ea:	8b 83       	std	Y+3, r24	; 0x03
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	9c 81       	ldd	r25, Y+4	; 0x04
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	f1 f7       	brne	.-4      	; 0x30f0 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    30f4:	9c 83       	std	Y+4, r25	; 0x04
    30f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f8:	8d 81       	ldd	r24, Y+5	; 0x05
    30fa:	9e 81       	ldd	r25, Y+6	; 0x06
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	9e 83       	std	Y+6, r25	; 0x06
    3100:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3102:	8d 81       	ldd	r24, Y+5	; 0x05
    3104:	9e 81       	ldd	r25, Y+6	; 0x06
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	69 f7       	brne	.-38     	; 0x30e4 <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    310a:	14 c0       	rjmp	.+40     	; 0x3134 <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310c:	6f 81       	ldd	r22, Y+7	; 0x07
    310e:	78 85       	ldd	r23, Y+8	; 0x08
    3110:	89 85       	ldd	r24, Y+9	; 0x09
    3112:	9a 85       	ldd	r25, Y+10	; 0x0a
    3114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	9e 83       	std	Y+6, r25	; 0x06
    311e:	8d 83       	std	Y+5, r24	; 0x05
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	9a 81       	ldd	r25, Y+2	; 0x02
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3134:	8f 85       	ldd	r24, Y+15	; 0x0f
    3136:	8f 5f       	subi	r24, 0xFF	; 255
    3138:	8f 87       	std	Y+15, r24	; 0x0f
    313a:	9f 85       	ldd	r25, Y+15	; 0x0f
    313c:	88 89       	ldd	r24, Y+16	; 0x10
    313e:	98 17       	cp	r25, r24
    3140:	08 f4       	brcc	.+2      	; 0x3144 <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    3142:	83 cf       	rjmp	.-250    	; 0x304a <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3144:	60 96       	adiw	r28, 0x10	; 16
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	cf 91       	pop	r28
    3152:	df 91       	pop	r29
    3154:	08 95       	ret

00003156 <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    3156:	df 93       	push	r29
    3158:	cf 93       	push	r28
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	60 97       	sbiw	r28, 0x10	; 16
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    316c:	1f 86       	std	Y+15, r1	; 0x0f
    316e:	78 c0       	rjmp	.+240    	; 0x3260 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3170:	80 e1       	ldi	r24, 0x10	; 16
    3172:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	a6 e9       	ldi	r26, 0x96	; 150
    317c:	b3 e4       	ldi	r27, 0x43	; 67
    317e:	8b 87       	std	Y+11, r24	; 0x0b
    3180:	9c 87       	std	Y+12, r25	; 0x0c
    3182:	ad 87       	std	Y+13, r26	; 0x0d
    3184:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3186:	6b 85       	ldd	r22, Y+11	; 0x0b
    3188:	7c 85       	ldd	r23, Y+12	; 0x0c
    318a:	8d 85       	ldd	r24, Y+13	; 0x0d
    318c:	9e 85       	ldd	r25, Y+14	; 0x0e
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	4a ef       	ldi	r20, 0xFA	; 250
    3194:	54 e4       	ldi	r21, 0x44	; 68
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	8f 83       	std	Y+7, r24	; 0x07
    31a0:	98 87       	std	Y+8, r25	; 0x08
    31a2:	a9 87       	std	Y+9, r26	; 0x09
    31a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31a6:	6f 81       	ldd	r22, Y+7	; 0x07
    31a8:	78 85       	ldd	r23, Y+8	; 0x08
    31aa:	89 85       	ldd	r24, Y+9	; 0x09
    31ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e8       	ldi	r20, 0x80	; 128
    31b4:	5f e3       	ldi	r21, 0x3F	; 63
    31b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ba:	88 23       	and	r24, r24
    31bc:	2c f4       	brge	.+10     	; 0x31c8 <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	9e 83       	std	Y+6, r25	; 0x06
    31c4:	8d 83       	std	Y+5, r24	; 0x05
    31c6:	3f c0       	rjmp	.+126    	; 0x3246 <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    31c8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ca:	78 85       	ldd	r23, Y+8	; 0x08
    31cc:	89 85       	ldd	r24, Y+9	; 0x09
    31ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	3f ef       	ldi	r19, 0xFF	; 255
    31d4:	4f e7       	ldi	r20, 0x7F	; 127
    31d6:	57 e4       	ldi	r21, 0x47	; 71
    31d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31dc:	18 16       	cp	r1, r24
    31de:	4c f5       	brge	.+82     	; 0x3232 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e2       	ldi	r20, 0x20	; 32
    31ee:	51 e4       	ldi	r21, 0x41	; 65
    31f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	bc 01       	movw	r22, r24
    31fa:	cd 01       	movw	r24, r26
    31fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	9e 83       	std	Y+6, r25	; 0x06
    3206:	8d 83       	std	Y+5, r24	; 0x05
    3208:	0f c0       	rjmp	.+30     	; 0x3228 <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    320a:	88 ec       	ldi	r24, 0xC8	; 200
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9c 83       	std	Y+4, r25	; 0x04
    3210:	8b 83       	std	Y+3, r24	; 0x03
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    321a:	9c 83       	std	Y+4, r25	; 0x04
    321c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	9e 83       	std	Y+6, r25	; 0x06
    3226:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	69 f7       	brne	.-38     	; 0x320a <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    3230:	14 c0       	rjmp	.+40     	; 0x325a <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	9e 83       	std	Y+6, r25	; 0x06
    3244:	8d 83       	std	Y+5, r24	; 0x05
    3246:	8d 81       	ldd	r24, Y+5	; 0x05
    3248:	9e 81       	ldd	r25, Y+6	; 0x06
    324a:	9a 83       	std	Y+2, r25	; 0x02
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	9a 81       	ldd	r25, Y+2	; 0x02
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    325a:	8f 85       	ldd	r24, Y+15	; 0x0f
    325c:	8f 5f       	subi	r24, 0xFF	; 255
    325e:	8f 87       	std	Y+15, r24	; 0x0f
    3260:	9f 85       	ldd	r25, Y+15	; 0x0f
    3262:	88 89       	ldd	r24, Y+16	; 0x10
    3264:	98 17       	cp	r25, r24
    3266:	08 f4       	brcc	.+2      	; 0x326a <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    3268:	83 cf       	rjmp	.-250    	; 0x3170 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    326a:	60 96       	adiw	r28, 0x10	; 16
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	60 97       	sbiw	r28, 0x10	; 16
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	f8 94       	cli
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	cd bf       	out	0x3d, r28	; 61
    3290:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3292:	1f 86       	std	Y+15, r1	; 0x0f
    3294:	78 c0       	rjmp	.+240    	; 0x3386 <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    3296:	84 e1       	ldi	r24, 0x14	; 20
    3298:	0e 94 e6 11 	call	0x23cc	; 0x23cc <HCLCD_Vid8Bits_SendCommand>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	a6 e9       	ldi	r26, 0x96	; 150
    32a2:	b3 e4       	ldi	r27, 0x43	; 67
    32a4:	8b 87       	std	Y+11, r24	; 0x0b
    32a6:	9c 87       	std	Y+12, r25	; 0x0c
    32a8:	ad 87       	std	Y+13, r26	; 0x0d
    32aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	4a ef       	ldi	r20, 0xFA	; 250
    32ba:	54 e4       	ldi	r21, 0x44	; 68
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8f 83       	std	Y+7, r24	; 0x07
    32c6:	98 87       	std	Y+8, r25	; 0x08
    32c8:	a9 87       	std	Y+9, r26	; 0x09
    32ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32cc:	6f 81       	ldd	r22, Y+7	; 0x07
    32ce:	78 85       	ldd	r23, Y+8	; 0x08
    32d0:	89 85       	ldd	r24, Y+9	; 0x09
    32d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e8       	ldi	r20, 0x80	; 128
    32da:	5f e3       	ldi	r21, 0x3F	; 63
    32dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e0:	88 23       	and	r24, r24
    32e2:	2c f4       	brge	.+10     	; 0x32ee <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	3f c0       	rjmp	.+126    	; 0x336c <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    32ee:	6f 81       	ldd	r22, Y+7	; 0x07
    32f0:	78 85       	ldd	r23, Y+8	; 0x08
    32f2:	89 85       	ldd	r24, Y+9	; 0x09
    32f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	3f ef       	ldi	r19, 0xFF	; 255
    32fa:	4f e7       	ldi	r20, 0x7F	; 127
    32fc:	57 e4       	ldi	r21, 0x47	; 71
    32fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	4c f5       	brge	.+82     	; 0x3358 <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3306:	6b 85       	ldd	r22, Y+11	; 0x0b
    3308:	7c 85       	ldd	r23, Y+12	; 0x0c
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	9e 85       	ldd	r25, Y+14	; 0x0e
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e2       	ldi	r20, 0x20	; 32
    3314:	51 e4       	ldi	r21, 0x41	; 65
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	0f c0       	rjmp	.+30     	; 0x334e <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    3330:	88 ec       	ldi	r24, 0xC8	; 200
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	9c 83       	std	Y+4, r25	; 0x04
    3336:	8b 83       	std	Y+3, r24	; 0x03
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	9c 81       	ldd	r25, Y+4	; 0x04
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    3340:	9c 83       	std	Y+4, r25	; 0x04
    3342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	9e 81       	ldd	r25, Y+6	; 0x06
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	9e 83       	std	Y+6, r25	; 0x06
    334c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	9e 81       	ldd	r25, Y+6	; 0x06
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	69 f7       	brne	.-38     	; 0x3330 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    3356:	14 c0       	rjmp	.+40     	; 0x3380 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3358:	6f 81       	ldd	r22, Y+7	; 0x07
    335a:	78 85       	ldd	r23, Y+8	; 0x08
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9e 83       	std	Y+6, r25	; 0x06
    336a:	8d 83       	std	Y+5, r24	; 0x05
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	9a 81       	ldd	r25, Y+2	; 0x02
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3380:	8f 85       	ldd	r24, Y+15	; 0x0f
    3382:	8f 5f       	subi	r24, 0xFF	; 255
    3384:	8f 87       	std	Y+15, r24	; 0x0f
    3386:	9f 85       	ldd	r25, Y+15	; 0x0f
    3388:	88 89       	ldd	r24, Y+16	; 0x10
    338a:	98 17       	cp	r25, r24
    338c:	08 f4       	brcc	.+2      	; 0x3390 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    338e:	83 cf       	rjmp	.-250    	; 0x3296 <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3390:	60 96       	adiw	r28, 0x10	; 16
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	2f 97       	sbiw	r28, 0x0f	; 15
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	62 e0       	ldi	r22, 0x02	; 2
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	62 e0       	ldi	r22, 0x02	; 2
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    33cc:	84 e0       	ldi	r24, 0x04	; 4
    33ce:	62 e0       	ldi	r22, 0x02	; 2
    33d0:	4f 85       	ldd	r20, Y+15	; 0x0f
    33d2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    33d6:	82 e0       	ldi	r24, 0x02	; 2
    33d8:	62 e0       	ldi	r22, 0x02	; 2
    33da:	41 e0       	ldi	r20, 0x01	; 1
    33dc:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a0 e0       	ldi	r26, 0x00	; 0
    33e6:	b0 e4       	ldi	r27, 0x40	; 64
    33e8:	8b 87       	std	Y+11, r24	; 0x0b
    33ea:	9c 87       	std	Y+12, r25	; 0x0c
    33ec:	ad 87       	std	Y+13, r26	; 0x0d
    33ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	4a ef       	ldi	r20, 0xFA	; 250
    33fe:	54 e4       	ldi	r21, 0x44	; 68
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	8f 83       	std	Y+7, r24	; 0x07
    340a:	98 87       	std	Y+8, r25	; 0x08
    340c:	a9 87       	std	Y+9, r26	; 0x09
    340e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3410:	6f 81       	ldd	r22, Y+7	; 0x07
    3412:	78 85       	ldd	r23, Y+8	; 0x08
    3414:	89 85       	ldd	r24, Y+9	; 0x09
    3416:	9a 85       	ldd	r25, Y+10	; 0x0a
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e8       	ldi	r20, 0x80	; 128
    341e:	5f e3       	ldi	r21, 0x3F	; 63
    3420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3424:	88 23       	and	r24, r24
    3426:	2c f4       	brge	.+10     	; 0x3432 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	9e 83       	std	Y+6, r25	; 0x06
    342e:	8d 83       	std	Y+5, r24	; 0x05
    3430:	3f c0       	rjmp	.+126    	; 0x34b0 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    3432:	6f 81       	ldd	r22, Y+7	; 0x07
    3434:	78 85       	ldd	r23, Y+8	; 0x08
    3436:	89 85       	ldd	r24, Y+9	; 0x09
    3438:	9a 85       	ldd	r25, Y+10	; 0x0a
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	3f ef       	ldi	r19, 0xFF	; 255
    343e:	4f e7       	ldi	r20, 0x7F	; 127
    3440:	57 e4       	ldi	r21, 0x47	; 71
    3442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3446:	18 16       	cp	r1, r24
    3448:	4c f5       	brge	.+82     	; 0x349c <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344a:	6b 85       	ldd	r22, Y+11	; 0x0b
    344c:	7c 85       	ldd	r23, Y+12	; 0x0c
    344e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3450:	9e 85       	ldd	r25, Y+14	; 0x0e
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e2       	ldi	r20, 0x20	; 32
    3458:	51 e4       	ldi	r21, 0x41	; 65
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    3472:	0f c0       	rjmp	.+30     	; 0x3492 <HCLCD_Vid4Bits_SendCommand+0xf0>
    3474:	88 ec       	ldi	r24, 0xC8	; 200
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	9c 83       	std	Y+4, r25	; 0x04
    347a:	8b 83       	std	Y+3, r24	; 0x03
    347c:	8b 81       	ldd	r24, Y+3	; 0x03
    347e:	9c 81       	ldd	r25, Y+4	; 0x04
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <HCLCD_Vid4Bits_SendCommand+0xde>
    3484:	9c 83       	std	Y+4, r25	; 0x04
    3486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	69 f7       	brne	.-38     	; 0x3474 <HCLCD_Vid4Bits_SendCommand+0xd2>
    349a:	14 c0       	rjmp	.+40     	; 0x34c4 <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349c:	6f 81       	ldd	r22, Y+7	; 0x07
    349e:	78 85       	ldd	r23, Y+8	; 0x08
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	9e 83       	std	Y+6, r25	; 0x06
    34ae:	8d 83       	std	Y+5, r24	; 0x05
    34b0:	8d 81       	ldd	r24, Y+5	; 0x05
    34b2:	9e 81       	ldd	r25, Y+6	; 0x06
    34b4:	9a 83       	std	Y+2, r25	; 0x02
    34b6:	89 83       	std	Y+1, r24	; 0x01
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	9a 81       	ldd	r25, Y+2	; 0x02
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	f1 f7       	brne	.-4      	; 0x34bc <HCLCD_Vid4Bits_SendCommand+0x11a>
    34c0:	9a 83       	std	Y+2, r25	; 0x02
    34c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	62 e0       	ldi	r22, 0x02	; 2
    34c8:	40 e0       	ldi	r20, 0x00	; 0
    34ca:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
}
    34ce:	2f 96       	adiw	r28, 0x0f	; 15
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	e9 97       	sbiw	r28, 0x39	; 57
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    34f4:	87 e0       	ldi	r24, 0x07	; 7
    34f6:	89 af       	std	Y+57, r24	; 0x39
    34f8:	08 c0       	rjmp	.+16     	; 0x350a <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    34fa:	89 ad       	ldd	r24, Y+57	; 0x39
    34fc:	62 e0       	ldi	r22, 0x02	; 2
    34fe:	41 e0       	ldi	r20, 0x01	; 1
    3500:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3504:	89 ad       	ldd	r24, Y+57	; 0x39
    3506:	81 50       	subi	r24, 0x01	; 1
    3508:	89 af       	std	Y+57, r24	; 0x39
    350a:	89 ad       	ldd	r24, Y+57	; 0x39
    350c:	84 30       	cpi	r24, 0x04	; 4
    350e:	ac f7       	brge	.-22     	; 0x34fa <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	62 e0       	ldi	r22, 0x02	; 2
    3514:	41 e0       	ldi	r20, 0x01	; 1
    3516:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	62 e0       	ldi	r22, 0x02	; 2
    351e:	41 e0       	ldi	r20, 0x01	; 1
    3520:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	62 e0       	ldi	r22, 0x02	; 2
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	a0 ef       	ldi	r26, 0xF0	; 240
    3534:	b1 e4       	ldi	r27, 0x41	; 65
    3536:	8d ab       	std	Y+53, r24	; 0x35
    3538:	9e ab       	std	Y+54, r25	; 0x36
    353a:	af ab       	std	Y+55, r26	; 0x37
    353c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	6d a9       	ldd	r22, Y+53	; 0x35
    3540:	7e a9       	ldd	r23, Y+54	; 0x36
    3542:	8f a9       	ldd	r24, Y+55	; 0x37
    3544:	98 ad       	ldd	r25, Y+56	; 0x38
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a ef       	ldi	r20, 0xFA	; 250
    354c:	54 e4       	ldi	r21, 0x44	; 68
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	89 ab       	std	Y+49, r24	; 0x31
    3558:	9a ab       	std	Y+50, r25	; 0x32
    355a:	ab ab       	std	Y+51, r26	; 0x33
    355c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    355e:	69 a9       	ldd	r22, Y+49	; 0x31
    3560:	7a a9       	ldd	r23, Y+50	; 0x32
    3562:	8b a9       	ldd	r24, Y+51	; 0x33
    3564:	9c a9       	ldd	r25, Y+52	; 0x34
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	2c f4       	brge	.+10     	; 0x3580 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	98 ab       	std	Y+48, r25	; 0x30
    357c:	8f a7       	std	Y+47, r24	; 0x2f
    357e:	3f c0       	rjmp	.+126    	; 0x35fe <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    3580:	69 a9       	ldd	r22, Y+49	; 0x31
    3582:	7a a9       	ldd	r23, Y+50	; 0x32
    3584:	8b a9       	ldd	r24, Y+51	; 0x33
    3586:	9c a9       	ldd	r25, Y+52	; 0x34
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	4f e7       	ldi	r20, 0x7F	; 127
    358e:	57 e4       	ldi	r21, 0x47	; 71
    3590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3594:	18 16       	cp	r1, r24
    3596:	4c f5       	brge	.+82     	; 0x35ea <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	6d a9       	ldd	r22, Y+53	; 0x35
    359a:	7e a9       	ldd	r23, Y+54	; 0x36
    359c:	8f a9       	ldd	r24, Y+55	; 0x37
    359e:	98 ad       	ldd	r25, Y+56	; 0x38
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	98 ab       	std	Y+48, r25	; 0x30
    35be:	8f a7       	std	Y+47, r24	; 0x2f
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <HCLCD_Vid4Bits_Init+0x100>
    35c2:	88 ec       	ldi	r24, 0xC8	; 200
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9e a7       	std	Y+46, r25	; 0x2e
    35c8:	8d a7       	std	Y+45, r24	; 0x2d
    35ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    35cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <HCLCD_Vid4Bits_Init+0xee>
    35d2:	9e a7       	std	Y+46, r25	; 0x2e
    35d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    35d8:	98 a9       	ldd	r25, Y+48	; 0x30
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	98 ab       	std	Y+48, r25	; 0x30
    35de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    35e2:	98 a9       	ldd	r25, Y+48	; 0x30
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <HCLCD_Vid4Bits_Init+0xe2>
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	69 a9       	ldd	r22, Y+49	; 0x31
    35ec:	7a a9       	ldd	r23, Y+50	; 0x32
    35ee:	8b a9       	ldd	r24, Y+51	; 0x33
    35f0:	9c a9       	ldd	r25, Y+52	; 0x34
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	98 ab       	std	Y+48, r25	; 0x30
    35fc:	8f a7       	std	Y+47, r24	; 0x2f
    35fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3600:	98 a9       	ldd	r25, Y+48	; 0x30
    3602:	9c a7       	std	Y+44, r25	; 0x2c
    3604:	8b a7       	std	Y+43, r24	; 0x2b
    3606:	8b a5       	ldd	r24, Y+43	; 0x2b
    3608:	9c a5       	ldd	r25, Y+44	; 0x2c
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <HCLCD_Vid4Bits_Init+0x12a>
    360e:	9c a7       	std	Y+44, r25	; 0x2c
    3610:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3612:	82 e0       	ldi	r24, 0x02	; 2
    3614:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    361e:	88 e2       	ldi	r24, 0x28	; 40
    3620:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	a0 e8       	ldi	r26, 0x80	; 128
    362a:	bf e3       	ldi	r27, 0x3F	; 63
    362c:	8f a3       	std	Y+39, r24	; 0x27
    362e:	98 a7       	std	Y+40, r25	; 0x28
    3630:	a9 a7       	std	Y+41, r26	; 0x29
    3632:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3634:	6f a1       	ldd	r22, Y+39	; 0x27
    3636:	78 a5       	ldd	r23, Y+40	; 0x28
    3638:	89 a5       	ldd	r24, Y+41	; 0x29
    363a:	9a a5       	ldd	r25, Y+42	; 0x2a
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	4a ef       	ldi	r20, 0xFA	; 250
    3642:	54 e4       	ldi	r21, 0x44	; 68
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	8b a3       	std	Y+35, r24	; 0x23
    364e:	9c a3       	std	Y+36, r25	; 0x24
    3650:	ad a3       	std	Y+37, r26	; 0x25
    3652:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3654:	6b a1       	ldd	r22, Y+35	; 0x23
    3656:	7c a1       	ldd	r23, Y+36	; 0x24
    3658:	8d a1       	ldd	r24, Y+37	; 0x25
    365a:	9e a1       	ldd	r25, Y+38	; 0x26
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e8       	ldi	r20, 0x80	; 128
    3662:	5f e3       	ldi	r21, 0x3F	; 63
    3664:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3668:	88 23       	and	r24, r24
    366a:	2c f4       	brge	.+10     	; 0x3676 <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	9a a3       	std	Y+34, r25	; 0x22
    3672:	89 a3       	std	Y+33, r24	; 0x21
    3674:	3f c0       	rjmp	.+126    	; 0x36f4 <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    3676:	6b a1       	ldd	r22, Y+35	; 0x23
    3678:	7c a1       	ldd	r23, Y+36	; 0x24
    367a:	8d a1       	ldd	r24, Y+37	; 0x25
    367c:	9e a1       	ldd	r25, Y+38	; 0x26
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	3f ef       	ldi	r19, 0xFF	; 255
    3682:	4f e7       	ldi	r20, 0x7F	; 127
    3684:	57 e4       	ldi	r21, 0x47	; 71
    3686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    368a:	18 16       	cp	r1, r24
    368c:	4c f5       	brge	.+82     	; 0x36e0 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368e:	6f a1       	ldd	r22, Y+39	; 0x27
    3690:	78 a5       	ldd	r23, Y+40	; 0x28
    3692:	89 a5       	ldd	r24, Y+41	; 0x29
    3694:	9a a5       	ldd	r25, Y+42	; 0x2a
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e2       	ldi	r20, 0x20	; 32
    369c:	51 e4       	ldi	r21, 0x41	; 65
    369e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	bc 01       	movw	r22, r24
    36a8:	cd 01       	movw	r24, r26
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9a a3       	std	Y+34, r25	; 0x22
    36b4:	89 a3       	std	Y+33, r24	; 0x21
    36b6:	0f c0       	rjmp	.+30     	; 0x36d6 <HCLCD_Vid4Bits_Init+0x1f6>
    36b8:	88 ec       	ldi	r24, 0xC8	; 200
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	98 a3       	std	Y+32, r25	; 0x20
    36be:	8f 8f       	std	Y+31, r24	; 0x1f
    36c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36c2:	98 a1       	ldd	r25, Y+32	; 0x20
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <HCLCD_Vid4Bits_Init+0x1e4>
    36c8:	98 a3       	std	Y+32, r25	; 0x20
    36ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36cc:	89 a1       	ldd	r24, Y+33	; 0x21
    36ce:	9a a1       	ldd	r25, Y+34	; 0x22
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	9a a3       	std	Y+34, r25	; 0x22
    36d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d6:	89 a1       	ldd	r24, Y+33	; 0x21
    36d8:	9a a1       	ldd	r25, Y+34	; 0x22
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	69 f7       	brne	.-38     	; 0x36b8 <HCLCD_Vid4Bits_Init+0x1d8>
    36de:	14 c0       	rjmp	.+40     	; 0x3708 <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e0:	6b a1       	ldd	r22, Y+35	; 0x23
    36e2:	7c a1       	ldd	r23, Y+36	; 0x24
    36e4:	8d a1       	ldd	r24, Y+37	; 0x25
    36e6:	9e a1       	ldd	r25, Y+38	; 0x26
    36e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	9a a3       	std	Y+34, r25	; 0x22
    36f2:	89 a3       	std	Y+33, r24	; 0x21
    36f4:	89 a1       	ldd	r24, Y+33	; 0x21
    36f6:	9a a1       	ldd	r25, Y+34	; 0x22
    36f8:	9e 8f       	std	Y+30, r25	; 0x1e
    36fa:	8d 8f       	std	Y+29, r24	; 0x1d
    36fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	f1 f7       	brne	.-4      	; 0x3700 <HCLCD_Vid4Bits_Init+0x220>
    3704:	9e 8f       	std	Y+30, r25	; 0x1e
    3706:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    370e:	8f e0       	ldi	r24, 0x0F	; 15
    3710:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	a0 e8       	ldi	r26, 0x80	; 128
    371a:	bf e3       	ldi	r27, 0x3F	; 63
    371c:	89 8f       	std	Y+25, r24	; 0x19
    371e:	9a 8f       	std	Y+26, r25	; 0x1a
    3720:	ab 8f       	std	Y+27, r26	; 0x1b
    3722:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3724:	69 8d       	ldd	r22, Y+25	; 0x19
    3726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    372a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	4a ef       	ldi	r20, 0xFA	; 250
    3732:	54 e4       	ldi	r21, 0x44	; 68
    3734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	8d 8b       	std	Y+21, r24	; 0x15
    373e:	9e 8b       	std	Y+22, r25	; 0x16
    3740:	af 8b       	std	Y+23, r26	; 0x17
    3742:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3744:	6d 89       	ldd	r22, Y+21	; 0x15
    3746:	7e 89       	ldd	r23, Y+22	; 0x16
    3748:	8f 89       	ldd	r24, Y+23	; 0x17
    374a:	98 8d       	ldd	r25, Y+24	; 0x18
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e8       	ldi	r20, 0x80	; 128
    3752:	5f e3       	ldi	r21, 0x3F	; 63
    3754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3758:	88 23       	and	r24, r24
    375a:	2c f4       	brge	.+10     	; 0x3766 <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9c 8b       	std	Y+20, r25	; 0x14
    3762:	8b 8b       	std	Y+19, r24	; 0x13
    3764:	3f c0       	rjmp	.+126    	; 0x37e4 <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    3766:	6d 89       	ldd	r22, Y+21	; 0x15
    3768:	7e 89       	ldd	r23, Y+22	; 0x16
    376a:	8f 89       	ldd	r24, Y+23	; 0x17
    376c:	98 8d       	ldd	r25, Y+24	; 0x18
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	3f ef       	ldi	r19, 0xFF	; 255
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	57 e4       	ldi	r21, 0x47	; 71
    3776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    377a:	18 16       	cp	r1, r24
    377c:	4c f5       	brge	.+82     	; 0x37d0 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377e:	69 8d       	ldd	r22, Y+25	; 0x19
    3780:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e2       	ldi	r20, 0x20	; 32
    378c:	51 e4       	ldi	r21, 0x41	; 65
    378e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	9c 8b       	std	Y+20, r25	; 0x14
    37a4:	8b 8b       	std	Y+19, r24	; 0x13
    37a6:	0f c0       	rjmp	.+30     	; 0x37c6 <HCLCD_Vid4Bits_Init+0x2e6>
    37a8:	88 ec       	ldi	r24, 0xC8	; 200
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	9a 8b       	std	Y+18, r25	; 0x12
    37ae:	89 8b       	std	Y+17, r24	; 0x11
    37b0:	89 89       	ldd	r24, Y+17	; 0x11
    37b2:	9a 89       	ldd	r25, Y+18	; 0x12
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <HCLCD_Vid4Bits_Init+0x2d4>
    37b8:	9a 8b       	std	Y+18, r25	; 0x12
    37ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37bc:	8b 89       	ldd	r24, Y+19	; 0x13
    37be:	9c 89       	ldd	r25, Y+20	; 0x14
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	9c 8b       	std	Y+20, r25	; 0x14
    37c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c6:	8b 89       	ldd	r24, Y+19	; 0x13
    37c8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	69 f7       	brne	.-38     	; 0x37a8 <HCLCD_Vid4Bits_Init+0x2c8>
    37ce:	14 c0       	rjmp	.+40     	; 0x37f8 <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d0:	6d 89       	ldd	r22, Y+21	; 0x15
    37d2:	7e 89       	ldd	r23, Y+22	; 0x16
    37d4:	8f 89       	ldd	r24, Y+23	; 0x17
    37d6:	98 8d       	ldd	r25, Y+24	; 0x18
    37d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	9c 8b       	std	Y+20, r25	; 0x14
    37e2:	8b 8b       	std	Y+19, r24	; 0x13
    37e4:	8b 89       	ldd	r24, Y+19	; 0x13
    37e6:	9c 89       	ldd	r25, Y+20	; 0x14
    37e8:	98 8b       	std	Y+16, r25	; 0x10
    37ea:	8f 87       	std	Y+15, r24	; 0x0f
    37ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ee:	98 89       	ldd	r25, Y+16	; 0x10
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <HCLCD_Vid4Bits_Init+0x310>
    37f4:	98 8b       	std	Y+16, r25	; 0x10
    37f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	a0 e0       	ldi	r26, 0x00	; 0
    380a:	b0 e4       	ldi	r27, 0x40	; 64
    380c:	8b 87       	std	Y+11, r24	; 0x0b
    380e:	9c 87       	std	Y+12, r25	; 0x0c
    3810:	ad 87       	std	Y+13, r26	; 0x0d
    3812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3814:	6b 85       	ldd	r22, Y+11	; 0x0b
    3816:	7c 85       	ldd	r23, Y+12	; 0x0c
    3818:	8d 85       	ldd	r24, Y+13	; 0x0d
    381a:	9e 85       	ldd	r25, Y+14	; 0x0e
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	4a ef       	ldi	r20, 0xFA	; 250
    3822:	54 e4       	ldi	r21, 0x44	; 68
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	8f 83       	std	Y+7, r24	; 0x07
    382e:	98 87       	std	Y+8, r25	; 0x08
    3830:	a9 87       	std	Y+9, r26	; 0x09
    3832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3834:	6f 81       	ldd	r22, Y+7	; 0x07
    3836:	78 85       	ldd	r23, Y+8	; 0x08
    3838:	89 85       	ldd	r24, Y+9	; 0x09
    383a:	9a 85       	ldd	r25, Y+10	; 0x0a
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e8       	ldi	r20, 0x80	; 128
    3842:	5f e3       	ldi	r21, 0x3F	; 63
    3844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3848:	88 23       	and	r24, r24
    384a:	2c f4       	brge	.+10     	; 0x3856 <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	9e 83       	std	Y+6, r25	; 0x06
    3852:	8d 83       	std	Y+5, r24	; 0x05
    3854:	3f c0       	rjmp	.+126    	; 0x38d4 <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    3856:	6f 81       	ldd	r22, Y+7	; 0x07
    3858:	78 85       	ldd	r23, Y+8	; 0x08
    385a:	89 85       	ldd	r24, Y+9	; 0x09
    385c:	9a 85       	ldd	r25, Y+10	; 0x0a
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	3f ef       	ldi	r19, 0xFF	; 255
    3862:	4f e7       	ldi	r20, 0x7F	; 127
    3864:	57 e4       	ldi	r21, 0x47	; 71
    3866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    386a:	18 16       	cp	r1, r24
    386c:	4c f5       	brge	.+82     	; 0x38c0 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3870:	7c 85       	ldd	r23, Y+12	; 0x0c
    3872:	8d 85       	ldd	r24, Y+13	; 0x0d
    3874:	9e 85       	ldd	r25, Y+14	; 0x0e
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e2       	ldi	r20, 0x20	; 32
    387c:	51 e4       	ldi	r21, 0x41	; 65
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <HCLCD_Vid4Bits_Init+0x3d6>
    3898:	88 ec       	ldi	r24, 0xC8	; 200
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	9c 83       	std	Y+4, r25	; 0x04
    389e:	8b 83       	std	Y+3, r24	; 0x03
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	9c 81       	ldd	r25, Y+4	; 0x04
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <HCLCD_Vid4Bits_Init+0x3c4>
    38a8:	9c 83       	std	Y+4, r25	; 0x04
    38aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	9e 81       	ldd	r25, Y+6	; 0x06
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	9e 83       	std	Y+6, r25	; 0x06
    38b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	69 f7       	brne	.-38     	; 0x3898 <HCLCD_Vid4Bits_Init+0x3b8>
    38be:	14 c0       	rjmp	.+40     	; 0x38e8 <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	6f 81       	ldd	r22, Y+7	; 0x07
    38c2:	78 85       	ldd	r23, Y+8	; 0x08
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	9e 83       	std	Y+6, r25	; 0x06
    38d2:	8d 83       	std	Y+5, r24	; 0x05
    38d4:	8d 81       	ldd	r24, Y+5	; 0x05
    38d6:	9e 81       	ldd	r25, Y+6	; 0x06
    38d8:	9a 83       	std	Y+2, r25	; 0x02
    38da:	89 83       	std	Y+1, r24	; 0x01
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	9a 81       	ldd	r25, Y+2	; 0x02
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <HCLCD_Vid4Bits_Init+0x400>
    38e4:	9a 83       	std	Y+2, r25	; 0x02
    38e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    38ee:	86 e0       	ldi	r24, 0x06	; 6
    38f0:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
}
    38f4:	e9 96       	adiw	r28, 0x39	; 57
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	f8 94       	cli
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	0f be       	out	0x3f, r0	; 63
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	08 95       	ret

00003906 <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
    390e:	2f 97       	sbiw	r28, 0x0f	; 15
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	62 e0       	ldi	r22, 0x02	; 2
    3920:	41 e0       	ldi	r20, 0x01	; 1
    3922:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	62 e0       	ldi	r22, 0x02	; 2
    392a:	40 e0       	ldi	r20, 0x00	; 0
    392c:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    3930:	84 e0       	ldi	r24, 0x04	; 4
    3932:	62 e0       	ldi	r22, 0x02	; 2
    3934:	4f 85       	ldd	r20, Y+15	; 0x0f
    3936:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    393a:	82 e0       	ldi	r24, 0x02	; 2
    393c:	62 e0       	ldi	r22, 0x02	; 2
    393e:	41 e0       	ldi	r20, 0x01	; 1
    3940:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	a0 e0       	ldi	r26, 0x00	; 0
    394a:	b0 e4       	ldi	r27, 0x40	; 64
    394c:	8b 87       	std	Y+11, r24	; 0x0b
    394e:	9c 87       	std	Y+12, r25	; 0x0c
    3950:	ad 87       	std	Y+13, r26	; 0x0d
    3952:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3954:	6b 85       	ldd	r22, Y+11	; 0x0b
    3956:	7c 85       	ldd	r23, Y+12	; 0x0c
    3958:	8d 85       	ldd	r24, Y+13	; 0x0d
    395a:	9e 85       	ldd	r25, Y+14	; 0x0e
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	4a ef       	ldi	r20, 0xFA	; 250
    3962:	54 e4       	ldi	r21, 0x44	; 68
    3964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	8f 83       	std	Y+7, r24	; 0x07
    396e:	98 87       	std	Y+8, r25	; 0x08
    3970:	a9 87       	std	Y+9, r26	; 0x09
    3972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3974:	6f 81       	ldd	r22, Y+7	; 0x07
    3976:	78 85       	ldd	r23, Y+8	; 0x08
    3978:	89 85       	ldd	r24, Y+9	; 0x09
    397a:	9a 85       	ldd	r25, Y+10	; 0x0a
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e8       	ldi	r20, 0x80	; 128
    3982:	5f e3       	ldi	r21, 0x3F	; 63
    3984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3988:	88 23       	and	r24, r24
    398a:	2c f4       	brge	.+10     	; 0x3996 <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9e 83       	std	Y+6, r25	; 0x06
    3992:	8d 83       	std	Y+5, r24	; 0x05
    3994:	3f c0       	rjmp	.+126    	; 0x3a14 <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    3996:	6f 81       	ldd	r22, Y+7	; 0x07
    3998:	78 85       	ldd	r23, Y+8	; 0x08
    399a:	89 85       	ldd	r24, Y+9	; 0x09
    399c:	9a 85       	ldd	r25, Y+10	; 0x0a
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	3f ef       	ldi	r19, 0xFF	; 255
    39a2:	4f e7       	ldi	r20, 0x7F	; 127
    39a4:	57 e4       	ldi	r21, 0x47	; 71
    39a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39aa:	18 16       	cp	r1, r24
    39ac:	4c f5       	brge	.+82     	; 0x3a00 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e2       	ldi	r20, 0x20	; 32
    39bc:	51 e4       	ldi	r21, 0x41	; 65
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	9e 83       	std	Y+6, r25	; 0x06
    39d4:	8d 83       	std	Y+5, r24	; 0x05
    39d6:	0f c0       	rjmp	.+30     	; 0x39f6 <HCLCD_VidWriteChar_4Bits+0xf0>
    39d8:	88 ec       	ldi	r24, 0xC8	; 200
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9c 83       	std	Y+4, r25	; 0x04
    39de:	8b 83       	std	Y+3, r24	; 0x03
    39e0:	8b 81       	ldd	r24, Y+3	; 0x03
    39e2:	9c 81       	ldd	r25, Y+4	; 0x04
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <HCLCD_VidWriteChar_4Bits+0xde>
    39e8:	9c 83       	std	Y+4, r25	; 0x04
    39ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ec:	8d 81       	ldd	r24, Y+5	; 0x05
    39ee:	9e 81       	ldd	r25, Y+6	; 0x06
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	9e 83       	std	Y+6, r25	; 0x06
    39f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	9e 81       	ldd	r25, Y+6	; 0x06
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	69 f7       	brne	.-38     	; 0x39d8 <HCLCD_VidWriteChar_4Bits+0xd2>
    39fe:	14 c0       	rjmp	.+40     	; 0x3a28 <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a00:	6f 81       	ldd	r22, Y+7	; 0x07
    3a02:	78 85       	ldd	r23, Y+8	; 0x08
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	8d 81       	ldd	r24, Y+5	; 0x05
    3a16:	9e 81       	ldd	r25, Y+6	; 0x06
    3a18:	9a 83       	std	Y+2, r25	; 0x02
    3a1a:	89 83       	std	Y+1, r24	; 0x01
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	f1 f7       	brne	.-4      	; 0x3a20 <HCLCD_VidWriteChar_4Bits+0x11a>
    3a24:	9a 83       	std	Y+2, r25	; 0x02
    3a26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3a28:	82 e0       	ldi	r24, 0x02	; 2
    3a2a:	62 e0       	ldi	r22, 0x02	; 2
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	0e 94 48 0b 	call	0x1690	; 0x1690 <MDIO_Error_State_SetPinValue>
}
    3a32:	2f 96       	adiw	r28, 0x0f	; 15
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	08 95       	ret

00003a44 <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	0f 92       	push	r0
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
    3a4e:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	82 95       	swap	r24
    3a54:	8f 70       	andi	r24, 0x0F	; 15
    3a56:	0e 94 83 1c 	call	0x3906	; 0x3906 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	0e 94 83 1c 	call	0x3906	; 0x3906 <HCLCD_VidWriteChar_4Bits>
}
    3a60:	0f 90       	pop	r0
    3a62:	cf 91       	pop	r28
    3a64:	df 91       	pop	r29
    3a66:	08 95       	ret

00003a68 <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	00 d0       	rcall	.+0      	; 0x3a6e <HCLCD_Vid4Bits_DisplayString+0x6>
    3a6e:	0f 92       	push	r0
    3a70:	cd b7       	in	r28, 0x3d	; 61
    3a72:	de b7       	in	r29, 0x3e	; 62
    3a74:	9b 83       	std	Y+3, r25	; 0x03
    3a76:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3a78:	19 82       	std	Y+1, r1	; 0x01
    3a7a:	0e c0       	rjmp	.+28     	; 0x3a98 <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3a7c:	89 81       	ldd	r24, Y+1	; 0x01
    3a7e:	28 2f       	mov	r18, r24
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	8a 81       	ldd	r24, Y+2	; 0x02
    3a84:	9b 81       	ldd	r25, Y+3	; 0x03
    3a86:	fc 01       	movw	r30, r24
    3a88:	e2 0f       	add	r30, r18
    3a8a:	f3 1f       	adc	r31, r19
    3a8c:	80 81       	ld	r24, Z
    3a8e:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	8f 5f       	subi	r24, 0xFF	; 255
    3a96:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	e2 0f       	add	r30, r18
    3aa6:	f3 1f       	adc	r31, r19
    3aa8:	80 81       	ld	r24, Z
    3aaa:	88 23       	and	r24, r24
    3aac:	39 f7       	brne	.-50     	; 0x3a7c <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	cf 91       	pop	r28
    3ab6:	df 91       	pop	r29
    3ab8:	08 95       	ret

00003aba <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3aba:	0f 93       	push	r16
    3abc:	1f 93       	push	r17
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	60 97       	sbiw	r28, 0x10	; 16
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	cd bf       	out	0x3d, r28	; 61
    3ad2:	6d 87       	std	Y+13, r22	; 0x0d
    3ad4:	7e 87       	std	Y+14, r23	; 0x0e
    3ad6:	8f 87       	std	Y+15, r24	; 0x0f
    3ad8:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3ada:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae0:	af 85       	ldd	r26, Y+15	; 0x0f
    3ae2:	b8 89       	ldd	r27, Y+16	; 0x10
    3ae4:	00 97       	sbiw	r24, 0x00	; 0
    3ae6:	a1 05       	cpc	r26, r1
    3ae8:	b1 05       	cpc	r27, r1
    3aea:	09 f4       	brne	.+2      	; 0x3aee <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3aec:	4f c0       	rjmp	.+158    	; 0x3b8c <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3aee:	2d c0       	rjmp	.+90     	; 0x3b4a <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3af0:	8a 81       	ldd	r24, Y+2	; 0x02
    3af2:	08 2f       	mov	r16, r24
    3af4:	10 e0       	ldi	r17, 0x00	; 0
    3af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3afa:	af 85       	ldd	r26, Y+15	; 0x0f
    3afc:	b8 89       	ldd	r27, Y+16	; 0x10
    3afe:	2a e0       	ldi	r18, 0x0A	; 10
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	bc 01       	movw	r22, r24
    3b08:	cd 01       	movw	r24, r26
    3b0a:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__udivmodsi4>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	28 2f       	mov	r18, r24
    3b14:	ce 01       	movw	r24, r28
    3b16:	03 96       	adiw	r24, 0x03	; 3
    3b18:	fc 01       	movw	r30, r24
    3b1a:	e0 0f       	add	r30, r16
    3b1c:	f1 1f       	adc	r31, r17
    3b1e:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b24:	af 85       	ldd	r26, Y+15	; 0x0f
    3b26:	b8 89       	ldd	r27, Y+16	; 0x10
    3b28:	2a e0       	ldi	r18, 0x0A	; 10
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e0       	ldi	r20, 0x00	; 0
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	bc 01       	movw	r22, r24
    3b32:	cd 01       	movw	r24, r26
    3b34:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__udivmodsi4>
    3b38:	da 01       	movw	r26, r20
    3b3a:	c9 01       	movw	r24, r18
    3b3c:	8d 87       	std	Y+13, r24	; 0x0d
    3b3e:	9e 87       	std	Y+14, r25	; 0x0e
    3b40:	af 87       	std	Y+15, r26	; 0x0f
    3b42:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3b44:	8a 81       	ldd	r24, Y+2	; 0x02
    3b46:	8f 5f       	subi	r24, 0xFF	; 255
    3b48:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b4e:	af 85       	ldd	r26, Y+15	; 0x0f
    3b50:	b8 89       	ldd	r27, Y+16	; 0x10
    3b52:	00 97       	sbiw	r24, 0x00	; 0
    3b54:	a1 05       	cpc	r26, r1
    3b56:	b1 05       	cpc	r27, r1
    3b58:	59 f6       	brne	.-106    	; 0x3af0 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5c:	81 50       	subi	r24, 0x01	; 1
    3b5e:	89 83       	std	Y+1, r24	; 0x01
    3b60:	11 c0       	rjmp	.+34     	; 0x3b84 <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	28 2f       	mov	r18, r24
    3b66:	33 27       	eor	r19, r19
    3b68:	27 fd       	sbrc	r18, 7
    3b6a:	30 95       	com	r19
    3b6c:	ce 01       	movw	r24, r28
    3b6e:	03 96       	adiw	r24, 0x03	; 3
    3b70:	fc 01       	movw	r30, r24
    3b72:	e2 0f       	add	r30, r18
    3b74:	f3 1f       	adc	r31, r19
    3b76:	80 81       	ld	r24, Z
    3b78:	80 5d       	subi	r24, 0xD0	; 208
    3b7a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	81 50       	subi	r24, 0x01	; 1
    3b82:	89 83       	std	Y+1, r24	; 0x01
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	88 23       	and	r24, r24
    3b88:	64 f7       	brge	.-40     	; 0x3b62 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3b8a:	03 c0       	rjmp	.+6      	; 0x3b92 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3b8c:	80 e3       	ldi	r24, 0x30	; 48
    3b8e:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3b92:	60 96       	adiw	r28, 0x10	; 16
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	1f 91       	pop	r17
    3ba4:	0f 91       	pop	r16
    3ba6:	08 95       	ret

00003ba8 <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3ba8:	df 93       	push	r29
    3baa:	cf 93       	push	r28
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <HCLCD_Vid4Bits_SetPosition+0x6>
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
    3bb2:	89 83       	std	Y+1, r24	; 0x01
    3bb4:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	81 30       	cpi	r24, 0x01	; 1
    3bba:	b9 f4       	brne	.+46     	; 0x3bea <HCLCD_Vid4Bits_SetPosition+0x42>
    3bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbe:	80 31       	cpi	r24, 0x10	; 16
    3bc0:	a0 f4       	brcc	.+40     	; 0x3bea <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc4:	88 2f       	mov	r24, r24
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	80 58       	subi	r24, 0x80	; 128
    3bca:	9f 4f       	sbci	r25, 0xFF	; 255
    3bcc:	95 95       	asr	r25
    3bce:	87 95       	ror	r24
    3bd0:	95 95       	asr	r25
    3bd2:	87 95       	ror	r24
    3bd4:	95 95       	asr	r25
    3bd6:	87 95       	ror	r24
    3bd8:	95 95       	asr	r25
    3bda:	87 95       	ror	r24
    3bdc:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3be0:	8a 81       	ldd	r24, Y+2	; 0x02
    3be2:	80 58       	subi	r24, 0x80	; 128
    3be4:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    3be8:	19 c0       	rjmp	.+50     	; 0x3c1c <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	82 30       	cpi	r24, 0x02	; 2
    3bee:	b1 f4       	brne	.+44     	; 0x3c1c <HCLCD_Vid4Bits_SetPosition+0x74>
    3bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf2:	80 31       	cpi	r24, 0x10	; 16
    3bf4:	98 f4       	brcc	.+38     	; 0x3c1c <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	88 2f       	mov	r24, r24
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	80 54       	subi	r24, 0x40	; 64
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	95 95       	asr	r25
    3c02:	87 95       	ror	r24
    3c04:	95 95       	asr	r25
    3c06:	87 95       	ror	r24
    3c08:	95 95       	asr	r25
    3c0a:	87 95       	ror	r24
    3c0c:	95 95       	asr	r25
    3c0e:	87 95       	ror	r24
    3c10:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	80 54       	subi	r24, 0x40	; 64
    3c18:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3c1c:	0f 90       	pop	r0
    3c1e:	0f 90       	pop	r0
    3c20:	cf 91       	pop	r28
    3c22:	df 91       	pop	r29
    3c24:	08 95       	ret

00003c26 <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3c26:	df 93       	push	r29
    3c28:	cf 93       	push	r28
    3c2a:	00 d0       	rcall	.+0      	; 0x3c2c <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3c2c:	00 d0       	rcall	.+0      	; 0x3c2e <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
    3c32:	8a 83       	std	Y+2, r24	; 0x02
    3c34:	7c 83       	std	Y+4, r23	; 0x04
    3c36:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3c38:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3a:	88 30       	cpi	r24, 0x08	; 8
    3c3c:	98 f5       	brcc	.+102    	; 0x3ca4 <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c40:	88 2f       	mov	r24, r24
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	08 96       	adiw	r24, 0x08	; 8
    3c46:	88 0f       	add	r24, r24
    3c48:	99 1f       	adc	r25, r25
    3c4a:	88 0f       	add	r24, r24
    3c4c:	99 1f       	adc	r25, r25
    3c4e:	88 0f       	add	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	95 95       	asr	r25
    3c54:	87 95       	ror	r24
    3c56:	95 95       	asr	r25
    3c58:	87 95       	ror	r24
    3c5a:	95 95       	asr	r25
    3c5c:	87 95       	ror	r24
    3c5e:	95 95       	asr	r25
    3c60:	87 95       	ror	r24
    3c62:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	88 2f       	mov	r24, r24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	08 96       	adiw	r24, 0x08	; 8
    3c6e:	88 0f       	add	r24, r24
    3c70:	99 1f       	adc	r25, r25
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3c7e:	19 82       	std	Y+1, r1	; 0x01
    3c80:	0e c0       	rjmp	.+28     	; 0x3c9e <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	28 2f       	mov	r18, r24
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	e2 0f       	add	r30, r18
    3c90:	f3 1f       	adc	r31, r19
    3c92:	80 81       	ld	r24, Z
    3c94:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	8f 5f       	subi	r24, 0xFF	; 255
    3c9c:	89 83       	std	Y+1, r24	; 0x01
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	88 30       	cpi	r24, 0x08	; 8
    3ca2:	78 f3       	brcs	.-34     	; 0x3c82 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3ca4:	0f 90       	pop	r0
    3ca6:	0f 90       	pop	r0
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	cf 91       	pop	r28
    3cae:	df 91       	pop	r29
    3cb0:	08 95       	ret

00003cb2 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3cb2:	df 93       	push	r29
    3cb4:	cf 93       	push	r28
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	2e 97       	sbiw	r28, 0x0e	; 14
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	a0 e0       	ldi	r26, 0x00	; 0
    3cd8:	b0 e4       	ldi	r27, 0x40	; 64
    3cda:	8b 87       	std	Y+11, r24	; 0x0b
    3cdc:	9c 87       	std	Y+12, r25	; 0x0c
    3cde:	ad 87       	std	Y+13, r26	; 0x0d
    3ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	4a ef       	ldi	r20, 0xFA	; 250
    3cf0:	54 e4       	ldi	r21, 0x44	; 68
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	8f 83       	std	Y+7, r24	; 0x07
    3cfc:	98 87       	std	Y+8, r25	; 0x08
    3cfe:	a9 87       	std	Y+9, r26	; 0x09
    3d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d02:	6f 81       	ldd	r22, Y+7	; 0x07
    3d04:	78 85       	ldd	r23, Y+8	; 0x08
    3d06:	89 85       	ldd	r24, Y+9	; 0x09
    3d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e8       	ldi	r20, 0x80	; 128
    3d10:	5f e3       	ldi	r21, 0x3F	; 63
    3d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d16:	88 23       	and	r24, r24
    3d18:	2c f4       	brge	.+10     	; 0x3d24 <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	9e 83       	std	Y+6, r25	; 0x06
    3d20:	8d 83       	std	Y+5, r24	; 0x05
    3d22:	3f c0       	rjmp	.+126    	; 0x3da2 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3d24:	6f 81       	ldd	r22, Y+7	; 0x07
    3d26:	78 85       	ldd	r23, Y+8	; 0x08
    3d28:	89 85       	ldd	r24, Y+9	; 0x09
    3d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	3f ef       	ldi	r19, 0xFF	; 255
    3d30:	4f e7       	ldi	r20, 0x7F	; 127
    3d32:	57 e4       	ldi	r21, 0x47	; 71
    3d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d38:	18 16       	cp	r1, r24
    3d3a:	4c f5       	brge	.+82     	; 0x3d8e <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e2       	ldi	r20, 0x20	; 32
    3d4a:	51 e4       	ldi	r21, 0x41	; 65
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	bc 01       	movw	r22, r24
    3d56:	cd 01       	movw	r24, r26
    3d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	9e 83       	std	Y+6, r25	; 0x06
    3d62:	8d 83       	std	Y+5, r24	; 0x05
    3d64:	0f c0       	rjmp	.+30     	; 0x3d84 <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3d66:	88 ec       	ldi	r24, 0xC8	; 200
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	9c 83       	std	Y+4, r25	; 0x04
    3d6c:	8b 83       	std	Y+3, r24	; 0x03
    3d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d70:	9c 81       	ldd	r25, Y+4	; 0x04
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	9e 81       	ldd	r25, Y+6	; 0x06
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	69 f7       	brne	.-38     	; 0x3d66 <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3d8c:	14 c0       	rjmp	.+40     	; 0x3db6 <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d90:	78 85       	ldd	r23, Y+8	; 0x08
    3d92:	89 85       	ldd	r24, Y+9	; 0x09
    3d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	9e 83       	std	Y+6, r25	; 0x06
    3da0:	8d 83       	std	Y+5, r24	; 0x05
    3da2:	8d 81       	ldd	r24, Y+5	; 0x05
    3da4:	9e 81       	ldd	r25, Y+6	; 0x06
    3da6:	9a 83       	std	Y+2, r25	; 0x02
    3da8:	89 83       	std	Y+1, r24	; 0x01
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	9a 81       	ldd	r25, Y+2	; 0x02
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3db2:	9a 83       	std	Y+2, r25	; 0x02
    3db4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3db6:	2e 96       	adiw	r28, 0x0e	; 14
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	f8 94       	cli
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	cd bf       	out	0x3d, r28	; 61
    3dc2:	cf 91       	pop	r28
    3dc4:	df 91       	pop	r29
    3dc6:	08 95       	ret

00003dc8 <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3dc8:	df 93       	push	r29
    3dca:	cf 93       	push	r28
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62
    3dd0:	60 97       	sbiw	r28, 0x10	; 16
    3dd2:	0f b6       	in	r0, 0x3f	; 63
    3dd4:	f8 94       	cli
    3dd6:	de bf       	out	0x3e, r29	; 62
    3dd8:	0f be       	out	0x3f, r0	; 63
    3dda:	cd bf       	out	0x3d, r28	; 61
    3ddc:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3dde:	1f 86       	std	Y+15, r1	; 0x0f
    3de0:	7b c0       	rjmp	.+246    	; 0x3ed8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3de8:	88 e1       	ldi	r24, 0x18	; 24
    3dea:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	a6 e9       	ldi	r26, 0x96	; 150
    3df4:	b3 e4       	ldi	r27, 0x43	; 67
    3df6:	8b 87       	std	Y+11, r24	; 0x0b
    3df8:	9c 87       	std	Y+12, r25	; 0x0c
    3dfa:	ad 87       	std	Y+13, r26	; 0x0d
    3dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	4a ef       	ldi	r20, 0xFA	; 250
    3e0c:	54 e4       	ldi	r21, 0x44	; 68
    3e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	8f 83       	std	Y+7, r24	; 0x07
    3e18:	98 87       	std	Y+8, r25	; 0x08
    3e1a:	a9 87       	std	Y+9, r26	; 0x09
    3e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e20:	78 85       	ldd	r23, Y+8	; 0x08
    3e22:	89 85       	ldd	r24, Y+9	; 0x09
    3e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	40 e8       	ldi	r20, 0x80	; 128
    3e2c:	5f e3       	ldi	r21, 0x3F	; 63
    3e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e32:	88 23       	and	r24, r24
    3e34:	2c f4       	brge	.+10     	; 0x3e40 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	9e 83       	std	Y+6, r25	; 0x06
    3e3c:	8d 83       	std	Y+5, r24	; 0x05
    3e3e:	3f c0       	rjmp	.+126    	; 0x3ebe <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    3e40:	6f 81       	ldd	r22, Y+7	; 0x07
    3e42:	78 85       	ldd	r23, Y+8	; 0x08
    3e44:	89 85       	ldd	r24, Y+9	; 0x09
    3e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	3f ef       	ldi	r19, 0xFF	; 255
    3e4c:	4f e7       	ldi	r20, 0x7F	; 127
    3e4e:	57 e4       	ldi	r21, 0x47	; 71
    3e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e54:	18 16       	cp	r1, r24
    3e56:	4c f5       	brge	.+82     	; 0x3eaa <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e2       	ldi	r20, 0x20	; 32
    3e66:	51 e4       	ldi	r21, 0x41	; 65
    3e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	bc 01       	movw	r22, r24
    3e72:	cd 01       	movw	r24, r26
    3e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	9e 83       	std	Y+6, r25	; 0x06
    3e7e:	8d 83       	std	Y+5, r24	; 0x05
    3e80:	0f c0       	rjmp	.+30     	; 0x3ea0 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3e82:	88 ec       	ldi	r24, 0xC8	; 200
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	9c 83       	std	Y+4, r25	; 0x04
    3e88:	8b 83       	std	Y+3, r24	; 0x03
    3e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8e:	01 97       	sbiw	r24, 0x01	; 1
    3e90:	f1 f7       	brne	.-4      	; 0x3e8e <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3e92:	9c 83       	std	Y+4, r25	; 0x04
    3e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e96:	8d 81       	ldd	r24, Y+5	; 0x05
    3e98:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	9e 83       	std	Y+6, r25	; 0x06
    3e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea4:	00 97       	sbiw	r24, 0x00	; 0
    3ea6:	69 f7       	brne	.-38     	; 0x3e82 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    3ea8:	14 c0       	rjmp	.+40     	; 0x3ed2 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    3eac:	78 85       	ldd	r23, Y+8	; 0x08
    3eae:	89 85       	ldd	r24, Y+9	; 0x09
    3eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	9e 83       	std	Y+6, r25	; 0x06
    3ebc:	8d 83       	std	Y+5, r24	; 0x05
    3ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec2:	9a 83       	std	Y+2, r25	; 0x02
    3ec4:	89 83       	std	Y+1, r24	; 0x01
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    3ece:	9a 83       	std	Y+2, r25	; 0x02
    3ed0:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ed4:	8f 5f       	subi	r24, 0xFF	; 255
    3ed6:	8f 87       	std	Y+15, r24	; 0x0f
    3ed8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3eda:	88 89       	ldd	r24, Y+16	; 0x10
    3edc:	98 17       	cp	r25, r24
    3ede:	08 f4       	brcc	.+2      	; 0x3ee2 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    3ee0:	80 cf       	rjmp	.-256    	; 0x3de2 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3ee2:	60 96       	adiw	r28, 0x10	; 16
    3ee4:	0f b6       	in	r0, 0x3f	; 63
    3ee6:	f8 94       	cli
    3ee8:	de bf       	out	0x3e, r29	; 62
    3eea:	0f be       	out	0x3f, r0	; 63
    3eec:	cd bf       	out	0x3d, r28	; 61
    3eee:	cf 91       	pop	r28
    3ef0:	df 91       	pop	r29
    3ef2:	08 95       	ret

00003ef4 <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3ef4:	df 93       	push	r29
    3ef6:	cf 93       	push	r28
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	60 97       	sbiw	r28, 0x10	; 16
    3efe:	0f b6       	in	r0, 0x3f	; 63
    3f00:	f8 94       	cli
    3f02:	de bf       	out	0x3e, r29	; 62
    3f04:	0f be       	out	0x3f, r0	; 63
    3f06:	cd bf       	out	0x3d, r28	; 61
    3f08:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3f0a:	1f 86       	std	Y+15, r1	; 0x0f
    3f0c:	7b c0       	rjmp	.+246    	; 0x4004 <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3f14:	8c e1       	ldi	r24, 0x1C	; 28
    3f16:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	a6 e9       	ldi	r26, 0x96	; 150
    3f20:	b3 e4       	ldi	r27, 0x43	; 67
    3f22:	8b 87       	std	Y+11, r24	; 0x0b
    3f24:	9c 87       	std	Y+12, r25	; 0x0c
    3f26:	ad 87       	std	Y+13, r26	; 0x0d
    3f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	4a ef       	ldi	r20, 0xFA	; 250
    3f38:	54 e4       	ldi	r21, 0x44	; 68
    3f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	8f 83       	std	Y+7, r24	; 0x07
    3f44:	98 87       	std	Y+8, r25	; 0x08
    3f46:	a9 87       	std	Y+9, r26	; 0x09
    3f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4c:	78 85       	ldd	r23, Y+8	; 0x08
    3f4e:	89 85       	ldd	r24, Y+9	; 0x09
    3f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	40 e8       	ldi	r20, 0x80	; 128
    3f58:	5f e3       	ldi	r21, 0x3F	; 63
    3f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f5e:	88 23       	and	r24, r24
    3f60:	2c f4       	brge	.+10     	; 0x3f6c <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	9e 83       	std	Y+6, r25	; 0x06
    3f68:	8d 83       	std	Y+5, r24	; 0x05
    3f6a:	3f c0       	rjmp	.+126    	; 0x3fea <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    3f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f6e:	78 85       	ldd	r23, Y+8	; 0x08
    3f70:	89 85       	ldd	r24, Y+9	; 0x09
    3f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	3f ef       	ldi	r19, 0xFF	; 255
    3f78:	4f e7       	ldi	r20, 0x7F	; 127
    3f7a:	57 e4       	ldi	r21, 0x47	; 71
    3f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f80:	18 16       	cp	r1, r24
    3f82:	4c f5       	brge	.+82     	; 0x3fd6 <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	40 e2       	ldi	r20, 0x20	; 32
    3f92:	51 e4       	ldi	r21, 0x41	; 65
    3f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	bc 01       	movw	r22, r24
    3f9e:	cd 01       	movw	r24, r26
    3fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	9e 83       	std	Y+6, r25	; 0x06
    3faa:	8d 83       	std	Y+5, r24	; 0x05
    3fac:	0f c0       	rjmp	.+30     	; 0x3fcc <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    3fae:	88 ec       	ldi	r24, 0xC8	; 200
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	9c 83       	std	Y+4, r25	; 0x04
    3fb4:	8b 83       	std	Y+3, r24	; 0x03
    3fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	f1 f7       	brne	.-4      	; 0x3fba <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    3fbe:	9c 83       	std	Y+4, r25	; 0x04
    3fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	9e 83       	std	Y+6, r25	; 0x06
    3fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fce:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd0:	00 97       	sbiw	r24, 0x00	; 0
    3fd2:	69 f7       	brne	.-38     	; 0x3fae <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    3fd4:	14 c0       	rjmp	.+40     	; 0x3ffe <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd8:	78 85       	ldd	r23, Y+8	; 0x08
    3fda:	89 85       	ldd	r24, Y+9	; 0x09
    3fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	9e 83       	std	Y+6, r25	; 0x06
    3fe8:	8d 83       	std	Y+5, r24	; 0x05
    3fea:	8d 81       	ldd	r24, Y+5	; 0x05
    3fec:	9e 81       	ldd	r25, Y+6	; 0x06
    3fee:	9a 83       	std	Y+2, r25	; 0x02
    3ff0:	89 83       	std	Y+1, r24	; 0x01
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	f1 f7       	brne	.-4      	; 0x3ff6 <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    3ffa:	9a 83       	std	Y+2, r25	; 0x02
    3ffc:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4000:	8f 5f       	subi	r24, 0xFF	; 255
    4002:	8f 87       	std	Y+15, r24	; 0x0f
    4004:	9f 85       	ldd	r25, Y+15	; 0x0f
    4006:	88 89       	ldd	r24, Y+16	; 0x10
    4008:	98 17       	cp	r25, r24
    400a:	08 f4       	brcc	.+2      	; 0x400e <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    400c:	80 cf       	rjmp	.-256    	; 0x3f0e <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    400e:	60 96       	adiw	r28, 0x10	; 16
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
    401a:	cf 91       	pop	r28
    401c:	df 91       	pop	r29
    401e:	08 95       	ret

00004020 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    4020:	df 93       	push	r29
    4022:	cf 93       	push	r28
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	60 97       	sbiw	r28, 0x10	; 16
    402a:	0f b6       	in	r0, 0x3f	; 63
    402c:	f8 94       	cli
    402e:	de bf       	out	0x3e, r29	; 62
    4030:	0f be       	out	0x3f, r0	; 63
    4032:	cd bf       	out	0x3d, r28	; 61
    4034:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4036:	1f 86       	std	Y+15, r1	; 0x0f
    4038:	7b c0       	rjmp	.+246    	; 0x4130 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    4040:	80 e1       	ldi	r24, 0x10	; 16
    4042:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	a6 e9       	ldi	r26, 0x96	; 150
    404c:	b3 e4       	ldi	r27, 0x43	; 67
    404e:	8b 87       	std	Y+11, r24	; 0x0b
    4050:	9c 87       	std	Y+12, r25	; 0x0c
    4052:	ad 87       	std	Y+13, r26	; 0x0d
    4054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4056:	6b 85       	ldd	r22, Y+11	; 0x0b
    4058:	7c 85       	ldd	r23, Y+12	; 0x0c
    405a:	8d 85       	ldd	r24, Y+13	; 0x0d
    405c:	9e 85       	ldd	r25, Y+14	; 0x0e
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	4a ef       	ldi	r20, 0xFA	; 250
    4064:	54 e4       	ldi	r21, 0x44	; 68
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	8f 83       	std	Y+7, r24	; 0x07
    4070:	98 87       	std	Y+8, r25	; 0x08
    4072:	a9 87       	std	Y+9, r26	; 0x09
    4074:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4076:	6f 81       	ldd	r22, Y+7	; 0x07
    4078:	78 85       	ldd	r23, Y+8	; 0x08
    407a:	89 85       	ldd	r24, Y+9	; 0x09
    407c:	9a 85       	ldd	r25, Y+10	; 0x0a
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	40 e8       	ldi	r20, 0x80	; 128
    4084:	5f e3       	ldi	r21, 0x3F	; 63
    4086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    408a:	88 23       	and	r24, r24
    408c:	2c f4       	brge	.+10     	; 0x4098 <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	9e 83       	std	Y+6, r25	; 0x06
    4094:	8d 83       	std	Y+5, r24	; 0x05
    4096:	3f c0       	rjmp	.+126    	; 0x4116 <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    4098:	6f 81       	ldd	r22, Y+7	; 0x07
    409a:	78 85       	ldd	r23, Y+8	; 0x08
    409c:	89 85       	ldd	r24, Y+9	; 0x09
    409e:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	3f ef       	ldi	r19, 0xFF	; 255
    40a4:	4f e7       	ldi	r20, 0x7F	; 127
    40a6:	57 e4       	ldi	r21, 0x47	; 71
    40a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40ac:	18 16       	cp	r1, r24
    40ae:	4c f5       	brge	.+82     	; 0x4102 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    40b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    40b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    40b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	40 e2       	ldi	r20, 0x20	; 32
    40be:	51 e4       	ldi	r21, 0x41	; 65
    40c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	bc 01       	movw	r22, r24
    40ca:	cd 01       	movw	r24, r26
    40cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	9e 83       	std	Y+6, r25	; 0x06
    40d6:	8d 83       	std	Y+5, r24	; 0x05
    40d8:	0f c0       	rjmp	.+30     	; 0x40f8 <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    40da:	88 ec       	ldi	r24, 0xC8	; 200
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	9c 83       	std	Y+4, r25	; 0x04
    40e0:	8b 83       	std	Y+3, r24	; 0x03
    40e2:	8b 81       	ldd	r24, Y+3	; 0x03
    40e4:	9c 81       	ldd	r25, Y+4	; 0x04
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	f1 f7       	brne	.-4      	; 0x40e6 <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    40ea:	9c 83       	std	Y+4, r25	; 0x04
    40ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ee:	8d 81       	ldd	r24, Y+5	; 0x05
    40f0:	9e 81       	ldd	r25, Y+6	; 0x06
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	9e 83       	std	Y+6, r25	; 0x06
    40f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40f8:	8d 81       	ldd	r24, Y+5	; 0x05
    40fa:	9e 81       	ldd	r25, Y+6	; 0x06
    40fc:	00 97       	sbiw	r24, 0x00	; 0
    40fe:	69 f7       	brne	.-38     	; 0x40da <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    4100:	14 c0       	rjmp	.+40     	; 0x412a <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4102:	6f 81       	ldd	r22, Y+7	; 0x07
    4104:	78 85       	ldd	r23, Y+8	; 0x08
    4106:	89 85       	ldd	r24, Y+9	; 0x09
    4108:	9a 85       	ldd	r25, Y+10	; 0x0a
    410a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	9e 83       	std	Y+6, r25	; 0x06
    4114:	8d 83       	std	Y+5, r24	; 0x05
    4116:	8d 81       	ldd	r24, Y+5	; 0x05
    4118:	9e 81       	ldd	r25, Y+6	; 0x06
    411a:	9a 83       	std	Y+2, r25	; 0x02
    411c:	89 83       	std	Y+1, r24	; 0x01
    411e:	89 81       	ldd	r24, Y+1	; 0x01
    4120:	9a 81       	ldd	r25, Y+2	; 0x02
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	f1 f7       	brne	.-4      	; 0x4122 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    4126:	9a 83       	std	Y+2, r25	; 0x02
    4128:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    412a:	8f 85       	ldd	r24, Y+15	; 0x0f
    412c:	8f 5f       	subi	r24, 0xFF	; 255
    412e:	8f 87       	std	Y+15, r24	; 0x0f
    4130:	9f 85       	ldd	r25, Y+15	; 0x0f
    4132:	88 89       	ldd	r24, Y+16	; 0x10
    4134:	98 17       	cp	r25, r24
    4136:	08 f4       	brcc	.+2      	; 0x413a <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    4138:	80 cf       	rjmp	.-256    	; 0x403a <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    413a:	60 96       	adiw	r28, 0x10	; 16
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    4146:	cf 91       	pop	r28
    4148:	df 91       	pop	r29
    414a:	08 95       	ret

0000414c <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    414c:	df 93       	push	r29
    414e:	cf 93       	push	r28
    4150:	cd b7       	in	r28, 0x3d	; 61
    4152:	de b7       	in	r29, 0x3e	; 62
    4154:	60 97       	sbiw	r28, 0x10	; 16
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4162:	1f 86       	std	Y+15, r1	; 0x0f
    4164:	7b c0       	rjmp	.+246    	; 0x425c <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    416c:	84 e1       	ldi	r24, 0x14	; 20
    416e:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <HCLCD_Vid4Bits_SendCommand>
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	a6 e9       	ldi	r26, 0x96	; 150
    4178:	b3 e4       	ldi	r27, 0x43	; 67
    417a:	8b 87       	std	Y+11, r24	; 0x0b
    417c:	9c 87       	std	Y+12, r25	; 0x0c
    417e:	ad 87       	std	Y+13, r26	; 0x0d
    4180:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4182:	6b 85       	ldd	r22, Y+11	; 0x0b
    4184:	7c 85       	ldd	r23, Y+12	; 0x0c
    4186:	8d 85       	ldd	r24, Y+13	; 0x0d
    4188:	9e 85       	ldd	r25, Y+14	; 0x0e
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	4a ef       	ldi	r20, 0xFA	; 250
    4190:	54 e4       	ldi	r21, 0x44	; 68
    4192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	8f 83       	std	Y+7, r24	; 0x07
    419c:	98 87       	std	Y+8, r25	; 0x08
    419e:	a9 87       	std	Y+9, r26	; 0x09
    41a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41a2:	6f 81       	ldd	r22, Y+7	; 0x07
    41a4:	78 85       	ldd	r23, Y+8	; 0x08
    41a6:	89 85       	ldd	r24, Y+9	; 0x09
    41a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	40 e8       	ldi	r20, 0x80	; 128
    41b0:	5f e3       	ldi	r21, 0x3F	; 63
    41b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41b6:	88 23       	and	r24, r24
    41b8:	2c f4       	brge	.+10     	; 0x41c4 <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	9e 83       	std	Y+6, r25	; 0x06
    41c0:	8d 83       	std	Y+5, r24	; 0x05
    41c2:	3f c0       	rjmp	.+126    	; 0x4242 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    41c4:	6f 81       	ldd	r22, Y+7	; 0x07
    41c6:	78 85       	ldd	r23, Y+8	; 0x08
    41c8:	89 85       	ldd	r24, Y+9	; 0x09
    41ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	3f ef       	ldi	r19, 0xFF	; 255
    41d0:	4f e7       	ldi	r20, 0x7F	; 127
    41d2:	57 e4       	ldi	r21, 0x47	; 71
    41d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41d8:	18 16       	cp	r1, r24
    41da:	4c f5       	brge	.+82     	; 0x422e <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    41de:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e4:	20 e0       	ldi	r18, 0x00	; 0
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	40 e2       	ldi	r20, 0x20	; 32
    41ea:	51 e4       	ldi	r21, 0x41	; 65
    41ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	bc 01       	movw	r22, r24
    41f6:	cd 01       	movw	r24, r26
    41f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	9e 83       	std	Y+6, r25	; 0x06
    4202:	8d 83       	std	Y+5, r24	; 0x05
    4204:	0f c0       	rjmp	.+30     	; 0x4224 <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    4206:	88 ec       	ldi	r24, 0xC8	; 200
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	9c 83       	std	Y+4, r25	; 0x04
    420c:	8b 83       	std	Y+3, r24	; 0x03
    420e:	8b 81       	ldd	r24, Y+3	; 0x03
    4210:	9c 81       	ldd	r25, Y+4	; 0x04
    4212:	01 97       	sbiw	r24, 0x01	; 1
    4214:	f1 f7       	brne	.-4      	; 0x4212 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    4216:	9c 83       	std	Y+4, r25	; 0x04
    4218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    421a:	8d 81       	ldd	r24, Y+5	; 0x05
    421c:	9e 81       	ldd	r25, Y+6	; 0x06
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	9e 83       	std	Y+6, r25	; 0x06
    4222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4224:	8d 81       	ldd	r24, Y+5	; 0x05
    4226:	9e 81       	ldd	r25, Y+6	; 0x06
    4228:	00 97       	sbiw	r24, 0x00	; 0
    422a:	69 f7       	brne	.-38     	; 0x4206 <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    422c:	14 c0       	rjmp	.+40     	; 0x4256 <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422e:	6f 81       	ldd	r22, Y+7	; 0x07
    4230:	78 85       	ldd	r23, Y+8	; 0x08
    4232:	89 85       	ldd	r24, Y+9	; 0x09
    4234:	9a 85       	ldd	r25, Y+10	; 0x0a
    4236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	9e 83       	std	Y+6, r25	; 0x06
    4240:	8d 83       	std	Y+5, r24	; 0x05
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	9a 83       	std	Y+2, r25	; 0x02
    4248:	89 83       	std	Y+1, r24	; 0x01
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	01 97       	sbiw	r24, 0x01	; 1
    4250:	f1 f7       	brne	.-4      	; 0x424e <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    4252:	9a 83       	std	Y+2, r25	; 0x02
    4254:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4256:	8f 85       	ldd	r24, Y+15	; 0x0f
    4258:	8f 5f       	subi	r24, 0xFF	; 255
    425a:	8f 87       	std	Y+15, r24	; 0x0f
    425c:	9f 85       	ldd	r25, Y+15	; 0x0f
    425e:	88 89       	ldd	r24, Y+16	; 0x10
    4260:	98 17       	cp	r25, r24
    4262:	08 f4       	brcc	.+2      	; 0x4266 <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    4264:	80 cf       	rjmp	.-256    	; 0x4166 <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    4266:	60 96       	adiw	r28, 0x10	; 16
    4268:	0f b6       	in	r0, 0x3f	; 63
    426a:	f8 94       	cli
    426c:	de bf       	out	0x3e, r29	; 62
    426e:	0f be       	out	0x3f, r0	; 63
    4270:	cd bf       	out	0x3d, r28	; 61
    4272:	cf 91       	pop	r28
    4274:	df 91       	pop	r29
    4276:	08 95       	ret

00004278 <main>:
#include<util\delay.h>

LED_t LED = {HLED_PORTA,PIN0};

int main(void)
{
    4278:	df 93       	push	r29
    427a:	cf 93       	push	r28
    427c:	cd b7       	in	r28, 0x3d	; 61
    427e:	de b7       	in	r29, 0x3e	; 62
    4280:	ef 97       	sbiw	r28, 0x3f	; 63
    4282:	0f b6       	in	r0, 0x3f	; 63
    4284:	f8 94       	cli
    4286:	de bf       	out	0x3e, r29	; 62
    4288:	0f be       	out	0x3f, r0	; 63
    428a:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8ReciveValue = 0 ;
    428c:	1b a6       	std	Y+43, r1	; 0x2b
	u8 bufer[20];

	/*Set TX Pin-->PIND1  as an output*/
	MDIO_Error_State_SetPinDirection(PIN1,MDIO_PORTD,PIN_OUTPUT);
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	63 e0       	ldi	r22, 0x03	; 3
    4292:	41 e0       	ldi	r20, 0x01	; 1
    4294:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	/*Set RX Pin-->PIND0  as an input*/
	MDIO_Error_State_SetPinDirection(PIN0,MDIO_PORTD,PIN_INPUT);
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	63 e0       	ldi	r22, 0x03	; 3
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <MDIO_Error_State_SetPinDirection>
	/*set Led Pin-->PINA0 as an output*/
	HLED_VidInit(&LED);
    42a2:	85 e8       	ldi	r24, 0x85	; 133
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 4d 10 	call	0x209a	; 0x209a <HLED_VidInit>
	/*USART Initialization*/
	MUSART_VidInit();
    42aa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <MUSART_VidInit>
	/*CLCD Initialization*/
	HCLCD_Vid4Bits_Init();
    42ae:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <HCLCD_Vid4Bits_Init>
	HCLCD_Vid4Bits_DisplayString((u8*)"Welcome...");
    42b2:	80 e6       	ldi	r24, 0x60	; 96
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <HCLCD_Vid4Bits_DisplayString>
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	a8 ec       	ldi	r26, 0xC8	; 200
    42c0:	b2 e4       	ldi	r27, 0x42	; 66
    42c2:	8f a3       	std	Y+39, r24	; 0x27
    42c4:	98 a7       	std	Y+40, r25	; 0x28
    42c6:	a9 a7       	std	Y+41, r26	; 0x29
    42c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ca:	6f a1       	ldd	r22, Y+39	; 0x27
    42cc:	78 a5       	ldd	r23, Y+40	; 0x28
    42ce:	89 a5       	ldd	r24, Y+41	; 0x29
    42d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	4a ef       	ldi	r20, 0xFA	; 250
    42d8:	54 e4       	ldi	r21, 0x44	; 68
    42da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	8b a3       	std	Y+35, r24	; 0x23
    42e4:	9c a3       	std	Y+36, r25	; 0x24
    42e6:	ad a3       	std	Y+37, r26	; 0x25
    42e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42ea:	6b a1       	ldd	r22, Y+35	; 0x23
    42ec:	7c a1       	ldd	r23, Y+36	; 0x24
    42ee:	8d a1       	ldd	r24, Y+37	; 0x25
    42f0:	9e a1       	ldd	r25, Y+38	; 0x26
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	40 e8       	ldi	r20, 0x80	; 128
    42f8:	5f e3       	ldi	r21, 0x3F	; 63
    42fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42fe:	88 23       	and	r24, r24
    4300:	2c f4       	brge	.+10     	; 0x430c <main+0x94>
		__ticks = 1;
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	9a a3       	std	Y+34, r25	; 0x22
    4308:	89 a3       	std	Y+33, r24	; 0x21
    430a:	3f c0       	rjmp	.+126    	; 0x438a <main+0x112>
	else if (__tmp > 65535)
    430c:	6b a1       	ldd	r22, Y+35	; 0x23
    430e:	7c a1       	ldd	r23, Y+36	; 0x24
    4310:	8d a1       	ldd	r24, Y+37	; 0x25
    4312:	9e a1       	ldd	r25, Y+38	; 0x26
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	3f ef       	ldi	r19, 0xFF	; 255
    4318:	4f e7       	ldi	r20, 0x7F	; 127
    431a:	57 e4       	ldi	r21, 0x47	; 71
    431c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4320:	18 16       	cp	r1, r24
    4322:	4c f5       	brge	.+82     	; 0x4376 <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4324:	6f a1       	ldd	r22, Y+39	; 0x27
    4326:	78 a5       	ldd	r23, Y+40	; 0x28
    4328:	89 a5       	ldd	r24, Y+41	; 0x29
    432a:	9a a5       	ldd	r25, Y+42	; 0x2a
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	40 e2       	ldi	r20, 0x20	; 32
    4332:	51 e4       	ldi	r21, 0x41	; 65
    4334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	bc 01       	movw	r22, r24
    433e:	cd 01       	movw	r24, r26
    4340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	9a a3       	std	Y+34, r25	; 0x22
    434a:	89 a3       	std	Y+33, r24	; 0x21
    434c:	0f c0       	rjmp	.+30     	; 0x436c <main+0xf4>
    434e:	88 ec       	ldi	r24, 0xC8	; 200
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	98 a3       	std	Y+32, r25	; 0x20
    4354:	8f 8f       	std	Y+31, r24	; 0x1f
    4356:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4358:	98 a1       	ldd	r25, Y+32	; 0x20
    435a:	01 97       	sbiw	r24, 0x01	; 1
    435c:	f1 f7       	brne	.-4      	; 0x435a <main+0xe2>
    435e:	98 a3       	std	Y+32, r25	; 0x20
    4360:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4362:	89 a1       	ldd	r24, Y+33	; 0x21
    4364:	9a a1       	ldd	r25, Y+34	; 0x22
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	9a a3       	std	Y+34, r25	; 0x22
    436a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    436c:	89 a1       	ldd	r24, Y+33	; 0x21
    436e:	9a a1       	ldd	r25, Y+34	; 0x22
    4370:	00 97       	sbiw	r24, 0x00	; 0
    4372:	69 f7       	brne	.-38     	; 0x434e <main+0xd6>
    4374:	14 c0       	rjmp	.+40     	; 0x439e <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4376:	6b a1       	ldd	r22, Y+35	; 0x23
    4378:	7c a1       	ldd	r23, Y+36	; 0x24
    437a:	8d a1       	ldd	r24, Y+37	; 0x25
    437c:	9e a1       	ldd	r25, Y+38	; 0x26
    437e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4382:	dc 01       	movw	r26, r24
    4384:	cb 01       	movw	r24, r22
    4386:	9a a3       	std	Y+34, r25	; 0x22
    4388:	89 a3       	std	Y+33, r24	; 0x21
    438a:	89 a1       	ldd	r24, Y+33	; 0x21
    438c:	9a a1       	ldd	r25, Y+34	; 0x22
    438e:	9e 8f       	std	Y+30, r25	; 0x1e
    4390:	8d 8f       	std	Y+29, r24	; 0x1d
    4392:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4394:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4396:	01 97       	sbiw	r24, 0x01	; 1
    4398:	f1 f7       	brne	.-4      	; 0x4396 <main+0x11e>
    439a:	9e 8f       	std	Y+30, r25	; 0x1e
    439c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	HCLCD_Vid4Bits_ClearScreen();
    439e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <HCLCD_Vid4Bits_ClearScreen>
	MUSART_VidSendChar(M2_READY); // MC2 is ready
    43a2:	80 e1       	ldi	r24, 0x10	; 16
    43a4:	0e 94 14 06 	call	0xc28	; 0xc28 <MUSART_VidSendChar>
	MUSART_VidReceiveString(bufer);
    43a8:	ce 01       	movw	r24, r28
    43aa:	8c 96       	adiw	r24, 0x2c	; 44
    43ac:	0e 94 69 06 	call	0xcd2	; 0xcd2 <MUSART_VidReceiveString>
	HCLCD_Vid4Bits_DisplayString(bufer); // display the string on LCD
    43b0:	ce 01       	movw	r24, r28
    43b2:	8c 96       	adiw	r24, 0x2c	; 44
    43b4:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <HCLCD_Vid4Bits_DisplayString>
    43b8:	80 e0       	ldi	r24, 0x00	; 0
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	aa e7       	ldi	r26, 0x7A	; 122
    43be:	b4 e4       	ldi	r27, 0x44	; 68
    43c0:	89 8f       	std	Y+25, r24	; 0x19
    43c2:	9a 8f       	std	Y+26, r25	; 0x1a
    43c4:	ab 8f       	std	Y+27, r26	; 0x1b
    43c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43c8:	69 8d       	ldd	r22, Y+25	; 0x19
    43ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	4a ef       	ldi	r20, 0xFA	; 250
    43d6:	54 e4       	ldi	r21, 0x44	; 68
    43d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	8d 8b       	std	Y+21, r24	; 0x15
    43e2:	9e 8b       	std	Y+22, r25	; 0x16
    43e4:	af 8b       	std	Y+23, r26	; 0x17
    43e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43e8:	6d 89       	ldd	r22, Y+21	; 0x15
    43ea:	7e 89       	ldd	r23, Y+22	; 0x16
    43ec:	8f 89       	ldd	r24, Y+23	; 0x17
    43ee:	98 8d       	ldd	r25, Y+24	; 0x18
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	40 e8       	ldi	r20, 0x80	; 128
    43f6:	5f e3       	ldi	r21, 0x3F	; 63
    43f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43fc:	88 23       	and	r24, r24
    43fe:	2c f4       	brge	.+10     	; 0x440a <main+0x192>
		__ticks = 1;
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	9c 8b       	std	Y+20, r25	; 0x14
    4406:	8b 8b       	std	Y+19, r24	; 0x13
    4408:	3f c0       	rjmp	.+126    	; 0x4488 <main+0x210>
	else if (__tmp > 65535)
    440a:	6d 89       	ldd	r22, Y+21	; 0x15
    440c:	7e 89       	ldd	r23, Y+22	; 0x16
    440e:	8f 89       	ldd	r24, Y+23	; 0x17
    4410:	98 8d       	ldd	r25, Y+24	; 0x18
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	3f ef       	ldi	r19, 0xFF	; 255
    4416:	4f e7       	ldi	r20, 0x7F	; 127
    4418:	57 e4       	ldi	r21, 0x47	; 71
    441a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    441e:	18 16       	cp	r1, r24
    4420:	4c f5       	brge	.+82     	; 0x4474 <main+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4422:	69 8d       	ldd	r22, Y+25	; 0x19
    4424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	40 e2       	ldi	r20, 0x20	; 32
    4430:	51 e4       	ldi	r21, 0x41	; 65
    4432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	bc 01       	movw	r22, r24
    443c:	cd 01       	movw	r24, r26
    443e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	9c 8b       	std	Y+20, r25	; 0x14
    4448:	8b 8b       	std	Y+19, r24	; 0x13
    444a:	0f c0       	rjmp	.+30     	; 0x446a <main+0x1f2>
    444c:	88 ec       	ldi	r24, 0xC8	; 200
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	9a 8b       	std	Y+18, r25	; 0x12
    4452:	89 8b       	std	Y+17, r24	; 0x11
    4454:	89 89       	ldd	r24, Y+17	; 0x11
    4456:	9a 89       	ldd	r25, Y+18	; 0x12
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	f1 f7       	brne	.-4      	; 0x4458 <main+0x1e0>
    445c:	9a 8b       	std	Y+18, r25	; 0x12
    445e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4460:	8b 89       	ldd	r24, Y+19	; 0x13
    4462:	9c 89       	ldd	r25, Y+20	; 0x14
    4464:	01 97       	sbiw	r24, 0x01	; 1
    4466:	9c 8b       	std	Y+20, r25	; 0x14
    4468:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    446a:	8b 89       	ldd	r24, Y+19	; 0x13
    446c:	9c 89       	ldd	r25, Y+20	; 0x14
    446e:	00 97       	sbiw	r24, 0x00	; 0
    4470:	69 f7       	brne	.-38     	; 0x444c <main+0x1d4>
    4472:	14 c0       	rjmp	.+40     	; 0x449c <main+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4474:	6d 89       	ldd	r22, Y+21	; 0x15
    4476:	7e 89       	ldd	r23, Y+22	; 0x16
    4478:	8f 89       	ldd	r24, Y+23	; 0x17
    447a:	98 8d       	ldd	r25, Y+24	; 0x18
    447c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	9c 8b       	std	Y+20, r25	; 0x14
    4486:	8b 8b       	std	Y+19, r24	; 0x13
    4488:	8b 89       	ldd	r24, Y+19	; 0x13
    448a:	9c 89       	ldd	r25, Y+20	; 0x14
    448c:	98 8b       	std	Y+16, r25	; 0x10
    448e:	8f 87       	std	Y+15, r24	; 0x0f
    4490:	8f 85       	ldd	r24, Y+15	; 0x0f
    4492:	98 89       	ldd	r25, Y+16	; 0x10
    4494:	01 97       	sbiw	r24, 0x01	; 1
    4496:	f1 f7       	brne	.-4      	; 0x4494 <main+0x21c>
    4498:	98 8b       	std	Y+16, r25	; 0x10
    449a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    449c:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <HCLCD_Vid4Bits_ClearScreen>

	while(1)
	{
		MUSART_VidSendChar(M2_READY); // MC2 is ready
    44a0:	80 e1       	ldi	r24, 0x10	; 16
    44a2:	0e 94 14 06 	call	0xc28	; 0xc28 <MUSART_VidSendChar>
		LOC_u8ReciveValue = MUSART_VidReceiveData();
    44a6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <MUSART_VidReceiveData>
    44aa:	8b a7       	std	Y+43, r24	; 0x2b
		if((LOC_u8ReciveValue!='#')&&(LOC_u8ReciveValue!='*'))
    44ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    44ae:	83 32       	cpi	r24, 0x23	; 35
    44b0:	39 f0       	breq	.+14     	; 0x44c0 <main+0x248>
    44b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    44b4:	8a 32       	cpi	r24, 0x2A	; 42
    44b6:	21 f0       	breq	.+8      	; 0x44c0 <main+0x248>
		{
			HCLCD_Vid4Bits_DisplayCharacter(LOC_u8ReciveValue);
    44b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    44ba:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <HCLCD_Vid4Bits_DisplayCharacter>
    44be:	f0 cf       	rjmp	.-32     	; 0x44a0 <main+0x228>
		}
		else if(LOC_u8ReciveValue =='#')
    44c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    44c2:	83 32       	cpi	r24, 0x23	; 35
    44c4:	21 f4       	brne	.+8      	; 0x44ce <main+0x256>
		{
			HCLCD_Vid4Bits_DisplayCharacter(' ');
    44c6:	80 e2       	ldi	r24, 0x20	; 32
    44c8:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <HCLCD_Vid4Bits_DisplayCharacter>
    44cc:	e9 cf       	rjmp	.-46     	; 0x44a0 <main+0x228>

		}
		else if(LOC_u8ReciveValue =='*')
    44ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    44d0:	8a 32       	cpi	r24, 0x2A	; 42
    44d2:	31 f7       	brne	.-52     	; 0x44a0 <main+0x228>
		{
			HLED_VidLed_Toggle(&LED);
    44d4:	85 e8       	ldi	r24, 0x85	; 133
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	0e 94 8f 10 	call	0x211e	; 0x211e <HLED_VidLed_Toggle>
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	aa e7       	ldi	r26, 0x7A	; 122
    44e2:	b4 e4       	ldi	r27, 0x44	; 68
    44e4:	8b 87       	std	Y+11, r24	; 0x0b
    44e6:	9c 87       	std	Y+12, r25	; 0x0c
    44e8:	ad 87       	std	Y+13, r26	; 0x0d
    44ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    44ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    44f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	4a ef       	ldi	r20, 0xFA	; 250
    44fa:	54 e4       	ldi	r21, 0x44	; 68
    44fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4500:	dc 01       	movw	r26, r24
    4502:	cb 01       	movw	r24, r22
    4504:	8f 83       	std	Y+7, r24	; 0x07
    4506:	98 87       	std	Y+8, r25	; 0x08
    4508:	a9 87       	std	Y+9, r26	; 0x09
    450a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    450c:	6f 81       	ldd	r22, Y+7	; 0x07
    450e:	78 85       	ldd	r23, Y+8	; 0x08
    4510:	89 85       	ldd	r24, Y+9	; 0x09
    4512:	9a 85       	ldd	r25, Y+10	; 0x0a
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e8       	ldi	r20, 0x80	; 128
    451a:	5f e3       	ldi	r21, 0x3F	; 63
    451c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4520:	88 23       	and	r24, r24
    4522:	2c f4       	brge	.+10     	; 0x452e <main+0x2b6>
		__ticks = 1;
    4524:	81 e0       	ldi	r24, 0x01	; 1
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	9e 83       	std	Y+6, r25	; 0x06
    452a:	8d 83       	std	Y+5, r24	; 0x05
    452c:	3f c0       	rjmp	.+126    	; 0x45ac <main+0x334>
	else if (__tmp > 65535)
    452e:	6f 81       	ldd	r22, Y+7	; 0x07
    4530:	78 85       	ldd	r23, Y+8	; 0x08
    4532:	89 85       	ldd	r24, Y+9	; 0x09
    4534:	9a 85       	ldd	r25, Y+10	; 0x0a
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	3f ef       	ldi	r19, 0xFF	; 255
    453a:	4f e7       	ldi	r20, 0x7F	; 127
    453c:	57 e4       	ldi	r21, 0x47	; 71
    453e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4542:	18 16       	cp	r1, r24
    4544:	4c f5       	brge	.+82     	; 0x4598 <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4546:	6b 85       	ldd	r22, Y+11	; 0x0b
    4548:	7c 85       	ldd	r23, Y+12	; 0x0c
    454a:	8d 85       	ldd	r24, Y+13	; 0x0d
    454c:	9e 85       	ldd	r25, Y+14	; 0x0e
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	40 e2       	ldi	r20, 0x20	; 32
    4554:	51 e4       	ldi	r21, 0x41	; 65
    4556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	bc 01       	movw	r22, r24
    4560:	cd 01       	movw	r24, r26
    4562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	9e 83       	std	Y+6, r25	; 0x06
    456c:	8d 83       	std	Y+5, r24	; 0x05
    456e:	0f c0       	rjmp	.+30     	; 0x458e <main+0x316>
    4570:	88 ec       	ldi	r24, 0xC8	; 200
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	9c 83       	std	Y+4, r25	; 0x04
    4576:	8b 83       	std	Y+3, r24	; 0x03
    4578:	8b 81       	ldd	r24, Y+3	; 0x03
    457a:	9c 81       	ldd	r25, Y+4	; 0x04
    457c:	01 97       	sbiw	r24, 0x01	; 1
    457e:	f1 f7       	brne	.-4      	; 0x457c <main+0x304>
    4580:	9c 83       	std	Y+4, r25	; 0x04
    4582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4584:	8d 81       	ldd	r24, Y+5	; 0x05
    4586:	9e 81       	ldd	r25, Y+6	; 0x06
    4588:	01 97       	sbiw	r24, 0x01	; 1
    458a:	9e 83       	std	Y+6, r25	; 0x06
    458c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    458e:	8d 81       	ldd	r24, Y+5	; 0x05
    4590:	9e 81       	ldd	r25, Y+6	; 0x06
    4592:	00 97       	sbiw	r24, 0x00	; 0
    4594:	69 f7       	brne	.-38     	; 0x4570 <main+0x2f8>
    4596:	14 c0       	rjmp	.+40     	; 0x45c0 <main+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4598:	6f 81       	ldd	r22, Y+7	; 0x07
    459a:	78 85       	ldd	r23, Y+8	; 0x08
    459c:	89 85       	ldd	r24, Y+9	; 0x09
    459e:	9a 85       	ldd	r25, Y+10	; 0x0a
    45a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	9e 83       	std	Y+6, r25	; 0x06
    45aa:	8d 83       	std	Y+5, r24	; 0x05
    45ac:	8d 81       	ldd	r24, Y+5	; 0x05
    45ae:	9e 81       	ldd	r25, Y+6	; 0x06
    45b0:	9a 83       	std	Y+2, r25	; 0x02
    45b2:	89 83       	std	Y+1, r24	; 0x01
    45b4:	89 81       	ldd	r24, Y+1	; 0x01
    45b6:	9a 81       	ldd	r25, Y+2	; 0x02
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	f1 f7       	brne	.-4      	; 0x45b8 <main+0x340>
    45bc:	9a 83       	std	Y+2, r25	; 0x02
    45be:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			HCLCD_Vid4Bits_ClearScreen();
    45c0:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <HCLCD_Vid4Bits_ClearScreen>
    45c4:	6d cf       	rjmp	.-294    	; 0x44a0 <main+0x228>

000045c6 <__udivmodsi4>:
    45c6:	a1 e2       	ldi	r26, 0x21	; 33
    45c8:	1a 2e       	mov	r1, r26
    45ca:	aa 1b       	sub	r26, r26
    45cc:	bb 1b       	sub	r27, r27
    45ce:	fd 01       	movw	r30, r26
    45d0:	0d c0       	rjmp	.+26     	; 0x45ec <__udivmodsi4_ep>

000045d2 <__udivmodsi4_loop>:
    45d2:	aa 1f       	adc	r26, r26
    45d4:	bb 1f       	adc	r27, r27
    45d6:	ee 1f       	adc	r30, r30
    45d8:	ff 1f       	adc	r31, r31
    45da:	a2 17       	cp	r26, r18
    45dc:	b3 07       	cpc	r27, r19
    45de:	e4 07       	cpc	r30, r20
    45e0:	f5 07       	cpc	r31, r21
    45e2:	20 f0       	brcs	.+8      	; 0x45ec <__udivmodsi4_ep>
    45e4:	a2 1b       	sub	r26, r18
    45e6:	b3 0b       	sbc	r27, r19
    45e8:	e4 0b       	sbc	r30, r20
    45ea:	f5 0b       	sbc	r31, r21

000045ec <__udivmodsi4_ep>:
    45ec:	66 1f       	adc	r22, r22
    45ee:	77 1f       	adc	r23, r23
    45f0:	88 1f       	adc	r24, r24
    45f2:	99 1f       	adc	r25, r25
    45f4:	1a 94       	dec	r1
    45f6:	69 f7       	brne	.-38     	; 0x45d2 <__udivmodsi4_loop>
    45f8:	60 95       	com	r22
    45fa:	70 95       	com	r23
    45fc:	80 95       	com	r24
    45fe:	90 95       	com	r25
    4600:	9b 01       	movw	r18, r22
    4602:	ac 01       	movw	r20, r24
    4604:	bd 01       	movw	r22, r26
    4606:	cf 01       	movw	r24, r30
    4608:	08 95       	ret

0000460a <__prologue_saves__>:
    460a:	2f 92       	push	r2
    460c:	3f 92       	push	r3
    460e:	4f 92       	push	r4
    4610:	5f 92       	push	r5
    4612:	6f 92       	push	r6
    4614:	7f 92       	push	r7
    4616:	8f 92       	push	r8
    4618:	9f 92       	push	r9
    461a:	af 92       	push	r10
    461c:	bf 92       	push	r11
    461e:	cf 92       	push	r12
    4620:	df 92       	push	r13
    4622:	ef 92       	push	r14
    4624:	ff 92       	push	r15
    4626:	0f 93       	push	r16
    4628:	1f 93       	push	r17
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
    462e:	cd b7       	in	r28, 0x3d	; 61
    4630:	de b7       	in	r29, 0x3e	; 62
    4632:	ca 1b       	sub	r28, r26
    4634:	db 0b       	sbc	r29, r27
    4636:	0f b6       	in	r0, 0x3f	; 63
    4638:	f8 94       	cli
    463a:	de bf       	out	0x3e, r29	; 62
    463c:	0f be       	out	0x3f, r0	; 63
    463e:	cd bf       	out	0x3d, r28	; 61
    4640:	09 94       	ijmp

00004642 <__epilogue_restores__>:
    4642:	2a 88       	ldd	r2, Y+18	; 0x12
    4644:	39 88       	ldd	r3, Y+17	; 0x11
    4646:	48 88       	ldd	r4, Y+16	; 0x10
    4648:	5f 84       	ldd	r5, Y+15	; 0x0f
    464a:	6e 84       	ldd	r6, Y+14	; 0x0e
    464c:	7d 84       	ldd	r7, Y+13	; 0x0d
    464e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4650:	9b 84       	ldd	r9, Y+11	; 0x0b
    4652:	aa 84       	ldd	r10, Y+10	; 0x0a
    4654:	b9 84       	ldd	r11, Y+9	; 0x09
    4656:	c8 84       	ldd	r12, Y+8	; 0x08
    4658:	df 80       	ldd	r13, Y+7	; 0x07
    465a:	ee 80       	ldd	r14, Y+6	; 0x06
    465c:	fd 80       	ldd	r15, Y+5	; 0x05
    465e:	0c 81       	ldd	r16, Y+4	; 0x04
    4660:	1b 81       	ldd	r17, Y+3	; 0x03
    4662:	aa 81       	ldd	r26, Y+2	; 0x02
    4664:	b9 81       	ldd	r27, Y+1	; 0x01
    4666:	ce 0f       	add	r28, r30
    4668:	d1 1d       	adc	r29, r1
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	ed 01       	movw	r28, r26
    4676:	08 95       	ret

00004678 <_exit>:
    4678:	f8 94       	cli

0000467a <__stop_program>:
    467a:	ff cf       	rjmp	.-2      	; 0x467a <__stop_program>
