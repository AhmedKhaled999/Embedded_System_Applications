
10-Generate_PWM_By_Fast_PWM_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00004294  00004328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007a  0080007a  00004342  2**0
                  ALLOC
  3 .stab         000047ac  00000000  00000000  00004344  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ada  00000000  00000000  00008af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a70a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a87a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ed17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_10>
      2c:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <main>
      8a:	0c 94 48 21 	jmp	0x4290	; 0x4290 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER0_VidInit>:
/*Pointer to Function*/
void (*TIMER0_CallBack)(void);

/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
      TCCR0&=0xF8;  //Bit masking
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	8c 93       	st	X, r24
      TCCR0|=TIMER_SET_PRESCALER;
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8c 93       	st	X, r24
      SET_BIT(TCCR0,4);
#else
#error      "PWM Mode is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_FAST_PWM_MODE
      SET_BIT(TCCR0,6);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
      SET_BIT(TCCR0,3);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
      SET_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
      CLR_BIT(TCCR0,4);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	89 83       	std	Y+1, r24	; 0x01
 TCNT0 = Copy_u8Preload;
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
  OCR0= Copy_u8CTCValue ;
     bd0:	ec e5       	ldi	r30, 0x5C	; 92
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <MTIMER0_VidOVF_SetCallBack+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
  TIMER0_CallBack =Copy_VidCallBack;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	90 93 7c 00 	sts	0x007C, r25
     bf6:	80 93 7b 00 	sts	0x007B, r24
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <MTIMER0_VidCTC_SetCallBack+0x6>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	89 83       	std	Y+1, r24	; 0x01
  TIMER0_CallBack =Copy_VidCallBack;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	90 93 7c 00 	sts	0x007C, r25
     c1a:	80 93 7b 00 	sts	0x007B, r24
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     c52:	e0 91 7b 00 	lds	r30, 0x007B
     c56:	f0 91 7c 00 	lds	r31, 0x007C
     c5a:	09 95       	icall
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     cac:	e0 91 7b 00 	lds	r30, 0x007B
     cb0:	f0 91 7c 00 	lds	r31, 0x007C
     cb4:	09 95       	icall
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     ce4:	af e5       	ldi	r26, 0x5F	; 95
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ef e5       	ldi	r30, 0x5F	; 95
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	8c 93       	st	X, r24
}
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     d00:	af e5       	ldi	r26, 0x5F	; 95
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ef e5       	ldi	r30, 0x5F	; 95
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 77       	andi	r24, 0x7F	; 127
     d0c:	8c 93       	st	X, r24
}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <MEXTI0_VidInit>:
#include"MEXTI_Config.h"
#include"MEXTI_Interface.h"

/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/
#if MEXTI_SET_SENSE_CONTROL==MEXTI_LOW_LEVEL
	CLR_BIT(MCUCR,0);
     d1c:	a5 e5       	ldi	r26, 0x55	; 85
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e5 e5       	ldi	r30, 0x55	; 85
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8e 7f       	andi	r24, 0xFE	; 254
     d28:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
     d2a:	a5 e5       	ldi	r26, 0x55	; 85
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e5 e5       	ldi	r30, 0x55	; 85
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8d 7f       	andi	r24, 0xFD	; 253
     d36:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
     d38:	ab e5       	ldi	r26, 0x5B	; 91
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	eb e5       	ldi	r30, 0x5B	; 91
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 64       	ori	r24, 0x40	; 64
     d44:	8c 93       	st	X, r24
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/
#if MEXTI_SET_SENSE_CONTROL==MEXTI_LOW_LEVEL
	CLR_BIT(MCUCR,2);
     d54:	a5 e5       	ldi	r26, 0x55	; 85
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e5 e5       	ldi	r30, 0x55	; 85
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8b 7f       	andi	r24, 0xFB	; 251
     d60:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,3);
     d62:	a5 e5       	ldi	r26, 0x55	; 85
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e5 e5       	ldi	r30, 0x55	; 85
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	87 7f       	andi	r24, 0xF7	; 247
     d6e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
     d70:	ab e5       	ldi	r26, 0x5B	; 91
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	eb e5       	ldi	r30, 0x5B	; 91
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	8c 93       	st	X, r24
}
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCSR,6);
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
     d8c:	ab e5       	ldi	r26, 0x5B	; 91
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	eb e5       	ldi	r30, 0x5B	; 91
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 62       	ori	r24, 0x20	; 32
     d98:	8c 93       	st	X, r24
}
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <MEXTI_VidSenseControl+0x6>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <MEXTI_VidSenseControl+0x8>
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	3c 83       	std	Y+4, r19	; 0x04
     db8:	2b 83       	std	Y+3, r18	; 0x03
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	91 05       	cpc	r25, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <MEXTI_VidSenseControl+0x26>
     dc4:	54 c0       	rjmp	.+168    	; 0xe6e <MEXTI_VidSenseControl+0xce>
     dc6:	2b 81       	ldd	r18, Y+3	; 0x03
     dc8:	3c 81       	ldd	r19, Y+4	; 0x04
     dca:	22 30       	cpi	r18, 0x02	; 2
     dcc:	31 05       	cpc	r19, r1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <MEXTI_VidSenseControl+0x32>
     dd0:	96 c0       	rjmp	.+300    	; 0xefe <MEXTI_VidSenseControl+0x15e>
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	09 f0       	breq	.+2      	; 0xddc <MEXTI_VidSenseControl+0x3c>
     dda:	a6 c0       	rjmp	.+332    	; 0xf28 <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	88 23       	and	r24, r24
     de0:	79 f4       	brne	.+30     	; 0xe00 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
     de2:	a5 e5       	ldi	r26, 0x55	; 85
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e5       	ldi	r30, 0x55	; 85
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8e 7f       	andi	r24, 0xFE	; 254
     dee:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
     df0:	a5 e5       	ldi	r26, 0x55	; 85
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e5       	ldi	r30, 0x55	; 85
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8d 7f       	andi	r24, 0xFD	; 253
     dfc:	8c 93       	st	X, r24
     dfe:	94 c0       	rjmp	.+296    	; 0xf28 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	79 f4       	brne	.+30     	; 0xe24 <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
     e06:	a5 e5       	ldi	r26, 0x55	; 85
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e5 e5       	ldi	r30, 0x55	; 85
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	81 60       	ori	r24, 0x01	; 1
     e12:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
     e14:	a5 e5       	ldi	r26, 0x55	; 85
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e5       	ldi	r30, 0x55	; 85
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8d 7f       	andi	r24, 0xFD	; 253
     e20:	8c 93       	st	X, r24
     e22:	82 c0       	rjmp	.+260    	; 0xf28 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	79 f4       	brne	.+30     	; 0xe48 <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
     e2a:	a5 e5       	ldi	r26, 0x55	; 85
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e5       	ldi	r30, 0x55	; 85
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8e 7f       	andi	r24, 0xFE	; 254
     e36:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
     e38:	a5 e5       	ldi	r26, 0x55	; 85
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e5       	ldi	r30, 0x55	; 85
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	8c 93       	st	X, r24
     e46:	70 c0       	rjmp	.+224    	; 0xf28 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	09 f0       	breq	.+2      	; 0xe50 <MEXTI_VidSenseControl+0xb0>
     e4e:	6c c0       	rjmp	.+216    	; 0xf28 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
     e50:	a5 e5       	ldi	r26, 0x55	; 85
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e5 e5       	ldi	r30, 0x55	; 85
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	81 60       	ori	r24, 0x01	; 1
     e5c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
     e5e:	a5 e5       	ldi	r26, 0x55	; 85
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e5 e5       	ldi	r30, 0x55	; 85
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	8c 93       	st	X, r24
     e6c:	5d c0       	rjmp	.+186    	; 0xf28 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	88 23       	and	r24, r24
     e72:	79 f4       	brne	.+30     	; 0xe92 <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
     e74:	a5 e5       	ldi	r26, 0x55	; 85
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e5 e5       	ldi	r30, 0x55	; 85
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8b 7f       	andi	r24, 0xFB	; 251
     e80:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
     e82:	a5 e5       	ldi	r26, 0x55	; 85
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e5       	ldi	r30, 0x55	; 85
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	87 7f       	andi	r24, 0xF7	; 247
     e8e:	8c 93       	st	X, r24
     e90:	4b c0       	rjmp	.+150    	; 0xf28 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	79 f4       	brne	.+30     	; 0xeb6 <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
     e98:	a5 e5       	ldi	r26, 0x55	; 85
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e5       	ldi	r30, 0x55	; 85
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	84 60       	ori	r24, 0x04	; 4
     ea4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
     ea6:	a5 e5       	ldi	r26, 0x55	; 85
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e5       	ldi	r30, 0x55	; 85
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	87 7f       	andi	r24, 0xF7	; 247
     eb2:	8c 93       	st	X, r24
     eb4:	39 c0       	rjmp	.+114    	; 0xf28 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	79 f4       	brne	.+30     	; 0xeda <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
     ebc:	a5 e5       	ldi	r26, 0x55	; 85
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e5 e5       	ldi	r30, 0x55	; 85
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8b 7f       	andi	r24, 0xFB	; 251
     ec8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
     eca:	a5 e5       	ldi	r26, 0x55	; 85
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e5 e5       	ldi	r30, 0x55	; 85
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 60       	ori	r24, 0x08	; 8
     ed6:	8c 93       	st	X, r24
     ed8:	27 c0       	rjmp	.+78     	; 0xf28 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	21 f5       	brne	.+72     	; 0xf28 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
     ee0:	a5 e5       	ldi	r26, 0x55	; 85
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e5 e5       	ldi	r30, 0x55	; 85
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	84 60       	ori	r24, 0x04	; 4
     eec:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
     eee:	a5 e5       	ldi	r26, 0x55	; 85
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e5 e5       	ldi	r30, 0x55	; 85
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	8c 93       	st	X, r24
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	41 f4       	brne	.+16     	; 0xf14 <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
     f04:	a4 e5       	ldi	r26, 0x54	; 84
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e4 e5       	ldi	r30, 0x54	; 84
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8f 7b       	andi	r24, 0xBF	; 191
     f10:	8c 93       	st	X, r24
     f12:	0a c0       	rjmp	.+20     	; 0xf28 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	39 f4       	brne	.+14     	; 0xf28 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
     f1a:	a4 e5       	ldi	r26, 0x54	; 84
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e4 e5       	ldi	r30, 0x54	; 84
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 64       	ori	r24, 0x40	; 64
     f26:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <MDIO_Error_State_SetPinDirection+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <MDIO_Error_State_SetPinDirection+0x8>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <MDIO_Error_State_SetPinDirection+0xa>
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	6b 83       	std	Y+3, r22	; 0x03
     f48:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	08 f0       	brcs	.+2      	; 0xf56 <MDIO_Error_State_SetPinDirection+0x20>
     f54:	e8 c0       	rjmp	.+464    	; 0x1126 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3e 83       	std	Y+6, r19	; 0x06
     f5e:	2d 83       	std	Y+5, r18	; 0x05
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <MDIO_Error_State_SetPinDirection+0x36>
     f6a:	48 c0       	rjmp	.+144    	; 0xffc <MDIO_Error_State_SetPinDirection+0xc6>
     f6c:	2d 81       	ldd	r18, Y+5	; 0x05
     f6e:	3e 81       	ldd	r19, Y+6	; 0x06
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	2c f4       	brge	.+10     	; 0xf80 <MDIO_Error_State_SetPinDirection+0x4a>
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	71 f0       	breq	.+28     	; 0xf9a <MDIO_Error_State_SetPinDirection+0x64>
     f7e:	d1 c0       	rjmp	.+418    	; 0x1122 <MDIO_Error_State_SetPinDirection+0x1ec>
     f80:	2d 81       	ldd	r18, Y+5	; 0x05
     f82:	3e 81       	ldd	r19, Y+6	; 0x06
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	09 f4       	brne	.+2      	; 0xf8c <MDIO_Error_State_SetPinDirection+0x56>
     f8a:	69 c0       	rjmp	.+210    	; 0x105e <MDIO_Error_State_SetPinDirection+0x128>
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	9e 81       	ldd	r25, Y+6	; 0x06
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <MDIO_Error_State_SetPinDirection+0x62>
     f96:	94 c0       	rjmp	.+296    	; 0x10c0 <MDIO_Error_State_SetPinDirection+0x18a>
     f98:	c4 c0       	rjmp	.+392    	; 0x1122 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
     fa0:	aa e3       	ldi	r26, 0x3A	; 58
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	ea e3       	ldi	r30, 0x3A	; 58
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <MDIO_Error_State_SetPinDirection+0x88>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <MDIO_Error_State_SetPinDirection+0x84>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	b0 c0       	rjmp	.+352    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	88 23       	and	r24, r24
     fcc:	a9 f4       	brne	.+42     	; 0xff8 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
     fce:	aa e3       	ldi	r26, 0x3A	; 58
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ea e3       	ldi	r30, 0x3A	; 58
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <MDIO_Error_State_SetPinDirection+0xb6>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <MDIO_Error_State_SetPinDirection+0xb2>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	98 c0       	rjmp	.+304    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     ff8:	19 82       	std	Y+1, r1	; 0x01
     ffa:	96 c0       	rjmp	.+300    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	a1 f4       	brne	.+40     	; 0x102a <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    1002:	a7 e3       	ldi	r26, 0x37	; 55
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e7 e3       	ldi	r30, 0x37	; 55
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <MDIO_Error_State_SetPinDirection+0xea>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <MDIO_Error_State_SetPinDirection+0xe6>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	7f c0       	rjmp	.+254    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	88 23       	and	r24, r24
    102e:	a9 f4       	brne	.+42     	; 0x105a <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <MDIO_Error_State_SetPinDirection+0x118>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <MDIO_Error_State_SetPinDirection+0x114>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	67 c0       	rjmp	.+206    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	65 c0       	rjmp	.+202    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1064:	a4 e3       	ldi	r26, 0x34	; 52
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e4 e3       	ldi	r30, 0x34	; 52
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <MDIO_Error_State_SetPinDirection+0x14c>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <MDIO_Error_State_SetPinDirection+0x148>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	4e c0       	rjmp	.+156    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	88 23       	and	r24, r24
    1090:	a9 f4       	brne	.+42     	; 0x10bc <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    1092:	a4 e3       	ldi	r26, 0x34	; 52
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e4 e3       	ldi	r30, 0x34	; 52
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <MDIO_Error_State_SetPinDirection+0x17a>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <MDIO_Error_State_SetPinDirection+0x176>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	36 c0       	rjmp	.+108    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    10bc:	19 82       	std	Y+1, r1	; 0x01
    10be:	34 c0       	rjmp	.+104    	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    10c6:	a1 e3       	ldi	r26, 0x31	; 49
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e1 e3       	ldi	r30, 0x31	; 49
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1ae>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <MDIO_Error_State_SetPinDirection+0x1aa>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	1d c0       	rjmp	.+58     	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	88 23       	and	r24, r24
    10f2:	a9 f4       	brne	.+42     	; 0x111e <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    10f4:	a1 e3       	ldi	r26, 0x31	; 49
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e1 e3       	ldi	r30, 0x31	; 49
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <MDIO_Error_State_SetPinDirection+0x1dc>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <MDIO_Error_State_SetPinDirection+0x1d8>
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	05 c0       	rjmp	.+10     	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    111e:	19 82       	std	Y+1, r1	; 0x01
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    1122:	19 82       	std	Y+1, r1	; 0x01
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1126:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    1128:	89 81       	ldd	r24, Y+1	; 0x01

}
    112a:	26 96       	adiw	r28, 0x06	; 6
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <MDIO_Error_State_SetPortDirection+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <MDIO_Error_State_SetPortDirection+0x8>
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	8f 3f       	cpi	r24, 0xFF	; 255
    1156:	19 f0       	breq	.+6      	; 0x115e <MDIO_Error_State_SetPortDirection+0x22>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 23       	and	r24, r24
    115c:	a9 f5       	brne	.+106    	; 0x11c8 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3d 83       	std	Y+5, r19	; 0x05
    1166:	2c 83       	std	Y+4, r18	; 0x04
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	d1 f0       	breq	.+52     	; 0x11a6 <MDIO_Error_State_SetPortDirection+0x6a>
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	3d 81       	ldd	r19, Y+5	; 0x05
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <MDIO_Error_State_SetPortDirection+0x4a>
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	61 f0       	breq	.+24     	; 0x119c <MDIO_Error_State_SetPortDirection+0x60>
    1184:	1f c0       	rjmp	.+62     	; 0x11c4 <MDIO_Error_State_SetPortDirection+0x88>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <MDIO_Error_State_SetPortDirection+0x74>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	81 f0       	breq	.+32     	; 0x11ba <MDIO_Error_State_SetPortDirection+0x7e>
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    119c:	ea e3       	ldi	r30, 0x3A	; 58
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	80 83       	st	Z, r24
    11a4:	12 c0       	rjmp	.+36     	; 0x11ca <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    11a6:	e7 e3       	ldi	r30, 0x37	; 55
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	80 83       	st	Z, r24
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    11b0:	e4 e3       	ldi	r30, 0x34	; 52
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	80 83       	st	Z, r24
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	80 83       	st	Z, r24
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    11c4:	19 82       	std	Y+1, r1	; 0x01
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    11c8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <MDIO_Error_State_SetPinValue+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <MDIO_Error_State_SetPinValue+0x8>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <MDIO_Error_State_SetPinValue+0xa>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	6b 83       	std	Y+3, r22	; 0x03
    11ee:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	88 30       	cpi	r24, 0x08	; 8
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <MDIO_Error_State_SetPinValue+0x20>
    11fa:	e8 c0       	rjmp	.+464    	; 0x13cc <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3e 83       	std	Y+6, r19	; 0x06
    1204:	2d 83       	std	Y+5, r18	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <MDIO_Error_State_SetPinValue+0x36>
    1210:	48 c0       	rjmp	.+144    	; 0x12a2 <MDIO_Error_State_SetPinValue+0xc6>
    1212:	2d 81       	ldd	r18, Y+5	; 0x05
    1214:	3e 81       	ldd	r19, Y+6	; 0x06
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <MDIO_Error_State_SetPinValue+0x4a>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	71 f0       	breq	.+28     	; 0x1240 <MDIO_Error_State_SetPinValue+0x64>
    1224:	d1 c0       	rjmp	.+418    	; 0x13c8 <MDIO_Error_State_SetPinValue+0x1ec>
    1226:	2d 81       	ldd	r18, Y+5	; 0x05
    1228:	3e 81       	ldd	r19, Y+6	; 0x06
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <MDIO_Error_State_SetPinValue+0x56>
    1230:	69 c0       	rjmp	.+210    	; 0x1304 <MDIO_Error_State_SetPinValue+0x128>
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <MDIO_Error_State_SetPinValue+0x62>
    123c:	94 c0       	rjmp	.+296    	; 0x1366 <MDIO_Error_State_SetPinValue+0x18a>
    123e:	c4 c0       	rjmp	.+392    	; 0x13c8 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	a1 f4       	brne	.+40     	; 0x126e <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    1246:	ab e3       	ldi	r26, 0x3B	; 59
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <MDIO_Error_State_SetPinValue+0x88>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <MDIO_Error_State_SetPinValue+0x84>
    1268:	84 2b       	or	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	b0 c0       	rjmp	.+352    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	88 23       	and	r24, r24
    1272:	a9 f4       	brne	.+42     	; 0x129e <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1274:	ab e3       	ldi	r26, 0x3B	; 59
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb e3       	ldi	r30, 0x3B	; 59
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <MDIO_Error_State_SetPinValue+0xb6>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <MDIO_Error_State_SetPinValue+0xb2>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	98 c0       	rjmp	.+304    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    129e:	19 82       	std	Y+1, r1	; 0x01
    12a0:	96 c0       	rjmp	.+300    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	a1 f4       	brne	.+40     	; 0x12d0 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    12a8:	a8 e3       	ldi	r26, 0x38	; 56
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <MDIO_Error_State_SetPinValue+0xea>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <MDIO_Error_State_SetPinValue+0xe6>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	7f c0       	rjmp	.+254    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	88 23       	and	r24, r24
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    12d6:	a8 e3       	ldi	r26, 0x38	; 56
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e8 e3       	ldi	r30, 0x38	; 56
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <MDIO_Error_State_SetPinValue+0x118>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <MDIO_Error_State_SetPinValue+0x114>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	67 c0       	rjmp	.+206    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1300:	19 82       	std	Y+1, r1	; 0x01
    1302:	65 c0       	rjmp	.+202    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	a1 f4       	brne	.+40     	; 0x1332 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    130a:	a5 e3       	ldi	r26, 0x35	; 53
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e5 e3       	ldi	r30, 0x35	; 53
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <MDIO_Error_State_SetPinValue+0x14c>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <MDIO_Error_State_SetPinValue+0x148>
    132c:	84 2b       	or	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	4e c0       	rjmp	.+156    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	88 23       	and	r24, r24
    1336:	a9 f4       	brne	.+42     	; 0x1362 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    1338:	a5 e3       	ldi	r26, 0x35	; 53
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <MDIO_Error_State_SetPinValue+0x17a>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <MDIO_Error_State_SetPinValue+0x176>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	36 c0       	rjmp	.+108    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1362:	19 82       	std	Y+1, r1	; 0x01
    1364:	34 c0       	rjmp	.+104    	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	a1 f4       	brne	.+40     	; 0x1394 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    136c:	a2 e3       	ldi	r26, 0x32	; 50
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e2 e3       	ldi	r30, 0x32	; 50
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <MDIO_Error_State_SetPinValue+0x1ae>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <MDIO_Error_State_SetPinValue+0x1aa>
    138e:	84 2b       	or	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	1d c0       	rjmp	.+58     	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	88 23       	and	r24, r24
    1398:	a9 f4       	brne	.+42     	; 0x13c4 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    139a:	a2 e3       	ldi	r26, 0x32	; 50
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e2 e3       	ldi	r30, 0x32	; 50
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <MDIO_Error_State_SetPinValue+0x1dc>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <MDIO_Error_State_SetPinValue+0x1d8>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    13c4:	19 82       	std	Y+1, r1	; 0x01
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    13cc:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01

}
    13d0:	26 96       	adiw	r28, 0x06	; 6
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <MDIO_Error_State_SetPortValue+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <MDIO_Error_State_SetPortValue+0x8>
    13ea:	0f 92       	push	r0
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3d 83       	std	Y+5, r19	; 0x05
    1400:	2c 83       	std	Y+4, r18	; 0x04
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	d1 f0       	breq	.+52     	; 0x1440 <MDIO_Error_State_SetPortValue+0x5e>
    140c:	2c 81       	ldd	r18, Y+4	; 0x04
    140e:	3d 81       	ldd	r19, Y+5	; 0x05
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	2c f4       	brge	.+10     	; 0x1420 <MDIO_Error_State_SetPortValue+0x3e>
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	61 f0       	breq	.+24     	; 0x1436 <MDIO_Error_State_SetPortValue+0x54>
    141e:	1f c0       	rjmp	.+62     	; 0x145e <MDIO_Error_State_SetPortValue+0x7c>
    1420:	2c 81       	ldd	r18, Y+4	; 0x04
    1422:	3d 81       	ldd	r19, Y+5	; 0x05
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	81 f0       	breq	.+32     	; 0x144a <MDIO_Error_State_SetPortValue+0x68>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	91 05       	cpc	r25, r1
    1432:	81 f0       	breq	.+32     	; 0x1454 <MDIO_Error_State_SetPortValue+0x72>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1436:	eb e3       	ldi	r30, 0x3B	; 59
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	80 83       	st	Z, r24
    143e:	10 c0       	rjmp	.+32     	; 0x1460 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    1440:	e8 e3       	ldi	r30, 0x38	; 56
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	80 83       	st	Z, r24
    1448:	0b c0       	rjmp	.+22     	; 0x1460 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    144a:	e5 e3       	ldi	r30, 0x35	; 53
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	80 83       	st	Z, r24
    1452:	06 c0       	rjmp	.+12     	; 0x1460 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	80 83       	st	Z, r24
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    145e:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1460:	89 81       	ldd	r24, Y+1	; 0x01
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	27 97       	sbiw	r28, 0x07	; 7
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	6b 83       	std	Y+3, r22	; 0x03
    148a:	5d 83       	std	Y+5, r21	; 0x05
    148c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	88 30       	cpi	r24, 0x08	; 8
    1496:	08 f0       	brcs	.+2      	; 0x149a <MDIO_Error_State_GetPinValue+0x28>
    1498:	79 c0       	rjmp	.+242    	; 0x158c <MDIO_Error_State_GetPinValue+0x11a>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <MDIO_Error_State_GetPinValue+0x34>
    14a4:	73 c0       	rjmp	.+230    	; 0x158c <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3f 83       	std	Y+7, r19	; 0x07
    14ae:	2e 83       	std	Y+6, r18	; 0x06
    14b0:	4e 81       	ldd	r20, Y+6	; 0x06
    14b2:	5f 81       	ldd	r21, Y+7	; 0x07
    14b4:	41 30       	cpi	r20, 0x01	; 1
    14b6:	51 05       	cpc	r21, r1
    14b8:	59 f1       	breq	.+86     	; 0x1510 <MDIO_Error_State_GetPinValue+0x9e>
    14ba:	8e 81       	ldd	r24, Y+6	; 0x06
    14bc:	9f 81       	ldd	r25, Y+7	; 0x07
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	91 05       	cpc	r25, r1
    14c2:	34 f4       	brge	.+12     	; 0x14d0 <MDIO_Error_State_GetPinValue+0x5e>
    14c4:	2e 81       	ldd	r18, Y+6	; 0x06
    14c6:	3f 81       	ldd	r19, Y+7	; 0x07
    14c8:	21 15       	cp	r18, r1
    14ca:	31 05       	cpc	r19, r1
    14cc:	69 f0       	breq	.+26     	; 0x14e8 <MDIO_Error_State_GetPinValue+0x76>
    14ce:	5c c0       	rjmp	.+184    	; 0x1588 <MDIO_Error_State_GetPinValue+0x116>
    14d0:	4e 81       	ldd	r20, Y+6	; 0x06
    14d2:	5f 81       	ldd	r21, Y+7	; 0x07
    14d4:	42 30       	cpi	r20, 0x02	; 2
    14d6:	51 05       	cpc	r21, r1
    14d8:	79 f1       	breq	.+94     	; 0x1538 <MDIO_Error_State_GetPinValue+0xc6>
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	9f 81       	ldd	r25, Y+7	; 0x07
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <MDIO_Error_State_GetPinValue+0x74>
    14e4:	3d c0       	rjmp	.+122    	; 0x1560 <MDIO_Error_State_GetPinValue+0xee>
    14e6:	50 c0       	rjmp	.+160    	; 0x1588 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    14e8:	e9 e3       	ldi	r30, 0x39	; 57
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <MDIO_Error_State_GetPinValue+0x8e>
    14fc:	55 95       	asr	r21
    14fe:	47 95       	ror	r20
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <MDIO_Error_State_GetPinValue+0x8a>
    1504:	ca 01       	movw	r24, r20
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	ec 81       	ldd	r30, Y+4	; 0x04
    150a:	fd 81       	ldd	r31, Y+5	; 0x05
    150c:	80 83       	st	Z, r24
    150e:	3f c0       	rjmp	.+126    	; 0x158e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1510:	e6 e3       	ldi	r30, 0x36	; 54
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a9 01       	movw	r20, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <MDIO_Error_State_GetPinValue+0xb6>
    1524:	55 95       	asr	r21
    1526:	47 95       	ror	r20
    1528:	8a 95       	dec	r24
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <MDIO_Error_State_GetPinValue+0xb2>
    152c:	ca 01       	movw	r24, r20
    152e:	81 70       	andi	r24, 0x01	; 1
    1530:	ec 81       	ldd	r30, Y+4	; 0x04
    1532:	fd 81       	ldd	r31, Y+5	; 0x05
    1534:	80 83       	st	Z, r24
    1536:	2b c0       	rjmp	.+86     	; 0x158e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1538:	e3 e3       	ldi	r30, 0x33	; 51
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a9 01       	movw	r20, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <MDIO_Error_State_GetPinValue+0xde>
    154c:	55 95       	asr	r21
    154e:	47 95       	ror	r20
    1550:	8a 95       	dec	r24
    1552:	e2 f7       	brpl	.-8      	; 0x154c <MDIO_Error_State_GetPinValue+0xda>
    1554:	ca 01       	movw	r24, r20
    1556:	81 70       	andi	r24, 0x01	; 1
    1558:	ec 81       	ldd	r30, Y+4	; 0x04
    155a:	fd 81       	ldd	r31, Y+5	; 0x05
    155c:	80 83       	st	Z, r24
    155e:	17 c0       	rjmp	.+46     	; 0x158e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1560:	e0 e3       	ldi	r30, 0x30	; 48
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a9 01       	movw	r20, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <MDIO_Error_State_GetPinValue+0x106>
    1574:	55 95       	asr	r21
    1576:	47 95       	ror	r20
    1578:	8a 95       	dec	r24
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <MDIO_Error_State_GetPinValue+0x102>
    157c:	ca 01       	movw	r24, r20
    157e:	81 70       	andi	r24, 0x01	; 1
    1580:	ec 81       	ldd	r30, Y+4	; 0x04
    1582:	fd 81       	ldd	r31, Y+5	; 0x05
    1584:	80 83       	st	Z, r24
    1586:	03 c0       	rjmp	.+6      	; 0x158e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1588:	19 82       	std	Y+1, r1	; 0x01
    158a:	01 c0       	rjmp	.+2      	; 0x158e <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    158c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    158e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1590:	27 96       	adiw	r28, 0x07	; 7
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <MDIO_Error_State_SetNippleValue+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <MDIO_Error_State_SetNippleValue+0x8>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <MDIO_Error_State_SetNippleValue+0xa>
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	6b 83       	std	Y+3, r22	; 0x03
    15b4:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	85 30       	cpi	r24, 0x05	; 5
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <MDIO_Error_State_SetNippleValue+0x20>
    15c0:	c9 c0       	rjmp	.+402    	; 0x1754 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3e 83       	std	Y+6, r19	; 0x06
    15ca:	2d 83       	std	Y+5, r18	; 0x05
    15cc:	6d 81       	ldd	r22, Y+5	; 0x05
    15ce:	7e 81       	ldd	r23, Y+6	; 0x06
    15d0:	61 30       	cpi	r22, 0x01	; 1
    15d2:	71 05       	cpc	r23, r1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <MDIO_Error_State_SetNippleValue+0x36>
    15d6:	41 c0       	rjmp	.+130    	; 0x165a <MDIO_Error_State_SetNippleValue+0xb8>
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	91 05       	cpc	r25, r1
    15e0:	34 f4       	brge	.+12     	; 0x15ee <MDIO_Error_State_SetNippleValue+0x4c>
    15e2:	2d 81       	ldd	r18, Y+5	; 0x05
    15e4:	3e 81       	ldd	r19, Y+6	; 0x06
    15e6:	21 15       	cp	r18, r1
    15e8:	31 05       	cpc	r19, r1
    15ea:	71 f0       	breq	.+28     	; 0x1608 <MDIO_Error_State_SetNippleValue+0x66>
    15ec:	b1 c0       	rjmp	.+354    	; 0x1750 <MDIO_Error_State_SetNippleValue+0x1ae>
    15ee:	6d 81       	ldd	r22, Y+5	; 0x05
    15f0:	7e 81       	ldd	r23, Y+6	; 0x06
    15f2:	62 30       	cpi	r22, 0x02	; 2
    15f4:	71 05       	cpc	r23, r1
    15f6:	09 f4       	brne	.+2      	; 0x15fa <MDIO_Error_State_SetNippleValue+0x58>
    15f8:	59 c0       	rjmp	.+178    	; 0x16ac <MDIO_Error_State_SetNippleValue+0x10a>
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	91 05       	cpc	r25, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <MDIO_Error_State_SetNippleValue+0x64>
    1604:	7c c0       	rjmp	.+248    	; 0x16fe <MDIO_Error_State_SetNippleValue+0x15c>
    1606:	a4 c0       	rjmp	.+328    	; 0x1750 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1608:	ab e3       	ldi	r26, 0x3B	; 59
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	eb e3       	ldi	r30, 0x3B	; 59
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8f e0       	ldi	r24, 0x0F	; 15
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <MDIO_Error_State_SetNippleValue+0x82>
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	2a 95       	dec	r18
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <MDIO_Error_State_SetNippleValue+0x7e>
    1628:	80 95       	com	r24
    162a:	84 23       	and	r24, r20
    162c:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    162e:	ab e3       	ldi	r26, 0x3B	; 59
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	b9 01       	movw	r22, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <MDIO_Error_State_SetNippleValue+0xac>
    164a:	66 0f       	add	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	8a 95       	dec	r24
    1650:	e2 f7       	brpl	.-8      	; 0x164a <MDIO_Error_State_SetNippleValue+0xa8>
    1652:	cb 01       	movw	r24, r22
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	7e c0       	rjmp	.+252    	; 0x1756 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    165a:	a8 e3       	ldi	r26, 0x38	; 56
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e8 e3       	ldi	r30, 0x38	; 56
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	8f e0       	ldi	r24, 0x0F	; 15
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <MDIO_Error_State_SetNippleValue+0xd4>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	2a 95       	dec	r18
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <MDIO_Error_State_SetNippleValue+0xd0>
    167a:	80 95       	com	r24
    167c:	84 23       	and	r24, r20
    167e:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1680:	a8 e3       	ldi	r26, 0x38	; 56
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	b9 01       	movw	r22, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <MDIO_Error_State_SetNippleValue+0xfe>
    169c:	66 0f       	add	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	8a 95       	dec	r24
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <MDIO_Error_State_SetNippleValue+0xfa>
    16a4:	cb 01       	movw	r24, r22
    16a6:	84 2b       	or	r24, r20
    16a8:	8c 93       	st	X, r24
    16aa:	55 c0       	rjmp	.+170    	; 0x1756 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    16ac:	a5 e3       	ldi	r26, 0x35	; 53
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e3       	ldi	r30, 0x35	; 53
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	8f e0       	ldi	r24, 0x0F	; 15
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <MDIO_Error_State_SetNippleValue+0x126>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	2a 95       	dec	r18
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <MDIO_Error_State_SetNippleValue+0x122>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    16d2:	a5 e3       	ldi	r26, 0x35	; 53
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e3       	ldi	r30, 0x35	; 53
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	b9 01       	movw	r22, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <MDIO_Error_State_SetNippleValue+0x150>
    16ee:	66 0f       	add	r22, r22
    16f0:	77 1f       	adc	r23, r23
    16f2:	8a 95       	dec	r24
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <MDIO_Error_State_SetNippleValue+0x14c>
    16f6:	cb 01       	movw	r24, r22
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	2c c0       	rjmp	.+88     	; 0x1756 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    16fe:	a2 e3       	ldi	r26, 0x32	; 50
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e2 e3       	ldi	r30, 0x32	; 50
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	8f e0       	ldi	r24, 0x0F	; 15
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 c0       	rjmp	.+4      	; 0x171a <MDIO_Error_State_SetNippleValue+0x178>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	2a 95       	dec	r18
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <MDIO_Error_State_SetNippleValue+0x174>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1724:	a2 e3       	ldi	r26, 0x32	; 50
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e2 e3       	ldi	r30, 0x32	; 50
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	b9 01       	movw	r22, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <MDIO_Error_State_SetNippleValue+0x1a2>
    1740:	66 0f       	add	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	8a 95       	dec	r24
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <MDIO_Error_State_SetNippleValue+0x19e>
    1748:	cb 01       	movw	r24, r22
    174a:	84 2b       	or	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1750:	19 82       	std	Y+1, r1	; 0x01
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1754:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
}
    1758:	26 96       	adiw	r28, 0x06	; 6
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <MDIO_VidActivePullUP+0x6>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	6a 81       	ldd	r22, Y+2	; 0x02
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	6a 81       	ldd	r22, Y+2	; 0x02
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>

}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <HSWITCH_VidInit_PullUP+0x6>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    17a4:	e9 81       	ldd	r30, Y+1	; 0x01
    17a6:	fa 81       	ldd	r31, Y+2	; 0x02
    17a8:	81 81       	ldd	r24, Z+1	; 0x01
    17aa:	e9 81       	ldd	r30, Y+1	; 0x01
    17ac:	fa 81       	ldd	r31, Y+2	; 0x02
    17ae:	90 81       	ld	r25, Z
    17b0:	69 2f       	mov	r22, r25
    17b2:	0e 94 b5 0b 	call	0x176a	; 0x176a <MDIO_VidActivePullUP>
}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <HSWITCH_u8SwitchState+0x6>
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	9b 83       	std	Y+3, r25	; 0x03
    17ce:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    17d4:	ea 81       	ldd	r30, Y+2	; 0x02
    17d6:	fb 81       	ldd	r31, Y+3	; 0x03
    17d8:	81 81       	ldd	r24, Z+1	; 0x01
    17da:	ea 81       	ldd	r30, Y+2	; 0x02
    17dc:	fb 81       	ldd	r31, Y+3	; 0x03
    17de:	90 81       	ld	r25, Z
    17e0:	69 2f       	mov	r22, r25
    17e2:	9e 01       	movw	r18, r28
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	a9 01       	movw	r20, r18
    17ea:	0e 94 39 0a 	call	0x1472	; 0x1472 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <HSEVEN_SEGMENT_VidInit+0x6>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	80 81       	ld	r24, Z
    1810:	6f ef       	ldi	r22, 0xFF	; 255
    1812:	0e 94 9e 08 	call	0x113c	; 0x113c <MDIO_Error_State_SetPortDirection>
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	00 d0       	rcall	.+0      	; 0x1826 <HSEVEN_SEGMENT_VidOff+0x6>
    1826:	0f 92       	push	r0
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1832:	e9 81       	ldd	r30, Y+1	; 0x01
    1834:	fa 81       	ldd	r31, Y+2	; 0x02
    1836:	81 81       	ldd	r24, Z+1	; 0x01
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	31 f4       	brne	.+12     	; 0x1848 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    183c:	e9 81       	ldd	r30, Y+1	; 0x01
    183e:	fa 81       	ldd	r31, Y+2	; 0x02
    1840:	80 81       	ld	r24, Z
    1842:	6b 81       	ldd	r22, Y+3	; 0x03
    1844:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	81 81       	ldd	r24, Z+1	; 0x01
    184e:	88 23       	and	r24, r24
    1850:	51 f4       	brne	.+20     	; 0x1866 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1852:	e9 81       	ldd	r30, Y+1	; 0x01
    1854:	fa 81       	ldd	r31, Y+2	; 0x02
    1856:	20 81       	ld	r18, Z
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	98 2f       	mov	r25, r24
    185c:	90 95       	com	r25
    185e:	82 2f       	mov	r24, r18
    1860:	69 2f       	mov	r22, r25
    1862:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
	}
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	27 97       	sbiw	r28, 0x07	; 7
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    188c:	e9 81       	ldd	r30, Y+1	; 0x01
    188e:	fa 81       	ldd	r31, Y+2	; 0x02
    1890:	81 81       	ldd	r24, Z+1	; 0x01
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	09 f0       	breq	.+2      	; 0x1898 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1896:	9b c0       	rjmp	.+310    	; 0x19ce <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3f 83       	std	Y+7, r19	; 0x07
    18a0:	2e 83       	std	Y+6, r18	; 0x06
    18a2:	8e 81       	ldd	r24, Y+6	; 0x06
    18a4:	9f 81       	ldd	r25, Y+7	; 0x07
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	91 05       	cpc	r25, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    18ac:	5f c0       	rjmp	.+190    	; 0x196c <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    18ae:	2e 81       	ldd	r18, Y+6	; 0x06
    18b0:	3f 81       	ldd	r19, Y+7	; 0x07
    18b2:	25 30       	cpi	r18, 0x05	; 5
    18b4:	31 05       	cpc	r19, r1
    18b6:	dc f4       	brge	.+54     	; 0x18ee <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    18b8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ba:	9f 81       	ldd	r25, Y+7	; 0x07
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    18c4:	2e 81       	ldd	r18, Y+6	; 0x06
    18c6:	3f 81       	ldd	r19, Y+7	; 0x07
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	9f 81       	ldd	r25, Y+7	; 0x07
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	79 f1       	breq	.+94     	; 0x1934 <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    18d6:	74 c0       	rjmp	.+232    	; 0x19c0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    18d8:	2e 81       	ldd	r18, Y+6	; 0x06
    18da:	3f 81       	ldd	r19, Y+7	; 0x07
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	b9 f1       	breq	.+110    	; 0x1950 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	9f 81       	ldd	r25, Y+7	; 0x07
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	c9 f1       	breq	.+114    	; 0x195e <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    18ec:	69 c0       	rjmp	.+210    	; 0x19c0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    18ee:	2e 81       	ldd	r18, Y+6	; 0x06
    18f0:	3f 81       	ldd	r19, Y+7	; 0x07
    18f2:	27 30       	cpi	r18, 0x07	; 7
    18f4:	31 05       	cpc	r19, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    18f8:	4e c0       	rjmp	.+156    	; 0x1996 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	9f 81       	ldd	r25, Y+7	; 0x07
    18fe:	88 30       	cpi	r24, 0x08	; 8
    1900:	91 05       	cpc	r25, r1
    1902:	5c f4       	brge	.+22     	; 0x191a <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1904:	2e 81       	ldd	r18, Y+6	; 0x06
    1906:	3f 81       	ldd	r19, Y+7	; 0x07
    1908:	25 30       	cpi	r18, 0x05	; 5
    190a:	31 05       	cpc	r19, r1
    190c:	b1 f1       	breq	.+108    	; 0x197a <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
    1910:	9f 81       	ldd	r25, Y+7	; 0x07
    1912:	86 30       	cpi	r24, 0x06	; 6
    1914:	91 05       	cpc	r25, r1
    1916:	c1 f1       	breq	.+112    	; 0x1988 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1918:	53 c0       	rjmp	.+166    	; 0x19c0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    191a:	2e 81       	ldd	r18, Y+6	; 0x06
    191c:	3f 81       	ldd	r19, Y+7	; 0x07
    191e:	28 30       	cpi	r18, 0x08	; 8
    1920:	31 05       	cpc	r19, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1924:	3f c0       	rjmp	.+126    	; 0x19a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1926:	8e 81       	ldd	r24, Y+6	; 0x06
    1928:	9f 81       	ldd	r25, Y+7	; 0x07
    192a:	89 30       	cpi	r24, 0x09	; 9
    192c:	91 05       	cpc	r25, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1930:	40 c0       	rjmp	.+128    	; 0x19b2 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1932:	46 c0       	rjmp	.+140    	; 0x19c0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1934:	e9 81       	ldd	r30, Y+1	; 0x01
    1936:	fa 81       	ldd	r31, Y+2	; 0x02
    1938:	80 81       	ld	r24, Z
    193a:	6f e3       	ldi	r22, 0x3F	; 63
    193c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1940:	e6 c0       	rjmp	.+460    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	80 81       	ld	r24, Z
    1948:	66 e0       	ldi	r22, 0x06	; 6
    194a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    194e:	df c0       	rjmp	.+446    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	80 81       	ld	r24, Z
    1956:	6b e5       	ldi	r22, 0x5B	; 91
    1958:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    195c:	d8 c0       	rjmp	.+432    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    195e:	e9 81       	ldd	r30, Y+1	; 0x01
    1960:	fa 81       	ldd	r31, Y+2	; 0x02
    1962:	80 81       	ld	r24, Z
    1964:	6f e4       	ldi	r22, 0x4F	; 79
    1966:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    196a:	d1 c0       	rjmp	.+418    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	80 81       	ld	r24, Z
    1972:	66 e6       	ldi	r22, 0x66	; 102
    1974:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1978:	ca c0       	rjmp	.+404    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    197a:	e9 81       	ldd	r30, Y+1	; 0x01
    197c:	fa 81       	ldd	r31, Y+2	; 0x02
    197e:	80 81       	ld	r24, Z
    1980:	6d e6       	ldi	r22, 0x6D	; 109
    1982:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1986:	c3 c0       	rjmp	.+390    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1988:	e9 81       	ldd	r30, Y+1	; 0x01
    198a:	fa 81       	ldd	r31, Y+2	; 0x02
    198c:	80 81       	ld	r24, Z
    198e:	6d e7       	ldi	r22, 0x7D	; 125
    1990:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1994:	bc c0       	rjmp	.+376    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	80 81       	ld	r24, Z
    199c:	67 e0       	ldi	r22, 0x07	; 7
    199e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    19a2:	b5 c0       	rjmp	.+362    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    19a4:	e9 81       	ldd	r30, Y+1	; 0x01
    19a6:	fa 81       	ldd	r31, Y+2	; 0x02
    19a8:	80 81       	ld	r24, Z
    19aa:	6f e7       	ldi	r22, 0x7F	; 127
    19ac:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    19b0:	ae c0       	rjmp	.+348    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	80 81       	ld	r24, Z
    19b8:	6f e6       	ldi	r22, 0x6F	; 111
    19ba:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    19be:	a7 c0       	rjmp	.+334    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    19c0:	e9 81       	ldd	r30, Y+1	; 0x01
    19c2:	fa 81       	ldd	r31, Y+2	; 0x02
    19c4:	80 81       	ld	r24, Z
    19c6:	69 e7       	ldi	r22, 0x79	; 121
    19c8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    19cc:	a0 c0       	rjmp	.+320    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    19ce:	e9 81       	ldd	r30, Y+1	; 0x01
    19d0:	fa 81       	ldd	r31, Y+2	; 0x02
    19d2:	81 81       	ldd	r24, Z+1	; 0x01
    19d4:	88 23       	and	r24, r24
    19d6:	09 f0       	breq	.+2      	; 0x19da <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    19d8:	9a c0       	rjmp	.+308    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	3d 83       	std	Y+5, r19	; 0x05
    19e2:	2c 83       	std	Y+4, r18	; 0x04
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9d 81       	ldd	r25, Y+5	; 0x05
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	91 05       	cpc	r25, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    19ee:	5f c0       	rjmp	.+190    	; 0x1aae <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    19f0:	2c 81       	ldd	r18, Y+4	; 0x04
    19f2:	3d 81       	ldd	r19, Y+5	; 0x05
    19f4:	25 30       	cpi	r18, 0x05	; 5
    19f6:	31 05       	cpc	r19, r1
    19f8:	dc f4       	brge	.+54     	; 0x1a30 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    1a06:	2c 81       	ldd	r18, Y+4	; 0x04
    1a08:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	9d 81       	ldd	r25, Y+5	; 0x05
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	79 f1       	breq	.+94     	; 0x1a76 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1a18:	74 c0       	rjmp	.+232    	; 0x1b02 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1a1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1e:	22 30       	cpi	r18, 0x02	; 2
    1a20:	31 05       	cpc	r19, r1
    1a22:	b9 f1       	breq	.+110    	; 0x1a92 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	c9 f1       	breq	.+114    	; 0x1aa0 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    1a2e:	69 c0       	rjmp	.+210    	; 0x1b02 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1a30:	2c 81       	ldd	r18, Y+4	; 0x04
    1a32:	3d 81       	ldd	r19, Y+5	; 0x05
    1a34:	27 30       	cpi	r18, 0x07	; 7
    1a36:	31 05       	cpc	r19, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    1a3a:	4e c0       	rjmp	.+156    	; 0x1ad8 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	91 05       	cpc	r25, r1
    1a44:	5c f4       	brge	.+22     	; 0x1a5c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    1a46:	2c 81       	ldd	r18, Y+4	; 0x04
    1a48:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4a:	25 30       	cpi	r18, 0x05	; 5
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	b1 f1       	breq	.+108    	; 0x1abc <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	86 30       	cpi	r24, 0x06	; 6
    1a56:	91 05       	cpc	r25, r1
    1a58:	c1 f1       	breq	.+112    	; 0x1aca <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    1a5a:	53 c0       	rjmp	.+166    	; 0x1b02 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a60:	28 30       	cpi	r18, 0x08	; 8
    1a62:	31 05       	cpc	r19, r1
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	89 30       	cpi	r24, 0x09	; 9
    1a6e:	91 05       	cpc	r25, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    1a72:	40 c0       	rjmp	.+128    	; 0x1af4 <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    1a74:	46 c0       	rjmp	.+140    	; 0x1b02 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	80 81       	ld	r24, Z
    1a7c:	60 ec       	ldi	r22, 0xC0	; 192
    1a7e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1a82:	45 c0       	rjmp	.+138    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    1a84:	e9 81       	ldd	r30, Y+1	; 0x01
    1a86:	fa 81       	ldd	r31, Y+2	; 0x02
    1a88:	80 81       	ld	r24, Z
    1a8a:	69 ef       	ldi	r22, 0xF9	; 249
    1a8c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1a90:	3e c0       	rjmp	.+124    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    1a92:	e9 81       	ldd	r30, Y+1	; 0x01
    1a94:	fa 81       	ldd	r31, Y+2	; 0x02
    1a96:	80 81       	ld	r24, Z
    1a98:	64 ea       	ldi	r22, 0xA4	; 164
    1a9a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1a9e:	37 c0       	rjmp	.+110    	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    1aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa4:	80 81       	ld	r24, Z
    1aa6:	60 eb       	ldi	r22, 0xB0	; 176
    1aa8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1aac:	30 c0       	rjmp	.+96     	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	80 81       	ld	r24, Z
    1ab4:	69 e9       	ldi	r22, 0x99	; 153
    1ab6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1aba:	29 c0       	rjmp	.+82     	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    1abc:	e9 81       	ldd	r30, Y+1	; 0x01
    1abe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac0:	80 81       	ld	r24, Z
    1ac2:	62 e9       	ldi	r22, 0x92	; 146
    1ac4:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1ac8:	22 c0       	rjmp	.+68     	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	80 81       	ld	r24, Z
    1ad0:	62 e8       	ldi	r22, 0x82	; 130
    1ad2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1ad6:	1b c0       	rjmp	.+54     	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    1ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ada:	fa 81       	ldd	r31, Y+2	; 0x02
    1adc:	80 81       	ld	r24, Z
    1ade:	68 ef       	ldi	r22, 0xF8	; 248
    1ae0:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	80 81       	ld	r24, Z
    1aec:	60 e8       	ldi	r22, 0x80	; 128
    1aee:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1af2:	0d c0       	rjmp	.+26     	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    1af4:	e9 81       	ldd	r30, Y+1	; 0x01
    1af6:	fa 81       	ldd	r31, Y+2	; 0x02
    1af8:	80 81       	ld	r24, Z
    1afa:	60 e9       	ldi	r22, 0x90	; 144
    1afc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    1b02:	e9 81       	ldd	r30, Y+1	; 0x01
    1b04:	fa 81       	ldd	r31, Y+2	; 0x02
    1b06:	80 81       	ld	r24, Z
    1b08:	66 e8       	ldi	r22, 0x86	; 134
    1b0a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
	}
}
}
    1b0e:	27 96       	adiw	r28, 0x07	; 7
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <HLED_VidInit+0x6>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	81 81       	ldd	r24, Z+1	; 0x01
    1b34:	e9 81       	ldd	r30, Y+1	; 0x01
    1b36:	fa 81       	ldd	r31, Y+2	; 0x02
    1b38:	90 81       	ld	r25, Z
    1b3a:	69 2f       	mov	r22, r25
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <HLED_VidLed_On+0x6>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5e:	81 81       	ldd	r24, Z+1	; 0x01
    1b60:	e9 81       	ldd	r30, Y+1	; 0x01
    1b62:	fa 81       	ldd	r31, Y+2	; 0x02
    1b64:	90 81       	ld	r25, Z
    1b66:	69 2f       	mov	r22, r25
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <HLED_VidLed_Off+0x6>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1b86:	e9 81       	ldd	r30, Y+1	; 0x01
    1b88:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8a:	81 81       	ldd	r24, Z+1	; 0x01
    1b8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b90:	90 81       	ld	r25, Z
    1b92:	69 2f       	mov	r22, r25
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <HLED_VidLed_Toggle+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    1bb2:	80 91 7a 00 	lds	r24, 0x007A
    1bb6:	88 23       	and	r24, r24
    1bb8:	71 f4       	brne	.+28     	; 0x1bd6 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1bba:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbe:	81 81       	ldd	r24, Z+1	; 0x01
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	90 81       	ld	r25, Z
    1bc6:	69 2f       	mov	r22, r25
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
		Flag=1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	80 93 7a 00 	sts	0x007A, r24
    1bd4:	0c c0       	rjmp	.+24     	; 0x1bee <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bda:	81 81       	ldd	r24, Z+1	; 0x01
    1bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bde:	fa 81       	ldd	r31, Y+2	; 0x02
    1be0:	90 81       	ld	r25, Z
    1be2:	69 2f       	mov	r22, r25
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
		Flag=0;
    1bea:	10 92 7a 00 	sts	0x007A, r1
	}
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	62 e0       	ldi	r22, 0x02	; 2
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	62 e0       	ldi	r22, 0x02	; 2
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	62 e0       	ldi	r22, 0x02	; 2
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    1c28:	84 e0       	ldi	r24, 0x04	; 4
    1c2a:	62 e0       	ldi	r22, 0x02	; 2
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    1c32:	85 e0       	ldi	r24, 0x05	; 5
    1c34:	62 e0       	ldi	r22, 0x02	; 2
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    1c3c:	86 e0       	ldi	r24, 0x06	; 6
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    1c46:	87 e0       	ldi	r24, 0x07	; 7
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	62 e0       	ldi	r22, 0x02	; 2
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	62 e0       	ldi	r22, 0x02	; 2
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    1c78:	84 e0       	ldi	r24, 0x04	; 4
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    1c82:	85 e0       	ldi	r24, 0x05	; 5
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    1c8c:	86 e0       	ldi	r24, 0x06	; 6
    1c8e:	62 e0       	ldi	r22, 0x02	; 2
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    1c96:	87 e0       	ldi	r24, 0x07	; 7
    1c98:	62 e0       	ldi	r22, 0x02	; 2
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>

}
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	62 97       	sbiw	r28, 0x12	; 18
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    1cbe:	84 e0       	ldi	r24, 0x04	; 4
    1cc0:	88 8b       	std	Y+16, r24	; 0x10
    1cc2:	b5 c0       	rjmp	.+362    	; 0x1e2e <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    1cc4:	88 89       	ldd	r24, Y+16	; 0x10
    1cc6:	62 e0       	ldi	r22, 0x02	; 2
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    1cce:	19 8a       	std	Y+17, r1	; 0x11
    1cd0:	a2 c0       	rjmp	.+324    	; 0x1e16 <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    1cd2:	9e 01       	movw	r18, r28
    1cd4:	2e 5e       	subi	r18, 0xEE	; 238
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	89 89       	ldd	r24, Y+17	; 0x11
    1cda:	62 e0       	ldi	r22, 0x02	; 2
    1cdc:	a9 01       	movw	r20, r18
    1cde:	0e 94 39 0a 	call	0x1472	; 0x1472 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    1ce2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <HKPD_U8GetKeyPressed+0x44>
    1ce8:	93 c0       	rjmp	.+294    	; 0x1e10 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    1cea:	88 89       	ldd	r24, Y+16	; 0x10
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	44 50       	subi	r20, 0x04	; 4
    1cf4:	50 40       	sbci	r21, 0x00	; 0
    1cf6:	89 89       	ldd	r24, Y+17	; 0x11
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	ca 01       	movw	r24, r20
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	82 0f       	add	r24, r18
    1d08:	93 1f       	adc	r25, r19
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e6 59       	subi	r30, 0x96	; 150
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	8f 87       	std	Y+15, r24	; 0x0f
    1d14:	08 c0       	rjmp	.+16     	; 0x1d26 <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    1d16:	9e 01       	movw	r18, r28
    1d18:	2e 5e       	subi	r18, 0xEE	; 238
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	62 e0       	ldi	r22, 0x02	; 2
    1d20:	a9 01       	movw	r20, r18
    1d22:	0e 94 39 0a 	call	0x1472	; 0x1472 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    1d26:	8a 89       	ldd	r24, Y+18	; 0x12
    1d28:	88 23       	and	r24, r24
    1d2a:	a9 f3       	breq	.-22     	; 0x1d16 <HKPD_U8GetKeyPressed+0x70>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a0 e2       	ldi	r26, 0x20	; 32
    1d32:	b1 e4       	ldi	r27, 0x41	; 65
    1d34:	8b 87       	std	Y+11, r24	; 0x0b
    1d36:	9c 87       	std	Y+12, r25	; 0x0c
    1d38:	ad 87       	std	Y+13, r26	; 0x0d
    1d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a ef       	ldi	r20, 0xFA	; 250
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8f 83       	std	Y+7, r24	; 0x07
    1d56:	98 87       	std	Y+8, r25	; 0x08
    1d58:	a9 87       	std	Y+9, r26	; 0x09
    1d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <HKPD_U8GetKeyPressed+0x138>
    1dc0:	88 ec       	ldi	r24, 0xC8	; 200
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <HKPD_U8GetKeyPressed+0x126>
    1dd0:	9c 83       	std	Y+4, r25	; 0x04
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <HKPD_U8GetKeyPressed+0x11a>
    1de6:	14 c0       	rjmp	.+40     	; 0x1e10 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <HKPD_U8GetKeyPressed+0x162>
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    1e10:	89 89       	ldd	r24, Y+17	; 0x11
    1e12:	8f 5f       	subi	r24, 0xFF	; 255
    1e14:	89 8b       	std	Y+17, r24	; 0x11
    1e16:	89 89       	ldd	r24, Y+17	; 0x11
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	08 f4       	brcc	.+2      	; 0x1e1e <HKPD_U8GetKeyPressed+0x178>
    1e1c:	5a cf       	rjmp	.-332    	; 0x1cd2 <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    1e1e:	88 89       	ldd	r24, Y+16	; 0x10
    1e20:	62 e0       	ldi	r22, 0x02	; 2
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    1e28:	88 89       	ldd	r24, Y+16	; 0x10
    1e2a:	8f 5f       	subi	r24, 0xFF	; 255
    1e2c:	88 8b       	std	Y+16, r24	; 0x10
    1e2e:	88 89       	ldd	r24, Y+16	; 0x10
    1e30:	88 30       	cpi	r24, 0x08	; 8
    1e32:	08 f4       	brcc	.+2      	; 0x1e36 <HKPD_U8GetKeyPressed+0x190>
    1e34:	47 cf       	rjmp	.-370    	; 0x1cc4 <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    1e36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e38:	8f 3f       	cpi	r24, 0xFF	; 255
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <HKPD_U8GetKeyPressed+0x198>
    1e3c:	40 cf       	rjmp	.-384    	; 0x1cbe <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    1e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    1e40:	62 96       	adiw	r28, 0x12	; 18
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	6d 97       	sbiw	r28, 0x1d	; 29
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	63 e0       	ldi	r22, 0x03	; 3
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	63 e0       	ldi	r22, 0x03	; 3
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e80:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	63 e0       	ldi	r22, 0x03	; 3
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a0 e0       	ldi	r26, 0x00	; 0
    1e94:	b0 e4       	ldi	r27, 0x40	; 64
    1e96:	89 8f       	std	Y+25, r24	; 0x19
    1e98:	9a 8f       	std	Y+26, r25	; 0x1a
    1e9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4a ef       	ldi	r20, 0xFA	; 250
    1eac:	54 e4       	ldi	r21, 0x44	; 68
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	8d 8b       	std	Y+21, r24	; 0x15
    1eb8:	9e 8b       	std	Y+22, r25	; 0x16
    1eba:	af 8b       	std	Y+23, r26	; 0x17
    1ebc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5f e3       	ldi	r21, 0x3F	; 63
    1ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed2:	88 23       	and	r24, r24
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	3f c0       	rjmp	.+126    	; 0x1f5e <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    1ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	3f ef       	ldi	r19, 0xFF	; 255
    1eec:	4f e7       	ldi	r20, 0x7F	; 127
    1eee:	57 e4       	ldi	r21, 0x47	; 71
    1ef0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	4c f5       	brge	.+82     	; 0x1f4a <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef8:	69 8d       	ldd	r22, Y+25	; 0x19
    1efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e2       	ldi	r20, 0x20	; 32
    1f06:	51 e4       	ldi	r21, 0x41	; 65
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <HCLCD_Vid8Bits_SendCommand+0xee>
    1f22:	88 ec       	ldi	r24, 0xC8	; 200
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9a 8b       	std	Y+18, r25	; 0x12
    1f28:	89 8b       	std	Y+17, r24	; 0x11
    1f2a:	89 89       	ldd	r24, Y+17	; 0x11
    1f2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <HCLCD_Vid8Bits_SendCommand+0xdc>
    1f32:	9a 8b       	std	Y+18, r25	; 0x12
    1f34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	8b 89       	ldd	r24, Y+19	; 0x13
    1f38:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f40:	8b 89       	ldd	r24, Y+19	; 0x13
    1f42:	9c 89       	ldd	r25, Y+20	; 0x14
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	69 f7       	brne	.-38     	; 0x1f22 <HCLCD_Vid8Bits_SendCommand+0xd0>
    1f48:	14 c0       	rjmp	.+40     	; 0x1f72 <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f50:	98 8d       	ldd	r25, Y+24	; 0x18
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9c 8b       	std	Y+20, r25	; 0x14
    1f5c:	8b 8b       	std	Y+19, r24	; 0x13
    1f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f60:	9c 89       	ldd	r25, Y+20	; 0x14
    1f62:	98 8b       	std	Y+16, r25	; 0x10
    1f64:	8f 87       	std	Y+15, r24	; 0x0f
    1f66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f68:	98 89       	ldd	r25, Y+16	; 0x10
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <HCLCD_Vid8Bits_SendCommand+0x118>
    1f6e:	98 8b       	std	Y+16, r25	; 0x10
    1f70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	63 e0       	ldi	r22, 0x03	; 3
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e4       	ldi	r27, 0x40	; 64
    1f84:	8b 87       	std	Y+11, r24	; 0x0b
    1f86:	9c 87       	std	Y+12, r25	; 0x0c
    1f88:	ad 87       	std	Y+13, r26	; 0x0d
    1f8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a ef       	ldi	r20, 0xFA	; 250
    1f9a:	54 e4       	ldi	r21, 0x44	; 68
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8f 83       	std	Y+7, r24	; 0x07
    1fa6:	98 87       	std	Y+8, r25	; 0x08
    1fa8:	a9 87       	std	Y+9, r26	; 0x09
    1faa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	78 85       	ldd	r23, Y+8	; 0x08
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	0f c0       	rjmp	.+30     	; 0x202e <HCLCD_Vid8Bits_SendCommand+0x1dc>
    2010:	88 ec       	ldi	r24, 0xC8	; 200
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9c 83       	std	Y+4, r25	; 0x04
    2016:	8b 83       	std	Y+3, r24	; 0x03
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <HCLCD_Vid8Bits_SendCommand+0x1ca>
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	9e 81       	ldd	r25, Y+6	; 0x06
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	69 f7       	brne	.-38     	; 0x2010 <HCLCD_Vid8Bits_SendCommand+0x1be>
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	6f 81       	ldd	r22, Y+7	; 0x07
    203a:	78 85       	ldd	r23, Y+8	; 0x08
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <HCLCD_Vid8Bits_SendCommand+0x206>
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	63 e0       	ldi	r22, 0x03	; 3
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
}
    206a:	6d 96       	adiw	r28, 0x1d	; 29
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	e8 97       	sbiw	r28, 0x38	; 56
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    2090:	83 e0       	ldi	r24, 0x03	; 3
    2092:	6f ef       	ldi	r22, 0xFF	; 255
    2094:	0e 94 9e 08 	call	0x113c	; 0x113c <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	63 e0       	ldi	r22, 0x03	; 3
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	63 e0       	ldi	r22, 0x03	; 3
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	63 e0       	ldi	r22, 0x03	; 3
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a0 ef       	ldi	r26, 0xF0	; 240
    20bc:	b1 e4       	ldi	r27, 0x41	; 65
    20be:	8d ab       	std	Y+53, r24	; 0x35
    20c0:	9e ab       	std	Y+54, r25	; 0x36
    20c2:	af ab       	std	Y+55, r26	; 0x37
    20c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6d a9       	ldd	r22, Y+53	; 0x35
    20c8:	7e a9       	ldd	r23, Y+54	; 0x36
    20ca:	8f a9       	ldd	r24, Y+55	; 0x37
    20cc:	98 ad       	ldd	r25, Y+56	; 0x38
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a ef       	ldi	r20, 0xFA	; 250
    20d4:	54 e4       	ldi	r21, 0x44	; 68
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	89 ab       	std	Y+49, r24	; 0x31
    20e0:	9a ab       	std	Y+50, r25	; 0x32
    20e2:	ab ab       	std	Y+51, r26	; 0x33
    20e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20e6:	69 a9       	ldd	r22, Y+49	; 0x31
    20e8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ea:	8b a9       	ldd	r24, Y+51	; 0x33
    20ec:	9c a9       	ldd	r25, Y+52	; 0x34
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	98 ab       	std	Y+48, r25	; 0x30
    2104:	8f a7       	std	Y+47, r24	; 0x2f
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    2108:	69 a9       	ldd	r22, Y+49	; 0x31
    210a:	7a a9       	ldd	r23, Y+50	; 0x32
    210c:	8b a9       	ldd	r24, Y+51	; 0x33
    210e:	9c a9       	ldd	r25, Y+52	; 0x34
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6d a9       	ldd	r22, Y+53	; 0x35
    2122:	7e a9       	ldd	r23, Y+54	; 0x36
    2124:	8f a9       	ldd	r24, Y+55	; 0x37
    2126:	98 ad       	ldd	r25, Y+56	; 0x38
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	98 ab       	std	Y+48, r25	; 0x30
    2146:	8f a7       	std	Y+47, r24	; 0x2f
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <HCLCD_Vid8Bits_Init+0xec>
    214a:	88 ec       	ldi	r24, 0xC8	; 200
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9e a7       	std	Y+46, r25	; 0x2e
    2150:	8d a7       	std	Y+45, r24	; 0x2d
    2152:	8d a5       	ldd	r24, Y+45	; 0x2d
    2154:	9e a5       	ldd	r25, Y+46	; 0x2e
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <HCLCD_Vid8Bits_Init+0xda>
    215a:	9e a7       	std	Y+46, r25	; 0x2e
    215c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2160:	98 a9       	ldd	r25, Y+48	; 0x30
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	98 ab       	std	Y+48, r25	; 0x30
    2166:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	8f a5       	ldd	r24, Y+47	; 0x2f
    216a:	98 a9       	ldd	r25, Y+48	; 0x30
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <HCLCD_Vid8Bits_Init+0xce>
    2170:	14 c0       	rjmp	.+40     	; 0x219a <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	69 a9       	ldd	r22, Y+49	; 0x31
    2174:	7a a9       	ldd	r23, Y+50	; 0x32
    2176:	8b a9       	ldd	r24, Y+51	; 0x33
    2178:	9c a9       	ldd	r25, Y+52	; 0x34
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	98 ab       	std	Y+48, r25	; 0x30
    2184:	8f a7       	std	Y+47, r24	; 0x2f
    2186:	8f a5       	ldd	r24, Y+47	; 0x2f
    2188:	98 a9       	ldd	r25, Y+48	; 0x30
    218a:	9c a7       	std	Y+44, r25	; 0x2c
    218c:	8b a7       	std	Y+43, r24	; 0x2b
    218e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2190:	9c a5       	ldd	r25, Y+44	; 0x2c
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <HCLCD_Vid8Bits_Init+0x116>
    2196:	9c a7       	std	Y+44, r25	; 0x2c
    2198:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    219a:	88 e2       	ldi	r24, 0x28	; 40
    219c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a0 e8       	ldi	r26, 0x80	; 128
    21a6:	bf e3       	ldi	r27, 0x3F	; 63
    21a8:	8f a3       	std	Y+39, r24	; 0x27
    21aa:	98 a7       	std	Y+40, r25	; 0x28
    21ac:	a9 a7       	std	Y+41, r26	; 0x29
    21ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	6f a1       	ldd	r22, Y+39	; 0x27
    21b2:	78 a5       	ldd	r23, Y+40	; 0x28
    21b4:	89 a5       	ldd	r24, Y+41	; 0x29
    21b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a ef       	ldi	r20, 0xFA	; 250
    21be:	54 e4       	ldi	r21, 0x44	; 68
    21c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	8b a3       	std	Y+35, r24	; 0x23
    21ca:	9c a3       	std	Y+36, r25	; 0x24
    21cc:	ad a3       	std	Y+37, r26	; 0x25
    21ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21d0:	6b a1       	ldd	r22, Y+35	; 0x23
    21d2:	7c a1       	ldd	r23, Y+36	; 0x24
    21d4:	8d a1       	ldd	r24, Y+37	; 0x25
    21d6:	9e a1       	ldd	r25, Y+38	; 0x26
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9a a3       	std	Y+34, r25	; 0x22
    21ee:	89 a3       	std	Y+33, r24	; 0x21
    21f0:	3f c0       	rjmp	.+126    	; 0x2270 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    21f2:	6b a1       	ldd	r22, Y+35	; 0x23
    21f4:	7c a1       	ldd	r23, Y+36	; 0x24
    21f6:	8d a1       	ldd	r24, Y+37	; 0x25
    21f8:	9e a1       	ldd	r25, Y+38	; 0x26
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	4f e7       	ldi	r20, 0x7F	; 127
    2200:	57 e4       	ldi	r21, 0x47	; 71
    2202:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2206:	18 16       	cp	r1, r24
    2208:	4c f5       	brge	.+82     	; 0x225c <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220a:	6f a1       	ldd	r22, Y+39	; 0x27
    220c:	78 a5       	ldd	r23, Y+40	; 0x28
    220e:	89 a5       	ldd	r24, Y+41	; 0x29
    2210:	9a a5       	ldd	r25, Y+42	; 0x2a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9a a3       	std	Y+34, r25	; 0x22
    2230:	89 a3       	std	Y+33, r24	; 0x21
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <HCLCD_Vid8Bits_Init+0x1d6>
    2234:	88 ec       	ldi	r24, 0xC8	; 200
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	98 a3       	std	Y+32, r25	; 0x20
    223a:	8f 8f       	std	Y+31, r24	; 0x1f
    223c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    223e:	98 a1       	ldd	r25, Y+32	; 0x20
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <HCLCD_Vid8Bits_Init+0x1c4>
    2244:	98 a3       	std	Y+32, r25	; 0x20
    2246:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	89 a1       	ldd	r24, Y+33	; 0x21
    224a:	9a a1       	ldd	r25, Y+34	; 0x22
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	9a a3       	std	Y+34, r25	; 0x22
    2250:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2252:	89 a1       	ldd	r24, Y+33	; 0x21
    2254:	9a a1       	ldd	r25, Y+34	; 0x22
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	69 f7       	brne	.-38     	; 0x2234 <HCLCD_Vid8Bits_Init+0x1b8>
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	6b a1       	ldd	r22, Y+35	; 0x23
    225e:	7c a1       	ldd	r23, Y+36	; 0x24
    2260:	8d a1       	ldd	r24, Y+37	; 0x25
    2262:	9e a1       	ldd	r25, Y+38	; 0x26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9a a3       	std	Y+34, r25	; 0x22
    226e:	89 a3       	std	Y+33, r24	; 0x21
    2270:	89 a1       	ldd	r24, Y+33	; 0x21
    2272:	9a a1       	ldd	r25, Y+34	; 0x22
    2274:	9e 8f       	std	Y+30, r25	; 0x1e
    2276:	8d 8f       	std	Y+29, r24	; 0x1d
    2278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <HCLCD_Vid8Bits_Init+0x200>
    2280:	9e 8f       	std	Y+30, r25	; 0x1e
    2282:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    2284:	8f e0       	ldi	r24, 0x0F	; 15
    2286:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a0 e8       	ldi	r26, 0x80	; 128
    2290:	bf e3       	ldi	r27, 0x3F	; 63
    2292:	89 8f       	std	Y+25, r24	; 0x19
    2294:	9a 8f       	std	Y+26, r25	; 0x1a
    2296:	ab 8f       	std	Y+27, r26	; 0x1b
    2298:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	69 8d       	ldd	r22, Y+25	; 0x19
    229c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    229e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a ef       	ldi	r20, 0xFA	; 250
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8d 8b       	std	Y+21, r24	; 0x15
    22b4:	9e 8b       	std	Y+22, r25	; 0x16
    22b6:	af 8b       	std	Y+23, r26	; 0x17
    22b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9c 8b       	std	Y+20, r25	; 0x14
    22d8:	8b 8b       	std	Y+19, r24	; 0x13
    22da:	3f c0       	rjmp	.+126    	; 0x235a <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    22dc:	6d 89       	ldd	r22, Y+21	; 0x15
    22de:	7e 89       	ldd	r23, Y+22	; 0x16
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	98 8d       	ldd	r25, Y+24	; 0x18
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	69 8d       	ldd	r22, Y+25	; 0x19
    22f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9c 8b       	std	Y+20, r25	; 0x14
    231a:	8b 8b       	std	Y+19, r24	; 0x13
    231c:	0f c0       	rjmp	.+30     	; 0x233c <HCLCD_Vid8Bits_Init+0x2c0>
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9a 8b       	std	Y+18, r25	; 0x12
    2324:	89 8b       	std	Y+17, r24	; 0x11
    2326:	89 89       	ldd	r24, Y+17	; 0x11
    2328:	9a 89       	ldd	r25, Y+18	; 0x12
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <HCLCD_Vid8Bits_Init+0x2ae>
    232e:	9a 8b       	std	Y+18, r25	; 0x12
    2330:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8b 89       	ldd	r24, Y+19	; 0x13
    2334:	9c 89       	ldd	r25, Y+20	; 0x14
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9c 8b       	std	Y+20, r25	; 0x14
    233a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8b 89       	ldd	r24, Y+19	; 0x13
    233e:	9c 89       	ldd	r25, Y+20	; 0x14
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <HCLCD_Vid8Bits_Init+0x2a2>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	6d 89       	ldd	r22, Y+21	; 0x15
    2348:	7e 89       	ldd	r23, Y+22	; 0x16
    234a:	8f 89       	ldd	r24, Y+23	; 0x17
    234c:	98 8d       	ldd	r25, Y+24	; 0x18
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9c 8b       	std	Y+20, r25	; 0x14
    2358:	8b 8b       	std	Y+19, r24	; 0x13
    235a:	8b 89       	ldd	r24, Y+19	; 0x13
    235c:	9c 89       	ldd	r25, Y+20	; 0x14
    235e:	98 8b       	std	Y+16, r25	; 0x10
    2360:	8f 87       	std	Y+15, r24	; 0x0f
    2362:	8f 85       	ldd	r24, Y+15	; 0x0f
    2364:	98 89       	ldd	r25, Y+16	; 0x10
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <HCLCD_Vid8Bits_Init+0x2ea>
    236a:	98 8b       	std	Y+16, r25	; 0x10
    236c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e4       	ldi	r27, 0x40	; 64
    237c:	8b 87       	std	Y+11, r24	; 0x0b
    237e:	9c 87       	std	Y+12, r25	; 0x0c
    2380:	ad 87       	std	Y+13, r26	; 0x0d
    2382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2384:	6b 85       	ldd	r22, Y+11	; 0x0b
    2386:	7c 85       	ldd	r23, Y+12	; 0x0c
    2388:	8d 85       	ldd	r24, Y+13	; 0x0d
    238a:	9e 85       	ldd	r25, Y+14	; 0x0e
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a ef       	ldi	r20, 0xFA	; 250
    2392:	54 e4       	ldi	r21, 0x44	; 68
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8f 83       	std	Y+7, r24	; 0x07
    239e:	98 87       	std	Y+8, r25	; 0x08
    23a0:	a9 87       	std	Y+9, r26	; 0x09
    23a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
    23c4:	3f c0       	rjmp	.+126    	; 0x2444 <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    23c6:	6f 81       	ldd	r22, Y+7	; 0x07
    23c8:	78 85       	ldd	r23, Y+8	; 0x08
    23ca:	89 85       	ldd	r24, Y+9	; 0x09
    23cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	57 e4       	ldi	r21, 0x47	; 71
    23d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	4c f5       	brge	.+82     	; 0x2430 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23de:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e2       	ldi	r20, 0x20	; 32
    23ec:	51 e4       	ldi	r21, 0x41	; 65
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <HCLCD_Vid8Bits_Init+0x3aa>
    2408:	88 ec       	ldi	r24, 0xC8	; 200
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	8b 83       	std	Y+3, r24	; 0x03
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <HCLCD_Vid8Bits_Init+0x398>
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	69 f7       	brne	.-38     	; 0x2408 <HCLCD_Vid8Bits_Init+0x38c>
    242e:	14 c0       	rjmp	.+40     	; 0x2458 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <HCLCD_Vid8Bits_Init+0x3d4>
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2458:	86 e0       	ldi	r24, 0x06	; 6
    245a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
}
    245e:	e8 96       	adiw	r28, 0x38	; 56
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	6d 97       	sbiw	r28, 0x1d	; 29
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	63 e0       	ldi	r22, 0x03	; 3
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	63 e0       	ldi	r22, 0x03	; 3
    2494:	40 e0       	ldi	r20, 0x00	; 0
    2496:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    249a:	83 e0       	ldi	r24, 0x03	; 3
    249c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    249e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	63 e0       	ldi	r22, 0x03	; 3
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a0 e0       	ldi	r26, 0x00	; 0
    24b2:	b0 e4       	ldi	r27, 0x40	; 64
    24b4:	89 8f       	std	Y+25, r24	; 0x19
    24b6:	9a 8f       	std	Y+26, r25	; 0x1a
    24b8:	ab 8f       	std	Y+27, r26	; 0x1b
    24ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	69 8d       	ldd	r22, Y+25	; 0x19
    24be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a ef       	ldi	r20, 0xFA	; 250
    24ca:	54 e4       	ldi	r21, 0x44	; 68
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8d 8b       	std	Y+21, r24	; 0x15
    24d6:	9e 8b       	std	Y+22, r25	; 0x16
    24d8:	af 8b       	std	Y+23, r26	; 0x17
    24da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24dc:	6d 89       	ldd	r22, Y+21	; 0x15
    24de:	7e 89       	ldd	r23, Y+22	; 0x16
    24e0:	8f 89       	ldd	r24, Y+23	; 0x17
    24e2:	98 8d       	ldd	r25, Y+24	; 0x18
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9c 8b       	std	Y+20, r25	; 0x14
    24fa:	8b 8b       	std	Y+19, r24	; 0x13
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    24fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2500:	7e 89       	ldd	r23, Y+22	; 0x16
    2502:	8f 89       	ldd	r24, Y+23	; 0x17
    2504:	98 8d       	ldd	r25, Y+24	; 0x18
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	69 8d       	ldd	r22, Y+25	; 0x19
    2518:	7a 8d       	ldd	r23, Y+26	; 0x1a
    251a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    251c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9c 8b       	std	Y+20, r25	; 0x14
    253c:	8b 8b       	std	Y+19, r24	; 0x13
    253e:	0f c0       	rjmp	.+30     	; 0x255e <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2540:	88 ec       	ldi	r24, 0xC8	; 200
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9a 8b       	std	Y+18, r25	; 0x12
    2546:	89 8b       	std	Y+17, r24	; 0x11
    2548:	89 89       	ldd	r24, Y+17	; 0x11
    254a:	9a 89       	ldd	r25, Y+18	; 0x12
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2550:	9a 8b       	std	Y+18, r25	; 0x12
    2552:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8b 89       	ldd	r24, Y+19	; 0x13
    2556:	9c 89       	ldd	r25, Y+20	; 0x14
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9c 8b       	std	Y+20, r25	; 0x14
    255c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8b 89       	ldd	r24, Y+19	; 0x13
    2560:	9c 89       	ldd	r25, Y+20	; 0x14
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	6d 89       	ldd	r22, Y+21	; 0x15
    256a:	7e 89       	ldd	r23, Y+22	; 0x16
    256c:	8f 89       	ldd	r24, Y+23	; 0x17
    256e:	98 8d       	ldd	r25, Y+24	; 0x18
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9c 8b       	std	Y+20, r25	; 0x14
    257a:	8b 8b       	std	Y+19, r24	; 0x13
    257c:	8b 89       	ldd	r24, Y+19	; 0x13
    257e:	9c 89       	ldd	r25, Y+20	; 0x14
    2580:	98 8b       	std	Y+16, r25	; 0x10
    2582:	8f 87       	std	Y+15, r24	; 0x0f
    2584:	8f 85       	ldd	r24, Y+15	; 0x0f
    2586:	98 89       	ldd	r25, Y+16	; 0x10
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    258c:	98 8b       	std	Y+16, r25	; 0x10
    258e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	63 e0       	ldi	r22, 0x03	; 3
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e0       	ldi	r26, 0x00	; 0
    25a0:	b0 e4       	ldi	r27, 0x40	; 64
    25a2:	8b 87       	std	Y+11, r24	; 0x0b
    25a4:	9c 87       	std	Y+12, r25	; 0x0c
    25a6:	ad 87       	std	Y+13, r26	; 0x0d
    25a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a ef       	ldi	r20, 0xFA	; 250
    25b8:	54 e4       	ldi	r21, 0x44	; 68
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	8f 83       	std	Y+7, r24	; 0x07
    25c4:	98 87       	std	Y+8, r25	; 0x08
    25c6:	a9 87       	std	Y+9, r26	; 0x09
    25c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25de:	88 23       	and	r24, r24
    25e0:	2c f4       	brge	.+10     	; 0x25ec <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	3f c0       	rjmp	.+126    	; 0x266a <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	4c f5       	brge	.+82     	; 0x2656 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2604:	6b 85       	ldd	r22, Y+11	; 0x0b
    2606:	7c 85       	ldd	r23, Y+12	; 0x0c
    2608:	8d 85       	ldd	r24, Y+13	; 0x0d
    260a:	9e 85       	ldd	r25, Y+14	; 0x0e
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	0f c0       	rjmp	.+30     	; 0x264c <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    262e:	88 ec       	ldi	r24, 0xC8	; 200
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 83       	std	Y+4, r25	; 0x04
    2634:	8b 83       	std	Y+3, r24	; 0x03
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8d 81       	ldd	r24, Y+5	; 0x05
    2644:	9e 81       	ldd	r25, Y+6	; 0x06
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2654:	14 c0       	rjmp	.+40     	; 0x267e <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	6f 81       	ldd	r22, Y+7	; 0x07
    2658:	78 85       	ldd	r23, Y+8	; 0x08
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	63 e0       	ldi	r22, 0x03	; 3
    2682:	41 e0       	ldi	r20, 0x01	; 1
    2684:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
}
    2688:	6d 96       	adiw	r28, 0x1d	; 29
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <HCLCD_Vid8Bits_DisplayString+0x6>
    26a0:	0f 92       	push	r0
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	9b 83       	std	Y+3, r25	; 0x03
    26a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    26aa:	19 82       	std	Y+1, r1	; 0x01
    26ac:	0e c0       	rjmp	.+28     	; 0x26ca <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	9b 81       	ldd	r25, Y+3	; 0x03
    26b8:	fc 01       	movw	r30, r24
    26ba:	e2 0f       	add	r30, r18
    26bc:	f3 1f       	adc	r31, r19
    26be:	80 81       	ld	r24, Z
    26c0:	0e 94 38 12 	call	0x2470	; 0x2470 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	8f 5f       	subi	r24, 0xFF	; 255
    26c8:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	9b 81       	ldd	r25, Y+3	; 0x03
    26d4:	fc 01       	movw	r30, r24
    26d6:	e2 0f       	add	r30, r18
    26d8:	f3 1f       	adc	r31, r19
    26da:	80 81       	ld	r24, Z
    26dc:	88 23       	and	r24, r24
    26de:	39 f7       	brne	.-50     	; 0x26ae <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	60 97       	sbiw	r28, 0x10	; 16
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	6d 87       	std	Y+13, r22	; 0x0d
    2706:	7e 87       	std	Y+14, r23	; 0x0e
    2708:	8f 87       	std	Y+15, r24	; 0x0f
    270a:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    270c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    270e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2710:	9e 85       	ldd	r25, Y+14	; 0x0e
    2712:	af 85       	ldd	r26, Y+15	; 0x0f
    2714:	b8 89       	ldd	r27, Y+16	; 0x10
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	a1 05       	cpc	r26, r1
    271a:	b1 05       	cpc	r27, r1
    271c:	09 f4       	brne	.+2      	; 0x2720 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    271e:	4f c0       	rjmp	.+158    	; 0x27be <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2720:	2d c0       	rjmp	.+90     	; 0x277c <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	08 2f       	mov	r16, r24
    2726:	10 e0       	ldi	r17, 0x00	; 0
    2728:	8d 85       	ldd	r24, Y+13	; 0x0d
    272a:	9e 85       	ldd	r25, Y+14	; 0x0e
    272c:	af 85       	ldd	r26, Y+15	; 0x0f
    272e:	b8 89       	ldd	r27, Y+16	; 0x10
    2730:	2a e0       	ldi	r18, 0x0A	; 10
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodsi4>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	28 2f       	mov	r18, r24
    2746:	ce 01       	movw	r24, r28
    2748:	03 96       	adiw	r24, 0x03	; 3
    274a:	fc 01       	movw	r30, r24
    274c:	e0 0f       	add	r30, r16
    274e:	f1 1f       	adc	r31, r17
    2750:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	af 85       	ldd	r26, Y+15	; 0x0f
    2758:	b8 89       	ldd	r27, Y+16	; 0x10
    275a:	2a e0       	ldi	r18, 0x0A	; 10
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodsi4>
    276a:	da 01       	movw	r26, r20
    276c:	c9 01       	movw	r24, r18
    276e:	8d 87       	std	Y+13, r24	; 0x0d
    2770:	9e 87       	std	Y+14, r25	; 0x0e
    2772:	af 87       	std	Y+15, r26	; 0x0f
    2774:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    277c:	8d 85       	ldd	r24, Y+13	; 0x0d
    277e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2780:	af 85       	ldd	r26, Y+15	; 0x0f
    2782:	b8 89       	ldd	r27, Y+16	; 0x10
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	a1 05       	cpc	r26, r1
    2788:	b1 05       	cpc	r27, r1
    278a:	59 f6       	brne	.-106    	; 0x2722 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	81 50       	subi	r24, 0x01	; 1
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	11 c0       	rjmp	.+34     	; 0x27b6 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	28 2f       	mov	r18, r24
    2798:	33 27       	eor	r19, r19
    279a:	27 fd       	sbrc	r18, 7
    279c:	30 95       	com	r19
    279e:	ce 01       	movw	r24, r28
    27a0:	03 96       	adiw	r24, 0x03	; 3
    27a2:	fc 01       	movw	r30, r24
    27a4:	e2 0f       	add	r30, r18
    27a6:	f3 1f       	adc	r31, r19
    27a8:	80 81       	ld	r24, Z
    27aa:	80 5d       	subi	r24, 0xD0	; 208
    27ac:	0e 94 38 12 	call	0x2470	; 0x2470 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	81 50       	subi	r24, 0x01	; 1
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	88 23       	and	r24, r24
    27ba:	64 f7       	brge	.-40     	; 0x2794 <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    27bc:	03 c0       	rjmp	.+6      	; 0x27c4 <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    27be:	80 e3       	ldi	r24, 0x30	; 48
    27c0:	0e 94 38 12 	call	0x2470	; 0x2470 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    27c4:	60 96       	adiw	r28, 0x10	; 16
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <HCLCD_Vid8Bits_SetPosition+0x6>
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	81 30       	cpi	r24, 0x01	; 1
    27ec:	41 f4       	brne	.+16     	; 0x27fe <HCLCD_Vid8Bits_SetPosition+0x24>
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	80 31       	cpi	r24, 0x10	; 16
    27f2:	28 f4       	brcc	.+10     	; 0x27fe <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	80 58       	subi	r24, 0x80	; 128
    27f8:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    27fc:	0a c0       	rjmp	.+20     	; 0x2812 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	82 30       	cpi	r24, 0x02	; 2
    2802:	39 f4       	brne	.+14     	; 0x2812 <HCLCD_Vid8Bits_SetPosition+0x38>
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	80 31       	cpi	r24, 0x10	; 16
    2808:	20 f4       	brcc	.+8      	; 0x2812 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	80 54       	subi	r24, 0x40	; 64
    280e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	00 d0       	rcall	.+0      	; 0x2822 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2822:	00 d0       	rcall	.+0      	; 0x2824 <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	8a 83       	std	Y+2, r24	; 0x02
    282a:	7c 83       	std	Y+4, r23	; 0x04
    282c:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	88 30       	cpi	r24, 0x08	; 8
    2832:	f8 f4       	brcc	.+62     	; 0x2872 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	88 2f       	mov	r24, r24
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	08 96       	adiw	r24, 0x08	; 8
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	88 0f       	add	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    284c:	19 82       	std	Y+1, r1	; 0x01
    284e:	0e c0       	rjmp	.+28     	; 0x286c <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	9c 81       	ldd	r25, Y+4	; 0x04
    285a:	fc 01       	movw	r30, r24
    285c:	e2 0f       	add	r30, r18
    285e:	f3 1f       	adc	r31, r19
    2860:	80 81       	ld	r24, Z
    2862:	0e 94 38 12 	call	0x2470	; 0x2470 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	88 30       	cpi	r24, 0x08	; 8
    2870:	78 f3       	brcs	.-34     	; 0x2850 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	2e 97       	sbiw	r28, 0x0e	; 14
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	a0 e0       	ldi	r26, 0x00	; 0
    28a0:	b0 e4       	ldi	r27, 0x40	; 64
    28a2:	8b 87       	std	Y+11, r24	; 0x0b
    28a4:	9c 87       	std	Y+12, r25	; 0x0c
    28a6:	ad 87       	std	Y+13, r26	; 0x0d
    28a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a ef       	ldi	r20, 0xFA	; 250
    28b8:	54 e4       	ldi	r21, 0x44	; 68
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	8f 83       	std	Y+7, r24	; 0x07
    28c4:	98 87       	std	Y+8, r25	; 0x08
    28c6:	a9 87       	std	Y+9, r26	; 0x09
    28c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e8       	ldi	r20, 0x80	; 128
    28d8:	5f e3       	ldi	r21, 0x3F	; 63
    28da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28de:	88 23       	and	r24, r24
    28e0:	2c f4       	brge	.+10     	; 0x28ec <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	3f c0       	rjmp	.+126    	; 0x296a <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	57 e4       	ldi	r21, 0x47	; 71
    28fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	4c f5       	brge	.+82     	; 0x2956 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	6b 85       	ldd	r22, Y+11	; 0x0b
    2906:	7c 85       	ldd	r23, Y+12	; 0x0c
    2908:	8d 85       	ldd	r24, Y+13	; 0x0d
    290a:	9e 85       	ldd	r25, Y+14	; 0x0e
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e2       	ldi	r20, 0x20	; 32
    2912:	51 e4       	ldi	r21, 0x41	; 65
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	8d 83       	std	Y+5, r24	; 0x05
    292c:	0f c0       	rjmp	.+30     	; 0x294c <HCLCD_Vid8Bits_ClearScreen+0xcc>
    292e:	88 ec       	ldi	r24, 0xC8	; 200
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <HCLCD_Vid8Bits_ClearScreen+0xba>
    293e:	9c 83       	std	Y+4, r25	; 0x04
    2940:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	69 f7       	brne	.-38     	; 0x292e <HCLCD_Vid8Bits_ClearScreen+0xae>
    2954:	14 c0       	rjmp	.+40     	; 0x297e <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	8d 81       	ldd	r24, Y+5	; 0x05
    296c:	9e 81       	ldd	r25, Y+6	; 0x06
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    297e:	2e 96       	adiw	r28, 0x0e	; 14
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	60 97       	sbiw	r28, 0x10	; 16
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    29a6:	1f 86       	std	Y+15, r1	; 0x0f
    29a8:	78 c0       	rjmp	.+240    	; 0x2a9a <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    29aa:	88 e1       	ldi	r24, 0x18	; 24
    29ac:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a6 e9       	ldi	r26, 0x96	; 150
    29b6:	b3 e4       	ldi	r27, 0x43	; 67
    29b8:	8b 87       	std	Y+11, r24	; 0x0b
    29ba:	9c 87       	std	Y+12, r25	; 0x0c
    29bc:	ad 87       	std	Y+13, r26	; 0x0d
    29be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	4a ef       	ldi	r20, 0xFA	; 250
    29ce:	54 e4       	ldi	r21, 0x44	; 68
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	8f 83       	std	Y+7, r24	; 0x07
    29da:	98 87       	std	Y+8, r25	; 0x08
    29dc:	a9 87       	std	Y+9, r26	; 0x09
    29de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e0:	6f 81       	ldd	r22, Y+7	; 0x07
    29e2:	78 85       	ldd	r23, Y+8	; 0x08
    29e4:	89 85       	ldd	r24, Y+9	; 0x09
    29e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e8       	ldi	r20, 0x80	; 128
    29ee:	5f e3       	ldi	r21, 0x3F	; 63
    29f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	2c f4       	brge	.+10     	; 0x2a02 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	3f c0       	rjmp	.+126    	; 0x2a80 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    2a02:	6f 81       	ldd	r22, Y+7	; 0x07
    2a04:	78 85       	ldd	r23, Y+8	; 0x08
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	3f ef       	ldi	r19, 0xFF	; 255
    2a0e:	4f e7       	ldi	r20, 0x7F	; 127
    2a10:	57 e4       	ldi	r21, 0x47	; 71
    2a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a16:	18 16       	cp	r1, r24
    2a18:	4c f5       	brge	.+82     	; 0x2a6c <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	bc 01       	movw	r22, r24
    2a34:	cd 01       	movw	r24, r26
    2a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	9e 83       	std	Y+6, r25	; 0x06
    2a40:	8d 83       	std	Y+5, r24	; 0x05
    2a42:	0f c0       	rjmp	.+30     	; 0x2a62 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    2a44:	88 ec       	ldi	r24, 0xC8	; 200
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	9c 83       	std	Y+4, r25	; 0x04
    2a4a:	8b 83       	std	Y+3, r24	; 0x03
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    2a54:	9c 83       	std	Y+4, r25	; 0x04
    2a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	9e 83       	std	Y+6, r25	; 0x06
    2a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	69 f7       	brne	.-38     	; 0x2a44 <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    2a6a:	14 c0       	rjmp	.+40     	; 0x2a94 <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6e:	78 85       	ldd	r23, Y+8	; 0x08
    2a70:	89 85       	ldd	r24, Y+9	; 0x09
    2a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a96:	8f 5f       	subi	r24, 0xFF	; 255
    2a98:	8f 87       	std	Y+15, r24	; 0x0f
    2a9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a9c:	88 89       	ldd	r24, Y+16	; 0x10
    2a9e:	98 17       	cp	r25, r24
    2aa0:	08 f4       	brcc	.+2      	; 0x2aa4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    2aa2:	83 cf       	rjmp	.-250    	; 0x29aa <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    2aa4:	60 96       	adiw	r28, 0x10	; 16
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	60 97       	sbiw	r28, 0x10	; 16
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2acc:	1f 86       	std	Y+15, r1	; 0x0f
    2ace:	78 c0       	rjmp	.+240    	; 0x2bc0 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    2ad0:	8c e1       	ldi	r24, 0x1C	; 28
    2ad2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a6 e9       	ldi	r26, 0x96	; 150
    2adc:	b3 e4       	ldi	r27, 0x43	; 67
    2ade:	8b 87       	std	Y+11, r24	; 0x0b
    2ae0:	9c 87       	std	Y+12, r25	; 0x0c
    2ae2:	ad 87       	std	Y+13, r26	; 0x0d
    2ae4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4a ef       	ldi	r20, 0xFA	; 250
    2af4:	54 e4       	ldi	r21, 0x44	; 68
    2af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8f 83       	std	Y+7, r24	; 0x07
    2b00:	98 87       	std	Y+8, r25	; 0x08
    2b02:	a9 87       	std	Y+9, r26	; 0x09
    2b04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b06:	6f 81       	ldd	r22, Y+7	; 0x07
    2b08:	78 85       	ldd	r23, Y+8	; 0x08
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e8       	ldi	r20, 0x80	; 128
    2b14:	5f e3       	ldi	r21, 0x3F	; 63
    2b16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b1a:	88 23       	and	r24, r24
    2b1c:	2c f4       	brge	.+10     	; 0x2b28 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
    2b26:	3f c0       	rjmp	.+126    	; 0x2ba6 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    2b28:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2a:	78 85       	ldd	r23, Y+8	; 0x08
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	3f ef       	ldi	r19, 0xFF	; 255
    2b34:	4f e7       	ldi	r20, 0x7F	; 127
    2b36:	57 e4       	ldi	r21, 0x47	; 71
    2b38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3c:	18 16       	cp	r1, r24
    2b3e:	4c f5       	brge	.+82     	; 0x2b92 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e2       	ldi	r20, 0x20	; 32
    2b4e:	51 e4       	ldi	r21, 0x41	; 65
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	0f c0       	rjmp	.+30     	; 0x2b88 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    2b6a:	88 ec       	ldi	r24, 0xC8	; 200
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9c 83       	std	Y+4, r25	; 0x04
    2b70:	8b 83       	std	Y+3, r24	; 0x03
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    2b7a:	9c 83       	std	Y+4, r25	; 0x04
    2b7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	9e 81       	ldd	r25, Y+6	; 0x06
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	9e 83       	std	Y+6, r25	; 0x06
    2b86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	69 f7       	brne	.-38     	; 0x2b6a <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    2b90:	14 c0       	rjmp	.+40     	; 0x2bba <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	6f 81       	ldd	r22, Y+7	; 0x07
    2b94:	78 85       	ldd	r23, Y+8	; 0x08
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	9a 83       	std	Y+2, r25	; 0x02
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	8f 87       	std	Y+15, r24	; 0x0f
    2bc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc2:	88 89       	ldd	r24, Y+16	; 0x10
    2bc4:	98 17       	cp	r25, r24
    2bc6:	08 f4       	brcc	.+2      	; 0x2bca <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    2bc8:	83 cf       	rjmp	.-250    	; 0x2ad0 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    2bca:	60 96       	adiw	r28, 0x10	; 16
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	60 97       	sbiw	r28, 0x10	; 16
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2bf2:	1f 86       	std	Y+15, r1	; 0x0f
    2bf4:	78 c0       	rjmp	.+240    	; 0x2ce6 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    2bf6:	80 e1       	ldi	r24, 0x10	; 16
    2bf8:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	a6 e9       	ldi	r26, 0x96	; 150
    2c02:	b3 e4       	ldi	r27, 0x43	; 67
    2c04:	8b 87       	std	Y+11, r24	; 0x0b
    2c06:	9c 87       	std	Y+12, r25	; 0x0c
    2c08:	ad 87       	std	Y+13, r26	; 0x0d
    2c0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	4a ef       	ldi	r20, 0xFA	; 250
    2c1a:	54 e4       	ldi	r21, 0x44	; 68
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	8f 83       	std	Y+7, r24	; 0x07
    2c26:	98 87       	std	Y+8, r25	; 0x08
    2c28:	a9 87       	std	Y+9, r26	; 0x09
    2c2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e8       	ldi	r20, 0x80	; 128
    2c3a:	5f e3       	ldi	r21, 0x3F	; 63
    2c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c40:	88 23       	and	r24, r24
    2c42:	2c f4       	brge	.+10     	; 0x2c4e <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	3f c0       	rjmp	.+126    	; 0x2ccc <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    2c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c50:	78 85       	ldd	r23, Y+8	; 0x08
    2c52:	89 85       	ldd	r24, Y+9	; 0x09
    2c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	3f ef       	ldi	r19, 0xFF	; 255
    2c5a:	4f e7       	ldi	r20, 0x7F	; 127
    2c5c:	57 e4       	ldi	r21, 0x47	; 71
    2c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c62:	18 16       	cp	r1, r24
    2c64:	4c f5       	brge	.+82     	; 0x2cb8 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e2       	ldi	r20, 0x20	; 32
    2c74:	51 e4       	ldi	r21, 0x41	; 65
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	0f c0       	rjmp	.+30     	; 0x2cae <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    2c90:	88 ec       	ldi	r24, 0xC8	; 200
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9c 83       	std	Y+4, r25	; 0x04
    2c96:	8b 83       	std	Y+3, r24	; 0x03
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    2ca0:	9c 83       	std	Y+4, r25	; 0x04
    2ca2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	69 f7       	brne	.-38     	; 0x2c90 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    2cb6:	14 c0       	rjmp	.+40     	; 0x2ce0 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cba:	78 85       	ldd	r23, Y+8	; 0x08
    2cbc:	89 85       	ldd	r24, Y+9	; 0x09
    2cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	9a 83       	std	Y+2, r25	; 0x02
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce2:	8f 5f       	subi	r24, 0xFF	; 255
    2ce4:	8f 87       	std	Y+15, r24	; 0x0f
    2ce6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ce8:	88 89       	ldd	r24, Y+16	; 0x10
    2cea:	98 17       	cp	r25, r24
    2cec:	08 f4       	brcc	.+2      	; 0x2cf0 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    2cee:	83 cf       	rjmp	.-250    	; 0x2bf6 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    2cf0:	60 96       	adiw	r28, 0x10	; 16
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	60 97       	sbiw	r28, 0x10	; 16
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2d18:	1f 86       	std	Y+15, r1	; 0x0f
    2d1a:	78 c0       	rjmp	.+240    	; 0x2e0c <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    2d1c:	84 e1       	ldi	r24, 0x14	; 20
    2d1e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <HCLCD_Vid8Bits_SendCommand>
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	a6 e9       	ldi	r26, 0x96	; 150
    2d28:	b3 e4       	ldi	r27, 0x43	; 67
    2d2a:	8b 87       	std	Y+11, r24	; 0x0b
    2d2c:	9c 87       	std	Y+12, r25	; 0x0c
    2d2e:	ad 87       	std	Y+13, r26	; 0x0d
    2d30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	4a ef       	ldi	r20, 0xFA	; 250
    2d40:	54 e4       	ldi	r21, 0x44	; 68
    2d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	8f 83       	std	Y+7, r24	; 0x07
    2d4c:	98 87       	std	Y+8, r25	; 0x08
    2d4e:	a9 87       	std	Y+9, r26	; 0x09
    2d50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d52:	6f 81       	ldd	r22, Y+7	; 0x07
    2d54:	78 85       	ldd	r23, Y+8	; 0x08
    2d56:	89 85       	ldd	r24, Y+9	; 0x09
    2d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e8       	ldi	r20, 0x80	; 128
    2d60:	5f e3       	ldi	r21, 0x3F	; 63
    2d62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d66:	88 23       	and	r24, r24
    2d68:	2c f4       	brge	.+10     	; 0x2d74 <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9e 83       	std	Y+6, r25	; 0x06
    2d70:	8d 83       	std	Y+5, r24	; 0x05
    2d72:	3f c0       	rjmp	.+126    	; 0x2df2 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    2d74:	6f 81       	ldd	r22, Y+7	; 0x07
    2d76:	78 85       	ldd	r23, Y+8	; 0x08
    2d78:	89 85       	ldd	r24, Y+9	; 0x09
    2d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	3f ef       	ldi	r19, 0xFF	; 255
    2d80:	4f e7       	ldi	r20, 0x7F	; 127
    2d82:	57 e4       	ldi	r21, 0x47	; 71
    2d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d88:	18 16       	cp	r1, r24
    2d8a:	4c f5       	brge	.+82     	; 0x2dde <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e2       	ldi	r20, 0x20	; 32
    2d9a:	51 e4       	ldi	r21, 0x41	; 65
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
    2db4:	0f c0       	rjmp	.+30     	; 0x2dd4 <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    2db6:	88 ec       	ldi	r24, 0xC8	; 200
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	9c 83       	std	Y+4, r25	; 0x04
    2dbc:	8b 83       	std	Y+3, r24	; 0x03
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	f1 f7       	brne	.-4      	; 0x2dc2 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    2dc6:	9c 83       	std	Y+4, r25	; 0x04
    2dc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	9e 83       	std	Y+6, r25	; 0x06
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	69 f7       	brne	.-38     	; 0x2db6 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    2ddc:	14 c0       	rjmp	.+40     	; 0x2e06 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dde:	6f 81       	ldd	r22, Y+7	; 0x07
    2de0:	78 85       	ldd	r23, Y+8	; 0x08
    2de2:	89 85       	ldd	r24, Y+9	; 0x09
    2de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9e 83       	std	Y+6, r25	; 0x06
    2df0:	8d 83       	std	Y+5, r24	; 0x05
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	9a 83       	std	Y+2, r25	; 0x02
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    2e02:	9a 83       	std	Y+2, r25	; 0x02
    2e04:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e08:	8f 5f       	subi	r24, 0xFF	; 255
    2e0a:	8f 87       	std	Y+15, r24	; 0x0f
    2e0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e0e:	88 89       	ldd	r24, Y+16	; 0x10
    2e10:	98 17       	cp	r25, r24
    2e12:	08 f4       	brcc	.+2      	; 0x2e16 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    2e14:	83 cf       	rjmp	.-250    	; 0x2d1c <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    2e16:	60 96       	adiw	r28, 0x10	; 16
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	2f 97       	sbiw	r28, 0x0f	; 15
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	63 e0       	ldi	r22, 0x03	; 3
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	63 e0       	ldi	r22, 0x03	; 3
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    2e52:	84 e0       	ldi	r24, 0x04	; 4
    2e54:	63 e0       	ldi	r22, 0x03	; 3
    2e56:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e58:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2e5c:	82 e0       	ldi	r24, 0x02	; 2
    2e5e:	63 e0       	ldi	r22, 0x03	; 3
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e0       	ldi	r26, 0x00	; 0
    2e6c:	b0 e4       	ldi	r27, 0x40	; 64
    2e6e:	8b 87       	std	Y+11, r24	; 0x0b
    2e70:	9c 87       	std	Y+12, r25	; 0x0c
    2e72:	ad 87       	std	Y+13, r26	; 0x0d
    2e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	4a ef       	ldi	r20, 0xFA	; 250
    2e84:	54 e4       	ldi	r21, 0x44	; 68
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	8f 83       	std	Y+7, r24	; 0x07
    2e90:	98 87       	std	Y+8, r25	; 0x08
    2e92:	a9 87       	std	Y+9, r26	; 0x09
    2e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e96:	6f 81       	ldd	r22, Y+7	; 0x07
    2e98:	78 85       	ldd	r23, Y+8	; 0x08
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	3f c0       	rjmp	.+126    	; 0x2f36 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    2eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eba:	78 85       	ldd	r23, Y+8	; 0x08
    2ebc:	89 85       	ldd	r24, Y+9	; 0x09
    2ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	3f ef       	ldi	r19, 0xFF	; 255
    2ec4:	4f e7       	ldi	r20, 0x7F	; 127
    2ec6:	57 e4       	ldi	r21, 0x47	; 71
    2ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	4c f5       	brge	.+82     	; 0x2f22 <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9e 83       	std	Y+6, r25	; 0x06
    2ef6:	8d 83       	std	Y+5, r24	; 0x05
    2ef8:	0f c0       	rjmp	.+30     	; 0x2f18 <HCLCD_Vid4Bits_SendCommand+0xf0>
    2efa:	88 ec       	ldi	r24, 0xC8	; 200
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9c 83       	std	Y+4, r25	; 0x04
    2f00:	8b 83       	std	Y+3, r24	; 0x03
    2f02:	8b 81       	ldd	r24, Y+3	; 0x03
    2f04:	9c 81       	ldd	r25, Y+4	; 0x04
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <HCLCD_Vid4Bits_SendCommand+0xde>
    2f0a:	9c 83       	std	Y+4, r25	; 0x04
    2f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f10:	9e 81       	ldd	r25, Y+6	; 0x06
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	69 f7       	brne	.-38     	; 0x2efa <HCLCD_Vid4Bits_SendCommand+0xd2>
    2f20:	14 c0       	rjmp	.+40     	; 0x2f4a <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f22:	6f 81       	ldd	r22, Y+7	; 0x07
    2f24:	78 85       	ldd	r23, Y+8	; 0x08
    2f26:	89 85       	ldd	r24, Y+9	; 0x09
    2f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	8d 83       	std	Y+5, r24	; 0x05
    2f36:	8d 81       	ldd	r24, Y+5	; 0x05
    2f38:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3a:	9a 83       	std	Y+2, r25	; 0x02
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <HCLCD_Vid4Bits_SendCommand+0x11a>
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	63 e0       	ldi	r22, 0x03	; 3
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
}
    2f54:	2f 96       	adiw	r28, 0x0f	; 15
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	08 95       	ret

00002f66 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    2f66:	df 93       	push	r29
    2f68:	cf 93       	push	r28
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	e9 97       	sbiw	r28, 0x39	; 57
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    2f7a:	87 e0       	ldi	r24, 0x07	; 7
    2f7c:	89 af       	std	Y+57, r24	; 0x39
    2f7e:	08 c0       	rjmp	.+16     	; 0x2f90 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    2f80:	89 ad       	ldd	r24, Y+57	; 0x39
    2f82:	63 e0       	ldi	r22, 0x03	; 3
    2f84:	41 e0       	ldi	r20, 0x01	; 1
    2f86:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    2f8a:	89 ad       	ldd	r24, Y+57	; 0x39
    2f8c:	81 50       	subi	r24, 0x01	; 1
    2f8e:	89 af       	std	Y+57, r24	; 0x39
    2f90:	89 ad       	ldd	r24, Y+57	; 0x39
    2f92:	84 30       	cpi	r24, 0x04	; 4
    2f94:	ac f7       	brge	.-22     	; 0x2f80 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	63 e0       	ldi	r22, 0x03	; 3
    2f9a:	41 e0       	ldi	r20, 0x01	; 1
    2f9c:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	63 e0       	ldi	r22, 0x03	; 3
    2fa4:	41 e0       	ldi	r20, 0x01	; 1
    2fa6:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2faa:	82 e0       	ldi	r24, 0x02	; 2
    2fac:	63 e0       	ldi	r22, 0x03	; 3
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 9b 07 	call	0xf36	; 0xf36 <MDIO_Error_State_SetPinDirection>
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	a0 ef       	ldi	r26, 0xF0	; 240
    2fba:	b1 e4       	ldi	r27, 0x41	; 65
    2fbc:	8d ab       	std	Y+53, r24	; 0x35
    2fbe:	9e ab       	std	Y+54, r25	; 0x36
    2fc0:	af ab       	std	Y+55, r26	; 0x37
    2fc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc4:	6d a9       	ldd	r22, Y+53	; 0x35
    2fc6:	7e a9       	ldd	r23, Y+54	; 0x36
    2fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    2fca:	98 ad       	ldd	r25, Y+56	; 0x38
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	4a ef       	ldi	r20, 0xFA	; 250
    2fd2:	54 e4       	ldi	r21, 0x44	; 68
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	89 ab       	std	Y+49, r24	; 0x31
    2fde:	9a ab       	std	Y+50, r25	; 0x32
    2fe0:	ab ab       	std	Y+51, r26	; 0x33
    2fe2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fea:	9c a9       	ldd	r25, Y+52	; 0x34
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e8       	ldi	r20, 0x80	; 128
    2ff2:	5f e3       	ldi	r21, 0x3F	; 63
    2ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff8:	88 23       	and	r24, r24
    2ffa:	2c f4       	brge	.+10     	; 0x3006 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	98 ab       	std	Y+48, r25	; 0x30
    3002:	8f a7       	std	Y+47, r24	; 0x2f
    3004:	3f c0       	rjmp	.+126    	; 0x3084 <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    3006:	69 a9       	ldd	r22, Y+49	; 0x31
    3008:	7a a9       	ldd	r23, Y+50	; 0x32
    300a:	8b a9       	ldd	r24, Y+51	; 0x33
    300c:	9c a9       	ldd	r25, Y+52	; 0x34
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	3f ef       	ldi	r19, 0xFF	; 255
    3012:	4f e7       	ldi	r20, 0x7F	; 127
    3014:	57 e4       	ldi	r21, 0x47	; 71
    3016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    301a:	18 16       	cp	r1, r24
    301c:	4c f5       	brge	.+82     	; 0x3070 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301e:	6d a9       	ldd	r22, Y+53	; 0x35
    3020:	7e a9       	ldd	r23, Y+54	; 0x36
    3022:	8f a9       	ldd	r24, Y+55	; 0x37
    3024:	98 ad       	ldd	r25, Y+56	; 0x38
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e2       	ldi	r20, 0x20	; 32
    302c:	51 e4       	ldi	r21, 0x41	; 65
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	98 ab       	std	Y+48, r25	; 0x30
    3044:	8f a7       	std	Y+47, r24	; 0x2f
    3046:	0f c0       	rjmp	.+30     	; 0x3066 <HCLCD_Vid4Bits_Init+0x100>
    3048:	88 ec       	ldi	r24, 0xC8	; 200
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9e a7       	std	Y+46, r25	; 0x2e
    304e:	8d a7       	std	Y+45, r24	; 0x2d
    3050:	8d a5       	ldd	r24, Y+45	; 0x2d
    3052:	9e a5       	ldd	r25, Y+46	; 0x2e
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <HCLCD_Vid4Bits_Init+0xee>
    3058:	9e a7       	std	Y+46, r25	; 0x2e
    305a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305c:	8f a5       	ldd	r24, Y+47	; 0x2f
    305e:	98 a9       	ldd	r25, Y+48	; 0x30
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	98 ab       	std	Y+48, r25	; 0x30
    3064:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3066:	8f a5       	ldd	r24, Y+47	; 0x2f
    3068:	98 a9       	ldd	r25, Y+48	; 0x30
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	69 f7       	brne	.-38     	; 0x3048 <HCLCD_Vid4Bits_Init+0xe2>
    306e:	14 c0       	rjmp	.+40     	; 0x3098 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3070:	69 a9       	ldd	r22, Y+49	; 0x31
    3072:	7a a9       	ldd	r23, Y+50	; 0x32
    3074:	8b a9       	ldd	r24, Y+51	; 0x33
    3076:	9c a9       	ldd	r25, Y+52	; 0x34
    3078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	98 ab       	std	Y+48, r25	; 0x30
    3082:	8f a7       	std	Y+47, r24	; 0x2f
    3084:	8f a5       	ldd	r24, Y+47	; 0x2f
    3086:	98 a9       	ldd	r25, Y+48	; 0x30
    3088:	9c a7       	std	Y+44, r25	; 0x2c
    308a:	8b a7       	std	Y+43, r24	; 0x2b
    308c:	8b a5       	ldd	r24, Y+43	; 0x2b
    308e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <HCLCD_Vid4Bits_Init+0x12a>
    3094:	9c a7       	std	Y+44, r25	; 0x2c
    3096:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    309e:	82 e0       	ldi	r24, 0x02	; 2
    30a0:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    30a4:	88 e2       	ldi	r24, 0x28	; 40
    30a6:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	a0 e8       	ldi	r26, 0x80	; 128
    30b0:	bf e3       	ldi	r27, 0x3F	; 63
    30b2:	8f a3       	std	Y+39, r24	; 0x27
    30b4:	98 a7       	std	Y+40, r25	; 0x28
    30b6:	a9 a7       	std	Y+41, r26	; 0x29
    30b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ba:	6f a1       	ldd	r22, Y+39	; 0x27
    30bc:	78 a5       	ldd	r23, Y+40	; 0x28
    30be:	89 a5       	ldd	r24, Y+41	; 0x29
    30c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	4a ef       	ldi	r20, 0xFA	; 250
    30c8:	54 e4       	ldi	r21, 0x44	; 68
    30ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	8b a3       	std	Y+35, r24	; 0x23
    30d4:	9c a3       	std	Y+36, r25	; 0x24
    30d6:	ad a3       	std	Y+37, r26	; 0x25
    30d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30da:	6b a1       	ldd	r22, Y+35	; 0x23
    30dc:	7c a1       	ldd	r23, Y+36	; 0x24
    30de:	8d a1       	ldd	r24, Y+37	; 0x25
    30e0:	9e a1       	ldd	r25, Y+38	; 0x26
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	40 e8       	ldi	r20, 0x80	; 128
    30e8:	5f e3       	ldi	r21, 0x3F	; 63
    30ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ee:	88 23       	and	r24, r24
    30f0:	2c f4       	brge	.+10     	; 0x30fc <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	9a a3       	std	Y+34, r25	; 0x22
    30f8:	89 a3       	std	Y+33, r24	; 0x21
    30fa:	3f c0       	rjmp	.+126    	; 0x317a <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    30fc:	6b a1       	ldd	r22, Y+35	; 0x23
    30fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3100:	8d a1       	ldd	r24, Y+37	; 0x25
    3102:	9e a1       	ldd	r25, Y+38	; 0x26
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	3f ef       	ldi	r19, 0xFF	; 255
    3108:	4f e7       	ldi	r20, 0x7F	; 127
    310a:	57 e4       	ldi	r21, 0x47	; 71
    310c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3110:	18 16       	cp	r1, r24
    3112:	4c f5       	brge	.+82     	; 0x3166 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3114:	6f a1       	ldd	r22, Y+39	; 0x27
    3116:	78 a5       	ldd	r23, Y+40	; 0x28
    3118:	89 a5       	ldd	r24, Y+41	; 0x29
    311a:	9a a5       	ldd	r25, Y+42	; 0x2a
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e2       	ldi	r20, 0x20	; 32
    3122:	51 e4       	ldi	r21, 0x41	; 65
    3124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	bc 01       	movw	r22, r24
    312e:	cd 01       	movw	r24, r26
    3130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	9a a3       	std	Y+34, r25	; 0x22
    313a:	89 a3       	std	Y+33, r24	; 0x21
    313c:	0f c0       	rjmp	.+30     	; 0x315c <HCLCD_Vid4Bits_Init+0x1f6>
    313e:	88 ec       	ldi	r24, 0xC8	; 200
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	98 a3       	std	Y+32, r25	; 0x20
    3144:	8f 8f       	std	Y+31, r24	; 0x1f
    3146:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3148:	98 a1       	ldd	r25, Y+32	; 0x20
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	f1 f7       	brne	.-4      	; 0x314a <HCLCD_Vid4Bits_Init+0x1e4>
    314e:	98 a3       	std	Y+32, r25	; 0x20
    3150:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3152:	89 a1       	ldd	r24, Y+33	; 0x21
    3154:	9a a1       	ldd	r25, Y+34	; 0x22
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	9a a3       	std	Y+34, r25	; 0x22
    315a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315c:	89 a1       	ldd	r24, Y+33	; 0x21
    315e:	9a a1       	ldd	r25, Y+34	; 0x22
    3160:	00 97       	sbiw	r24, 0x00	; 0
    3162:	69 f7       	brne	.-38     	; 0x313e <HCLCD_Vid4Bits_Init+0x1d8>
    3164:	14 c0       	rjmp	.+40     	; 0x318e <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3166:	6b a1       	ldd	r22, Y+35	; 0x23
    3168:	7c a1       	ldd	r23, Y+36	; 0x24
    316a:	8d a1       	ldd	r24, Y+37	; 0x25
    316c:	9e a1       	ldd	r25, Y+38	; 0x26
    316e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	9a a3       	std	Y+34, r25	; 0x22
    3178:	89 a3       	std	Y+33, r24	; 0x21
    317a:	89 a1       	ldd	r24, Y+33	; 0x21
    317c:	9a a1       	ldd	r25, Y+34	; 0x22
    317e:	9e 8f       	std	Y+30, r25	; 0x1e
    3180:	8d 8f       	std	Y+29, r24	; 0x1d
    3182:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3184:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <HCLCD_Vid4Bits_Init+0x220>
    318a:	9e 8f       	std	Y+30, r25	; 0x1e
    318c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    3194:	8f e0       	ldi	r24, 0x0F	; 15
    3196:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	a0 e8       	ldi	r26, 0x80	; 128
    31a0:	bf e3       	ldi	r27, 0x3F	; 63
    31a2:	89 8f       	std	Y+25, r24	; 0x19
    31a4:	9a 8f       	std	Y+26, r25	; 0x1a
    31a6:	ab 8f       	std	Y+27, r26	; 0x1b
    31a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	69 8d       	ldd	r22, Y+25	; 0x19
    31ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	4a ef       	ldi	r20, 0xFA	; 250
    31b8:	54 e4       	ldi	r21, 0x44	; 68
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	8d 8b       	std	Y+21, r24	; 0x15
    31c4:	9e 8b       	std	Y+22, r25	; 0x16
    31c6:	af 8b       	std	Y+23, r26	; 0x17
    31c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31ca:	6d 89       	ldd	r22, Y+21	; 0x15
    31cc:	7e 89       	ldd	r23, Y+22	; 0x16
    31ce:	8f 89       	ldd	r24, Y+23	; 0x17
    31d0:	98 8d       	ldd	r25, Y+24	; 0x18
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e8       	ldi	r20, 0x80	; 128
    31d8:	5f e3       	ldi	r21, 0x3F	; 63
    31da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31de:	88 23       	and	r24, r24
    31e0:	2c f4       	brge	.+10     	; 0x31ec <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	9c 8b       	std	Y+20, r25	; 0x14
    31e8:	8b 8b       	std	Y+19, r24	; 0x13
    31ea:	3f c0       	rjmp	.+126    	; 0x326a <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    31ec:	6d 89       	ldd	r22, Y+21	; 0x15
    31ee:	7e 89       	ldd	r23, Y+22	; 0x16
    31f0:	8f 89       	ldd	r24, Y+23	; 0x17
    31f2:	98 8d       	ldd	r25, Y+24	; 0x18
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	3f ef       	ldi	r19, 0xFF	; 255
    31f8:	4f e7       	ldi	r20, 0x7F	; 127
    31fa:	57 e4       	ldi	r21, 0x47	; 71
    31fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3200:	18 16       	cp	r1, r24
    3202:	4c f5       	brge	.+82     	; 0x3256 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3204:	69 8d       	ldd	r22, Y+25	; 0x19
    3206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e2       	ldi	r20, 0x20	; 32
    3212:	51 e4       	ldi	r21, 0x41	; 65
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	bc 01       	movw	r22, r24
    321e:	cd 01       	movw	r24, r26
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9c 8b       	std	Y+20, r25	; 0x14
    322a:	8b 8b       	std	Y+19, r24	; 0x13
    322c:	0f c0       	rjmp	.+30     	; 0x324c <HCLCD_Vid4Bits_Init+0x2e6>
    322e:	88 ec       	ldi	r24, 0xC8	; 200
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9a 8b       	std	Y+18, r25	; 0x12
    3234:	89 8b       	std	Y+17, r24	; 0x11
    3236:	89 89       	ldd	r24, Y+17	; 0x11
    3238:	9a 89       	ldd	r25, Y+18	; 0x12
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <HCLCD_Vid4Bits_Init+0x2d4>
    323e:	9a 8b       	std	Y+18, r25	; 0x12
    3240:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3242:	8b 89       	ldd	r24, Y+19	; 0x13
    3244:	9c 89       	ldd	r25, Y+20	; 0x14
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	9c 8b       	std	Y+20, r25	; 0x14
    324a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324c:	8b 89       	ldd	r24, Y+19	; 0x13
    324e:	9c 89       	ldd	r25, Y+20	; 0x14
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	69 f7       	brne	.-38     	; 0x322e <HCLCD_Vid4Bits_Init+0x2c8>
    3254:	14 c0       	rjmp	.+40     	; 0x327e <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3256:	6d 89       	ldd	r22, Y+21	; 0x15
    3258:	7e 89       	ldd	r23, Y+22	; 0x16
    325a:	8f 89       	ldd	r24, Y+23	; 0x17
    325c:	98 8d       	ldd	r25, Y+24	; 0x18
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	9c 8b       	std	Y+20, r25	; 0x14
    3268:	8b 8b       	std	Y+19, r24	; 0x13
    326a:	8b 89       	ldd	r24, Y+19	; 0x13
    326c:	9c 89       	ldd	r25, Y+20	; 0x14
    326e:	98 8b       	std	Y+16, r25	; 0x10
    3270:	8f 87       	std	Y+15, r24	; 0x0f
    3272:	8f 85       	ldd	r24, Y+15	; 0x0f
    3274:	98 89       	ldd	r25, Y+16	; 0x10
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <HCLCD_Vid4Bits_Init+0x310>
    327a:	98 8b       	std	Y+16, r25	; 0x10
    327c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	a0 e0       	ldi	r26, 0x00	; 0
    3290:	b0 e4       	ldi	r27, 0x40	; 64
    3292:	8b 87       	std	Y+11, r24	; 0x0b
    3294:	9c 87       	std	Y+12, r25	; 0x0c
    3296:	ad 87       	std	Y+13, r26	; 0x0d
    3298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329a:	6b 85       	ldd	r22, Y+11	; 0x0b
    329c:	7c 85       	ldd	r23, Y+12	; 0x0c
    329e:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	4a ef       	ldi	r20, 0xFA	; 250
    32a8:	54 e4       	ldi	r21, 0x44	; 68
    32aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	8f 83       	std	Y+7, r24	; 0x07
    32b4:	98 87       	std	Y+8, r25	; 0x08
    32b6:	a9 87       	std	Y+9, r26	; 0x09
    32b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ba:	6f 81       	ldd	r22, Y+7	; 0x07
    32bc:	78 85       	ldd	r23, Y+8	; 0x08
    32be:	89 85       	ldd	r24, Y+9	; 0x09
    32c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e8       	ldi	r20, 0x80	; 128
    32c8:	5f e3       	ldi	r21, 0x3F	; 63
    32ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ce:	88 23       	and	r24, r24
    32d0:	2c f4       	brge	.+10     	; 0x32dc <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9e 83       	std	Y+6, r25	; 0x06
    32d8:	8d 83       	std	Y+5, r24	; 0x05
    32da:	3f c0       	rjmp	.+126    	; 0x335a <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    32dc:	6f 81       	ldd	r22, Y+7	; 0x07
    32de:	78 85       	ldd	r23, Y+8	; 0x08
    32e0:	89 85       	ldd	r24, Y+9	; 0x09
    32e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	3f ef       	ldi	r19, 0xFF	; 255
    32e8:	4f e7       	ldi	r20, 0x7F	; 127
    32ea:	57 e4       	ldi	r21, 0x47	; 71
    32ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32f0:	18 16       	cp	r1, r24
    32f2:	4c f5       	brge	.+82     	; 0x3346 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e2       	ldi	r20, 0x20	; 32
    3302:	51 e4       	ldi	r21, 0x41	; 65
    3304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	0f c0       	rjmp	.+30     	; 0x333c <HCLCD_Vid4Bits_Init+0x3d6>
    331e:	88 ec       	ldi	r24, 0xC8	; 200
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	9c 83       	std	Y+4, r25	; 0x04
    3324:	8b 83       	std	Y+3, r24	; 0x03
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	9c 81       	ldd	r25, Y+4	; 0x04
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	f1 f7       	brne	.-4      	; 0x332a <HCLCD_Vid4Bits_Init+0x3c4>
    332e:	9c 83       	std	Y+4, r25	; 0x04
    3330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	9e 83       	std	Y+6, r25	; 0x06
    333a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333c:	8d 81       	ldd	r24, Y+5	; 0x05
    333e:	9e 81       	ldd	r25, Y+6	; 0x06
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	69 f7       	brne	.-38     	; 0x331e <HCLCD_Vid4Bits_Init+0x3b8>
    3344:	14 c0       	rjmp	.+40     	; 0x336e <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3346:	6f 81       	ldd	r22, Y+7	; 0x07
    3348:	78 85       	ldd	r23, Y+8	; 0x08
    334a:	89 85       	ldd	r24, Y+9	; 0x09
    334c:	9a 85       	ldd	r25, Y+10	; 0x0a
    334e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	8d 83       	std	Y+5, r24	; 0x05
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	9a 83       	std	Y+2, r25	; 0x02
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	f1 f7       	brne	.-4      	; 0x3366 <HCLCD_Vid4Bits_Init+0x400>
    336a:	9a 83       	std	Y+2, r25	; 0x02
    336c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    3374:	86 e0       	ldi	r24, 0x06	; 6
    3376:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
}
    337a:	e9 96       	adiw	r28, 0x39	; 57
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	08 95       	ret

0000338c <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	2f 97       	sbiw	r28, 0x0f	; 15
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	63 e0       	ldi	r22, 0x03	; 3
    33a6:	41 e0       	ldi	r20, 0x01	; 1
    33a8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	63 e0       	ldi	r22, 0x03	; 3
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    33b6:	84 e0       	ldi	r24, 0x04	; 4
    33b8:	63 e0       	ldi	r22, 0x03	; 3
    33ba:	4f 85       	ldd	r20, Y+15	; 0x0f
    33bc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    33c0:	82 e0       	ldi	r24, 0x02	; 2
    33c2:	63 e0       	ldi	r22, 0x03	; 3
    33c4:	41 e0       	ldi	r20, 0x01	; 1
    33c6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a0 e0       	ldi	r26, 0x00	; 0
    33d0:	b0 e4       	ldi	r27, 0x40	; 64
    33d2:	8b 87       	std	Y+11, r24	; 0x0b
    33d4:	9c 87       	std	Y+12, r25	; 0x0c
    33d6:	ad 87       	std	Y+13, r26	; 0x0d
    33d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33da:	6b 85       	ldd	r22, Y+11	; 0x0b
    33dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33de:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	4a ef       	ldi	r20, 0xFA	; 250
    33e8:	54 e4       	ldi	r21, 0x44	; 68
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	8f 83       	std	Y+7, r24	; 0x07
    33f4:	98 87       	std	Y+8, r25	; 0x08
    33f6:	a9 87       	std	Y+9, r26	; 0x09
    33f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33fa:	6f 81       	ldd	r22, Y+7	; 0x07
    33fc:	78 85       	ldd	r23, Y+8	; 0x08
    33fe:	89 85       	ldd	r24, Y+9	; 0x09
    3400:	9a 85       	ldd	r25, Y+10	; 0x0a
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e8       	ldi	r20, 0x80	; 128
    3408:	5f e3       	ldi	r21, 0x3F	; 63
    340a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340e:	88 23       	and	r24, r24
    3410:	2c f4       	brge	.+10     	; 0x341c <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	9e 83       	std	Y+6, r25	; 0x06
    3418:	8d 83       	std	Y+5, r24	; 0x05
    341a:	3f c0       	rjmp	.+126    	; 0x349a <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    341c:	6f 81       	ldd	r22, Y+7	; 0x07
    341e:	78 85       	ldd	r23, Y+8	; 0x08
    3420:	89 85       	ldd	r24, Y+9	; 0x09
    3422:	9a 85       	ldd	r25, Y+10	; 0x0a
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	4f e7       	ldi	r20, 0x7F	; 127
    342a:	57 e4       	ldi	r21, 0x47	; 71
    342c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3430:	18 16       	cp	r1, r24
    3432:	4c f5       	brge	.+82     	; 0x3486 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3434:	6b 85       	ldd	r22, Y+11	; 0x0b
    3436:	7c 85       	ldd	r23, Y+12	; 0x0c
    3438:	8d 85       	ldd	r24, Y+13	; 0x0d
    343a:	9e 85       	ldd	r25, Y+14	; 0x0e
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
    345c:	0f c0       	rjmp	.+30     	; 0x347c <HCLCD_VidWriteChar_4Bits+0xf0>
    345e:	88 ec       	ldi	r24, 0xC8	; 200
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9c 83       	std	Y+4, r25	; 0x04
    3464:	8b 83       	std	Y+3, r24	; 0x03
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	9c 81       	ldd	r25, Y+4	; 0x04
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <HCLCD_VidWriteChar_4Bits+0xde>
    346e:	9c 83       	std	Y+4, r25	; 0x04
    3470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	9e 83       	std	Y+6, r25	; 0x06
    347a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347c:	8d 81       	ldd	r24, Y+5	; 0x05
    347e:	9e 81       	ldd	r25, Y+6	; 0x06
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	69 f7       	brne	.-38     	; 0x345e <HCLCD_VidWriteChar_4Bits+0xd2>
    3484:	14 c0       	rjmp	.+40     	; 0x34ae <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3486:	6f 81       	ldd	r22, Y+7	; 0x07
    3488:	78 85       	ldd	r23, Y+8	; 0x08
    348a:	89 85       	ldd	r24, Y+9	; 0x09
    348c:	9a 85       	ldd	r25, Y+10	; 0x0a
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9e 83       	std	Y+6, r25	; 0x06
    3498:	8d 83       	std	Y+5, r24	; 0x05
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <HCLCD_VidWriteChar_4Bits+0x11a>
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    34ae:	82 e0       	ldi	r24, 0x02	; 2
    34b0:	63 e0       	ldi	r22, 0x03	; 3
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <MDIO_Error_State_SetPinValue>
}
    34b8:	2f 96       	adiw	r28, 0x0f	; 15
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	08 95       	ret

000034ca <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	0f 92       	push	r0
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
    34d8:	82 95       	swap	r24
    34da:	8f 70       	andi	r24, 0x0F	; 15
    34dc:	0e 94 c6 19 	call	0x338c	; 0x338c <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	0e 94 c6 19 	call	0x338c	; 0x338c <HCLCD_VidWriteChar_4Bits>
}
    34e6:	0f 90       	pop	r0
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	00 d0       	rcall	.+0      	; 0x34f4 <HCLCD_Vid4Bits_DisplayString+0x6>
    34f4:	0f 92       	push	r0
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    34fa:	9b 83       	std	Y+3, r25	; 0x03
    34fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    34fe:	19 82       	std	Y+1, r1	; 0x01
    3500:	0e c0       	rjmp	.+28     	; 0x351e <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	28 2f       	mov	r18, r24
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	8a 81       	ldd	r24, Y+2	; 0x02
    350a:	9b 81       	ldd	r25, Y+3	; 0x03
    350c:	fc 01       	movw	r30, r24
    350e:	e2 0f       	add	r30, r18
    3510:	f3 1f       	adc	r31, r19
    3512:	80 81       	ld	r24, Z
    3514:	0e 94 65 1a 	call	0x34ca	; 0x34ca <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	8f 5f       	subi	r24, 0xFF	; 255
    351c:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	9b 81       	ldd	r25, Y+3	; 0x03
    3528:	fc 01       	movw	r30, r24
    352a:	e2 0f       	add	r30, r18
    352c:	f3 1f       	adc	r31, r19
    352e:	80 81       	ld	r24, Z
    3530:	88 23       	and	r24, r24
    3532:	39 f7       	brne	.-50     	; 0x3502 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	df 93       	push	r29
    3546:	cf 93       	push	r28
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	60 97       	sbiw	r28, 0x10	; 16
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	6d 87       	std	Y+13, r22	; 0x0d
    355a:	7e 87       	std	Y+14, r23	; 0x0e
    355c:	8f 87       	std	Y+15, r24	; 0x0f
    355e:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3560:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3562:	8d 85       	ldd	r24, Y+13	; 0x0d
    3564:	9e 85       	ldd	r25, Y+14	; 0x0e
    3566:	af 85       	ldd	r26, Y+15	; 0x0f
    3568:	b8 89       	ldd	r27, Y+16	; 0x10
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	a1 05       	cpc	r26, r1
    356e:	b1 05       	cpc	r27, r1
    3570:	09 f4       	brne	.+2      	; 0x3574 <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3572:	4f c0       	rjmp	.+158    	; 0x3612 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3574:	2d c0       	rjmp	.+90     	; 0x35d0 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3576:	8a 81       	ldd	r24, Y+2	; 0x02
    3578:	08 2f       	mov	r16, r24
    357a:	10 e0       	ldi	r17, 0x00	; 0
    357c:	8d 85       	ldd	r24, Y+13	; 0x0d
    357e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3580:	af 85       	ldd	r26, Y+15	; 0x0f
    3582:	b8 89       	ldd	r27, Y+16	; 0x10
    3584:	2a e0       	ldi	r18, 0x0A	; 10
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e0       	ldi	r20, 0x00	; 0
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	bc 01       	movw	r22, r24
    358e:	cd 01       	movw	r24, r26
    3590:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodsi4>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	28 2f       	mov	r18, r24
    359a:	ce 01       	movw	r24, r28
    359c:	03 96       	adiw	r24, 0x03	; 3
    359e:	fc 01       	movw	r30, r24
    35a0:	e0 0f       	add	r30, r16
    35a2:	f1 1f       	adc	r31, r17
    35a4:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    35a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35aa:	af 85       	ldd	r26, Y+15	; 0x0f
    35ac:	b8 89       	ldd	r27, Y+16	; 0x10
    35ae:	2a e0       	ldi	r18, 0x0A	; 10
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	40 e0       	ldi	r20, 0x00	; 0
    35b4:	50 e0       	ldi	r21, 0x00	; 0
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodsi4>
    35be:	da 01       	movw	r26, r20
    35c0:	c9 01       	movw	r24, r18
    35c2:	8d 87       	std	Y+13, r24	; 0x0d
    35c4:	9e 87       	std	Y+14, r25	; 0x0e
    35c6:	af 87       	std	Y+15, r26	; 0x0f
    35c8:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    35ca:	8a 81       	ldd	r24, Y+2	; 0x02
    35cc:	8f 5f       	subi	r24, 0xFF	; 255
    35ce:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    35d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d4:	af 85       	ldd	r26, Y+15	; 0x0f
    35d6:	b8 89       	ldd	r27, Y+16	; 0x10
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	a1 05       	cpc	r26, r1
    35dc:	b1 05       	cpc	r27, r1
    35de:	59 f6       	brne	.-106    	; 0x3576 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    35e0:	8a 81       	ldd	r24, Y+2	; 0x02
    35e2:	81 50       	subi	r24, 0x01	; 1
    35e4:	89 83       	std	Y+1, r24	; 0x01
    35e6:	11 c0       	rjmp	.+34     	; 0x360a <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	28 2f       	mov	r18, r24
    35ec:	33 27       	eor	r19, r19
    35ee:	27 fd       	sbrc	r18, 7
    35f0:	30 95       	com	r19
    35f2:	ce 01       	movw	r24, r28
    35f4:	03 96       	adiw	r24, 0x03	; 3
    35f6:	fc 01       	movw	r30, r24
    35f8:	e2 0f       	add	r30, r18
    35fa:	f3 1f       	adc	r31, r19
    35fc:	80 81       	ld	r24, Z
    35fe:	80 5d       	subi	r24, 0xD0	; 208
    3600:	0e 94 65 1a 	call	0x34ca	; 0x34ca <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	81 50       	subi	r24, 0x01	; 1
    3608:	89 83       	std	Y+1, r24	; 0x01
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	88 23       	and	r24, r24
    360e:	64 f7       	brge	.-40     	; 0x35e8 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3610:	03 c0       	rjmp	.+6      	; 0x3618 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3612:	80 e3       	ldi	r24, 0x30	; 48
    3614:	0e 94 65 1a 	call	0x34ca	; 0x34ca <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3618:	60 96       	adiw	r28, 0x10	; 16
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	cf 91       	pop	r28
    3626:	df 91       	pop	r29
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	08 95       	ret

0000362e <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	00 d0       	rcall	.+0      	; 0x3634 <HCLCD_Vid4Bits_SetPosition+0x6>
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	b9 f4       	brne	.+46     	; 0x3670 <HCLCD_Vid4Bits_SetPosition+0x42>
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	80 31       	cpi	r24, 0x10	; 16
    3646:	a0 f4       	brcc	.+40     	; 0x3670 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	88 2f       	mov	r24, r24
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	80 58       	subi	r24, 0x80	; 128
    3650:	9f 4f       	sbci	r25, 0xFF	; 255
    3652:	95 95       	asr	r25
    3654:	87 95       	ror	r24
    3656:	95 95       	asr	r25
    3658:	87 95       	ror	r24
    365a:	95 95       	asr	r25
    365c:	87 95       	ror	r24
    365e:	95 95       	asr	r25
    3660:	87 95       	ror	r24
    3662:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	80 58       	subi	r24, 0x80	; 128
    366a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    366e:	19 c0       	rjmp	.+50     	; 0x36a2 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	82 30       	cpi	r24, 0x02	; 2
    3674:	b1 f4       	brne	.+44     	; 0x36a2 <HCLCD_Vid4Bits_SetPosition+0x74>
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	80 31       	cpi	r24, 0x10	; 16
    367a:	98 f4       	brcc	.+38     	; 0x36a2 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	88 2f       	mov	r24, r24
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	80 54       	subi	r24, 0x40	; 64
    3684:	9f 4f       	sbci	r25, 0xFF	; 255
    3686:	95 95       	asr	r25
    3688:	87 95       	ror	r24
    368a:	95 95       	asr	r25
    368c:	87 95       	ror	r24
    368e:	95 95       	asr	r25
    3690:	87 95       	ror	r24
    3692:	95 95       	asr	r25
    3694:	87 95       	ror	r24
    3696:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	80 54       	subi	r24, 0x40	; 64
    369e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	cf 91       	pop	r28
    36a8:	df 91       	pop	r29
    36aa:	08 95       	ret

000036ac <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    36ac:	df 93       	push	r29
    36ae:	cf 93       	push	r28
    36b0:	00 d0       	rcall	.+0      	; 0x36b2 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    36b2:	00 d0       	rcall	.+0      	; 0x36b4 <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	8a 83       	std	Y+2, r24	; 0x02
    36ba:	7c 83       	std	Y+4, r23	; 0x04
    36bc:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	88 30       	cpi	r24, 0x08	; 8
    36c2:	98 f5       	brcc	.+102    	; 0x372a <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	88 2f       	mov	r24, r24
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	08 96       	adiw	r24, 0x08	; 8
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	95 95       	asr	r25
    36da:	87 95       	ror	r24
    36dc:	95 95       	asr	r25
    36de:	87 95       	ror	r24
    36e0:	95 95       	asr	r25
    36e2:	87 95       	ror	r24
    36e4:	95 95       	asr	r25
    36e6:	87 95       	ror	r24
    36e8:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	88 2f       	mov	r24, r24
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	08 96       	adiw	r24, 0x08	; 8
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	88 0f       	add	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3704:	19 82       	std	Y+1, r1	; 0x01
    3706:	0e c0       	rjmp	.+28     	; 0x3724 <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	28 2f       	mov	r18, r24
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	8b 81       	ldd	r24, Y+3	; 0x03
    3710:	9c 81       	ldd	r25, Y+4	; 0x04
    3712:	fc 01       	movw	r30, r24
    3714:	e2 0f       	add	r30, r18
    3716:	f3 1f       	adc	r31, r19
    3718:	80 81       	ld	r24, Z
    371a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	8f 5f       	subi	r24, 0xFF	; 255
    3722:	89 83       	std	Y+1, r24	; 0x01
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	88 30       	cpi	r24, 0x08	; 8
    3728:	78 f3       	brcs	.-34     	; 0x3708 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	2e 97       	sbiw	r28, 0x0e	; 14
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	a0 e0       	ldi	r26, 0x00	; 0
    375e:	b0 e4       	ldi	r27, 0x40	; 64
    3760:	8b 87       	std	Y+11, r24	; 0x0b
    3762:	9c 87       	std	Y+12, r25	; 0x0c
    3764:	ad 87       	std	Y+13, r26	; 0x0d
    3766:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3768:	6b 85       	ldd	r22, Y+11	; 0x0b
    376a:	7c 85       	ldd	r23, Y+12	; 0x0c
    376c:	8d 85       	ldd	r24, Y+13	; 0x0d
    376e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	4a ef       	ldi	r20, 0xFA	; 250
    3776:	54 e4       	ldi	r21, 0x44	; 68
    3778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	8f 83       	std	Y+7, r24	; 0x07
    3782:	98 87       	std	Y+8, r25	; 0x08
    3784:	a9 87       	std	Y+9, r26	; 0x09
    3786:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3788:	6f 81       	ldd	r22, Y+7	; 0x07
    378a:	78 85       	ldd	r23, Y+8	; 0x08
    378c:	89 85       	ldd	r24, Y+9	; 0x09
    378e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e8       	ldi	r20, 0x80	; 128
    3796:	5f e3       	ldi	r21, 0x3F	; 63
    3798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    379c:	88 23       	and	r24, r24
    379e:	2c f4       	brge	.+10     	; 0x37aa <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	9e 83       	std	Y+6, r25	; 0x06
    37a6:	8d 83       	std	Y+5, r24	; 0x05
    37a8:	3f c0       	rjmp	.+126    	; 0x3828 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    37aa:	6f 81       	ldd	r22, Y+7	; 0x07
    37ac:	78 85       	ldd	r23, Y+8	; 0x08
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	3f ef       	ldi	r19, 0xFF	; 255
    37b6:	4f e7       	ldi	r20, 0x7F	; 127
    37b8:	57 e4       	ldi	r21, 0x47	; 71
    37ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37be:	18 16       	cp	r1, r24
    37c0:	4c f5       	brge	.+82     	; 0x3814 <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e2       	ldi	r20, 0x20	; 32
    37d0:	51 e4       	ldi	r21, 0x41	; 65
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	bc 01       	movw	r22, r24
    37dc:	cd 01       	movw	r24, r26
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	9e 83       	std	Y+6, r25	; 0x06
    37e8:	8d 83       	std	Y+5, r24	; 0x05
    37ea:	0f c0       	rjmp	.+30     	; 0x380a <HCLCD_Vid4Bits_ClearScreen+0xd2>
    37ec:	88 ec       	ldi	r24, 0xC8	; 200
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	9c 83       	std	Y+4, r25	; 0x04
    37f2:	8b 83       	std	Y+3, r24	; 0x03
    37f4:	8b 81       	ldd	r24, Y+3	; 0x03
    37f6:	9c 81       	ldd	r25, Y+4	; 0x04
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    37fc:	9c 83       	std	Y+4, r25	; 0x04
    37fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3800:	8d 81       	ldd	r24, Y+5	; 0x05
    3802:	9e 81       	ldd	r25, Y+6	; 0x06
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	9e 83       	std	Y+6, r25	; 0x06
    3808:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380a:	8d 81       	ldd	r24, Y+5	; 0x05
    380c:	9e 81       	ldd	r25, Y+6	; 0x06
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	69 f7       	brne	.-38     	; 0x37ec <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3812:	14 c0       	rjmp	.+40     	; 0x383c <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3814:	6f 81       	ldd	r22, Y+7	; 0x07
    3816:	78 85       	ldd	r23, Y+8	; 0x08
    3818:	89 85       	ldd	r24, Y+9	; 0x09
    381a:	9a 85       	ldd	r25, Y+10	; 0x0a
    381c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	9e 83       	std	Y+6, r25	; 0x06
    3826:	8d 83       	std	Y+5, r24	; 0x05
    3828:	8d 81       	ldd	r24, Y+5	; 0x05
    382a:	9e 81       	ldd	r25, Y+6	; 0x06
    382c:	9a 83       	std	Y+2, r25	; 0x02
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	9a 81       	ldd	r25, Y+2	; 0x02
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3838:	9a 83       	std	Y+2, r25	; 0x02
    383a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    383c:	2e 96       	adiw	r28, 0x0e	; 14
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	cf 91       	pop	r28
    384a:	df 91       	pop	r29
    384c:	08 95       	ret

0000384e <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    384e:	df 93       	push	r29
    3850:	cf 93       	push	r28
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	60 97       	sbiw	r28, 0x10	; 16
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3864:	1f 86       	std	Y+15, r1	; 0x0f
    3866:	7b c0       	rjmp	.+246    	; 0x395e <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    386e:	88 e1       	ldi	r24, 0x18	; 24
    3870:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	a6 e9       	ldi	r26, 0x96	; 150
    387a:	b3 e4       	ldi	r27, 0x43	; 67
    387c:	8b 87       	std	Y+11, r24	; 0x0b
    387e:	9c 87       	std	Y+12, r25	; 0x0c
    3880:	ad 87       	std	Y+13, r26	; 0x0d
    3882:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3884:	6b 85       	ldd	r22, Y+11	; 0x0b
    3886:	7c 85       	ldd	r23, Y+12	; 0x0c
    3888:	8d 85       	ldd	r24, Y+13	; 0x0d
    388a:	9e 85       	ldd	r25, Y+14	; 0x0e
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	4a ef       	ldi	r20, 0xFA	; 250
    3892:	54 e4       	ldi	r21, 0x44	; 68
    3894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	8f 83       	std	Y+7, r24	; 0x07
    389e:	98 87       	std	Y+8, r25	; 0x08
    38a0:	a9 87       	std	Y+9, r26	; 0x09
    38a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38a4:	6f 81       	ldd	r22, Y+7	; 0x07
    38a6:	78 85       	ldd	r23, Y+8	; 0x08
    38a8:	89 85       	ldd	r24, Y+9	; 0x09
    38aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e8       	ldi	r20, 0x80	; 128
    38b2:	5f e3       	ldi	r21, 0x3F	; 63
    38b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38b8:	88 23       	and	r24, r24
    38ba:	2c f4       	brge	.+10     	; 0x38c6 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	9e 83       	std	Y+6, r25	; 0x06
    38c2:	8d 83       	std	Y+5, r24	; 0x05
    38c4:	3f c0       	rjmp	.+126    	; 0x3944 <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    38c6:	6f 81       	ldd	r22, Y+7	; 0x07
    38c8:	78 85       	ldd	r23, Y+8	; 0x08
    38ca:	89 85       	ldd	r24, Y+9	; 0x09
    38cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	3f ef       	ldi	r19, 0xFF	; 255
    38d2:	4f e7       	ldi	r20, 0x7F	; 127
    38d4:	57 e4       	ldi	r21, 0x47	; 71
    38d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38da:	18 16       	cp	r1, r24
    38dc:	4c f5       	brge	.+82     	; 0x3930 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38de:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	40 e2       	ldi	r20, 0x20	; 32
    38ec:	51 e4       	ldi	r21, 0x41	; 65
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	bc 01       	movw	r22, r24
    38f8:	cd 01       	movw	r24, r26
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	9e 83       	std	Y+6, r25	; 0x06
    3904:	8d 83       	std	Y+5, r24	; 0x05
    3906:	0f c0       	rjmp	.+30     	; 0x3926 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3908:	88 ec       	ldi	r24, 0xC8	; 200
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	9c 83       	std	Y+4, r25	; 0x04
    390e:	8b 83       	std	Y+3, r24	; 0x03
    3910:	8b 81       	ldd	r24, Y+3	; 0x03
    3912:	9c 81       	ldd	r25, Y+4	; 0x04
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3918:	9c 83       	std	Y+4, r25	; 0x04
    391a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391c:	8d 81       	ldd	r24, Y+5	; 0x05
    391e:	9e 81       	ldd	r25, Y+6	; 0x06
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	9e 83       	std	Y+6, r25	; 0x06
    3924:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3926:	8d 81       	ldd	r24, Y+5	; 0x05
    3928:	9e 81       	ldd	r25, Y+6	; 0x06
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	69 f7       	brne	.-38     	; 0x3908 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    392e:	14 c0       	rjmp	.+40     	; 0x3958 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3930:	6f 81       	ldd	r22, Y+7	; 0x07
    3932:	78 85       	ldd	r23, Y+8	; 0x08
    3934:	89 85       	ldd	r24, Y+9	; 0x09
    3936:	9a 85       	ldd	r25, Y+10	; 0x0a
    3938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	9e 83       	std	Y+6, r25	; 0x06
    3942:	8d 83       	std	Y+5, r24	; 0x05
    3944:	8d 81       	ldd	r24, Y+5	; 0x05
    3946:	9e 81       	ldd	r25, Y+6	; 0x06
    3948:	9a 83       	std	Y+2, r25	; 0x02
    394a:	89 83       	std	Y+1, r24	; 0x01
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	9a 81       	ldd	r25, Y+2	; 0x02
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	f1 f7       	brne	.-4      	; 0x3950 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    3954:	9a 83       	std	Y+2, r25	; 0x02
    3956:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3958:	8f 85       	ldd	r24, Y+15	; 0x0f
    395a:	8f 5f       	subi	r24, 0xFF	; 255
    395c:	8f 87       	std	Y+15, r24	; 0x0f
    395e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3960:	88 89       	ldd	r24, Y+16	; 0x10
    3962:	98 17       	cp	r25, r24
    3964:	08 f4       	brcc	.+2      	; 0x3968 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    3966:	80 cf       	rjmp	.-256    	; 0x3868 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3968:	60 96       	adiw	r28, 0x10	; 16
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	f8 94       	cli
    396e:	de bf       	out	0x3e, r29	; 62
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	cd bf       	out	0x3d, r28	; 61
    3974:	cf 91       	pop	r28
    3976:	df 91       	pop	r29
    3978:	08 95       	ret

0000397a <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    397a:	df 93       	push	r29
    397c:	cf 93       	push	r28
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62
    3982:	60 97       	sbiw	r28, 0x10	; 16
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	f8 94       	cli
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	cd bf       	out	0x3d, r28	; 61
    398e:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3990:	1f 86       	std	Y+15, r1	; 0x0f
    3992:	7b c0       	rjmp	.+246    	; 0x3a8a <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    399a:	8c e1       	ldi	r24, 0x1C	; 28
    399c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	a6 e9       	ldi	r26, 0x96	; 150
    39a6:	b3 e4       	ldi	r27, 0x43	; 67
    39a8:	8b 87       	std	Y+11, r24	; 0x0b
    39aa:	9c 87       	std	Y+12, r25	; 0x0c
    39ac:	ad 87       	std	Y+13, r26	; 0x0d
    39ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	4a ef       	ldi	r20, 0xFA	; 250
    39be:	54 e4       	ldi	r21, 0x44	; 68
    39c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	8f 83       	std	Y+7, r24	; 0x07
    39ca:	98 87       	std	Y+8, r25	; 0x08
    39cc:	a9 87       	std	Y+9, r26	; 0x09
    39ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39d0:	6f 81       	ldd	r22, Y+7	; 0x07
    39d2:	78 85       	ldd	r23, Y+8	; 0x08
    39d4:	89 85       	ldd	r24, Y+9	; 0x09
    39d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e8       	ldi	r20, 0x80	; 128
    39de:	5f e3       	ldi	r21, 0x3F	; 63
    39e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39e4:	88 23       	and	r24, r24
    39e6:	2c f4       	brge	.+10     	; 0x39f2 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	9e 83       	std	Y+6, r25	; 0x06
    39ee:	8d 83       	std	Y+5, r24	; 0x05
    39f0:	3f c0       	rjmp	.+126    	; 0x3a70 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    39f2:	6f 81       	ldd	r22, Y+7	; 0x07
    39f4:	78 85       	ldd	r23, Y+8	; 0x08
    39f6:	89 85       	ldd	r24, Y+9	; 0x09
    39f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	3f ef       	ldi	r19, 0xFF	; 255
    39fe:	4f e7       	ldi	r20, 0x7F	; 127
    3a00:	57 e4       	ldi	r21, 0x47	; 71
    3a02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a06:	18 16       	cp	r1, r24
    3a08:	4c f5       	brge	.+82     	; 0x3a5c <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e2       	ldi	r20, 0x20	; 32
    3a18:	51 e4       	ldi	r21, 0x41	; 65
    3a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	9e 83       	std	Y+6, r25	; 0x06
    3a30:	8d 83       	std	Y+5, r24	; 0x05
    3a32:	0f c0       	rjmp	.+30     	; 0x3a52 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    3a34:	88 ec       	ldi	r24, 0xC8	; 200
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	9c 83       	std	Y+4, r25	; 0x04
    3a3a:	8b 83       	std	Y+3, r24	; 0x03
    3a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    3a44:	9c 83       	std	Y+4, r25	; 0x04
    3a46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a48:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	9e 83       	std	Y+6, r25	; 0x06
    3a50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a52:	8d 81       	ldd	r24, Y+5	; 0x05
    3a54:	9e 81       	ldd	r25, Y+6	; 0x06
    3a56:	00 97       	sbiw	r24, 0x00	; 0
    3a58:	69 f7       	brne	.-38     	; 0x3a34 <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    3a5a:	14 c0       	rjmp	.+40     	; 0x3a84 <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5e:	78 85       	ldd	r23, Y+8	; 0x08
    3a60:	89 85       	ldd	r24, Y+9	; 0x09
    3a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	9e 83       	std	Y+6, r25	; 0x06
    3a6e:	8d 83       	std	Y+5, r24	; 0x05
    3a70:	8d 81       	ldd	r24, Y+5	; 0x05
    3a72:	9e 81       	ldd	r25, Y+6	; 0x06
    3a74:	9a 83       	std	Y+2, r25	; 0x02
    3a76:	89 83       	std	Y+1, r24	; 0x01
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    3a80:	9a 83       	std	Y+2, r25	; 0x02
    3a82:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a86:	8f 5f       	subi	r24, 0xFF	; 255
    3a88:	8f 87       	std	Y+15, r24	; 0x0f
    3a8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a8c:	88 89       	ldd	r24, Y+16	; 0x10
    3a8e:	98 17       	cp	r25, r24
    3a90:	08 f4       	brcc	.+2      	; 0x3a94 <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    3a92:	80 cf       	rjmp	.-256    	; 0x3994 <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    3a94:	60 96       	adiw	r28, 0x10	; 16
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	60 97       	sbiw	r28, 0x10	; 16
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3abc:	1f 86       	std	Y+15, r1	; 0x0f
    3abe:	7b c0       	rjmp	.+246    	; 0x3bb6 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3ac6:	80 e1       	ldi	r24, 0x10	; 16
    3ac8:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    3acc:	80 e0       	ldi	r24, 0x00	; 0
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	a6 e9       	ldi	r26, 0x96	; 150
    3ad2:	b3 e4       	ldi	r27, 0x43	; 67
    3ad4:	8b 87       	std	Y+11, r24	; 0x0b
    3ad6:	9c 87       	std	Y+12, r25	; 0x0c
    3ad8:	ad 87       	std	Y+13, r26	; 0x0d
    3ada:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	4a ef       	ldi	r20, 0xFA	; 250
    3aea:	54 e4       	ldi	r21, 0x44	; 68
    3aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	8f 83       	std	Y+7, r24	; 0x07
    3af6:	98 87       	std	Y+8, r25	; 0x08
    3af8:	a9 87       	std	Y+9, r26	; 0x09
    3afa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3afc:	6f 81       	ldd	r22, Y+7	; 0x07
    3afe:	78 85       	ldd	r23, Y+8	; 0x08
    3b00:	89 85       	ldd	r24, Y+9	; 0x09
    3b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e8       	ldi	r20, 0x80	; 128
    3b0a:	5f e3       	ldi	r21, 0x3F	; 63
    3b0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b10:	88 23       	and	r24, r24
    3b12:	2c f4       	brge	.+10     	; 0x3b1e <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	9e 83       	std	Y+6, r25	; 0x06
    3b1a:	8d 83       	std	Y+5, r24	; 0x05
    3b1c:	3f c0       	rjmp	.+126    	; 0x3b9c <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    3b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b20:	78 85       	ldd	r23, Y+8	; 0x08
    3b22:	89 85       	ldd	r24, Y+9	; 0x09
    3b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	3f ef       	ldi	r19, 0xFF	; 255
    3b2a:	4f e7       	ldi	r20, 0x7F	; 127
    3b2c:	57 e4       	ldi	r21, 0x47	; 71
    3b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b32:	18 16       	cp	r1, r24
    3b34:	4c f5       	brge	.+82     	; 0x3b88 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	40 e2       	ldi	r20, 0x20	; 32
    3b44:	51 e4       	ldi	r21, 0x41	; 65
    3b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	bc 01       	movw	r22, r24
    3b50:	cd 01       	movw	r24, r26
    3b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	9e 83       	std	Y+6, r25	; 0x06
    3b5c:	8d 83       	std	Y+5, r24	; 0x05
    3b5e:	0f c0       	rjmp	.+30     	; 0x3b7e <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    3b60:	88 ec       	ldi	r24, 0xC8	; 200
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	9c 83       	std	Y+4, r25	; 0x04
    3b66:	8b 83       	std	Y+3, r24	; 0x03
    3b68:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	f1 f7       	brne	.-4      	; 0x3b6c <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    3b70:	9c 83       	std	Y+4, r25	; 0x04
    3b72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b74:	8d 81       	ldd	r24, Y+5	; 0x05
    3b76:	9e 81       	ldd	r25, Y+6	; 0x06
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	9e 83       	std	Y+6, r25	; 0x06
    3b7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	9e 81       	ldd	r25, Y+6	; 0x06
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	69 f7       	brne	.-38     	; 0x3b60 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    3b86:	14 c0       	rjmp	.+40     	; 0x3bb0 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b88:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8a:	78 85       	ldd	r23, Y+8	; 0x08
    3b8c:	89 85       	ldd	r24, Y+9	; 0x09
    3b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	9e 83       	std	Y+6, r25	; 0x06
    3b9a:	8d 83       	std	Y+5, r24	; 0x05
    3b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba0:	9a 83       	std	Y+2, r25	; 0x02
    3ba2:	89 83       	std	Y+1, r24	; 0x01
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	f1 f7       	brne	.-4      	; 0x3ba8 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    3bac:	9a 83       	std	Y+2, r25	; 0x02
    3bae:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb2:	8f 5f       	subi	r24, 0xFF	; 255
    3bb4:	8f 87       	std	Y+15, r24	; 0x0f
    3bb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bb8:	88 89       	ldd	r24, Y+16	; 0x10
    3bba:	98 17       	cp	r25, r24
    3bbc:	08 f4       	brcc	.+2      	; 0x3bc0 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    3bbe:	80 cf       	rjmp	.-256    	; 0x3ac0 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3bc0:	60 96       	adiw	r28, 0x10	; 16
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	de bf       	out	0x3e, r29	; 62
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	cd bf       	out	0x3d, r28	; 61
    3bcc:	cf 91       	pop	r28
    3bce:	df 91       	pop	r29
    3bd0:	08 95       	ret

00003bd2 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3bd2:	df 93       	push	r29
    3bd4:	cf 93       	push	r28
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	60 97       	sbiw	r28, 0x10	; 16
    3bdc:	0f b6       	in	r0, 0x3f	; 63
    3bde:	f8 94       	cli
    3be0:	de bf       	out	0x3e, r29	; 62
    3be2:	0f be       	out	0x3f, r0	; 63
    3be4:	cd bf       	out	0x3d, r28	; 61
    3be6:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3be8:	1f 86       	std	Y+15, r1	; 0x0f
    3bea:	7b c0       	rjmp	.+246    	; 0x3ce2 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    3bf2:	84 e1       	ldi	r24, 0x14	; 20
    3bf4:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HCLCD_Vid4Bits_SendCommand>
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	a6 e9       	ldi	r26, 0x96	; 150
    3bfe:	b3 e4       	ldi	r27, 0x43	; 67
    3c00:	8b 87       	std	Y+11, r24	; 0x0b
    3c02:	9c 87       	std	Y+12, r25	; 0x0c
    3c04:	ad 87       	std	Y+13, r26	; 0x0d
    3c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	4a ef       	ldi	r20, 0xFA	; 250
    3c16:	54 e4       	ldi	r21, 0x44	; 68
    3c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	8f 83       	std	Y+7, r24	; 0x07
    3c22:	98 87       	std	Y+8, r25	; 0x08
    3c24:	a9 87       	std	Y+9, r26	; 0x09
    3c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c28:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2a:	78 85       	ldd	r23, Y+8	; 0x08
    3c2c:	89 85       	ldd	r24, Y+9	; 0x09
    3c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e8       	ldi	r20, 0x80	; 128
    3c36:	5f e3       	ldi	r21, 0x3F	; 63
    3c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c3c:	88 23       	and	r24, r24
    3c3e:	2c f4       	brge	.+10     	; 0x3c4a <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9e 83       	std	Y+6, r25	; 0x06
    3c46:	8d 83       	std	Y+5, r24	; 0x05
    3c48:	3f c0       	rjmp	.+126    	; 0x3cc8 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	3f ef       	ldi	r19, 0xFF	; 255
    3c56:	4f e7       	ldi	r20, 0x7F	; 127
    3c58:	57 e4       	ldi	r21, 0x47	; 71
    3c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c5e:	18 16       	cp	r1, r24
    3c60:	4c f5       	brge	.+82     	; 0x3cb4 <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e2       	ldi	r20, 0x20	; 32
    3c70:	51 e4       	ldi	r21, 0x41	; 65
    3c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	bc 01       	movw	r22, r24
    3c7c:	cd 01       	movw	r24, r26
    3c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	9e 83       	std	Y+6, r25	; 0x06
    3c88:	8d 83       	std	Y+5, r24	; 0x05
    3c8a:	0f c0       	rjmp	.+30     	; 0x3caa <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    3c8c:	88 ec       	ldi	r24, 0xC8	; 200
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	9c 83       	std	Y+4, r25	; 0x04
    3c92:	8b 83       	std	Y+3, r24	; 0x03
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	9c 81       	ldd	r25, Y+4	; 0x04
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	f1 f7       	brne	.-4      	; 0x3c98 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    3c9c:	9c 83       	std	Y+4, r25	; 0x04
    3c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	9e 83       	std	Y+6, r25	; 0x06
    3ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3caa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cac:	9e 81       	ldd	r25, Y+6	; 0x06
    3cae:	00 97       	sbiw	r24, 0x00	; 0
    3cb0:	69 f7       	brne	.-38     	; 0x3c8c <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    3cb2:	14 c0       	rjmp	.+40     	; 0x3cdc <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb6:	78 85       	ldd	r23, Y+8	; 0x08
    3cb8:	89 85       	ldd	r24, Y+9	; 0x09
    3cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	9e 83       	std	Y+6, r25	; 0x06
    3cc6:	8d 83       	std	Y+5, r24	; 0x05
    3cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ccc:	9a 83       	std	Y+2, r25	; 0x02
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cde:	8f 5f       	subi	r24, 0xFF	; 255
    3ce0:	8f 87       	std	Y+15, r24	; 0x0f
    3ce2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ce4:	88 89       	ldd	r24, Y+16	; 0x10
    3ce6:	98 17       	cp	r25, r24
    3ce8:	08 f4       	brcc	.+2      	; 0x3cec <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    3cea:	80 cf       	rjmp	.-256    	; 0x3bec <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    3cec:	60 96       	adiw	r28, 0x10	; 16
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	08 95       	ret

00003cfe <main>:
LED_t Y_LED4 = {HLED_PORTB,PIN3};



int main(void)
{
    3cfe:	0f 93       	push	r16
    3d00:	1f 93       	push	r17
    3d02:	df 93       	push	r29
    3d04:	cf 93       	push	r28
    3d06:	cd b7       	in	r28, 0x3d	; 61
    3d08:	de b7       	in	r29, 0x3e	; 62
    3d0a:	c6 54       	subi	r28, 0x46	; 70
    3d0c:	d0 40       	sbci	r29, 0x00	; 0
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	cd bf       	out	0x3d, r28	; 61
	 * V_out = D * V_in
	 * */

	//MTIMER0_VidSetCTCValue(192);
	/*Timer Initialization*/
	MTIMER0_VidInit();
    3d18:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTIMER0_VidInit>
	//MGIE_VidEnable();

	/*Generate PWM on this OC0-->Pin PB3*/
	HLED_VidInit(&Y_LED4);
    3d1c:	88 e6       	ldi	r24, 0x68	; 104
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <HLED_VidInit>

	while(1)
	{
		/*change in T_on*/
		MTIMER0_VidSetCTCValue(100);
    3d24:	84 e6       	ldi	r24, 0x64	; 100
    3d26:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <MTIMER0_VidSetCTCValue>
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	ed 5b       	subi	r30, 0xBD	; 189
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e8       	ldi	r25, 0x80	; 128
    3d34:	ab e3       	ldi	r26, 0x3B	; 59
    3d36:	b5 e4       	ldi	r27, 0x45	; 69
    3d38:	80 83       	st	Z, r24
    3d3a:	91 83       	std	Z+1, r25	; 0x01
    3d3c:	a2 83       	std	Z+2, r26	; 0x02
    3d3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d40:	8e 01       	movw	r16, r28
    3d42:	01 5c       	subi	r16, 0xC1	; 193
    3d44:	1f 4f       	sbci	r17, 0xFF	; 255
    3d46:	fe 01       	movw	r30, r28
    3d48:	ed 5b       	subi	r30, 0xBD	; 189
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	60 81       	ld	r22, Z
    3d4e:	71 81       	ldd	r23, Z+1	; 0x01
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	93 81       	ldd	r25, Z+3	; 0x03
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	4a ef       	ldi	r20, 0xFA	; 250
    3d5a:	54 e4       	ldi	r21, 0x44	; 68
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	f8 01       	movw	r30, r16
    3d66:	80 83       	st	Z, r24
    3d68:	91 83       	std	Z+1, r25	; 0x01
    3d6a:	a2 83       	std	Z+2, r26	; 0x02
    3d6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ff 96       	adiw	r30, 0x3f	; 63
    3d72:	60 81       	ld	r22, Z
    3d74:	71 81       	ldd	r23, Z+1	; 0x01
    3d76:	82 81       	ldd	r24, Z+2	; 0x02
    3d78:	93 81       	ldd	r25, Z+3	; 0x03
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e8       	ldi	r20, 0x80	; 128
    3d80:	5f e3       	ldi	r21, 0x3F	; 63
    3d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d86:	88 23       	and	r24, r24
    3d88:	2c f4       	brge	.+10     	; 0x3d94 <main+0x96>
		__ticks = 1;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	9e af       	std	Y+62, r25	; 0x3e
    3d90:	8d af       	std	Y+61, r24	; 0x3d
    3d92:	46 c0       	rjmp	.+140    	; 0x3e20 <main+0x122>
	else if (__tmp > 65535)
    3d94:	fe 01       	movw	r30, r28
    3d96:	ff 96       	adiw	r30, 0x3f	; 63
    3d98:	60 81       	ld	r22, Z
    3d9a:	71 81       	ldd	r23, Z+1	; 0x01
    3d9c:	82 81       	ldd	r24, Z+2	; 0x02
    3d9e:	93 81       	ldd	r25, Z+3	; 0x03
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	3f ef       	ldi	r19, 0xFF	; 255
    3da4:	4f e7       	ldi	r20, 0x7F	; 127
    3da6:	57 e4       	ldi	r21, 0x47	; 71
    3da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dac:	18 16       	cp	r1, r24
    3dae:	64 f5       	brge	.+88     	; 0x3e08 <main+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3db0:	fe 01       	movw	r30, r28
    3db2:	ed 5b       	subi	r30, 0xBD	; 189
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e2       	ldi	r20, 0x20	; 32
    3dc4:	51 e4       	ldi	r21, 0x41	; 65
    3dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	bc 01       	movw	r22, r24
    3dd0:	cd 01       	movw	r24, r26
    3dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	9e af       	std	Y+62, r25	; 0x3e
    3ddc:	8d af       	std	Y+61, r24	; 0x3d
    3dde:	0f c0       	rjmp	.+30     	; 0x3dfe <main+0x100>
    3de0:	88 ec       	ldi	r24, 0xC8	; 200
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	9c af       	std	Y+60, r25	; 0x3c
    3de6:	8b af       	std	Y+59, r24	; 0x3b
    3de8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3dea:	9c ad       	ldd	r25, Y+60	; 0x3c
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <main+0xee>
    3df0:	9c af       	std	Y+60, r25	; 0x3c
    3df2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3df6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	9e af       	std	Y+62, r25	; 0x3e
    3dfc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e00:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e02:	00 97       	sbiw	r24, 0x00	; 0
    3e04:	69 f7       	brne	.-38     	; 0x3de0 <main+0xe2>
    3e06:	16 c0       	rjmp	.+44     	; 0x3e34 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e08:	fe 01       	movw	r30, r28
    3e0a:	ff 96       	adiw	r30, 0x3f	; 63
    3e0c:	60 81       	ld	r22, Z
    3e0e:	71 81       	ldd	r23, Z+1	; 0x01
    3e10:	82 81       	ldd	r24, Z+2	; 0x02
    3e12:	93 81       	ldd	r25, Z+3	; 0x03
    3e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	9e af       	std	Y+62, r25	; 0x3e
    3e1e:	8d af       	std	Y+61, r24	; 0x3d
    3e20:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e22:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e24:	9a af       	std	Y+58, r25	; 0x3a
    3e26:	89 af       	std	Y+57, r24	; 0x39
    3e28:	89 ad       	ldd	r24, Y+57	; 0x39
    3e2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e2c:	01 97       	sbiw	r24, 0x01	; 1
    3e2e:	f1 f7       	brne	.-4      	; 0x3e2c <main+0x12e>
    3e30:	9a af       	std	Y+58, r25	; 0x3a
    3e32:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(3000);
		MTIMER0_VidSetCTCValue(128);
    3e34:	80 e8       	ldi	r24, 0x80	; 128
    3e36:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <MTIMER0_VidSetCTCValue>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e8       	ldi	r25, 0x80	; 128
    3e3e:	ab e3       	ldi	r26, 0x3B	; 59
    3e40:	b5 e4       	ldi	r27, 0x45	; 69
    3e42:	8d ab       	std	Y+53, r24	; 0x35
    3e44:	9e ab       	std	Y+54, r25	; 0x36
    3e46:	af ab       	std	Y+55, r26	; 0x37
    3e48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e4a:	6d a9       	ldd	r22, Y+53	; 0x35
    3e4c:	7e a9       	ldd	r23, Y+54	; 0x36
    3e4e:	8f a9       	ldd	r24, Y+55	; 0x37
    3e50:	98 ad       	ldd	r25, Y+56	; 0x38
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	4a ef       	ldi	r20, 0xFA	; 250
    3e58:	54 e4       	ldi	r21, 0x44	; 68
    3e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	89 ab       	std	Y+49, r24	; 0x31
    3e64:	9a ab       	std	Y+50, r25	; 0x32
    3e66:	ab ab       	std	Y+51, r26	; 0x33
    3e68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    3e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    3e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    3e70:	9c a9       	ldd	r25, Y+52	; 0x34
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	40 e8       	ldi	r20, 0x80	; 128
    3e78:	5f e3       	ldi	r21, 0x3F	; 63
    3e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e7e:	88 23       	and	r24, r24
    3e80:	2c f4       	brge	.+10     	; 0x3e8c <main+0x18e>
		__ticks = 1;
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	98 ab       	std	Y+48, r25	; 0x30
    3e88:	8f a7       	std	Y+47, r24	; 0x2f
    3e8a:	3f c0       	rjmp	.+126    	; 0x3f0a <main+0x20c>
	else if (__tmp > 65535)
    3e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    3e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    3e90:	8b a9       	ldd	r24, Y+51	; 0x33
    3e92:	9c a9       	ldd	r25, Y+52	; 0x34
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	3f ef       	ldi	r19, 0xFF	; 255
    3e98:	4f e7       	ldi	r20, 0x7F	; 127
    3e9a:	57 e4       	ldi	r21, 0x47	; 71
    3e9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ea0:	18 16       	cp	r1, r24
    3ea2:	4c f5       	brge	.+82     	; 0x3ef6 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ea4:	6d a9       	ldd	r22, Y+53	; 0x35
    3ea6:	7e a9       	ldd	r23, Y+54	; 0x36
    3ea8:	8f a9       	ldd	r24, Y+55	; 0x37
    3eaa:	98 ad       	ldd	r25, Y+56	; 0x38
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	40 e2       	ldi	r20, 0x20	; 32
    3eb2:	51 e4       	ldi	r21, 0x41	; 65
    3eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	cd 01       	movw	r24, r26
    3ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	98 ab       	std	Y+48, r25	; 0x30
    3eca:	8f a7       	std	Y+47, r24	; 0x2f
    3ecc:	0f c0       	rjmp	.+30     	; 0x3eec <main+0x1ee>
    3ece:	88 ec       	ldi	r24, 0xC8	; 200
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	9e a7       	std	Y+46, r25	; 0x2e
    3ed4:	8d a7       	std	Y+45, r24	; 0x2d
    3ed6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ed8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	f1 f7       	brne	.-4      	; 0x3eda <main+0x1dc>
    3ede:	9e a7       	std	Y+46, r25	; 0x2e
    3ee0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ee2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ee4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	98 ab       	std	Y+48, r25	; 0x30
    3eea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eec:	8f a5       	ldd	r24, Y+47	; 0x2f
    3eee:	98 a9       	ldd	r25, Y+48	; 0x30
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	69 f7       	brne	.-38     	; 0x3ece <main+0x1d0>
    3ef4:	14 c0       	rjmp	.+40     	; 0x3f1e <main+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef6:	69 a9       	ldd	r22, Y+49	; 0x31
    3ef8:	7a a9       	ldd	r23, Y+50	; 0x32
    3efa:	8b a9       	ldd	r24, Y+51	; 0x33
    3efc:	9c a9       	ldd	r25, Y+52	; 0x34
    3efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	98 ab       	std	Y+48, r25	; 0x30
    3f08:	8f a7       	std	Y+47, r24	; 0x2f
    3f0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f0c:	98 a9       	ldd	r25, Y+48	; 0x30
    3f0e:	9c a7       	std	Y+44, r25	; 0x2c
    3f10:	8b a7       	std	Y+43, r24	; 0x2b
    3f12:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f14:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f16:	01 97       	sbiw	r24, 0x01	; 1
    3f18:	f1 f7       	brne	.-4      	; 0x3f16 <main+0x218>
    3f1a:	9c a7       	std	Y+44, r25	; 0x2c
    3f1c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(3000);
		MTIMER0_VidSetCTCValue(192);   //D= 75%
    3f1e:	80 ec       	ldi	r24, 0xC0	; 192
    3f20:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <MTIMER0_VidSetCTCValue>
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	90 e8       	ldi	r25, 0x80	; 128
    3f28:	ab e3       	ldi	r26, 0x3B	; 59
    3f2a:	b5 e4       	ldi	r27, 0x45	; 69
    3f2c:	8f a3       	std	Y+39, r24	; 0x27
    3f2e:	98 a7       	std	Y+40, r25	; 0x28
    3f30:	a9 a7       	std	Y+41, r26	; 0x29
    3f32:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f34:	6f a1       	ldd	r22, Y+39	; 0x27
    3f36:	78 a5       	ldd	r23, Y+40	; 0x28
    3f38:	89 a5       	ldd	r24, Y+41	; 0x29
    3f3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	4a ef       	ldi	r20, 0xFA	; 250
    3f42:	54 e4       	ldi	r21, 0x44	; 68
    3f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	8b a3       	std	Y+35, r24	; 0x23
    3f4e:	9c a3       	std	Y+36, r25	; 0x24
    3f50:	ad a3       	std	Y+37, r26	; 0x25
    3f52:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f54:	6b a1       	ldd	r22, Y+35	; 0x23
    3f56:	7c a1       	ldd	r23, Y+36	; 0x24
    3f58:	8d a1       	ldd	r24, Y+37	; 0x25
    3f5a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	40 e8       	ldi	r20, 0x80	; 128
    3f62:	5f e3       	ldi	r21, 0x3F	; 63
    3f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f68:	88 23       	and	r24, r24
    3f6a:	2c f4       	brge	.+10     	; 0x3f76 <main+0x278>
		__ticks = 1;
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	9a a3       	std	Y+34, r25	; 0x22
    3f72:	89 a3       	std	Y+33, r24	; 0x21
    3f74:	3f c0       	rjmp	.+126    	; 0x3ff4 <main+0x2f6>
	else if (__tmp > 65535)
    3f76:	6b a1       	ldd	r22, Y+35	; 0x23
    3f78:	7c a1       	ldd	r23, Y+36	; 0x24
    3f7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	3f ef       	ldi	r19, 0xFF	; 255
    3f82:	4f e7       	ldi	r20, 0x7F	; 127
    3f84:	57 e4       	ldi	r21, 0x47	; 71
    3f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f8a:	18 16       	cp	r1, r24
    3f8c:	4c f5       	brge	.+82     	; 0x3fe0 <main+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f8e:	6f a1       	ldd	r22, Y+39	; 0x27
    3f90:	78 a5       	ldd	r23, Y+40	; 0x28
    3f92:	89 a5       	ldd	r24, Y+41	; 0x29
    3f94:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e2       	ldi	r20, 0x20	; 32
    3f9c:	51 e4       	ldi	r21, 0x41	; 65
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	cd 01       	movw	r24, r26
    3faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	9a a3       	std	Y+34, r25	; 0x22
    3fb4:	89 a3       	std	Y+33, r24	; 0x21
    3fb6:	0f c0       	rjmp	.+30     	; 0x3fd6 <main+0x2d8>
    3fb8:	88 ec       	ldi	r24, 0xC8	; 200
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	98 a3       	std	Y+32, r25	; 0x20
    3fbe:	8f 8f       	std	Y+31, r24	; 0x1f
    3fc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fc2:	98 a1       	ldd	r25, Y+32	; 0x20
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <main+0x2c6>
    3fc8:	98 a3       	std	Y+32, r25	; 0x20
    3fca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fcc:	89 a1       	ldd	r24, Y+33	; 0x21
    3fce:	9a a1       	ldd	r25, Y+34	; 0x22
    3fd0:	01 97       	sbiw	r24, 0x01	; 1
    3fd2:	9a a3       	std	Y+34, r25	; 0x22
    3fd4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd6:	89 a1       	ldd	r24, Y+33	; 0x21
    3fd8:	9a a1       	ldd	r25, Y+34	; 0x22
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	69 f7       	brne	.-38     	; 0x3fb8 <main+0x2ba>
    3fde:	14 c0       	rjmp	.+40     	; 0x4008 <main+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe0:	6b a1       	ldd	r22, Y+35	; 0x23
    3fe2:	7c a1       	ldd	r23, Y+36	; 0x24
    3fe4:	8d a1       	ldd	r24, Y+37	; 0x25
    3fe6:	9e a1       	ldd	r25, Y+38	; 0x26
    3fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	9a a3       	std	Y+34, r25	; 0x22
    3ff2:	89 a3       	std	Y+33, r24	; 0x21
    3ff4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ff6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ff8:	9e 8f       	std	Y+30, r25	; 0x1e
    3ffa:	8d 8f       	std	Y+29, r24	; 0x1d
    3ffc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ffe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	f1 f7       	brne	.-4      	; 0x4000 <main+0x302>
    4004:	9e 8f       	std	Y+30, r25	; 0x1e
    4006:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(3000);
		MTIMER0_VidSetCTCValue(220);
    4008:	8c ed       	ldi	r24, 0xDC	; 220
    400a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <MTIMER0_VidSetCTCValue>
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e8       	ldi	r25, 0x80	; 128
    4012:	ab e3       	ldi	r26, 0x3B	; 59
    4014:	b5 e4       	ldi	r27, 0x45	; 69
    4016:	89 8f       	std	Y+25, r24	; 0x19
    4018:	9a 8f       	std	Y+26, r25	; 0x1a
    401a:	ab 8f       	std	Y+27, r26	; 0x1b
    401c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    401e:	69 8d       	ldd	r22, Y+25	; 0x19
    4020:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	4a ef       	ldi	r20, 0xFA	; 250
    402c:	54 e4       	ldi	r21, 0x44	; 68
    402e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4032:	dc 01       	movw	r26, r24
    4034:	cb 01       	movw	r24, r22
    4036:	8d 8b       	std	Y+21, r24	; 0x15
    4038:	9e 8b       	std	Y+22, r25	; 0x16
    403a:	af 8b       	std	Y+23, r26	; 0x17
    403c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    403e:	6d 89       	ldd	r22, Y+21	; 0x15
    4040:	7e 89       	ldd	r23, Y+22	; 0x16
    4042:	8f 89       	ldd	r24, Y+23	; 0x17
    4044:	98 8d       	ldd	r25, Y+24	; 0x18
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	40 e8       	ldi	r20, 0x80	; 128
    404c:	5f e3       	ldi	r21, 0x3F	; 63
    404e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4052:	88 23       	and	r24, r24
    4054:	2c f4       	brge	.+10     	; 0x4060 <main+0x362>
		__ticks = 1;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	9c 8b       	std	Y+20, r25	; 0x14
    405c:	8b 8b       	std	Y+19, r24	; 0x13
    405e:	3f c0       	rjmp	.+126    	; 0x40de <main+0x3e0>
	else if (__tmp > 65535)
    4060:	6d 89       	ldd	r22, Y+21	; 0x15
    4062:	7e 89       	ldd	r23, Y+22	; 0x16
    4064:	8f 89       	ldd	r24, Y+23	; 0x17
    4066:	98 8d       	ldd	r25, Y+24	; 0x18
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	3f ef       	ldi	r19, 0xFF	; 255
    406c:	4f e7       	ldi	r20, 0x7F	; 127
    406e:	57 e4       	ldi	r21, 0x47	; 71
    4070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4074:	18 16       	cp	r1, r24
    4076:	4c f5       	brge	.+82     	; 0x40ca <main+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4078:	69 8d       	ldd	r22, Y+25	; 0x19
    407a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    407c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    407e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	40 e2       	ldi	r20, 0x20	; 32
    4086:	51 e4       	ldi	r21, 0x41	; 65
    4088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	bc 01       	movw	r22, r24
    4092:	cd 01       	movw	r24, r26
    4094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	9c 8b       	std	Y+20, r25	; 0x14
    409e:	8b 8b       	std	Y+19, r24	; 0x13
    40a0:	0f c0       	rjmp	.+30     	; 0x40c0 <main+0x3c2>
    40a2:	88 ec       	ldi	r24, 0xC8	; 200
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	9a 8b       	std	Y+18, r25	; 0x12
    40a8:	89 8b       	std	Y+17, r24	; 0x11
    40aa:	89 89       	ldd	r24, Y+17	; 0x11
    40ac:	9a 89       	ldd	r25, Y+18	; 0x12
    40ae:	01 97       	sbiw	r24, 0x01	; 1
    40b0:	f1 f7       	brne	.-4      	; 0x40ae <main+0x3b0>
    40b2:	9a 8b       	std	Y+18, r25	; 0x12
    40b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b6:	8b 89       	ldd	r24, Y+19	; 0x13
    40b8:	9c 89       	ldd	r25, Y+20	; 0x14
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	9c 8b       	std	Y+20, r25	; 0x14
    40be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c0:	8b 89       	ldd	r24, Y+19	; 0x13
    40c2:	9c 89       	ldd	r25, Y+20	; 0x14
    40c4:	00 97       	sbiw	r24, 0x00	; 0
    40c6:	69 f7       	brne	.-38     	; 0x40a2 <main+0x3a4>
    40c8:	14 c0       	rjmp	.+40     	; 0x40f2 <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ca:	6d 89       	ldd	r22, Y+21	; 0x15
    40cc:	7e 89       	ldd	r23, Y+22	; 0x16
    40ce:	8f 89       	ldd	r24, Y+23	; 0x17
    40d0:	98 8d       	ldd	r25, Y+24	; 0x18
    40d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	9c 8b       	std	Y+20, r25	; 0x14
    40dc:	8b 8b       	std	Y+19, r24	; 0x13
    40de:	8b 89       	ldd	r24, Y+19	; 0x13
    40e0:	9c 89       	ldd	r25, Y+20	; 0x14
    40e2:	98 8b       	std	Y+16, r25	; 0x10
    40e4:	8f 87       	std	Y+15, r24	; 0x0f
    40e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e8:	98 89       	ldd	r25, Y+16	; 0x10
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	f1 f7       	brne	.-4      	; 0x40ea <main+0x3ec>
    40ee:	98 8b       	std	Y+16, r25	; 0x10
    40f0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		MTIMER0_VidSetCTCValue(255);   //D = 100%
    40f2:	8f ef       	ldi	r24, 0xFF	; 255
    40f4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <MTIMER0_VidSetCTCValue>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	90 e8       	ldi	r25, 0x80	; 128
    40fc:	ab e3       	ldi	r26, 0x3B	; 59
    40fe:	b5 e4       	ldi	r27, 0x45	; 69
    4100:	8b 87       	std	Y+11, r24	; 0x0b
    4102:	9c 87       	std	Y+12, r25	; 0x0c
    4104:	ad 87       	std	Y+13, r26	; 0x0d
    4106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4108:	6b 85       	ldd	r22, Y+11	; 0x0b
    410a:	7c 85       	ldd	r23, Y+12	; 0x0c
    410c:	8d 85       	ldd	r24, Y+13	; 0x0d
    410e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	4a ef       	ldi	r20, 0xFA	; 250
    4116:	54 e4       	ldi	r21, 0x44	; 68
    4118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	8f 83       	std	Y+7, r24	; 0x07
    4122:	98 87       	std	Y+8, r25	; 0x08
    4124:	a9 87       	std	Y+9, r26	; 0x09
    4126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4128:	6f 81       	ldd	r22, Y+7	; 0x07
    412a:	78 85       	ldd	r23, Y+8	; 0x08
    412c:	89 85       	ldd	r24, Y+9	; 0x09
    412e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	40 e8       	ldi	r20, 0x80	; 128
    4136:	5f e3       	ldi	r21, 0x3F	; 63
    4138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    413c:	88 23       	and	r24, r24
    413e:	2c f4       	brge	.+10     	; 0x414a <main+0x44c>
		__ticks = 1;
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	9e 83       	std	Y+6, r25	; 0x06
    4146:	8d 83       	std	Y+5, r24	; 0x05
    4148:	3f c0       	rjmp	.+126    	; 0x41c8 <main+0x4ca>
	else if (__tmp > 65535)
    414a:	6f 81       	ldd	r22, Y+7	; 0x07
    414c:	78 85       	ldd	r23, Y+8	; 0x08
    414e:	89 85       	ldd	r24, Y+9	; 0x09
    4150:	9a 85       	ldd	r25, Y+10	; 0x0a
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	3f ef       	ldi	r19, 0xFF	; 255
    4156:	4f e7       	ldi	r20, 0x7F	; 127
    4158:	57 e4       	ldi	r21, 0x47	; 71
    415a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    415e:	18 16       	cp	r1, r24
    4160:	4c f5       	brge	.+82     	; 0x41b4 <main+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4162:	6b 85       	ldd	r22, Y+11	; 0x0b
    4164:	7c 85       	ldd	r23, Y+12	; 0x0c
    4166:	8d 85       	ldd	r24, Y+13	; 0x0d
    4168:	9e 85       	ldd	r25, Y+14	; 0x0e
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	40 e2       	ldi	r20, 0x20	; 32
    4170:	51 e4       	ldi	r21, 0x41	; 65
    4172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	bc 01       	movw	r22, r24
    417c:	cd 01       	movw	r24, r26
    417e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	9e 83       	std	Y+6, r25	; 0x06
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	0f c0       	rjmp	.+30     	; 0x41aa <main+0x4ac>
    418c:	88 ec       	ldi	r24, 0xC8	; 200
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	9c 83       	std	Y+4, r25	; 0x04
    4192:	8b 83       	std	Y+3, r24	; 0x03
    4194:	8b 81       	ldd	r24, Y+3	; 0x03
    4196:	9c 81       	ldd	r25, Y+4	; 0x04
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	f1 f7       	brne	.-4      	; 0x4198 <main+0x49a>
    419c:	9c 83       	std	Y+4, r25	; 0x04
    419e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a0:	8d 81       	ldd	r24, Y+5	; 0x05
    41a2:	9e 81       	ldd	r25, Y+6	; 0x06
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	9e 83       	std	Y+6, r25	; 0x06
    41a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
    41ac:	9e 81       	ldd	r25, Y+6	; 0x06
    41ae:	00 97       	sbiw	r24, 0x00	; 0
    41b0:	69 f7       	brne	.-38     	; 0x418c <main+0x48e>
    41b2:	b8 cd       	rjmp	.-1168   	; 0x3d24 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b4:	6f 81       	ldd	r22, Y+7	; 0x07
    41b6:	78 85       	ldd	r23, Y+8	; 0x08
    41b8:	89 85       	ldd	r24, Y+9	; 0x09
    41ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    41bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	9e 83       	std	Y+6, r25	; 0x06
    41c6:	8d 83       	std	Y+5, r24	; 0x05
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	9e 81       	ldd	r25, Y+6	; 0x06
    41cc:	9a 83       	std	Y+2, r25	; 0x02
    41ce:	89 83       	std	Y+1, r24	; 0x01
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	9a 81       	ldd	r25, Y+2	; 0x02
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	f1 f7       	brne	.-4      	; 0x41d4 <main+0x4d6>
    41d8:	9a 83       	std	Y+2, r25	; 0x02
    41da:	89 83       	std	Y+1, r24	; 0x01
    41dc:	a3 cd       	rjmp	.-1210   	; 0x3d24 <main+0x26>

000041de <__udivmodsi4>:
    41de:	a1 e2       	ldi	r26, 0x21	; 33
    41e0:	1a 2e       	mov	r1, r26
    41e2:	aa 1b       	sub	r26, r26
    41e4:	bb 1b       	sub	r27, r27
    41e6:	fd 01       	movw	r30, r26
    41e8:	0d c0       	rjmp	.+26     	; 0x4204 <__udivmodsi4_ep>

000041ea <__udivmodsi4_loop>:
    41ea:	aa 1f       	adc	r26, r26
    41ec:	bb 1f       	adc	r27, r27
    41ee:	ee 1f       	adc	r30, r30
    41f0:	ff 1f       	adc	r31, r31
    41f2:	a2 17       	cp	r26, r18
    41f4:	b3 07       	cpc	r27, r19
    41f6:	e4 07       	cpc	r30, r20
    41f8:	f5 07       	cpc	r31, r21
    41fa:	20 f0       	brcs	.+8      	; 0x4204 <__udivmodsi4_ep>
    41fc:	a2 1b       	sub	r26, r18
    41fe:	b3 0b       	sbc	r27, r19
    4200:	e4 0b       	sbc	r30, r20
    4202:	f5 0b       	sbc	r31, r21

00004204 <__udivmodsi4_ep>:
    4204:	66 1f       	adc	r22, r22
    4206:	77 1f       	adc	r23, r23
    4208:	88 1f       	adc	r24, r24
    420a:	99 1f       	adc	r25, r25
    420c:	1a 94       	dec	r1
    420e:	69 f7       	brne	.-38     	; 0x41ea <__udivmodsi4_loop>
    4210:	60 95       	com	r22
    4212:	70 95       	com	r23
    4214:	80 95       	com	r24
    4216:	90 95       	com	r25
    4218:	9b 01       	movw	r18, r22
    421a:	ac 01       	movw	r20, r24
    421c:	bd 01       	movw	r22, r26
    421e:	cf 01       	movw	r24, r30
    4220:	08 95       	ret

00004222 <__prologue_saves__>:
    4222:	2f 92       	push	r2
    4224:	3f 92       	push	r3
    4226:	4f 92       	push	r4
    4228:	5f 92       	push	r5
    422a:	6f 92       	push	r6
    422c:	7f 92       	push	r7
    422e:	8f 92       	push	r8
    4230:	9f 92       	push	r9
    4232:	af 92       	push	r10
    4234:	bf 92       	push	r11
    4236:	cf 92       	push	r12
    4238:	df 92       	push	r13
    423a:	ef 92       	push	r14
    423c:	ff 92       	push	r15
    423e:	0f 93       	push	r16
    4240:	1f 93       	push	r17
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	ca 1b       	sub	r28, r26
    424c:	db 0b       	sbc	r29, r27
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	f8 94       	cli
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	cd bf       	out	0x3d, r28	; 61
    4258:	09 94       	ijmp

0000425a <__epilogue_restores__>:
    425a:	2a 88       	ldd	r2, Y+18	; 0x12
    425c:	39 88       	ldd	r3, Y+17	; 0x11
    425e:	48 88       	ldd	r4, Y+16	; 0x10
    4260:	5f 84       	ldd	r5, Y+15	; 0x0f
    4262:	6e 84       	ldd	r6, Y+14	; 0x0e
    4264:	7d 84       	ldd	r7, Y+13	; 0x0d
    4266:	8c 84       	ldd	r8, Y+12	; 0x0c
    4268:	9b 84       	ldd	r9, Y+11	; 0x0b
    426a:	aa 84       	ldd	r10, Y+10	; 0x0a
    426c:	b9 84       	ldd	r11, Y+9	; 0x09
    426e:	c8 84       	ldd	r12, Y+8	; 0x08
    4270:	df 80       	ldd	r13, Y+7	; 0x07
    4272:	ee 80       	ldd	r14, Y+6	; 0x06
    4274:	fd 80       	ldd	r15, Y+5	; 0x05
    4276:	0c 81       	ldd	r16, Y+4	; 0x04
    4278:	1b 81       	ldd	r17, Y+3	; 0x03
    427a:	aa 81       	ldd	r26, Y+2	; 0x02
    427c:	b9 81       	ldd	r27, Y+1	; 0x01
    427e:	ce 0f       	add	r28, r30
    4280:	d1 1d       	adc	r29, r1
    4282:	0f b6       	in	r0, 0x3f	; 63
    4284:	f8 94       	cli
    4286:	de bf       	out	0x3e, r29	; 62
    4288:	0f be       	out	0x3f, r0	; 63
    428a:	cd bf       	out	0x3d, r28	; 61
    428c:	ed 01       	movw	r28, r26
    428e:	08 95       	ret

00004290 <_exit>:
    4290:	f8 94       	cli

00004292 <__stop_program>:
    4292:	ff cf       	rjmp	.-2      	; 0x4292 <__stop_program>
