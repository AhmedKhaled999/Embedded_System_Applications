
22-EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ecc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00004ecc  00004f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000a6  008000a6  00004fa6  2**0
                  ALLOC
  3 .stab         0000624c  00000000  00000000  00004fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000247f  00000000  00000000  0000b1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d673  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f56c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010457  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011204  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000115f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011dbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_9>
      28:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_10>
      2c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 23 	call	0x474e	; 0x474e <main>
      8a:	0c 94 64 27 	jmp	0x4ec8	; 0x4ec8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e8       	ldi	r26, 0x8D	; 141
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 55 27 	jmp	0x4eaa	; 0x4eaa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 55 27 	jmp	0x4eaa	; 0x4eaa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e8       	ldi	r24, 0x8D	; 141
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 55 27 	jmp	0x4eaa	; 0x4eaa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 55 27 	jmp	0x4eaa	; 0x4eaa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 55 27 	jmp	0x4eaa	; 0x4eaa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MWDT_VidEnable>:
#include"MWDT_Private.h"

#define F_CPU  8000000UL
#include<util\delay.h>
void MWDT_VidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,3);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MWDT_VidDisable>:
void MWDT_VidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	 *************************************************************************************/
	/*******************************************Not Accepted*******************************
		                 WDTCR = 0b00011000;
			             WDTCR = 0b11110111;
    *************************************************************************************/
	 WDTCR =0b00011000; // in one instruction 1 cycle
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24

     WDTCR = 0x00;     	// must be all bits in this Register assigned with zeros
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
		WDTCR = 0b00011000;   //in one instruction 1 cycle
		WDTCR = 0x00;         //must be all bits in this Register assigned with zeros
	 ************************************************************************************/


}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MWDT_VidWDT_Sleep>:
void MWDT_VidWDT_Sleep(u8 Copy_u8SleepValue)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	WDTCR&=0xF8;
     b8a:	a1 e4       	ldi	r26, 0x41	; 65
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e1 e4       	ldi	r30, 0x41	; 65
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	88 7f       	andi	r24, 0xF8	; 248
     b96:	8c 93       	st	X, r24
	WDTCR|=Copy_u8SleepValue;
     b98:	a1 e4       	ldi	r26, 0x41	; 65
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e1 e4       	ldi	r30, 0x41	; 65
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	90 81       	ld	r25, Z
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24
}
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <MUSART_VidInit>:

//#include<util\delay.h>

/*USART Initialization*/
void MUSART_VidInit(void)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Copy_UCSRC = 0;
     bba:	19 82       	std	Y+1, r1	; 0x01
	/*1- Select USART Mode*/
#if USART_SET_MODE == USART_ASYNCHRONOUS_MODE
	CLR_BIT(LOC_u8Copy_UCSRC,6);
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	8f 7b       	andi	r24, 0xBF	; 191
     bc0:	89 83       	std	Y+1, r24	; 0x01
#else
#error "USART Mode Is not valid..."
#endif
	/*2- Select Parity Mode*/
#if USART_SET_PARITY_MODE == USART_DISABLED_PARITY
	CLR_BIT(LOC_u8Copy_UCSRC,4);
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	8f 7e       	andi	r24, 0xEF	; 239
     bc6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LOC_u8Copy_UCSRC,5);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	8f 7d       	andi	r24, 0xDF	; 223
     bcc:	89 83       	std	Y+1, r24	; 0x01
#else
#error "USART Parity Mode Is not valid..."
#endif
	/*3- Select USART Stop Bit Number */
#if USART_SET_STOP_BIT == USART_STOP_ONE_BIT
	CLR_BIT(LOC_u8Copy_UCSRC,3);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	87 7f       	andi	r24, 0xF7	; 247
     bd2:	89 83       	std	Y+1, r24	; 0x01
#elif  USART_SET_CHR_SIZE == USART_CHR_SIZE_7
	CLR_BIT(LOC_u8Copy_UCSRC,1);
	SET_BIT(LOC_u8Copy_UCSRC,2);
	CLR_BIT(UCSRB,2);
#elif  USART_SET_CHR_SIZE == USART_CHR_SIZE_8
	SET_BIT(LOC_u8Copy_UCSRC,1);
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LOC_u8Copy_UCSRC,2);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	84 60       	ori	r24, 0x04	; 4
     bde:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB , 2);
     be0:	aa e2       	ldi	r26, 0x2A	; 42
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ea e2       	ldi	r30, 0x2A	; 42
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8b 7f       	andi	r24, 0xFB	; 251
     bec:	8c 93       	st	X, r24
#else
#error "USART CHR Size Is not valid..."
#endif
	/*Set LOC_u8Copy_UCSRC value in UCSRC Register
	 * and Select UCSRC Register */
	SET_BIT(LOC_u8Copy_UCSRC,7);
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	80 68       	ori	r24, 0x80	; 128
     bf2:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = LOC_u8Copy_UCSRC;
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	80 83       	st	Z, r24
	/*Set BaudRate -->9600*/
	UBRRL = 103;
     bfc:	e9 e2       	ldi	r30, 0x29	; 41
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	87 e6       	ldi	r24, 0x67	; 103
     c02:	80 83       	st	Z, r24
	/*Enable To TX and RX*/
	SET_BIT(UCSRB,4);
     c04:	aa e2       	ldi	r26, 0x2A	; 42
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	8c 93       	st	X, r24
	SET_BIT(UCSRB,3);
     c12:	aa e2       	ldi	r26, 0x2A	; 42
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ea e2       	ldi	r30, 0x2A	; 42
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 60       	ori	r24, 0x08	; 8
     c1e:	8c 93       	st	X, r24
}
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <MUSART_VidSendChar>:

/*USART Send Data*/
void MUSART_VidSendChar(u8 Copy_u8Data)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until Register Empty Flag is set*/
	while(GET_BIT(UCSRA,5)==0);
     c34:	eb e2       	ldi	r30, 0x2B	; 43
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	82 95       	swap	r24
     c3c:	86 95       	lsr	r24
     c3e:	87 70       	andi	r24, 0x07	; 7
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	a1 f3       	breq	.-24     	; 0xc34 <MUSART_VidSendChar+0xc>
	/**/
	UDR=Copy_u8Data;
     c4c:	ec e2       	ldi	r30, 0x2C	; 44
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	80 83       	st	Z, r24
}
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <MUSART_VidReceiveData>:
/*USART Receive Data*/
u8 MUSART_VidReceiveData(void)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
	/*Wait until Receive Complete Flag  is set*/
	while(GET_BIT(UCSRA,7)==0);
     c64:	eb e2       	ldi	r30, 0x2B	; 43
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	88 23       	and	r24, r24
     c6c:	dc f7       	brge	.-10     	; 0xc64 <MUSART_VidReceiveData+0x8>
	return UDR;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
}
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <MUSART_VidSendString>:

/*USART Send String*/
void MUSART_VidSendString(u8 *Copy_u8Data)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <MUSART_VidSendString+0x6>
     c80:	0f 92       	push	r0
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8CharCount= 0;
     c8a:	19 82       	std	Y+1, r1	; 0x01
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <MUSART_VidSendString+0x30>
	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
	{
		MUSART_VidSendChar(Copy_u8Data[LOC_u8CharCount]);
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	9b 81       	ldd	r25, Y+3	; 0x03
     c98:	fc 01       	movw	r30, r24
     c9a:	e2 0f       	add	r30, r18
     c9c:	f3 1f       	adc	r31, r19
     c9e:	80 81       	ld	r24, Z
     ca0:	0e 94 14 06 	call	0xc28	; 0xc28 <MUSART_VidSendChar>
		/*Wait few ms to make anther node receive data */
		//_delay_ms(100);
		LOC_u8CharCount++;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	89 83       	std	Y+1, r24	; 0x01

/*USART Send String*/
void MUSART_VidSendString(u8 *Copy_u8Data)
{
	u8 LOC_u8CharCount= 0;
	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	fc 01       	movw	r30, r24
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	39 f7       	brne	.-50     	; 0xc8e <MUSART_VidSendString+0x14>
		MUSART_VidSendChar(Copy_u8Data[LOC_u8CharCount]);
		/*Wait few ms to make anther node receive data */
		//_delay_ms(100);
		LOC_u8CharCount++;
	}
	MUSART_VidSendChar('\0');
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 14 06 	call	0xc28	; 0xc28 <MUSART_VidSendChar>

}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <MUSART_VidReceiveString>:

/*USART Receive String*/
void MUSART_VidReceiveString(u8 *Copy_u8Data)
{
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <MUSART_VidReceiveString+0xa>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9b 83       	std	Y+3, r25	; 0x03
     ce4:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8CharCount= 0;
     ce6:	19 82       	std	Y+1, r1	; 0x01
	Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	9b 81       	ldd	r25, Y+3	; 0x03
     cf2:	8c 01       	movw	r16, r24
     cf4:	02 0f       	add	r16, r18
     cf6:	13 1f       	adc	r17, r19
     cf8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <MUSART_VidReceiveData>
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <MUSART_VidReceiveString+0x4e>

	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
	{
		LOC_u8CharCount++;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	9b 81       	ldd	r25, Y+3	; 0x03
     d12:	8c 01       	movw	r16, r24
     d14:	02 0f       	add	r16, r18
     d16:	13 1f       	adc	r17, r19
     d18:	0e 94 2e 06 	call	0xc5c	; 0xc5c <MUSART_VidReceiveData>
     d1c:	f8 01       	movw	r30, r16
     d1e:	80 83       	st	Z, r24
void MUSART_VidReceiveString(u8 *Copy_u8Data)
{
	u8 LOC_u8CharCount= 0;
	Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();

	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	31 f7       	brne	.-52     	; 0xd02 <MUSART_VidReceiveString+0x30>
	{
		LOC_u8CharCount++;
		Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
	}
	Copy_u8Data[LOC_u8CharCount] = '\0';
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	fc 01       	movw	r30, r24
     d42:	e2 0f       	add	r30, r18
     d44:	f3 1f       	adc	r31, r19
     d46:	10 82       	st	Z, r1
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	08 95       	ret

00000d58 <MTWI_VidInitMaster>:
#include"MTWI_Config.h"
#include"MTWI_Interface.h"


void MTWI_VidInitMaster(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */

	TWBR = 0x02;
     d60:	e0 e2       	ldi	r30, 0x20	; 32
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	80 83       	st	Z, r24
	TWSR = 0x00;
     d68:	e1 e2       	ldi	r30, 0x21	; 33
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	          General Call Recognition: Off */
	TWAR = 0b00000010; // my address = 0x01 :)
     d6e:	e2 e2       	ldi	r30, 0x22	; 34
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	80 83       	st	Z, r24

	TWCR = (1<<2); /* enable TWI */
     d76:	e6 e5       	ldi	r30, 0x56	; 86
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	80 83       	st	Z, r24

}
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <MTWI_SendStartCondition>:
void MTWI_SendStartCondition(void)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
     d8c:	e6 e5       	ldi	r30, 0x56	; 86
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	84 ea       	ldi	r24, 0xA4	; 164
     d92:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(GET_BIT(TWCR,7)==0);
     d94:	e6 e5       	ldi	r30, 0x56	; 86
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	88 23       	and	r24, r24
     d9c:	dc f7       	brge	.-10     	; 0xd94 <MTWI_SendStartCondition+0x10>
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <MTWI_SendStopCondition>:
void MTWI_SendStopCondition(void)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
		 *  Enable TWI Module TWEN=1 ---> //SET_BIT(TWCR,2);
	        Sent stop condition on the bus ---> //SET_BIT(TWCR,4);
	        Clear the interrupt flag To start the previous operation
	         //SET_BIT(TWCR,7);
		 */
		TWCR = (1 << 7) | (1 << 4) | (1 << 2);
     dac:	e6 e5       	ldi	r30, 0x56	; 86
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	84 e9       	ldi	r24, 0x94	; 148
     db2:	80 83       	st	Z, r24
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <MTWI_MasterWriteDataByte>:
void MTWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	    TWDR = Copy_u8DataByte;
     dc6:	e3 e2       	ldi	r30, 0x23	; 35
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	80 83       	st	Z, r24
	    /*
		 * Clear the TWINT flag before sending the data TWINT=1
		 * Enable TWI Module TWEN=1
		 */
	    TWCR = (1 << 7) | (1 << 2);
     dce:	e6 e5       	ldi	r30, 0x56	; 86
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	84 e8       	ldi	r24, 0x84	; 132
     dd4:	80 83       	st	Z, r24
	    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
		while(GET_BIT(TWCR,7)==0);
     dd6:	e6 e5       	ldi	r30, 0x56	; 86
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	88 23       	and	r24, r24
     dde:	dc f7       	brge	.-10     	; 0xdd6 <MTWI_MasterWriteDataByte+0x1c>
}
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <MTWI_MasterReadDataByteWith_ACK>:
u8 MTWI_MasterReadDataByteWith_ACK(void)           //read with send Ack
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
		 * --------------------------------------------
		 *     Enable Acknowledge bit --> //SET_BIT(TWCR,6);
		 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	     *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
		 */
	    TWCR = (1 << 7) | (1 << 2) | (1 << 6);
     df0:	e6 e5       	ldi	r30, 0x56	; 86
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	84 ec       	ldi	r24, 0xC4	; 196
     df6:	80 83       	st	Z, r24
	    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
		while(GET_BIT(TWCR,7)==0);
     df8:	e6 e5       	ldi	r30, 0x56	; 86
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 23       	and	r24, r24
     e00:	dc f7       	brge	.-10     	; 0xdf8 <MTWI_MasterReadDataByteWith_ACK+0x10>
	    /* Read Data */
	    return TWDR;
     e02:	e3 e2       	ldi	r30, 0x23	; 35
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z



}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <MTWI_MasterReadDataByteWith_NACK>:
u8 MTWI_MasterReadDataByteWith_NACK(void)         //read without send Ack
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
		 * -------------------------------------------
		 * 	 * Disable Acknowledge bit --> //CLR_BIT(TWCR,6);
		 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	     *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
		 */
	    TWCR = (1 << 7) | (1 << 2);
     e16:	e6 e5       	ldi	r30, 0x56	; 86
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	84 e8       	ldi	r24, 0x84	; 132
     e1c:	80 83       	st	Z, r24
	    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
		while(GET_BIT(TWCR,7)==0);
     e1e:	e6 e5       	ldi	r30, 0x56	; 86
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	88 23       	and	r24, r24
     e26:	dc f7       	brge	.-10     	; 0xe1e <MTWI_MasterReadDataByteWith_NACK+0x10>
	    /* Read Data */
	    return TWDR;
     e28:	e3 e2       	ldi	r30, 0x23	; 35
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z

}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <MTWI_MASTERGetStatus>:

u8 MTWI_MASTERGetStatus(void)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	 u8 status;
	    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	    status = TWSR & 0xF8;
     e3e:	e1 e2       	ldi	r30, 0x21	; 33
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	88 7f       	andi	r24, 0xF8	; 248
     e46:	89 83       	std	Y+1, r24	; 0x01
	    return status;
     e48:	89 81       	ldd	r24, Y+1	; 0x01

}
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     e5a:	a3 e5       	ldi	r26, 0x53	; 83
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e3 e5       	ldi	r30, 0x53	; 83
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	88 7f       	andi	r24, 0xF8	; 248
     e66:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     e68:	a3 e5       	ldi	r26, 0x53	; 83
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e3 e5       	ldi	r30, 0x53	; 83
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	83 60       	ori	r24, 0x03	; 3
     e74:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     e76:	a3 e5       	ldi	r26, 0x53	; 83
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e3 e5       	ldi	r30, 0x53	; 83
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 64       	ori	r24, 0x40	; 64
     e82:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     e84:	a3 e5       	ldi	r26, 0x53	; 83
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e3 e5       	ldi	r30, 0x53	; 83
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	87 7f       	andi	r24, 0xF7	; 247
     e90:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     e92:	a3 e5       	ldi	r26, 0x53	; 83
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e3 e5       	ldi	r30, 0x53	; 83
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	80 62       	ori	r24, 0x20	; 32
     e9e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     ea0:	a3 e5       	ldi	r26, 0x53	; 83
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e3 e5       	ldi	r30, 0x53	; 83
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8f 7e       	andi	r24, 0xEF	; 239
     eac:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     ec0:	e2 e5       	ldi	r30, 0x52	; 82
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	80 83       	st	Z, r24
}
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     edc:	ec e5       	ldi	r30, 0x5C	; 92
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	80 83       	st	Z, r24
}
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <MTIMER0_VidOVF_SetCallBack+0x6>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	90 93 a8 00 	sts	0x00A8, r25
     f02:	80 93 a7 00 	sts	0x00A7, r24
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <MTIMER0_VidCTC_SetCallBack+0x6>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	90 93 a8 00 	sts	0x00A8, r25
     f26:	80 93 a7 00 	sts	0x00A7, r24
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     f5e:	e0 91 a7 00 	lds	r30, 0x00A7
     f62:	f0 91 a8 00 	lds	r31, 0x00A8
     f66:	09 95       	icall
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     fb8:	e0 91 a7 00 	lds	r30, 0x00A7
     fbc:	f0 91 a8 00 	lds	r31, 0x00A8
     fc0:	09 95       	icall
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     ff0:	ae e4       	ldi	r26, 0x4E	; 78
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee e4       	ldi	r30, 0x4E	; 78
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 7f       	andi	r24, 0xF8	; 248
     ffc:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     ffe:	ae e4       	ldi	r26, 0x4E	; 78
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ee e4       	ldi	r30, 0x4E	; 78
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	81 60       	ori	r24, 0x01	; 1
    100a:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);

#elif TIMER1_SET_MODE == TIMER1_ICU_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
    100c:	ae e4       	ldi	r26, 0x4E	; 78
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ee e4       	ldi	r30, 0x4E	; 78
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8f 7e       	andi	r24, 0xEF	; 239
    1018:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    101a:	ae e4       	ldi	r26, 0x4E	; 78
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ee e4       	ldi	r30, 0x4E	; 78
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    1028:	af e4       	ldi	r26, 0x4F	; 79
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ef e4       	ldi	r30, 0x4F	; 79
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8d 7f       	andi	r24, 0xFD	; 253
    1034:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
    1036:	af e4       	ldi	r26, 0x4F	; 79
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ef e4       	ldi	r30, 0x4F	; 79
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8e 7f       	andi	r24, 0xFE	; 254
    1042:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
    1044:	a9 e5       	ldi	r26, 0x59	; 89
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e9 e5       	ldi	r30, 0x59	; 89
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	84 60       	ori	r24, 0x04	; 4
    1050:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
    1052:	a9 e5       	ldi	r26, 0x59	; 89
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e9 e5       	ldi	r30, 0x59	; 89
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 62       	ori	r24, 0x20	; 32
    105e:	8c 93       	st	X, r24
	/*ICU Edge Select-->Rising edge*/
#if TIMER1_ICU_EDGE_SELECT == TIMER1_ICU_RISING_EDGE
	SET_BIT(TCCR1B,6);
    1060:	ae e4       	ldi	r26, 0x4E	; 78
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ee e4       	ldi	r30, 0x4E	; 78
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 64       	ori	r24, 0x40	; 64
    106c:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <MTIMER1_VidSetPreload+0x6>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
    1082:	ec e4       	ldi	r30, 0x4C	; 76
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    10a0:	ec e4       	ldi	r30, 0x4C	; 76
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
    10b6:	e6 e4       	ldi	r30, 0x46	; 70
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 23       	and	r24, r24
    10d4:	41 f4       	brne	.+16     	; 0x10e6 <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
    10d6:	ae e4       	ldi	r26, 0x4E	; 78
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	ee e4       	ldi	r30, 0x4E	; 78
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8f 7b       	andi	r24, 0xBF	; 191
    10e2:	8c 93       	st	X, r24
    10e4:	0a c0       	rjmp	.+20     	; 0x10fa <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	39 f4       	brne	.+14     	; 0x10fa <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
    10ec:	ae e4       	ldi	r26, 0x4E	; 78
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ee e4       	ldi	r30, 0x4E	; 78
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 64       	ori	r24, 0x40	; 64
    10f8:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <MTIMER1_VidOVF_SetCallBack+0x6>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	90 93 aa 00 	sts	0x00AA, r25
    1118:	80 93 a9 00 	sts	0x00A9, r24
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <MTIMER1_VidICF_SetCallBack+0x6>
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	90 93 ac 00 	sts	0x00AC, r25
    113c:	80 93 ab 00 	sts	0x00AB, r24
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    1174:	e0 91 a9 00 	lds	r30, 0x00A9
    1178:	f0 91 aa 00 	lds	r31, 0x00AA
    117c:	09 95       	icall
}
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	ff 91       	pop	r31
    1184:	ef 91       	pop	r30
    1186:	bf 91       	pop	r27
    1188:	af 91       	pop	r26
    118a:	9f 91       	pop	r25
    118c:	8f 91       	pop	r24
    118e:	7f 91       	pop	r23
    1190:	6f 91       	pop	r22
    1192:	5f 91       	pop	r21
    1194:	4f 91       	pop	r20
    1196:	3f 91       	pop	r19
    1198:	2f 91       	pop	r18
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	0f 90       	pop	r0
    11a0:	1f 90       	pop	r1
    11a2:	18 95       	reti

000011a4 <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
    11ce:	e0 91 ab 00 	lds	r30, 0x00AB
    11d2:	f0 91 ac 00 	lds	r31, 0x00AC
    11d6:	09 95       	icall
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <MSPI_VidMaster_Init>:
#include"MSPI_Private.h"
#include"MSPI_Config.h"

/*SPI Master Initialization*/
void MSPI_VidMaster_Init(void)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Ordered*/
#if MSPI_SET_DATA_ORDERED==MSPI_DATA_ORDERED_LSB
	SET_BIT(SPCR,5);
    1206:	ad e2       	ldi	r26, 0x2D	; 45
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ed e2       	ldi	r30, 0x2D	; 45
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 62       	ori	r24, 0x20	; 32
    1212:	8c 93       	st	X, r24
#else
#error"SPI Data Ordered option is not valid..."
#endif
	/*Set Clock Polarity*/
#if MSPI_SET_CLOCK_POLARITY==MSPI_CPOL_LEADING_RISING
	CLR_BIT(SPCR,3);
    1214:	ad e2       	ldi	r26, 0x2D	; 45
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	ed e2       	ldi	r30, 0x2D	; 45
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	87 7f       	andi	r24, 0xF7	; 247
    1220:	8c 93       	st	X, r24
#endif
	/*Set Clock Phase*/
#if MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SAMPLE
	CLR_BIT(SPCR,2);
#elif MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SETUP
	SET_BIT(SPCR,2);
    1222:	ad e2       	ldi	r26, 0x2D	; 45
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	ed e2       	ldi	r30, 0x2D	; 45
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	84 60       	ori	r24, 0x04	; 4
    122e:	8c 93       	st	X, r24
#else
#error"SPI Data Clock Phase option is not valid..."
#endif
	/*Set Double SPI Speed Bit*/
#if MSPI_SET_DOUBLE_SPEED==MSPI_NO_DOUBLE_SPEED
	CLR_BIT(SPSR,0);
    1230:	ae e2       	ldi	r26, 0x2E	; 46
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ee e2       	ldi	r30, 0x2E	; 46
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8e 7f       	andi	r24, 0xFE	; 254
    123c:	8c 93       	st	X, r24
#endif
	/*Set SPI Interrupt Enable*/
#if MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_ENABLE
	SET_BIT(SPCR,7);
#elif MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR,7);
    123e:	ad e2       	ldi	r26, 0x2D	; 45
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ed e2       	ldi	r30, 0x2D	; 45
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8f 77       	andi	r24, 0x7F	; 127
    124a:	8c 93       	st	X, r24
#else
#error"SPI Interrupt Enable option is not valid..."
#endif
	/*set SPI Clock Rate Select*/
	SPCR&=MSPI_BIT_MASKING;
    124c:	ad e2       	ldi	r26, 0x2D	; 45
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ed e2       	ldi	r30, 0x2D	; 45
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	8c 7f       	andi	r24, 0xFC	; 252
    1258:	8c 93       	st	X, r24
	SPCR|=MSPI_SET_CLOCK_RATE;
    125a:	ad e2       	ldi	r26, 0x2D	; 45
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	ed e2       	ldi	r30, 0x2D	; 45
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8c 93       	st	X, r24
	/*Set Master Mode*/
	SET_BIT(SPCR,4);
    1266:	ad e2       	ldi	r26, 0x2D	; 45
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ed e2       	ldi	r30, 0x2D	; 45
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 61       	ori	r24, 0x10	; 16
    1272:	8c 93       	st	X, r24
	/*SPI Enable*/
	SET_BIT(SPCR,6);
    1274:	ad e2       	ldi	r26, 0x2D	; 45
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ed e2       	ldi	r30, 0x2D	; 45
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	80 64       	ori	r24, 0x40	; 64
    1280:	8c 93       	st	X, r24
}
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <MSPI_VidSlave_Init>:
/*SPI Slave Initialization*/
void MSPI_VidSlave_Init(void)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Ordered*/
#if MSPI_SET_DATA_ORDERED==MSPI_DATA_ORDERED_LSB
	SET_BIT(SPCR,5);
    1290:	ad e2       	ldi	r26, 0x2D	; 45
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ed e2       	ldi	r30, 0x2D	; 45
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	8c 93       	st	X, r24
#else
#error"SPI Data Ordered option is not valid..."
#endif
	/*Set Clock Polarity*/
#if MSPI_SET_CLOCK_POLARITY==MSPI_CPOL_LEADING_RISING
	CLR_BIT(SPCR,3);
    129e:	ad e2       	ldi	r26, 0x2D	; 45
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ed e2       	ldi	r30, 0x2D	; 45
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	87 7f       	andi	r24, 0xF7	; 247
    12aa:	8c 93       	st	X, r24
#endif
	/*Set Clock Phase*/
#if MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SAMPLE
	CLR_BIT(SPCR,2);
#elif MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SETUP
	SET_BIT(SPCR,2);
    12ac:	ad e2       	ldi	r26, 0x2D	; 45
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ed e2       	ldi	r30, 0x2D	; 45
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	84 60       	ori	r24, 0x04	; 4
    12b8:	8c 93       	st	X, r24
#endif
	/*Set SPI Interrupt Enable*/
#if MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_ENABLE
	SET_BIT(SPCR,7);
#elif MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR,7);
    12ba:	ad e2       	ldi	r26, 0x2D	; 45
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ed e2       	ldi	r30, 0x2D	; 45
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	8f 77       	andi	r24, 0x7F	; 127
    12c6:	8c 93       	st	X, r24
#else
#error"SPI Interrupt Enable option is not valid..."
#endif

	/*Set Slave Mode*/
	CLR_BIT(SPCR,4);
    12c8:	ad e2       	ldi	r26, 0x2D	; 45
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ed e2       	ldi	r30, 0x2D	; 45
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7e       	andi	r24, 0xEF	; 239
    12d4:	8c 93       	st	X, r24
	/*SPI Enable*/
	SET_BIT(SPCR,6);
    12d6:	ad e2       	ldi	r26, 0x2D	; 45
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	ed e2       	ldi	r30, 0x2D	; 45
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	80 64       	ori	r24, 0x40	; 64
    12e2:	8c 93       	st	X, r24
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <MSPI_u8Send_Receive_Char>:
/*SPI Send and Receive Char*/
u8 MSPI_u8Send_Receive_Char(u8 Copy_u8Char)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
	/*Send Char*/
	SPDR=Copy_u8Char;
    12f6:	ef e2       	ldi	r30, 0x2F	; 47
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	80 83       	st	Z, r24
	/*wait on SPI Interrupt Flag is set to one*/
	while(GET_BIT(SPSR,7)==0);
    12fe:	ee e2       	ldi	r30, 0x2E	; 46
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	dc f7       	brge	.-10     	; 0x12fe <MSPI_u8Send_Receive_Char+0x14>
	return SPDR;
    1308:	ef e2       	ldi	r30, 0x2F	; 47
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
}
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <MSPI_u8Send_Char>:

void MSPI_u8Send_Char(u8 Copy_u8Char)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	0f 92       	push	r0
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	89 83       	std	Y+1, r24	; 0x01
	/*Send Char*/
	SPDR=Copy_u8Char; //send data by SPI
    1322:	ef e2       	ldi	r30, 0x2F	; 47
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	80 83       	st	Z, r24
	/*wait on SPI Interrupt Flag is set to one*/
	while(GET_BIT(SPSR,7)==0);//wait until SPI interrupt flag=1 (data is sent correctly)
    132a:	ee e2       	ldi	r30, 0x2E	; 46
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	88 23       	and	r24, r24
    1332:	dc f7       	brge	.-10     	; 0x132a <MSPI_u8Send_Char+0x14>
}
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <MSPI_Receive_Char>:

u8 MSPI_Receive_Char(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62

	/*wait on SPI Interrupt Flag is set to one*/
	while(GET_BIT(SPSR,7)==0);//wait until SPI interrupt flag=1(data is receive correctly)
    1344:	ee e2       	ldi	r30, 0x2E	; 46
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	88 23       	and	r24, r24
    134c:	dc f7       	brge	.-10     	; 0x1344 <MSPI_Receive_Char+0x8>
	return SPDR;//return the received byte from SPI data register
    134e:	ef e2       	ldi	r30, 0x2F	; 47
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <MSPI_u8Send_String>:

void MSPI_u8Send_String(const u8 *Str)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	00 d0       	rcall	.+0      	; 0x1360 <MSPI_u8Send_String+0x6>
    1360:	0f 92       	push	r0
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	9b 83       	std	Y+3, r25	; 0x03
    1368:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    136a:	19 82       	std	Y+1, r1	; 0x01
    136c:	0e c0       	rjmp	.+28     	; 0x138a <MSPI_u8Send_String+0x30>
	while(Str[i] != '\0')
	{
		MSPI_u8Send_Char(Str[i]);
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	fc 01       	movw	r30, r24
    137a:	e2 0f       	add	r30, r18
    137c:	f3 1f       	adc	r31, r19
    137e:	80 81       	ld	r24, Z
    1380:	0e 94 8b 09 	call	0x1316	; 0x1316 <MSPI_u8Send_Char>
		i++;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	89 83       	std	Y+1, r24	; 0x01
}

void MSPI_u8Send_String(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	fc 01       	movw	r30, r24
    1396:	e2 0f       	add	r30, r18
    1398:	f3 1f       	adc	r31, r19
    139a:	80 81       	ld	r24, Z
    139c:	88 23       	and	r24, r24
    139e:	39 f7       	brne	.-50     	; 0x136e <MSPI_u8Send_String+0x14>
	{
		MSPI_u8Send_Char(Str[i]);
		i++;
	}
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <MSPI_Receive_String>:

void MSPI_Receive_String(s8 *Str)
{
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <MSPI_Receive_String+0xa>
    13b6:	0f 92       	push	r0
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9b 83       	std	Y+3, r25	; 0x03
    13be:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    13c0:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = MSPI_Receive_Char();
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	8c 01       	movw	r16, r24
    13ce:	02 0f       	add	r16, r18
    13d0:	13 1f       	adc	r17, r19
    13d2:	0e 94 9e 09 	call	0x133c	; 0x133c <MSPI_Receive_Char>
    13d6:	f8 01       	movw	r30, r16
    13d8:	80 83       	st	Z, r24
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <MSPI_Receive_String+0x4e>
	while(Str[i] != '#')
	{
		i++;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = MSPI_Receive_Char();
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	9b 81       	ldd	r25, Y+3	; 0x03
    13ec:	8c 01       	movw	r16, r24
    13ee:	02 0f       	add	r16, r18
    13f0:	13 1f       	adc	r17, r19
    13f2:	0e 94 9e 09 	call	0x133c	; 0x133c <MSPI_Receive_Char>
    13f6:	f8 01       	movw	r30, r16
    13f8:	80 83       	st	Z, r24

void MSPI_Receive_String(s8 *Str)
{
	u8 i = 0;
	Str[i] = MSPI_Receive_Char();
	while(Str[i] != '#')
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	fc 01       	movw	r30, r24
    1406:	e2 0f       	add	r30, r18
    1408:	f3 1f       	adc	r31, r19
    140a:	80 81       	ld	r24, Z
    140c:	83 32       	cpi	r24, 0x23	; 35
    140e:	31 f7       	brne	.-52     	; 0x13dc <MSPI_Receive_String+0x30>
	{
		i++;
		Str[i] = MSPI_Receive_Char();
	}
	Str[i] = '\0';
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	9b 81       	ldd	r25, Y+3	; 0x03
    141a:	fc 01       	movw	r30, r24
    141c:	e2 0f       	add	r30, r18
    141e:	f3 1f       	adc	r31, r19
    1420:	10 82       	st	Z, r1
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    143a:	af e5       	ldi	r26, 0x5F	; 95
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ef e5       	ldi	r30, 0x5F	; 95
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 68       	ori	r24, 0x80	; 128
    1446:	8c 93       	st	X, r24
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1456:	af e5       	ldi	r26, 0x5F	; 95
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ef e5       	ldi	r30, 0x5F	; 95
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8f 77       	andi	r24, 0x7F	; 127
    1462:	8c 93       	st	X, r24
}
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    1472:	a5 e5       	ldi	r26, 0x55	; 85
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e5       	ldi	r30, 0x55	; 85
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	81 60       	ori	r24, 0x01	; 1
    147e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    1480:	a5 e5       	ldi	r26, 0x55	; 85
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e5 e5       	ldi	r30, 0x55	; 85
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	82 60       	ori	r24, 0x02	; 2
    148c:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    148e:	ab e5       	ldi	r26, 0x5B	; 91
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e5       	ldi	r30, 0x5B	; 91
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 64       	ori	r24, 0x40	; 64
    149a:	8c 93       	st	X, r24
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    14aa:	a5 e5       	ldi	r26, 0x55	; 85
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e5       	ldi	r30, 0x55	; 85
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	84 60       	ori	r24, 0x04	; 4
    14b6:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    14b8:	a5 e5       	ldi	r26, 0x55	; 85
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e5       	ldi	r30, 0x55	; 85
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 60       	ori	r24, 0x08	; 8
    14c4:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    14c6:	ab e5       	ldi	r26, 0x5B	; 91
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	eb e5       	ldi	r30, 0x5B	; 91
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 68       	ori	r24, 0x80	; 128
    14d2:	8c 93       	st	X, r24
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    14e2:	a4 e5       	ldi	r26, 0x54	; 84
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e4 e5       	ldi	r30, 0x54	; 84
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 64       	ori	r24, 0x40	; 64
    14ee:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    14f0:	ab e5       	ldi	r26, 0x5B	; 91
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e5       	ldi	r30, 0x5B	; 91
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	80 62       	ori	r24, 0x20	; 32
    14fc:	8c 93       	st	X, r24
}
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <MEXTI_VidSenseControl+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <MEXTI_VidSenseControl+0x8>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3c 83       	std	Y+4, r19	; 0x04
    151c:	2b 83       	std	Y+3, r18	; 0x03
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <MEXTI_VidSenseControl+0x26>
    1528:	54 c0       	rjmp	.+168    	; 0x15d2 <MEXTI_VidSenseControl+0xce>
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	3c 81       	ldd	r19, Y+4	; 0x04
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <MEXTI_VidSenseControl+0x32>
    1534:	96 c0       	rjmp	.+300    	; 0x1662 <MEXTI_VidSenseControl+0x15e>
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	09 f0       	breq	.+2      	; 0x1540 <MEXTI_VidSenseControl+0x3c>
    153e:	a6 c0       	rjmp	.+332    	; 0x168c <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	88 23       	and	r24, r24
    1544:	79 f4       	brne	.+30     	; 0x1564 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    1546:	a5 e5       	ldi	r26, 0x55	; 85
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e5       	ldi	r30, 0x55	; 85
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8e 7f       	andi	r24, 0xFE	; 254
    1552:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8d 7f       	andi	r24, 0xFD	; 253
    1560:	8c 93       	st	X, r24
    1562:	94 c0       	rjmp	.+296    	; 0x168c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	79 f4       	brne	.+30     	; 0x1588 <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    156a:	a5 e5       	ldi	r26, 0x55	; 85
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e5 e5       	ldi	r30, 0x55	; 85
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	81 60       	ori	r24, 0x01	; 1
    1576:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1578:	a5 e5       	ldi	r26, 0x55	; 85
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e5       	ldi	r30, 0x55	; 85
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8d 7f       	andi	r24, 0xFD	; 253
    1584:	8c 93       	st	X, r24
    1586:	82 c0       	rjmp	.+260    	; 0x168c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	79 f4       	brne	.+30     	; 0x15ac <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    158e:	a5 e5       	ldi	r26, 0x55	; 85
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e5 e5       	ldi	r30, 0x55	; 85
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8e 7f       	andi	r24, 0xFE	; 254
    159a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    159c:	a5 e5       	ldi	r26, 0x55	; 85
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e5       	ldi	r30, 0x55	; 85
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	82 60       	ori	r24, 0x02	; 2
    15a8:	8c 93       	st	X, r24
    15aa:	70 c0       	rjmp	.+224    	; 0x168c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <MEXTI_VidSenseControl+0xb0>
    15b2:	6c c0       	rjmp	.+216    	; 0x168c <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    15b4:	a5 e5       	ldi	r26, 0x55	; 85
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e5       	ldi	r30, 0x55	; 85
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	81 60       	ori	r24, 0x01	; 1
    15c0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	82 60       	ori	r24, 0x02	; 2
    15ce:	8c 93       	st	X, r24
    15d0:	5d c0       	rjmp	.+186    	; 0x168c <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	88 23       	and	r24, r24
    15d6:	79 f4       	brne	.+30     	; 0x15f6 <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    15d8:	a5 e5       	ldi	r26, 0x55	; 85
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e5 e5       	ldi	r30, 0x55	; 85
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8b 7f       	andi	r24, 0xFB	; 251
    15e4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    15e6:	a5 e5       	ldi	r26, 0x55	; 85
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e5 e5       	ldi	r30, 0x55	; 85
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	87 7f       	andi	r24, 0xF7	; 247
    15f2:	8c 93       	st	X, r24
    15f4:	4b c0       	rjmp	.+150    	; 0x168c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	79 f4       	brne	.+30     	; 0x161a <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    15fc:	a5 e5       	ldi	r26, 0x55	; 85
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e5       	ldi	r30, 0x55	; 85
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	84 60       	ori	r24, 0x04	; 4
    1608:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    160a:	a5 e5       	ldi	r26, 0x55	; 85
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e5       	ldi	r30, 0x55	; 85
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	87 7f       	andi	r24, 0xF7	; 247
    1616:	8c 93       	st	X, r24
    1618:	39 c0       	rjmp	.+114    	; 0x168c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	79 f4       	brne	.+30     	; 0x163e <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    1620:	a5 e5       	ldi	r26, 0x55	; 85
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e5 e5       	ldi	r30, 0x55	; 85
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8b 7f       	andi	r24, 0xFB	; 251
    162c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    162e:	a5 e5       	ldi	r26, 0x55	; 85
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e5       	ldi	r30, 0x55	; 85
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	88 60       	ori	r24, 0x08	; 8
    163a:	8c 93       	st	X, r24
    163c:	27 c0       	rjmp	.+78     	; 0x168c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	21 f5       	brne	.+72     	; 0x168c <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    1644:	a5 e5       	ldi	r26, 0x55	; 85
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e5 e5       	ldi	r30, 0x55	; 85
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	84 60       	ori	r24, 0x04	; 4
    1650:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1652:	a5 e5       	ldi	r26, 0x55	; 85
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e5       	ldi	r30, 0x55	; 85
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	88 60       	ori	r24, 0x08	; 8
    165e:	8c 93       	st	X, r24
    1660:	15 c0       	rjmp	.+42     	; 0x168c <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	41 f4       	brne	.+16     	; 0x1678 <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    1668:	a4 e5       	ldi	r26, 0x54	; 84
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e4 e5       	ldi	r30, 0x54	; 84
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	8f 7b       	andi	r24, 0xBF	; 191
    1674:	8c 93       	st	X, r24
    1676:	0a c0       	rjmp	.+20     	; 0x168c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	39 f4       	brne	.+14     	; 0x168c <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    167e:	a4 e5       	ldi	r26, 0x54	; 84
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e4 e5       	ldi	r30, 0x54	; 84
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 64       	ori	r24, 0x40	; 64
    168a:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <MEXTI0_Set_CallBackFunction+0x6>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	90 93 ae 00 	sts	0x00AE, r25
    16b0:	80 93 ad 00 	sts	0x00AD, r24
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    16be:	1f 92       	push	r1
    16c0:	0f 92       	push	r0
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	0f 92       	push	r0
    16c6:	11 24       	eor	r1, r1
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	ef 93       	push	r30
    16de:	ff 93       	push	r31
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    16e8:	e0 91 ad 00 	lds	r30, 0x00AD
    16ec:	f0 91 ae 00 	lds	r31, 0x00AE
    16f0:	09 95       	icall
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	ff 91       	pop	r31
    16f8:	ef 91       	pop	r30
    16fa:	bf 91       	pop	r27
    16fc:	af 91       	pop	r26
    16fe:	9f 91       	pop	r25
    1700:	8f 91       	pop	r24
    1702:	7f 91       	pop	r23
    1704:	6f 91       	pop	r22
    1706:	5f 91       	pop	r21
    1708:	4f 91       	pop	r20
    170a:	3f 91       	pop	r19
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <MDIO_Error_State_SetPinDirection+0x6>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <MDIO_Error_State_SetPinDirection+0x8>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <MDIO_Error_State_SetPinDirection+0xa>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	6b 83       	std	Y+3, r22	; 0x03
    172a:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	88 30       	cpi	r24, 0x08	; 8
    1734:	08 f0       	brcs	.+2      	; 0x1738 <MDIO_Error_State_SetPinDirection+0x20>
    1736:	e8 c0       	rjmp	.+464    	; 0x1908 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3e 83       	std	Y+6, r19	; 0x06
    1740:	2d 83       	std	Y+5, r18	; 0x05
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <MDIO_Error_State_SetPinDirection+0x36>
    174c:	48 c0       	rjmp	.+144    	; 0x17de <MDIO_Error_State_SetPinDirection+0xc6>
    174e:	2d 81       	ldd	r18, Y+5	; 0x05
    1750:	3e 81       	ldd	r19, Y+6	; 0x06
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	2c f4       	brge	.+10     	; 0x1762 <MDIO_Error_State_SetPinDirection+0x4a>
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	71 f0       	breq	.+28     	; 0x177c <MDIO_Error_State_SetPinDirection+0x64>
    1760:	d1 c0       	rjmp	.+418    	; 0x1904 <MDIO_Error_State_SetPinDirection+0x1ec>
    1762:	2d 81       	ldd	r18, Y+5	; 0x05
    1764:	3e 81       	ldd	r19, Y+6	; 0x06
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <MDIO_Error_State_SetPinDirection+0x56>
    176c:	69 c0       	rjmp	.+210    	; 0x1840 <MDIO_Error_State_SetPinDirection+0x128>
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <MDIO_Error_State_SetPinDirection+0x62>
    1778:	94 c0       	rjmp	.+296    	; 0x18a2 <MDIO_Error_State_SetPinDirection+0x18a>
    177a:	c4 c0       	rjmp	.+392    	; 0x1904 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	a1 f4       	brne	.+40     	; 0x17aa <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    1782:	aa e3       	ldi	r26, 0x3A	; 58
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	ea e3       	ldi	r30, 0x3A	; 58
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <MDIO_Error_State_SetPinDirection+0x88>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <MDIO_Error_State_SetPinDirection+0x84>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	b0 c0       	rjmp	.+352    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	88 23       	and	r24, r24
    17ae:	a9 f4       	brne	.+42     	; 0x17da <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    17b0:	aa e3       	ldi	r26, 0x3A	; 58
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ea e3       	ldi	r30, 0x3A	; 58
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <MDIO_Error_State_SetPinDirection+0xb6>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <MDIO_Error_State_SetPinDirection+0xb2>
    17d2:	80 95       	com	r24
    17d4:	84 23       	and	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	98 c0       	rjmp	.+304    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	96 c0       	rjmp	.+300    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	a1 f4       	brne	.+40     	; 0x180c <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    17e4:	a7 e3       	ldi	r26, 0x37	; 55
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e7 e3       	ldi	r30, 0x37	; 55
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <MDIO_Error_State_SetPinDirection+0xea>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <MDIO_Error_State_SetPinDirection+0xe6>
    1806:	84 2b       	or	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	7f c0       	rjmp	.+254    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	88 23       	and	r24, r24
    1810:	a9 f4       	brne	.+42     	; 0x183c <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1812:	a7 e3       	ldi	r26, 0x37	; 55
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e7 e3       	ldi	r30, 0x37	; 55
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <MDIO_Error_State_SetPinDirection+0x118>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <MDIO_Error_State_SetPinDirection+0x114>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	67 c0       	rjmp	.+206    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    183c:	19 82       	std	Y+1, r1	; 0x01
    183e:	65 c0       	rjmp	.+202    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	a1 f4       	brne	.+40     	; 0x186e <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1846:	a4 e3       	ldi	r26, 0x34	; 52
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e4 e3       	ldi	r30, 0x34	; 52
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <MDIO_Error_State_SetPinDirection+0x14c>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <MDIO_Error_State_SetPinDirection+0x148>
    1868:	84 2b       	or	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	4e c0       	rjmp	.+156    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	88 23       	and	r24, r24
    1872:	a9 f4       	brne	.+42     	; 0x189e <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    1874:	a4 e3       	ldi	r26, 0x34	; 52
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e4 e3       	ldi	r30, 0x34	; 52
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <MDIO_Error_State_SetPinDirection+0x17a>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <MDIO_Error_State_SetPinDirection+0x176>
    1896:	80 95       	com	r24
    1898:	84 23       	and	r24, r20
    189a:	8c 93       	st	X, r24
    189c:	36 c0       	rjmp	.+108    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    189e:	19 82       	std	Y+1, r1	; 0x01
    18a0:	34 c0       	rjmp	.+104    	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	a1 f4       	brne	.+40     	; 0x18d0 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    18a8:	a1 e3       	ldi	r26, 0x31	; 49
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e1 e3       	ldi	r30, 0x31	; 49
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <MDIO_Error_State_SetPinDirection+0x1ae>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <MDIO_Error_State_SetPinDirection+0x1aa>
    18ca:	84 2b       	or	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	1d c0       	rjmp	.+58     	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	88 23       	and	r24, r24
    18d4:	a9 f4       	brne	.+42     	; 0x1900 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    18d6:	a1 e3       	ldi	r26, 0x31	; 49
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e1 e3       	ldi	r30, 0x31	; 49
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <MDIO_Error_State_SetPinDirection+0x1dc>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <MDIO_Error_State_SetPinDirection+0x1d8>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	03 c0       	rjmp	.+6      	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    1904:	19 82       	std	Y+1, r1	; 0x01
    1906:	01 c0       	rjmp	.+2      	; 0x190a <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1908:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    190a:	89 81       	ldd	r24, Y+1	; 0x01

}
    190c:	26 96       	adiw	r28, 0x06	; 6
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <MDIO_Error_State_SetPortDirection+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <MDIO_Error_State_SetPortDirection+0x8>
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	8a 83       	std	Y+2, r24	; 0x02
    192e:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	8f 3f       	cpi	r24, 0xFF	; 255
    1938:	19 f0       	breq	.+6      	; 0x1940 <MDIO_Error_State_SetPortDirection+0x22>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	88 23       	and	r24, r24
    193e:	a9 f5       	brne	.+106    	; 0x19aa <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	3d 83       	std	Y+5, r19	; 0x05
    1948:	2c 83       	std	Y+4, r18	; 0x04
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	91 05       	cpc	r25, r1
    1952:	d1 f0       	breq	.+52     	; 0x1988 <MDIO_Error_State_SetPortDirection+0x6a>
    1954:	2c 81       	ldd	r18, Y+4	; 0x04
    1956:	3d 81       	ldd	r19, Y+5	; 0x05
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	2c f4       	brge	.+10     	; 0x1968 <MDIO_Error_State_SetPortDirection+0x4a>
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	61 f0       	breq	.+24     	; 0x197e <MDIO_Error_State_SetPortDirection+0x60>
    1966:	1f c0       	rjmp	.+62     	; 0x19a6 <MDIO_Error_State_SetPortDirection+0x88>
    1968:	2c 81       	ldd	r18, Y+4	; 0x04
    196a:	3d 81       	ldd	r19, Y+5	; 0x05
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	81 f0       	breq	.+32     	; 0x1992 <MDIO_Error_State_SetPortDirection+0x74>
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	9d 81       	ldd	r25, Y+5	; 0x05
    1976:	83 30       	cpi	r24, 0x03	; 3
    1978:	91 05       	cpc	r25, r1
    197a:	81 f0       	breq	.+32     	; 0x199c <MDIO_Error_State_SetPortDirection+0x7e>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    197e:	ea e3       	ldi	r30, 0x3A	; 58
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	80 83       	st	Z, r24
    1986:	12 c0       	rjmp	.+36     	; 0x19ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    1988:	e7 e3       	ldi	r30, 0x37	; 55
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	80 83       	st	Z, r24
    1990:	0d c0       	rjmp	.+26     	; 0x19ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    1992:	e4 e3       	ldi	r30, 0x34	; 52
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	80 83       	st	Z, r24
    199a:	08 c0       	rjmp	.+16     	; 0x19ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    199c:	e1 e3       	ldi	r30, 0x31	; 49
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	80 83       	st	Z, r24
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    19a6:	19 82       	std	Y+1, r1	; 0x01
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    19aa:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <MDIO_Error_State_SetPinValue+0x6>
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <MDIO_Error_State_SetPinValue+0x8>
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <MDIO_Error_State_SetPinValue+0xa>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    19ce:	6b 83       	std	Y+3, r22	; 0x03
    19d0:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	88 30       	cpi	r24, 0x08	; 8
    19da:	08 f0       	brcs	.+2      	; 0x19de <MDIO_Error_State_SetPinValue+0x20>
    19dc:	e8 c0       	rjmp	.+464    	; 0x1bae <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	3e 83       	std	Y+6, r19	; 0x06
    19e6:	2d 83       	std	Y+5, r18	; 0x05
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	91 05       	cpc	r25, r1
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <MDIO_Error_State_SetPinValue+0x36>
    19f2:	48 c0       	rjmp	.+144    	; 0x1a84 <MDIO_Error_State_SetPinValue+0xc6>
    19f4:	2d 81       	ldd	r18, Y+5	; 0x05
    19f6:	3e 81       	ldd	r19, Y+6	; 0x06
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <MDIO_Error_State_SetPinValue+0x4a>
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <MDIO_Error_State_SetPinValue+0x64>
    1a06:	d1 c0       	rjmp	.+418    	; 0x1baa <MDIO_Error_State_SetPinValue+0x1ec>
    1a08:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <MDIO_Error_State_SetPinValue+0x56>
    1a12:	69 c0       	rjmp	.+210    	; 0x1ae6 <MDIO_Error_State_SetPinValue+0x128>
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <MDIO_Error_State_SetPinValue+0x62>
    1a1e:	94 c0       	rjmp	.+296    	; 0x1b48 <MDIO_Error_State_SetPinValue+0x18a>
    1a20:	c4 c0       	rjmp	.+392    	; 0x1baa <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	a1 f4       	brne	.+40     	; 0x1a50 <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    1a28:	ab e3       	ldi	r26, 0x3B	; 59
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	eb e3       	ldi	r30, 0x3B	; 59
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <MDIO_Error_State_SetPinValue+0x88>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <MDIO_Error_State_SetPinValue+0x84>
    1a4a:	84 2b       	or	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	b0 c0       	rjmp	.+352    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	88 23       	and	r24, r24
    1a54:	a9 f4       	brne	.+42     	; 0x1a80 <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1a56:	ab e3       	ldi	r26, 0x3B	; 59
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	eb e3       	ldi	r30, 0x3B	; 59
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <MDIO_Error_State_SetPinValue+0xb6>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <MDIO_Error_State_SetPinValue+0xb2>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	98 c0       	rjmp	.+304    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1a80:	19 82       	std	Y+1, r1	; 0x01
    1a82:	96 c0       	rjmp	.+300    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	a1 f4       	brne	.+40     	; 0x1ab2 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    1a8a:	a8 e3       	ldi	r26, 0x38	; 56
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e8 e3       	ldi	r30, 0x38	; 56
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <MDIO_Error_State_SetPinValue+0xea>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <MDIO_Error_State_SetPinValue+0xe6>
    1aac:	84 2b       	or	r24, r20
    1aae:	8c 93       	st	X, r24
    1ab0:	7f c0       	rjmp	.+254    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab4:	88 23       	and	r24, r24
    1ab6:	a9 f4       	brne	.+42     	; 0x1ae2 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    1ab8:	a8 e3       	ldi	r26, 0x38	; 56
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e8 e3       	ldi	r30, 0x38	; 56
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <MDIO_Error_State_SetPinValue+0x118>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <MDIO_Error_State_SetPinValue+0x114>
    1ada:	80 95       	com	r24
    1adc:	84 23       	and	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	67 c0       	rjmp	.+206    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1ae2:	19 82       	std	Y+1, r1	; 0x01
    1ae4:	65 c0       	rjmp	.+202    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	a1 f4       	brne	.+40     	; 0x1b14 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    1aec:	a5 e3       	ldi	r26, 0x35	; 53
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e3       	ldi	r30, 0x35	; 53
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <MDIO_Error_State_SetPinValue+0x14c>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <MDIO_Error_State_SetPinValue+0x148>
    1b0e:	84 2b       	or	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	4e c0       	rjmp	.+156    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1b14:	8c 81       	ldd	r24, Y+4	; 0x04
    1b16:	88 23       	and	r24, r24
    1b18:	a9 f4       	brne	.+42     	; 0x1b44 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <MDIO_Error_State_SetPinValue+0x17a>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <MDIO_Error_State_SetPinValue+0x176>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	36 c0       	rjmp	.+108    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1b44:	19 82       	std	Y+1, r1	; 0x01
    1b46:	34 c0       	rjmp	.+104    	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	a1 f4       	brne	.+40     	; 0x1b76 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    1b4e:	a2 e3       	ldi	r26, 0x32	; 50
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e2 e3       	ldi	r30, 0x32	; 50
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <MDIO_Error_State_SetPinValue+0x1ae>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <MDIO_Error_State_SetPinValue+0x1aa>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	1d c0       	rjmp	.+58     	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	88 23       	and	r24, r24
    1b7a:	a9 f4       	brne	.+42     	; 0x1ba6 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    1b7c:	a2 e3       	ldi	r26, 0x32	; 50
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e2 e3       	ldi	r30, 0x32	; 50
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	48 2f       	mov	r20, r24
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	02 2e       	mov	r0, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <MDIO_Error_State_SetPinValue+0x1dc>
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	0a 94       	dec	r0
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <MDIO_Error_State_SetPinValue+0x1d8>
    1b9e:	80 95       	com	r24
    1ba0:	84 23       	and	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	05 c0       	rjmp	.+10     	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1ba6:	19 82       	std	Y+1, r1	; 0x01
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    1baa:	19 82       	std	Y+1, r1	; 0x01
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    1bae:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01

}
    1bb2:	26 96       	adiw	r28, 0x06	; 6
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <MDIO_Error_State_SetPortValue+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <MDIO_Error_State_SetPortValue+0x8>
    1bcc:	0f 92       	push	r0
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	3d 83       	std	Y+5, r19	; 0x05
    1be2:	2c 83       	std	Y+4, r18	; 0x04
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	9d 81       	ldd	r25, Y+5	; 0x05
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	91 05       	cpc	r25, r1
    1bec:	d1 f0       	breq	.+52     	; 0x1c22 <MDIO_Error_State_SetPortValue+0x5e>
    1bee:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <MDIO_Error_State_SetPortValue+0x3e>
    1bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	61 f0       	breq	.+24     	; 0x1c18 <MDIO_Error_State_SetPortValue+0x54>
    1c00:	1f c0       	rjmp	.+62     	; 0x1c40 <MDIO_Error_State_SetPortValue+0x7c>
    1c02:	2c 81       	ldd	r18, Y+4	; 0x04
    1c04:	3d 81       	ldd	r19, Y+5	; 0x05
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	81 f0       	breq	.+32     	; 0x1c2c <MDIO_Error_State_SetPortValue+0x68>
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c10:	83 30       	cpi	r24, 0x03	; 3
    1c12:	91 05       	cpc	r25, r1
    1c14:	81 f0       	breq	.+32     	; 0x1c36 <MDIO_Error_State_SetPortValue+0x72>
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1c18:	eb e3       	ldi	r30, 0x3B	; 59
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	80 83       	st	Z, r24
    1c20:	10 c0       	rjmp	.+32     	; 0x1c42 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    1c22:	e8 e3       	ldi	r30, 0x38	; 56
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	80 83       	st	Z, r24
    1c2a:	0b c0       	rjmp	.+22     	; 0x1c42 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    1c2c:	e5 e3       	ldi	r30, 0x35	; 53
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	80 83       	st	Z, r24
    1c34:	06 c0       	rjmp	.+12     	; 0x1c42 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1c36:	e2 e3       	ldi	r30, 0x32	; 50
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	80 83       	st	Z, r24
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    1c40:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	27 97       	sbiw	r28, 0x07	; 7
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	8a 83       	std	Y+2, r24	; 0x02
    1c6a:	6b 83       	std	Y+3, r22	; 0x03
    1c6c:	5d 83       	std	Y+5, r21	; 0x05
    1c6e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	88 30       	cpi	r24, 0x08	; 8
    1c78:	08 f0       	brcs	.+2      	; 0x1c7c <MDIO_Error_State_GetPinValue+0x28>
    1c7a:	79 c0       	rjmp	.+242    	; 0x1d6e <MDIO_Error_State_GetPinValue+0x11a>
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	91 05       	cpc	r25, r1
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <MDIO_Error_State_GetPinValue+0x34>
    1c86:	73 c0       	rjmp	.+230    	; 0x1d6e <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3f 83       	std	Y+7, r19	; 0x07
    1c90:	2e 83       	std	Y+6, r18	; 0x06
    1c92:	4e 81       	ldd	r20, Y+6	; 0x06
    1c94:	5f 81       	ldd	r21, Y+7	; 0x07
    1c96:	41 30       	cpi	r20, 0x01	; 1
    1c98:	51 05       	cpc	r21, r1
    1c9a:	59 f1       	breq	.+86     	; 0x1cf2 <MDIO_Error_State_GetPinValue+0x9e>
    1c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	34 f4       	brge	.+12     	; 0x1cb2 <MDIO_Error_State_GetPinValue+0x5e>
    1ca6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca8:	3f 81       	ldd	r19, Y+7	; 0x07
    1caa:	21 15       	cp	r18, r1
    1cac:	31 05       	cpc	r19, r1
    1cae:	69 f0       	breq	.+26     	; 0x1cca <MDIO_Error_State_GetPinValue+0x76>
    1cb0:	5c c0       	rjmp	.+184    	; 0x1d6a <MDIO_Error_State_GetPinValue+0x116>
    1cb2:	4e 81       	ldd	r20, Y+6	; 0x06
    1cb4:	5f 81       	ldd	r21, Y+7	; 0x07
    1cb6:	42 30       	cpi	r20, 0x02	; 2
    1cb8:	51 05       	cpc	r21, r1
    1cba:	79 f1       	breq	.+94     	; 0x1d1a <MDIO_Error_State_GetPinValue+0xc6>
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <MDIO_Error_State_GetPinValue+0x74>
    1cc6:	3d c0       	rjmp	.+122    	; 0x1d42 <MDIO_Error_State_GetPinValue+0xee>
    1cc8:	50 c0       	rjmp	.+160    	; 0x1d6a <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    1cca:	e9 e3       	ldi	r30, 0x39	; 57
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a9 01       	movw	r20, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <MDIO_Error_State_GetPinValue+0x8e>
    1cde:	55 95       	asr	r21
    1ce0:	47 95       	ror	r20
    1ce2:	8a 95       	dec	r24
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <MDIO_Error_State_GetPinValue+0x8a>
    1ce6:	ca 01       	movw	r24, r20
    1ce8:	81 70       	andi	r24, 0x01	; 1
    1cea:	ec 81       	ldd	r30, Y+4	; 0x04
    1cec:	fd 81       	ldd	r31, Y+5	; 0x05
    1cee:	80 83       	st	Z, r24
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1cf2:	e6 e3       	ldi	r30, 0x36	; 54
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a9 01       	movw	r20, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <MDIO_Error_State_GetPinValue+0xb6>
    1d06:	55 95       	asr	r21
    1d08:	47 95       	ror	r20
    1d0a:	8a 95       	dec	r24
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <MDIO_Error_State_GetPinValue+0xb2>
    1d0e:	ca 01       	movw	r24, r20
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	ec 81       	ldd	r30, Y+4	; 0x04
    1d14:	fd 81       	ldd	r31, Y+5	; 0x05
    1d16:	80 83       	st	Z, r24
    1d18:	2b c0       	rjmp	.+86     	; 0x1d70 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1d1a:	e3 e3       	ldi	r30, 0x33	; 51
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a9 01       	movw	r20, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <MDIO_Error_State_GetPinValue+0xde>
    1d2e:	55 95       	asr	r21
    1d30:	47 95       	ror	r20
    1d32:	8a 95       	dec	r24
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <MDIO_Error_State_GetPinValue+0xda>
    1d36:	ca 01       	movw	r24, r20
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d3e:	80 83       	st	Z, r24
    1d40:	17 c0       	rjmp	.+46     	; 0x1d70 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1d42:	e0 e3       	ldi	r30, 0x30	; 48
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a9 01       	movw	r20, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <MDIO_Error_State_GetPinValue+0x106>
    1d56:	55 95       	asr	r21
    1d58:	47 95       	ror	r20
    1d5a:	8a 95       	dec	r24
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <MDIO_Error_State_GetPinValue+0x102>
    1d5e:	ca 01       	movw	r24, r20
    1d60:	81 70       	andi	r24, 0x01	; 1
    1d62:	ec 81       	ldd	r30, Y+4	; 0x04
    1d64:	fd 81       	ldd	r31, Y+5	; 0x05
    1d66:	80 83       	st	Z, r24
    1d68:	03 c0       	rjmp	.+6      	; 0x1d70 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
    1d6c:	01 c0       	rjmp	.+2      	; 0x1d70 <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1d6e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d72:	27 96       	adiw	r28, 0x07	; 7
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <MDIO_Error_State_SetNippleValue+0x6>
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <MDIO_Error_State_SetNippleValue+0x8>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <MDIO_Error_State_SetNippleValue+0xa>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	8a 83       	std	Y+2, r24	; 0x02
    1d94:	6b 83       	std	Y+3, r22	; 0x03
    1d96:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	85 30       	cpi	r24, 0x05	; 5
    1da0:	08 f0       	brcs	.+2      	; 0x1da4 <MDIO_Error_State_SetNippleValue+0x20>
    1da2:	c9 c0       	rjmp	.+402    	; 0x1f36 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	3e 83       	std	Y+6, r19	; 0x06
    1dac:	2d 83       	std	Y+5, r18	; 0x05
    1dae:	6d 81       	ldd	r22, Y+5	; 0x05
    1db0:	7e 81       	ldd	r23, Y+6	; 0x06
    1db2:	61 30       	cpi	r22, 0x01	; 1
    1db4:	71 05       	cpc	r23, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <MDIO_Error_State_SetNippleValue+0x36>
    1db8:	41 c0       	rjmp	.+130    	; 0x1e3c <MDIO_Error_State_SetNippleValue+0xb8>
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	34 f4       	brge	.+12     	; 0x1dd0 <MDIO_Error_State_SetNippleValue+0x4c>
    1dc4:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc6:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc8:	21 15       	cp	r18, r1
    1dca:	31 05       	cpc	r19, r1
    1dcc:	71 f0       	breq	.+28     	; 0x1dea <MDIO_Error_State_SetNippleValue+0x66>
    1dce:	b1 c0       	rjmp	.+354    	; 0x1f32 <MDIO_Error_State_SetNippleValue+0x1ae>
    1dd0:	6d 81       	ldd	r22, Y+5	; 0x05
    1dd2:	7e 81       	ldd	r23, Y+6	; 0x06
    1dd4:	62 30       	cpi	r22, 0x02	; 2
    1dd6:	71 05       	cpc	r23, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <MDIO_Error_State_SetNippleValue+0x58>
    1dda:	59 c0       	rjmp	.+178    	; 0x1e8e <MDIO_Error_State_SetNippleValue+0x10a>
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	91 05       	cpc	r25, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <MDIO_Error_State_SetNippleValue+0x64>
    1de6:	7c c0       	rjmp	.+248    	; 0x1ee0 <MDIO_Error_State_SetNippleValue+0x15c>
    1de8:	a4 c0       	rjmp	.+328    	; 0x1f32 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1dea:	ab e3       	ldi	r26, 0x3B	; 59
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	eb e3       	ldi	r30, 0x3B	; 59
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	48 2f       	mov	r20, r24
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	8f e0       	ldi	r24, 0x0F	; 15
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <MDIO_Error_State_SetNippleValue+0x82>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	2a 95       	dec	r18
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <MDIO_Error_State_SetNippleValue+0x7e>
    1e0a:	80 95       	com	r24
    1e0c:	84 23       	and	r24, r20
    1e0e:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1e10:	ab e3       	ldi	r26, 0x3B	; 59
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	eb e3       	ldi	r30, 0x3B	; 59
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	b9 01       	movw	r22, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <MDIO_Error_State_SetNippleValue+0xac>
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	8a 95       	dec	r24
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <MDIO_Error_State_SetNippleValue+0xa8>
    1e34:	cb 01       	movw	r24, r22
    1e36:	84 2b       	or	r24, r20
    1e38:	8c 93       	st	X, r24
    1e3a:	7e c0       	rjmp	.+252    	; 0x1f38 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1e3c:	a8 e3       	ldi	r26, 0x38	; 56
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e8 e3       	ldi	r30, 0x38	; 56
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	48 2f       	mov	r20, r24
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	8f e0       	ldi	r24, 0x0F	; 15
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <MDIO_Error_State_SetNippleValue+0xd4>
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	2a 95       	dec	r18
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <MDIO_Error_State_SetNippleValue+0xd0>
    1e5c:	80 95       	com	r24
    1e5e:	84 23       	and	r24, r20
    1e60:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1e62:	a8 e3       	ldi	r26, 0x38	; 56
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e8 e3       	ldi	r30, 0x38	; 56
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	48 2f       	mov	r20, r24
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <MDIO_Error_State_SetNippleValue+0xfe>
    1e7e:	66 0f       	add	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	8a 95       	dec	r24
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <MDIO_Error_State_SetNippleValue+0xfa>
    1e86:	cb 01       	movw	r24, r22
    1e88:	84 2b       	or	r24, r20
    1e8a:	8c 93       	st	X, r24
    1e8c:	55 c0       	rjmp	.+170    	; 0x1f38 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1e8e:	a5 e3       	ldi	r26, 0x35	; 53
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e5 e3       	ldi	r30, 0x35	; 53
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	8f e0       	ldi	r24, 0x0F	; 15
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <MDIO_Error_State_SetNippleValue+0x126>
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	2a 95       	dec	r18
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <MDIO_Error_State_SetNippleValue+0x122>
    1eae:	80 95       	com	r24
    1eb0:	84 23       	and	r24, r20
    1eb2:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1eb4:	a5 e3       	ldi	r26, 0x35	; 53
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e5 e3       	ldi	r30, 0x35	; 53
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	b9 01       	movw	r22, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <MDIO_Error_State_SetNippleValue+0x150>
    1ed0:	66 0f       	add	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	8a 95       	dec	r24
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <MDIO_Error_State_SetNippleValue+0x14c>
    1ed8:	cb 01       	movw	r24, r22
    1eda:	84 2b       	or	r24, r20
    1edc:	8c 93       	st	X, r24
    1ede:	2c c0       	rjmp	.+88     	; 0x1f38 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1ee0:	a2 e3       	ldi	r26, 0x32	; 50
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e2 e3       	ldi	r30, 0x32	; 50
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	48 2f       	mov	r20, r24
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	8f e0       	ldi	r24, 0x0F	; 15
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <MDIO_Error_State_SetNippleValue+0x178>
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	2a 95       	dec	r18
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <MDIO_Error_State_SetNippleValue+0x174>
    1f00:	80 95       	com	r24
    1f02:	84 23       	and	r24, r20
    1f04:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1f06:	a2 e3       	ldi	r26, 0x32	; 50
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e2 e3       	ldi	r30, 0x32	; 50
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	b9 01       	movw	r22, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <MDIO_Error_State_SetNippleValue+0x1a2>
    1f22:	66 0f       	add	r22, r22
    1f24:	77 1f       	adc	r23, r23
    1f26:	8a 95       	dec	r24
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <MDIO_Error_State_SetNippleValue+0x19e>
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	84 2b       	or	r24, r20
    1f2e:	8c 93       	st	X, r24
    1f30:	03 c0       	rjmp	.+6      	; 0x1f38 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1f32:	19 82       	std	Y+1, r1	; 0x01
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1f36:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3a:	26 96       	adiw	r28, 0x06	; 6
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <MDIO_VidActivePullUP+0x6>
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	6a 81       	ldd	r22, Y+2	; 0x02
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	6a 81       	ldd	r22, Y+2	; 0x02
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>

}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1f80:	a7 e2       	ldi	r26, 0x27	; 39
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e7 e2       	ldi	r30, 0x27	; 39
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	80 64       	ori	r24, 0x40	; 64
    1f8c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1f8e:	a7 e2       	ldi	r26, 0x27	; 39
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e7 e2       	ldi	r30, 0x27	; 39
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8f 77       	andi	r24, 0x7F	; 127
    1f9a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1f9c:	a6 e2       	ldi	r26, 0x26	; 38
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e6 e2       	ldi	r30, 0x26	; 38
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 7f       	andi	r24, 0xF8	; 248
    1fa8:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1faa:	a6 e2       	ldi	r26, 0x26	; 38
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e6 e2       	ldi	r30, 0x26	; 38
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	83 60       	ori	r24, 0x03	; 3
    1fb6:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1fb8:	a7 e2       	ldi	r26, 0x27	; 39
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e7 e2       	ldi	r30, 0x27	; 39
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	8f 7d       	andi	r24, 0xDF	; 223
    1fc4:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1fc6:	a6 e2       	ldi	r26, 0x26	; 38
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e6 e2       	ldi	r30, 0x26	; 38
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	80 68       	ori	r24, 0x80	; 128
    1fd2:	8c 93       	st	X, r24
}
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	87 70       	andi	r24, 0x07	; 7
    1fea:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1fec:	a7 e2       	ldi	r26, 0x27	; 39
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e7 e2       	ldi	r30, 0x27	; 39
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 7e       	andi	r24, 0xE0	; 224
    1ff8:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1ffa:	a7 e2       	ldi	r26, 0x27	; 39
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e7 e2       	ldi	r30, 0x27	; 39
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	90 81       	ld	r25, Z
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	89 2b       	or	r24, r25
    2008:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    200a:	a6 e2       	ldi	r26, 0x26	; 38
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e6 e2       	ldi	r30, 0x26	; 38
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	80 64       	ori	r24, 0x40	; 64
    2016:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    2018:	e6 e2       	ldi	r30, 0x26	; 38
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	82 95       	swap	r24
    2020:	8f 70       	andi	r24, 0x0F	; 15
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	81 70       	andi	r24, 0x01	; 1
    2028:	90 70       	andi	r25, 0x00	; 0
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	a9 f3       	breq	.-22     	; 0x2018 <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    202e:	e4 e2       	ldi	r30, 0x24	; 36
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
}
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <HSWITCH_VidInit_PullUP+0x6>
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	81 81       	ldd	r24, Z+1	; 0x01
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	90 81       	ld	r25, Z
    2058:	69 2f       	mov	r22, r25
    205a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <MDIO_VidActivePullUP>
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	00 d0       	rcall	.+0      	; 0x206e <HSWITCH_u8SwitchState+0x6>
    206e:	0f 92       	push	r0
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	9b 83       	std	Y+3, r25	; 0x03
    2076:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    207c:	ea 81       	ldd	r30, Y+2	; 0x02
    207e:	fb 81       	ldd	r31, Y+3	; 0x03
    2080:	81 81       	ldd	r24, Z+1	; 0x01
    2082:	ea 81       	ldd	r30, Y+2	; 0x02
    2084:	fb 81       	ldd	r31, Y+3	; 0x03
    2086:	90 81       	ld	r25, Z
    2088:	69 2f       	mov	r22, r25
    208a:	9e 01       	movw	r18, r28
    208c:	2f 5f       	subi	r18, 0xFF	; 255
    208e:	3f 4f       	sbci	r19, 0xFF	; 255
    2090:	a9 01       	movw	r20, r18
    2092:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    2096:	89 81       	ldd	r24, Y+1	; 0x01
}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <HSEVEN_SEGMENT_VidInit+0x6>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    20b2:	e9 81       	ldd	r30, Y+1	; 0x01
    20b4:	fa 81       	ldd	r31, Y+2	; 0x02
    20b6:	80 81       	ld	r24, Z
    20b8:	6f ef       	ldi	r22, 0xFF	; 255
    20ba:	0e 94 8f 0c 	call	0x191e	; 0x191e <MDIO_Error_State_SetPortDirection>
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <HSEVEN_SEGMENT_VidOff+0x6>
    20ce:	0f 92       	push	r0
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    20da:	e9 81       	ldd	r30, Y+1	; 0x01
    20dc:	fa 81       	ldd	r31, Y+2	; 0x02
    20de:	81 81       	ldd	r24, Z+1	; 0x01
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	31 f4       	brne	.+12     	; 0x20f0 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    20e4:	e9 81       	ldd	r30, Y+1	; 0x01
    20e6:	fa 81       	ldd	r31, Y+2	; 0x02
    20e8:	80 81       	ld	r24, Z
    20ea:	6b 81       	ldd	r22, Y+3	; 0x03
    20ec:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    20f0:	e9 81       	ldd	r30, Y+1	; 0x01
    20f2:	fa 81       	ldd	r31, Y+2	; 0x02
    20f4:	81 81       	ldd	r24, Z+1	; 0x01
    20f6:	88 23       	and	r24, r24
    20f8:	51 f4       	brne	.+20     	; 0x210e <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    20fa:	e9 81       	ldd	r30, Y+1	; 0x01
    20fc:	fa 81       	ldd	r31, Y+2	; 0x02
    20fe:	20 81       	ld	r18, Z
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	98 2f       	mov	r25, r24
    2104:	90 95       	com	r25
    2106:	82 2f       	mov	r24, r18
    2108:	69 2f       	mov	r22, r25
    210a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
	}
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	27 97       	sbiw	r28, 0x07	; 7
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    2134:	e9 81       	ldd	r30, Y+1	; 0x01
    2136:	fa 81       	ldd	r31, Y+2	; 0x02
    2138:	81 81       	ldd	r24, Z+1	; 0x01
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	09 f0       	breq	.+2      	; 0x2140 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    213e:	9b c0       	rjmp	.+310    	; 0x2276 <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	3f 83       	std	Y+7, r19	; 0x07
    2148:	2e 83       	std	Y+6, r18	; 0x06
    214a:	8e 81       	ldd	r24, Y+6	; 0x06
    214c:	9f 81       	ldd	r25, Y+7	; 0x07
    214e:	84 30       	cpi	r24, 0x04	; 4
    2150:	91 05       	cpc	r25, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    2154:	5f c0       	rjmp	.+190    	; 0x2214 <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    2156:	2e 81       	ldd	r18, Y+6	; 0x06
    2158:	3f 81       	ldd	r19, Y+7	; 0x07
    215a:	25 30       	cpi	r18, 0x05	; 5
    215c:	31 05       	cpc	r19, r1
    215e:	dc f4       	brge	.+54     	; 0x2196 <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    2160:	8e 81       	ldd	r24, Y+6	; 0x06
    2162:	9f 81       	ldd	r25, Y+7	; 0x07
    2164:	81 30       	cpi	r24, 0x01	; 1
    2166:	91 05       	cpc	r25, r1
    2168:	09 f4       	brne	.+2      	; 0x216c <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    216c:	2e 81       	ldd	r18, Y+6	; 0x06
    216e:	3f 81       	ldd	r19, Y+7	; 0x07
    2170:	22 30       	cpi	r18, 0x02	; 2
    2172:	31 05       	cpc	r19, r1
    2174:	2c f4       	brge	.+10     	; 0x2180 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    2176:	8e 81       	ldd	r24, Y+6	; 0x06
    2178:	9f 81       	ldd	r25, Y+7	; 0x07
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	79 f1       	breq	.+94     	; 0x21dc <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    217e:	74 c0       	rjmp	.+232    	; 0x2268 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    2180:	2e 81       	ldd	r18, Y+6	; 0x06
    2182:	3f 81       	ldd	r19, Y+7	; 0x07
    2184:	22 30       	cpi	r18, 0x02	; 2
    2186:	31 05       	cpc	r19, r1
    2188:	b9 f1       	breq	.+110    	; 0x21f8 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    218a:	8e 81       	ldd	r24, Y+6	; 0x06
    218c:	9f 81       	ldd	r25, Y+7	; 0x07
    218e:	83 30       	cpi	r24, 0x03	; 3
    2190:	91 05       	cpc	r25, r1
    2192:	c9 f1       	breq	.+114    	; 0x2206 <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    2194:	69 c0       	rjmp	.+210    	; 0x2268 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    2196:	2e 81       	ldd	r18, Y+6	; 0x06
    2198:	3f 81       	ldd	r19, Y+7	; 0x07
    219a:	27 30       	cpi	r18, 0x07	; 7
    219c:	31 05       	cpc	r19, r1
    219e:	09 f4       	brne	.+2      	; 0x21a2 <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    21a0:	4e c0       	rjmp	.+156    	; 0x223e <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    21a2:	8e 81       	ldd	r24, Y+6	; 0x06
    21a4:	9f 81       	ldd	r25, Y+7	; 0x07
    21a6:	88 30       	cpi	r24, 0x08	; 8
    21a8:	91 05       	cpc	r25, r1
    21aa:	5c f4       	brge	.+22     	; 0x21c2 <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    21ac:	2e 81       	ldd	r18, Y+6	; 0x06
    21ae:	3f 81       	ldd	r19, Y+7	; 0x07
    21b0:	25 30       	cpi	r18, 0x05	; 5
    21b2:	31 05       	cpc	r19, r1
    21b4:	b1 f1       	breq	.+108    	; 0x2222 <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    21b6:	8e 81       	ldd	r24, Y+6	; 0x06
    21b8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ba:	86 30       	cpi	r24, 0x06	; 6
    21bc:	91 05       	cpc	r25, r1
    21be:	c1 f1       	breq	.+112    	; 0x2230 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    21c0:	53 c0       	rjmp	.+166    	; 0x2268 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    21c2:	2e 81       	ldd	r18, Y+6	; 0x06
    21c4:	3f 81       	ldd	r19, Y+7	; 0x07
    21c6:	28 30       	cpi	r18, 0x08	; 8
    21c8:	31 05       	cpc	r19, r1
    21ca:	09 f4       	brne	.+2      	; 0x21ce <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    21ce:	8e 81       	ldd	r24, Y+6	; 0x06
    21d0:	9f 81       	ldd	r25, Y+7	; 0x07
    21d2:	89 30       	cpi	r24, 0x09	; 9
    21d4:	91 05       	cpc	r25, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    21d8:	40 c0       	rjmp	.+128    	; 0x225a <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    21da:	46 c0       	rjmp	.+140    	; 0x2268 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	80 81       	ld	r24, Z
    21e2:	6f e3       	ldi	r22, 0x3F	; 63
    21e4:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    21e8:	e6 c0       	rjmp	.+460    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    21ea:	e9 81       	ldd	r30, Y+1	; 0x01
    21ec:	fa 81       	ldd	r31, Y+2	; 0x02
    21ee:	80 81       	ld	r24, Z
    21f0:	66 e0       	ldi	r22, 0x06	; 6
    21f2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    21f6:	df c0       	rjmp	.+446    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    21f8:	e9 81       	ldd	r30, Y+1	; 0x01
    21fa:	fa 81       	ldd	r31, Y+2	; 0x02
    21fc:	80 81       	ld	r24, Z
    21fe:	6b e5       	ldi	r22, 0x5B	; 91
    2200:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2204:	d8 c0       	rjmp	.+432    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    2206:	e9 81       	ldd	r30, Y+1	; 0x01
    2208:	fa 81       	ldd	r31, Y+2	; 0x02
    220a:	80 81       	ld	r24, Z
    220c:	6f e4       	ldi	r22, 0x4F	; 79
    220e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2212:	d1 c0       	rjmp	.+418    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    2214:	e9 81       	ldd	r30, Y+1	; 0x01
    2216:	fa 81       	ldd	r31, Y+2	; 0x02
    2218:	80 81       	ld	r24, Z
    221a:	66 e6       	ldi	r22, 0x66	; 102
    221c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2220:	ca c0       	rjmp	.+404    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    2222:	e9 81       	ldd	r30, Y+1	; 0x01
    2224:	fa 81       	ldd	r31, Y+2	; 0x02
    2226:	80 81       	ld	r24, Z
    2228:	6d e6       	ldi	r22, 0x6D	; 109
    222a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    222e:	c3 c0       	rjmp	.+390    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    2230:	e9 81       	ldd	r30, Y+1	; 0x01
    2232:	fa 81       	ldd	r31, Y+2	; 0x02
    2234:	80 81       	ld	r24, Z
    2236:	6d e7       	ldi	r22, 0x7D	; 125
    2238:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    223c:	bc c0       	rjmp	.+376    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    223e:	e9 81       	ldd	r30, Y+1	; 0x01
    2240:	fa 81       	ldd	r31, Y+2	; 0x02
    2242:	80 81       	ld	r24, Z
    2244:	67 e0       	ldi	r22, 0x07	; 7
    2246:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    224a:	b5 c0       	rjmp	.+362    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    224c:	e9 81       	ldd	r30, Y+1	; 0x01
    224e:	fa 81       	ldd	r31, Y+2	; 0x02
    2250:	80 81       	ld	r24, Z
    2252:	6f e7       	ldi	r22, 0x7F	; 127
    2254:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2258:	ae c0       	rjmp	.+348    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    225a:	e9 81       	ldd	r30, Y+1	; 0x01
    225c:	fa 81       	ldd	r31, Y+2	; 0x02
    225e:	80 81       	ld	r24, Z
    2260:	6f e6       	ldi	r22, 0x6F	; 111
    2262:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2266:	a7 c0       	rjmp	.+334    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	80 81       	ld	r24, Z
    226e:	69 e7       	ldi	r22, 0x79	; 121
    2270:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2274:	a0 c0       	rjmp	.+320    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    2276:	e9 81       	ldd	r30, Y+1	; 0x01
    2278:	fa 81       	ldd	r31, Y+2	; 0x02
    227a:	81 81       	ldd	r24, Z+1	; 0x01
    227c:	88 23       	and	r24, r24
    227e:	09 f0       	breq	.+2      	; 0x2282 <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    2280:	9a c0       	rjmp	.+308    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	3d 83       	std	Y+5, r19	; 0x05
    228a:	2c 83       	std	Y+4, r18	; 0x04
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	9d 81       	ldd	r25, Y+5	; 0x05
    2290:	84 30       	cpi	r24, 0x04	; 4
    2292:	91 05       	cpc	r25, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    2296:	5f c0       	rjmp	.+190    	; 0x2356 <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    2298:	2c 81       	ldd	r18, Y+4	; 0x04
    229a:	3d 81       	ldd	r19, Y+5	; 0x05
    229c:	25 30       	cpi	r18, 0x05	; 5
    229e:	31 05       	cpc	r19, r1
    22a0:	dc f4       	brge	.+54     	; 0x22d8 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    22a2:	8c 81       	ldd	r24, Y+4	; 0x04
    22a4:	9d 81       	ldd	r25, Y+5	; 0x05
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	91 05       	cpc	r25, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    22ae:	2c 81       	ldd	r18, Y+4	; 0x04
    22b0:	3d 81       	ldd	r19, Y+5	; 0x05
    22b2:	22 30       	cpi	r18, 0x02	; 2
    22b4:	31 05       	cpc	r19, r1
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	9d 81       	ldd	r25, Y+5	; 0x05
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	79 f1       	breq	.+94     	; 0x231e <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    22c0:	74 c0       	rjmp	.+232    	; 0x23aa <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    22c2:	2c 81       	ldd	r18, Y+4	; 0x04
    22c4:	3d 81       	ldd	r19, Y+5	; 0x05
    22c6:	22 30       	cpi	r18, 0x02	; 2
    22c8:	31 05       	cpc	r19, r1
    22ca:	b9 f1       	breq	.+110    	; 0x233a <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	9d 81       	ldd	r25, Y+5	; 0x05
    22d0:	83 30       	cpi	r24, 0x03	; 3
    22d2:	91 05       	cpc	r25, r1
    22d4:	c9 f1       	breq	.+114    	; 0x2348 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    22d6:	69 c0       	rjmp	.+210    	; 0x23aa <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    22d8:	2c 81       	ldd	r18, Y+4	; 0x04
    22da:	3d 81       	ldd	r19, Y+5	; 0x05
    22dc:	27 30       	cpi	r18, 0x07	; 7
    22de:	31 05       	cpc	r19, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    22e2:	4e c0       	rjmp	.+156    	; 0x2380 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	88 30       	cpi	r24, 0x08	; 8
    22ea:	91 05       	cpc	r25, r1
    22ec:	5c f4       	brge	.+22     	; 0x2304 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    22ee:	2c 81       	ldd	r18, Y+4	; 0x04
    22f0:	3d 81       	ldd	r19, Y+5	; 0x05
    22f2:	25 30       	cpi	r18, 0x05	; 5
    22f4:	31 05       	cpc	r19, r1
    22f6:	b1 f1       	breq	.+108    	; 0x2364 <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	9d 81       	ldd	r25, Y+5	; 0x05
    22fc:	86 30       	cpi	r24, 0x06	; 6
    22fe:	91 05       	cpc	r25, r1
    2300:	c1 f1       	breq	.+112    	; 0x2372 <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    2302:	53 c0       	rjmp	.+166    	; 0x23aa <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    2304:	2c 81       	ldd	r18, Y+4	; 0x04
    2306:	3d 81       	ldd	r19, Y+5	; 0x05
    2308:	28 30       	cpi	r18, 0x08	; 8
    230a:	31 05       	cpc	r19, r1
    230c:	09 f4       	brne	.+2      	; 0x2310 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    230e:	3f c0       	rjmp	.+126    	; 0x238e <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	9d 81       	ldd	r25, Y+5	; 0x05
    2314:	89 30       	cpi	r24, 0x09	; 9
    2316:	91 05       	cpc	r25, r1
    2318:	09 f4       	brne	.+2      	; 0x231c <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    231a:	40 c0       	rjmp	.+128    	; 0x239c <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    231c:	46 c0       	rjmp	.+140    	; 0x23aa <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    231e:	e9 81       	ldd	r30, Y+1	; 0x01
    2320:	fa 81       	ldd	r31, Y+2	; 0x02
    2322:	80 81       	ld	r24, Z
    2324:	60 ec       	ldi	r22, 0xC0	; 192
    2326:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    232a:	45 c0       	rjmp	.+138    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    232c:	e9 81       	ldd	r30, Y+1	; 0x01
    232e:	fa 81       	ldd	r31, Y+2	; 0x02
    2330:	80 81       	ld	r24, Z
    2332:	69 ef       	ldi	r22, 0xF9	; 249
    2334:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2338:	3e c0       	rjmp	.+124    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    233a:	e9 81       	ldd	r30, Y+1	; 0x01
    233c:	fa 81       	ldd	r31, Y+2	; 0x02
    233e:	80 81       	ld	r24, Z
    2340:	64 ea       	ldi	r22, 0xA4	; 164
    2342:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2346:	37 c0       	rjmp	.+110    	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    2348:	e9 81       	ldd	r30, Y+1	; 0x01
    234a:	fa 81       	ldd	r31, Y+2	; 0x02
    234c:	80 81       	ld	r24, Z
    234e:	60 eb       	ldi	r22, 0xB0	; 176
    2350:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2354:	30 c0       	rjmp	.+96     	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    2356:	e9 81       	ldd	r30, Y+1	; 0x01
    2358:	fa 81       	ldd	r31, Y+2	; 0x02
    235a:	80 81       	ld	r24, Z
    235c:	69 e9       	ldi	r22, 0x99	; 153
    235e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2362:	29 c0       	rjmp	.+82     	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    2364:	e9 81       	ldd	r30, Y+1	; 0x01
    2366:	fa 81       	ldd	r31, Y+2	; 0x02
    2368:	80 81       	ld	r24, Z
    236a:	62 e9       	ldi	r22, 0x92	; 146
    236c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    2370:	22 c0       	rjmp	.+68     	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    2372:	e9 81       	ldd	r30, Y+1	; 0x01
    2374:	fa 81       	ldd	r31, Y+2	; 0x02
    2376:	80 81       	ld	r24, Z
    2378:	62 e8       	ldi	r22, 0x82	; 130
    237a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    237e:	1b c0       	rjmp	.+54     	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    2380:	e9 81       	ldd	r30, Y+1	; 0x01
    2382:	fa 81       	ldd	r31, Y+2	; 0x02
    2384:	80 81       	ld	r24, Z
    2386:	68 ef       	ldi	r22, 0xF8	; 248
    2388:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    238c:	14 c0       	rjmp	.+40     	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    238e:	e9 81       	ldd	r30, Y+1	; 0x01
    2390:	fa 81       	ldd	r31, Y+2	; 0x02
    2392:	80 81       	ld	r24, Z
    2394:	60 e8       	ldi	r22, 0x80	; 128
    2396:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    239a:	0d c0       	rjmp	.+26     	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    239c:	e9 81       	ldd	r30, Y+1	; 0x01
    239e:	fa 81       	ldd	r31, Y+2	; 0x02
    23a0:	80 81       	ld	r24, Z
    23a2:	60 e9       	ldi	r22, 0x90	; 144
    23a4:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
    23a8:	06 c0       	rjmp	.+12     	; 0x23b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    23aa:	e9 81       	ldd	r30, Y+1	; 0x01
    23ac:	fa 81       	ldd	r31, Y+2	; 0x02
    23ae:	80 81       	ld	r24, Z
    23b0:	66 e8       	ldi	r22, 0x86	; 134
    23b2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
	}
}
}
    23b6:	27 96       	adiw	r28, 0x07	; 7
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <HLED_VidInit+0x6>
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    23d6:	e9 81       	ldd	r30, Y+1	; 0x01
    23d8:	fa 81       	ldd	r31, Y+2	; 0x02
    23da:	81 81       	ldd	r24, Z+1	; 0x01
    23dc:	e9 81       	ldd	r30, Y+1	; 0x01
    23de:	fa 81       	ldd	r31, Y+2	; 0x02
    23e0:	90 81       	ld	r25, Z
    23e2:	69 2f       	mov	r22, r25
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <HLED_VidLed_On+0x6>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    2402:	e9 81       	ldd	r30, Y+1	; 0x01
    2404:	fa 81       	ldd	r31, Y+2	; 0x02
    2406:	81 81       	ldd	r24, Z+1	; 0x01
    2408:	e9 81       	ldd	r30, Y+1	; 0x01
    240a:	fa 81       	ldd	r31, Y+2	; 0x02
    240c:	90 81       	ld	r25, Z
    240e:	69 2f       	mov	r22, r25
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
}
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	00 d0       	rcall	.+0      	; 0x2426 <HLED_VidLed_Off+0x6>
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    242e:	e9 81       	ldd	r30, Y+1	; 0x01
    2430:	fa 81       	ldd	r31, Y+2	; 0x02
    2432:	81 81       	ldd	r24, Z+1	; 0x01
    2434:	e9 81       	ldd	r30, Y+1	; 0x01
    2436:	fa 81       	ldd	r31, Y+2	; 0x02
    2438:	90 81       	ld	r25, Z
    243a:	69 2f       	mov	r22, r25
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
}
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <HLED_VidLed_Toggle+0x6>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    245a:	80 91 a6 00 	lds	r24, 0x00A6
    245e:	88 23       	and	r24, r24
    2460:	71 f4       	brne	.+28     	; 0x247e <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    2462:	e9 81       	ldd	r30, Y+1	; 0x01
    2464:	fa 81       	ldd	r31, Y+2	; 0x02
    2466:	81 81       	ldd	r24, Z+1	; 0x01
    2468:	e9 81       	ldd	r30, Y+1	; 0x01
    246a:	fa 81       	ldd	r31, Y+2	; 0x02
    246c:	90 81       	ld	r25, Z
    246e:	69 2f       	mov	r22, r25
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
		Flag=1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	80 93 a6 00 	sts	0x00A6, r24
    247c:	0c c0       	rjmp	.+24     	; 0x2496 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    247e:	e9 81       	ldd	r30, Y+1	; 0x01
    2480:	fa 81       	ldd	r31, Y+2	; 0x02
    2482:	81 81       	ldd	r24, Z+1	; 0x01
    2484:	e9 81       	ldd	r30, Y+1	; 0x01
    2486:	fa 81       	ldd	r31, Y+2	; 0x02
    2488:	90 81       	ld	r25, Z
    248a:	69 2f       	mov	r22, r25
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
		Flag=0;
    2492:	10 92 a6 00 	sts	0x00A6, r1
	}
}
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	62 e0       	ldi	r22, 0x02	; 2
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	62 e0       	ldi	r22, 0x02	; 2
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	62 e0       	ldi	r22, 0x02	; 2
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	62 e0       	ldi	r22, 0x02	; 2
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    24d0:	84 e0       	ldi	r24, 0x04	; 4
    24d2:	62 e0       	ldi	r22, 0x02	; 2
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    24da:	85 e0       	ldi	r24, 0x05	; 5
    24dc:	62 e0       	ldi	r22, 0x02	; 2
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    24e4:	86 e0       	ldi	r24, 0x06	; 6
    24e6:	62 e0       	ldi	r22, 0x02	; 2
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    24ee:	87 e0       	ldi	r24, 0x07	; 7
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	62 e0       	ldi	r22, 0x02	; 2
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	62 e0       	ldi	r22, 0x02	; 2
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	62 e0       	ldi	r22, 0x02	; 2
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    2520:	84 e0       	ldi	r24, 0x04	; 4
    2522:	62 e0       	ldi	r22, 0x02	; 2
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    252a:	85 e0       	ldi	r24, 0x05	; 5
    252c:	62 e0       	ldi	r22, 0x02	; 2
    252e:	41 e0       	ldi	r20, 0x01	; 1
    2530:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    2534:	86 e0       	ldi	r24, 0x06	; 6
    2536:	62 e0       	ldi	r22, 0x02	; 2
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	62 e0       	ldi	r22, 0x02	; 2
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>

}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	62 97       	sbiw	r28, 0x12	; 18
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2566:	84 e0       	ldi	r24, 0x04	; 4
    2568:	88 8b       	std	Y+16, r24	; 0x10
    256a:	b5 c0       	rjmp	.+362    	; 0x26d6 <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    256c:	88 89       	ldd	r24, Y+16	; 0x10
    256e:	62 e0       	ldi	r22, 0x02	; 2
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2576:	19 8a       	std	Y+17, r1	; 0x11
    2578:	a2 c0       	rjmp	.+324    	; 0x26be <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    257a:	9e 01       	movw	r18, r28
    257c:	2e 5e       	subi	r18, 0xEE	; 238
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	62 e0       	ldi	r22, 0x02	; 2
    2584:	a9 01       	movw	r20, r18
    2586:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    258a:	8a 89       	ldd	r24, Y+18	; 0x12
    258c:	88 23       	and	r24, r24
    258e:	09 f0       	breq	.+2      	; 0x2592 <HKPD_U8GetKeyPressed+0x44>
    2590:	93 c0       	rjmp	.+294    	; 0x26b8 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    2592:	88 89       	ldd	r24, Y+16	; 0x10
    2594:	88 2f       	mov	r24, r24
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	ac 01       	movw	r20, r24
    259a:	44 50       	subi	r20, 0x04	; 4
    259c:	50 40       	sbci	r21, 0x00	; 0
    259e:	89 89       	ldd	r24, Y+17	; 0x11
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	ca 01       	movw	r24, r20
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	82 0f       	add	r24, r18
    25b0:	93 1f       	adc	r25, r19
    25b2:	fc 01       	movw	r30, r24
    25b4:	eb 56       	subi	r30, 0x6B	; 107
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	8f 87       	std	Y+15, r24	; 0x0f
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    25be:	9e 01       	movw	r18, r28
    25c0:	2e 5e       	subi	r18, 0xEE	; 238
    25c2:	3f 4f       	sbci	r19, 0xFF	; 255
    25c4:	89 89       	ldd	r24, Y+17	; 0x11
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	a9 01       	movw	r20, r18
    25ca:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    25ce:	8a 89       	ldd	r24, Y+18	; 0x12
    25d0:	88 23       	and	r24, r24
    25d2:	a9 f3       	breq	.-22     	; 0x25be <HKPD_U8GetKeyPressed+0x70>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 e2       	ldi	r26, 0x20	; 32
    25da:	b1 e4       	ldi	r27, 0x41	; 65
    25dc:	8b 87       	std	Y+11, r24	; 0x0b
    25de:	9c 87       	std	Y+12, r25	; 0x0c
    25e0:	ad 87       	std	Y+13, r26	; 0x0d
    25e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a ef       	ldi	r20, 0xFA	; 250
    25f2:	54 e4       	ldi	r21, 0x44	; 68
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	8f 83       	std	Y+7, r24	; 0x07
    25fe:	98 87       	std	Y+8, r25	; 0x08
    2600:	a9 87       	std	Y+9, r26	; 0x09
    2602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e8       	ldi	r20, 0x80	; 128
    2612:	5f e3       	ldi	r21, 0x3F	; 63
    2614:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2618:	88 23       	and	r24, r24
    261a:	2c f4       	brge	.+10     	; 0x2626 <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	3f c0       	rjmp	.+126    	; 0x26a4 <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    2626:	6f 81       	ldd	r22, Y+7	; 0x07
    2628:	78 85       	ldd	r23, Y+8	; 0x08
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	4f e7       	ldi	r20, 0x7F	; 127
    2634:	57 e4       	ldi	r21, 0x47	; 71
    2636:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263a:	18 16       	cp	r1, r24
    263c:	4c f5       	brge	.+82     	; 0x2690 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2640:	7c 85       	ldd	r23, Y+12	; 0x0c
    2642:	8d 85       	ldd	r24, Y+13	; 0x0d
    2644:	9e 85       	ldd	r25, Y+14	; 0x0e
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e2       	ldi	r20, 0x20	; 32
    264c:	51 e4       	ldi	r21, 0x41	; 65
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
    2666:	0f c0       	rjmp	.+30     	; 0x2686 <HKPD_U8GetKeyPressed+0x138>
    2668:	88 ec       	ldi	r24, 0xC8	; 200
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <HKPD_U8GetKeyPressed+0x126>
    2678:	9c 83       	std	Y+4, r25	; 0x04
    267a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	69 f7       	brne	.-38     	; 0x2668 <HKPD_U8GetKeyPressed+0x11a>
    268e:	14 c0       	rjmp	.+40     	; 0x26b8 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	6f 81       	ldd	r22, Y+7	; 0x07
    2692:	78 85       	ldd	r23, Y+8	; 0x08
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <HKPD_U8GetKeyPressed+0x162>
    26b4:	9a 83       	std	Y+2, r25	; 0x02
    26b6:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    26b8:	89 89       	ldd	r24, Y+17	; 0x11
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	89 8b       	std	Y+17, r24	; 0x11
    26be:	89 89       	ldd	r24, Y+17	; 0x11
    26c0:	84 30       	cpi	r24, 0x04	; 4
    26c2:	08 f4       	brcc	.+2      	; 0x26c6 <HKPD_U8GetKeyPressed+0x178>
    26c4:	5a cf       	rjmp	.-332    	; 0x257a <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    26c6:	88 89       	ldd	r24, Y+16	; 0x10
    26c8:	62 e0       	ldi	r22, 0x02	; 2
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    26d0:	88 89       	ldd	r24, Y+16	; 0x10
    26d2:	8f 5f       	subi	r24, 0xFF	; 255
    26d4:	88 8b       	std	Y+16, r24	; 0x10
    26d6:	88 89       	ldd	r24, Y+16	; 0x10
    26d8:	88 30       	cpi	r24, 0x08	; 8
    26da:	08 f4       	brcc	.+2      	; 0x26de <HKPD_U8GetKeyPressed+0x190>
    26dc:	47 cf       	rjmp	.-370    	; 0x256c <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    26de:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e0:	8f 3f       	cpi	r24, 0xFF	; 255
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <HKPD_U8GetKeyPressed+0x198>
    26e4:	40 cf       	rjmp	.-384    	; 0x2566 <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    26e6:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    26e8:	62 96       	adiw	r28, 0x12	; 18
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <HEEPROM_VidInit>:



/*Initialize EEPROM*/
void HEEPROM_VidInit(void)
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
	MTWI_VidInitMaster();
    2702:	0e 94 ac 06 	call	0xd58	; 0xd58 <MTWI_VidInitMaster>
}
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <HEEPROM_VidWriteDataByte>:
/*Send byte to EEPROM*/
u8 HEEPROM_VidWriteDataByte(u8 Copy_u8LocationAddress,u8 Copy_u8ChipNum,u8 Copy_u8BlockNum,u8 Copy_u8DataByte)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <HEEPROM_VidWriteDataByte+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <HEEPROM_VidWriteDataByte+0x8>
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	6a 83       	std	Y+2, r22	; 0x02
    271c:	4b 83       	std	Y+3, r20	; 0x03
    271e:	2c 83       	std	Y+4, r18	; 0x04
	return NoError;
    2720:	80 e0       	ldi	r24, 0x00	; 0
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <HEEPROM_Write_Byte>:
u8 HEEPROM_Write_Byte(u16 Copy_u16Address,u8 Copy_u8DataByte)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <HEEPROM_Write_Byte+0x6>
    2736:	00 d0       	rcall	.+0      	; 0x2738 <HEEPROM_Write_Byte+0x8>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	6b 83       	std	Y+3, r22	; 0x03
	MTWI_SendStartCondition();
    2742:	0e 94 c2 06 	call	0xd84	; 0xd84 <MTWI_SendStartCondition>
	if(MTWI_MASTERGetStatus() !=START_ACK)
    2746:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    274a:	88 30       	cpi	r24, 0x08	; 8
    274c:	19 f0       	breq	.+6      	; 0x2754 <HEEPROM_Write_Byte+0x24>
	{
		return StartConditionErr;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	8c 83       	std	Y+4, r24	; 0x04
    2752:	2a c0       	rjmp	.+84     	; 0x27a8 <HEEPROM_Write_Byte+0x78>
	}
	//write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	MTWI_MasterWriteDataByte((u8)(0xA0 | ((Copy_u16Address & 0x0700)>>7)));   //0x0700-->011100000000
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	80 70       	andi	r24, 0x00	; 0
    275a:	97 70       	andi	r25, 0x07	; 7
    275c:	88 0f       	add	r24, r24
    275e:	89 2f       	mov	r24, r25
    2760:	88 1f       	adc	r24, r24
    2762:	99 0b       	sbc	r25, r25
    2764:	91 95       	neg	r25
    2766:	80 6a       	ori	r24, 0xA0	; 160
    2768:	0e 94 dd 06 	call	0xdba	; 0xdba <MTWI_MasterWriteDataByte>
	if (MTWI_MASTERGetStatus() != SLAVE_ADD_AND_WR_ACK)
    276c:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    2770:	88 31       	cpi	r24, 0x18	; 24
    2772:	19 f0       	breq	.+6      	; 0x277a <HEEPROM_Write_Byte+0x4a>
		return SlaveAddressWithWriteErr;
    2774:	83 e0       	ldi	r24, 0x03	; 3
    2776:	8c 83       	std	Y+4, r24	; 0x04
    2778:	17 c0       	rjmp	.+46     	; 0x27a8 <HEEPROM_Write_Byte+0x78>

	//send the required location address
	MTWI_MasterWriteDataByte((u8)(Copy_u16Address));
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	0e 94 dd 06 	call	0xdba	; 0xdba <MTWI_MasterWriteDataByte>
	if (MTWI_MASTERGetStatus() != MSTR_WR_BYTE_ACK)
    2780:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    2784:	88 32       	cpi	r24, 0x28	; 40
    2786:	19 f0       	breq	.+6      	; 0x278e <HEEPROM_Write_Byte+0x5e>
		return MasterWriteByteErr;
    2788:	85 e0       	ldi	r24, 0x05	; 5
    278a:	8c 83       	std	Y+4, r24	; 0x04
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <HEEPROM_Write_Byte+0x78>

	//write byte to eeprom
	MTWI_MasterWriteDataByte(Copy_u8DataByte);
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	0e 94 dd 06 	call	0xdba	; 0xdba <MTWI_MasterWriteDataByte>
	if (MTWI_MASTERGetStatus() != MSTR_WR_BYTE_ACK)
    2794:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    2798:	88 32       	cpi	r24, 0x28	; 40
    279a:	19 f0       	breq	.+6      	; 0x27a2 <HEEPROM_Write_Byte+0x72>
		return MasterWriteByteErr;
    279c:	85 e0       	ldi	r24, 0x05	; 5
    279e:	8c 83       	std	Y+4, r24	; 0x04
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <HEEPROM_Write_Byte+0x78>

	MTWI_SendStopCondition();
    27a2:	0e 94 d2 06 	call	0xda4	; 0xda4 <MTWI_SendStopCondition>

	return NoError;
    27a6:	1c 82       	std	Y+4, r1	; 0x04
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04

}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <HEEPROM_VidReadDataByte>:

/*Read byte to EEPROM*/
u8 HEEPROM_VidReadDataByte(u8 Copy_u8LocationAddress,u8 Copy_u8ChipNum,u8 Copy_u8BlockNum)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <HEEPROM_VidReadDataByte+0x6>
    27be:	0f 92       	push	r0
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	6a 83       	std	Y+2, r22	; 0x02
    27c8:	4b 83       	std	Y+3, r20	; 0x03
	return NoError;
    27ca:	80 e0       	ldi	r24, 0x00	; 0
}
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <HEEPROM_Read_Byte>:
u8 HEEPROM_Read_Byte(u16 Copy_u16Address,u8 *Copy_u8DataByte)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <HEEPROM_Read_Byte+0x6>
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <HEEPROM_Read_Byte+0x8>
    27e0:	0f 92       	push	r0
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	7c 83       	std	Y+4, r23	; 0x04
    27ec:	6b 83       	std	Y+3, r22	; 0x03
	MTWI_SendStartCondition();
    27ee:	0e 94 c2 06 	call	0xd84	; 0xd84 <MTWI_SendStartCondition>
	if(MTWI_MASTERGetStatus() !=START_ACK)
    27f2:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    27f6:	88 30       	cpi	r24, 0x08	; 8
    27f8:	19 f0       	breq	.+6      	; 0x2800 <HEEPROM_Read_Byte+0x28>
	{
		return StartConditionErr;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	48 c0       	rjmp	.+144    	; 0x2890 <HEEPROM_Read_Byte+0xb8>
	}
	//write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	MTWI_MasterWriteDataByte((u8)(0xA0 | ((Copy_u16Address & 0x0700)>>7)));   //0x0700-->011100000000
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	80 70       	andi	r24, 0x00	; 0
    2806:	97 70       	andi	r25, 0x07	; 7
    2808:	88 0f       	add	r24, r24
    280a:	89 2f       	mov	r24, r25
    280c:	88 1f       	adc	r24, r24
    280e:	99 0b       	sbc	r25, r25
    2810:	91 95       	neg	r25
    2812:	80 6a       	ori	r24, 0xA0	; 160
    2814:	0e 94 dd 06 	call	0xdba	; 0xdba <MTWI_MasterWriteDataByte>
	if (MTWI_MASTERGetStatus() != SLAVE_ADD_AND_WR_ACK)
    2818:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    281c:	88 31       	cpi	r24, 0x18	; 24
    281e:	19 f0       	breq	.+6      	; 0x2826 <HEEPROM_Read_Byte+0x4e>
		return SlaveAddressWithWriteErr;
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	8d 83       	std	Y+5, r24	; 0x05
    2824:	35 c0       	rjmp	.+106    	; 0x2890 <HEEPROM_Read_Byte+0xb8>

	//send the required location address
	MTWI_MasterWriteDataByte((u8)(Copy_u16Address));
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	0e 94 dd 06 	call	0xdba	; 0xdba <MTWI_MasterWriteDataByte>
	if (MTWI_MASTERGetStatus() != MSTR_WR_BYTE_ACK)
    282c:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    2830:	88 32       	cpi	r24, 0x28	; 40
    2832:	19 f0       	breq	.+6      	; 0x283a <HEEPROM_Read_Byte+0x62>
		return MasterWriteByteErr;
    2834:	85 e0       	ldi	r24, 0x05	; 5
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	2b c0       	rjmp	.+86     	; 0x2890 <HEEPROM_Read_Byte+0xb8>
	//send a repeated start
	MTWI_SendStartCondition();
    283a:	0e 94 c2 06 	call	0xd84	; 0xd84 <MTWI_SendStartCondition>
	if (MTWI_MASTERGetStatus() != REP_START_ACK)
    283e:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    2842:	80 31       	cpi	r24, 0x10	; 16
    2844:	19 f0       	breq	.+6      	; 0x284c <HEEPROM_Read_Byte+0x74>
		return RepeatedStartErr;
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	22 c0       	rjmp	.+68     	; 0x2890 <HEEPROM_Read_Byte+0xb8>

	//write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
	MTWI_MasterWriteDataByte((u8)(0xA0 | ((Copy_u16Address & 0x0700)>>7) | 1));   //0x0700-->011100000000
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	80 70       	andi	r24, 0x00	; 0
    2852:	97 70       	andi	r25, 0x07	; 7
    2854:	88 0f       	add	r24, r24
    2856:	89 2f       	mov	r24, r25
    2858:	88 1f       	adc	r24, r24
    285a:	99 0b       	sbc	r25, r25
    285c:	91 95       	neg	r25
    285e:	81 6a       	ori	r24, 0xA1	; 161
    2860:	0e 94 dd 06 	call	0xdba	; 0xdba <MTWI_MasterWriteDataByte>
	if (MTWI_MASTERGetStatus() != SLAVE_ADD_AND_RD_ACK)
    2864:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    2868:	80 34       	cpi	r24, 0x40	; 64
    286a:	19 f0       	breq	.+6      	; 0x2872 <HEEPROM_Read_Byte+0x9a>
		return SlaveAddressWithReadErr;
    286c:	84 e0       	ldi	r24, 0x04	; 4
    286e:	8d 83       	std	Y+5, r24	; 0x05
    2870:	0f c0       	rjmp	.+30     	; 0x2890 <HEEPROM_Read_Byte+0xb8>

	*Copy_u8DataByte = MTWI_MasterReadDataByteWith_NACK();
    2872:	0e 94 07 07 	call	0xe0e	; 0xe0e <MTWI_MasterReadDataByteWith_NACK>
    2876:	eb 81       	ldd	r30, Y+3	; 0x03
    2878:	fc 81       	ldd	r31, Y+4	; 0x04
    287a:	80 83       	st	Z, r24
	if (MTWI_MASTERGetStatus() != MSTR_RD_BYTE_NACK)
    287c:	0e 94 1a 07 	call	0xe34	; 0xe34 <MTWI_MASTERGetStatus>
    2880:	88 35       	cpi	r24, 0x58	; 88
    2882:	19 f0       	breq	.+6      	; 0x288a <HEEPROM_Read_Byte+0xb2>
		return MasterReadByteNErrNACK;
    2884:	87 e0       	ldi	r24, 0x07	; 7
    2886:	8d 83       	std	Y+5, r24	; 0x05
    2888:	03 c0       	rjmp	.+6      	; 0x2890 <HEEPROM_Read_Byte+0xb8>

	MTWI_SendStopCondition();
    288a:	0e 94 d2 06 	call	0xda4	; 0xda4 <MTWI_SendStopCondition>

	return NoError;
    288e:	1d 82       	std	Y+5, r1	; 0x05
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	6d 97       	sbiw	r28, 0x1d	; 29
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	40 e0       	ldi	r20, 0x00	; 0
    28be:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    28d0:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	61 e0       	ldi	r22, 0x01	; 1
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a0 e0       	ldi	r26, 0x00	; 0
    28e4:	b0 e4       	ldi	r27, 0x40	; 64
    28e6:	89 8f       	std	Y+25, r24	; 0x19
    28e8:	9a 8f       	std	Y+26, r25	; 0x1a
    28ea:	ab 8f       	std	Y+27, r26	; 0x1b
    28ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ee:	69 8d       	ldd	r22, Y+25	; 0x19
    28f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	4a ef       	ldi	r20, 0xFA	; 250
    28fc:	54 e4       	ldi	r21, 0x44	; 68
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	8d 8b       	std	Y+21, r24	; 0x15
    2908:	9e 8b       	std	Y+22, r25	; 0x16
    290a:	af 8b       	std	Y+23, r26	; 0x17
    290c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	7e 89       	ldd	r23, Y+22	; 0x16
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e8       	ldi	r20, 0x80	; 128
    291c:	5f e3       	ldi	r21, 0x3F	; 63
    291e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2922:	88 23       	and	r24, r24
    2924:	2c f4       	brge	.+10     	; 0x2930 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	9c 8b       	std	Y+20, r25	; 0x14
    292c:	8b 8b       	std	Y+19, r24	; 0x13
    292e:	3f c0       	rjmp	.+126    	; 0x29ae <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    2930:	6d 89       	ldd	r22, Y+21	; 0x15
    2932:	7e 89       	ldd	r23, Y+22	; 0x16
    2934:	8f 89       	ldd	r24, Y+23	; 0x17
    2936:	98 8d       	ldd	r25, Y+24	; 0x18
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	57 e4       	ldi	r21, 0x47	; 71
    2940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2944:	18 16       	cp	r1, r24
    2946:	4c f5       	brge	.+82     	; 0x299a <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2948:	69 8d       	ldd	r22, Y+25	; 0x19
    294a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    294c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    294e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e2       	ldi	r20, 0x20	; 32
    2956:	51 e4       	ldi	r21, 0x41	; 65
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
    2964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	9c 8b       	std	Y+20, r25	; 0x14
    296e:	8b 8b       	std	Y+19, r24	; 0x13
    2970:	0f c0       	rjmp	.+30     	; 0x2990 <HCLCD_Vid8Bits_SendCommand+0xee>
    2972:	88 ec       	ldi	r24, 0xC8	; 200
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9a 8b       	std	Y+18, r25	; 0x12
    2978:	89 8b       	std	Y+17, r24	; 0x11
    297a:	89 89       	ldd	r24, Y+17	; 0x11
    297c:	9a 89       	ldd	r25, Y+18	; 0x12
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <HCLCD_Vid8Bits_SendCommand+0xdc>
    2982:	9a 8b       	std	Y+18, r25	; 0x12
    2984:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2986:	8b 89       	ldd	r24, Y+19	; 0x13
    2988:	9c 89       	ldd	r25, Y+20	; 0x14
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	9c 8b       	std	Y+20, r25	; 0x14
    298e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2990:	8b 89       	ldd	r24, Y+19	; 0x13
    2992:	9c 89       	ldd	r25, Y+20	; 0x14
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	69 f7       	brne	.-38     	; 0x2972 <HCLCD_Vid8Bits_SendCommand+0xd0>
    2998:	14 c0       	rjmp	.+40     	; 0x29c2 <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299a:	6d 89       	ldd	r22, Y+21	; 0x15
    299c:	7e 89       	ldd	r23, Y+22	; 0x16
    299e:	8f 89       	ldd	r24, Y+23	; 0x17
    29a0:	98 8d       	ldd	r25, Y+24	; 0x18
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9c 8b       	std	Y+20, r25	; 0x14
    29ac:	8b 8b       	std	Y+19, r24	; 0x13
    29ae:	8b 89       	ldd	r24, Y+19	; 0x13
    29b0:	9c 89       	ldd	r25, Y+20	; 0x14
    29b2:	98 8b       	std	Y+16, r25	; 0x10
    29b4:	8f 87       	std	Y+15, r24	; 0x0f
    29b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b8:	98 89       	ldd	r25, Y+16	; 0x10
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <HCLCD_Vid8Bits_SendCommand+0x118>
    29be:	98 8b       	std	Y+16, r25	; 0x10
    29c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    29c2:	82 e0       	ldi	r24, 0x02	; 2
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	40 e0       	ldi	r20, 0x00	; 0
    29c8:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	a0 e0       	ldi	r26, 0x00	; 0
    29d2:	b0 e4       	ldi	r27, 0x40	; 64
    29d4:	8b 87       	std	Y+11, r24	; 0x0b
    29d6:	9c 87       	std	Y+12, r25	; 0x0c
    29d8:	ad 87       	std	Y+13, r26	; 0x0d
    29da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29de:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4a ef       	ldi	r20, 0xFA	; 250
    29ea:	54 e4       	ldi	r21, 0x44	; 68
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8f 83       	std	Y+7, r24	; 0x07
    29f6:	98 87       	std	Y+8, r25	; 0x08
    29f8:	a9 87       	std	Y+9, r26	; 0x09
    29fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fc:	6f 81       	ldd	r22, Y+7	; 0x07
    29fe:	78 85       	ldd	r23, Y+8	; 0x08
    2a00:	89 85       	ldd	r24, Y+9	; 0x09
    2a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    2a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a20:	78 85       	ldd	r23, Y+8	; 0x08
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	4c f5       	brge	.+82     	; 0x2a88 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <HCLCD_Vid8Bits_SendCommand+0x1dc>
    2a60:	88 ec       	ldi	r24, 0xC8	; 200
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	8b 83       	std	Y+3, r24	; 0x03
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <HCLCD_Vid8Bits_SendCommand+0x1ca>
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <HCLCD_Vid8Bits_SendCommand+0x1be>
    2a86:	14 c0       	rjmp	.+40     	; 0x2ab0 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <HCLCD_Vid8Bits_SendCommand+0x206>
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2ab0:	82 e0       	ldi	r24, 0x02	; 2
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	41 e0       	ldi	r20, 0x01	; 1
    2ab6:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
}
    2aba:	6d 96       	adiw	r28, 0x1d	; 29
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	e8 97       	sbiw	r28, 0x38	; 56
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	6f ef       	ldi	r22, 0xFF	; 255
    2ae4:	0e 94 8f 0c 	call	0x191e	; 0x191e <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	41 e0       	ldi	r20, 0x01	; 1
    2aee:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	61 e0       	ldi	r22, 0x01	; 1
    2af6:	41 e0       	ldi	r20, 0x01	; 1
    2af8:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 ef       	ldi	r26, 0xF0	; 240
    2b0c:	b1 e4       	ldi	r27, 0x41	; 65
    2b0e:	8d ab       	std	Y+53, r24	; 0x35
    2b10:	9e ab       	std	Y+54, r25	; 0x36
    2b12:	af ab       	std	Y+55, r26	; 0x37
    2b14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6d a9       	ldd	r22, Y+53	; 0x35
    2b18:	7e a9       	ldd	r23, Y+54	; 0x36
    2b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b1c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a ef       	ldi	r20, 0xFA	; 250
    2b24:	54 e4       	ldi	r21, 0x44	; 68
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	89 ab       	std	Y+49, r24	; 0x31
    2b30:	9a ab       	std	Y+50, r25	; 0x32
    2b32:	ab ab       	std	Y+51, r26	; 0x33
    2b34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b36:	69 a9       	ldd	r22, Y+49	; 0x31
    2b38:	7a a9       	ldd	r23, Y+50	; 0x32
    2b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	98 ab       	std	Y+48, r25	; 0x30
    2b54:	8f a7       	std	Y+47, r24	; 0x2f
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    2b58:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6d a9       	ldd	r22, Y+53	; 0x35
    2b72:	7e a9       	ldd	r23, Y+54	; 0x36
    2b74:	8f a9       	ldd	r24, Y+55	; 0x37
    2b76:	98 ad       	ldd	r25, Y+56	; 0x38
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	98 ab       	std	Y+48, r25	; 0x30
    2b96:	8f a7       	std	Y+47, r24	; 0x2f
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <HCLCD_Vid8Bits_Init+0xec>
    2b9a:	88 ec       	ldi	r24, 0xC8	; 200
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ba0:	8d a7       	std	Y+45, r24	; 0x2d
    2ba2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ba4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <HCLCD_Vid8Bits_Init+0xda>
    2baa:	9e a7       	std	Y+46, r25	; 0x2e
    2bac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	98 ab       	std	Y+48, r25	; 0x30
    2bb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bba:	98 a9       	ldd	r25, Y+48	; 0x30
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <HCLCD_Vid8Bits_Init+0xce>
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	98 ab       	std	Y+48, r25	; 0x30
    2bd4:	8f a7       	std	Y+47, r24	; 0x2f
    2bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bda:	9c a7       	std	Y+44, r25	; 0x2c
    2bdc:	8b a7       	std	Y+43, r24	; 0x2b
    2bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    2be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <HCLCD_Vid8Bits_Init+0x116>
    2be6:	9c a7       	std	Y+44, r25	; 0x2c
    2be8:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    2bea:	88 e2       	ldi	r24, 0x28	; 40
    2bec:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e8       	ldi	r26, 0x80	; 128
    2bf6:	bf e3       	ldi	r27, 0x3F	; 63
    2bf8:	8f a3       	std	Y+39, r24	; 0x27
    2bfa:	98 a7       	std	Y+40, r25	; 0x28
    2bfc:	a9 a7       	std	Y+41, r26	; 0x29
    2bfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6f a1       	ldd	r22, Y+39	; 0x27
    2c02:	78 a5       	ldd	r23, Y+40	; 0x28
    2c04:	89 a5       	ldd	r24, Y+41	; 0x29
    2c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8b a3       	std	Y+35, r24	; 0x23
    2c1a:	9c a3       	std	Y+36, r25	; 0x24
    2c1c:	ad a3       	std	Y+37, r26	; 0x25
    2c1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c20:	6b a1       	ldd	r22, Y+35	; 0x23
    2c22:	7c a1       	ldd	r23, Y+36	; 0x24
    2c24:	8d a1       	ldd	r24, Y+37	; 0x25
    2c26:	9e a1       	ldd	r25, Y+38	; 0x26
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9a a3       	std	Y+34, r25	; 0x22
    2c3e:	89 a3       	std	Y+33, r24	; 0x21
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    2c42:	6b a1       	ldd	r22, Y+35	; 0x23
    2c44:	7c a1       	ldd	r23, Y+36	; 0x24
    2c46:	8d a1       	ldd	r24, Y+37	; 0x25
    2c48:	9e a1       	ldd	r25, Y+38	; 0x26
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9a a3       	std	Y+34, r25	; 0x22
    2c80:	89 a3       	std	Y+33, r24	; 0x21
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <HCLCD_Vid8Bits_Init+0x1d6>
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	98 a3       	std	Y+32, r25	; 0x20
    2c8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <HCLCD_Vid8Bits_Init+0x1c4>
    2c94:	98 a3       	std	Y+32, r25	; 0x20
    2c96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9a a3       	std	Y+34, r25	; 0x22
    2ca0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <HCLCD_Vid8Bits_Init+0x1b8>
    2caa:	14 c0       	rjmp	.+40     	; 0x2cd4 <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	6b a1       	ldd	r22, Y+35	; 0x23
    2cae:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9a a3       	std	Y+34, r25	; 0x22
    2cbe:	89 a3       	std	Y+33, r24	; 0x21
    2cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cc6:	8d 8f       	std	Y+29, r24	; 0x1d
    2cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <HCLCD_Vid8Bits_Init+0x200>
    2cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2cd2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    2cd4:	8f e0       	ldi	r24, 0x0F	; 15
    2cd6:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e8       	ldi	r26, 0x80	; 128
    2ce0:	bf e3       	ldi	r27, 0x3F	; 63
    2ce2:	89 8f       	std	Y+25, r24	; 0x19
    2ce4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ce6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ce8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cea:	69 8d       	ldd	r22, Y+25	; 0x19
    2cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	4a ef       	ldi	r20, 0xFA	; 250
    2cf8:	54 e4       	ldi	r21, 0x44	; 68
    2cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	8d 8b       	std	Y+21, r24	; 0x15
    2d04:	9e 8b       	std	Y+22, r25	; 0x16
    2d06:	af 8b       	std	Y+23, r26	; 0x17
    2d08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d10:	98 8d       	ldd	r25, Y+24	; 0x18
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e8       	ldi	r20, 0x80	; 128
    2d18:	5f e3       	ldi	r21, 0x3F	; 63
    2d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d1e:	88 23       	and	r24, r24
    2d20:	2c f4       	brge	.+10     	; 0x2d2c <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
    2d2a:	3f c0       	rjmp	.+126    	; 0x2daa <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    2d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d30:	8f 89       	ldd	r24, Y+23	; 0x17
    2d32:	98 8d       	ldd	r25, Y+24	; 0x18
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	3f ef       	ldi	r19, 0xFF	; 255
    2d38:	4f e7       	ldi	r20, 0x7F	; 127
    2d3a:	57 e4       	ldi	r21, 0x47	; 71
    2d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d40:	18 16       	cp	r1, r24
    2d42:	4c f5       	brge	.+82     	; 0x2d96 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d44:	69 8d       	ldd	r22, Y+25	; 0x19
    2d46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e2       	ldi	r20, 0x20	; 32
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9c 8b       	std	Y+20, r25	; 0x14
    2d6a:	8b 8b       	std	Y+19, r24	; 0x13
    2d6c:	0f c0       	rjmp	.+30     	; 0x2d8c <HCLCD_Vid8Bits_Init+0x2c0>
    2d6e:	88 ec       	ldi	r24, 0xC8	; 200
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	9a 8b       	std	Y+18, r25	; 0x12
    2d74:	89 8b       	std	Y+17, r24	; 0x11
    2d76:	89 89       	ldd	r24, Y+17	; 0x11
    2d78:	9a 89       	ldd	r25, Y+18	; 0x12
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <HCLCD_Vid8Bits_Init+0x2ae>
    2d7e:	9a 8b       	std	Y+18, r25	; 0x12
    2d80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d82:	8b 89       	ldd	r24, Y+19	; 0x13
    2d84:	9c 89       	ldd	r25, Y+20	; 0x14
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	9c 8b       	std	Y+20, r25	; 0x14
    2d8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	69 f7       	brne	.-38     	; 0x2d6e <HCLCD_Vid8Bits_Init+0x2a2>
    2d94:	14 c0       	rjmp	.+40     	; 0x2dbe <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	6d 89       	ldd	r22, Y+21	; 0x15
    2d98:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9c 8b       	std	Y+20, r25	; 0x14
    2da8:	8b 8b       	std	Y+19, r24	; 0x13
    2daa:	8b 89       	ldd	r24, Y+19	; 0x13
    2dac:	9c 89       	ldd	r25, Y+20	; 0x14
    2dae:	98 8b       	std	Y+16, r25	; 0x10
    2db0:	8f 87       	std	Y+15, r24	; 0x0f
    2db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db4:	98 89       	ldd	r25, Y+16	; 0x10
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <HCLCD_Vid8Bits_Init+0x2ea>
    2dba:	98 8b       	std	Y+16, r25	; 0x10
    2dbc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	a0 e0       	ldi	r26, 0x00	; 0
    2dca:	b0 e4       	ldi	r27, 0x40	; 64
    2dcc:	8b 87       	std	Y+11, r24	; 0x0b
    2dce:	9c 87       	std	Y+12, r25	; 0x0c
    2dd0:	ad 87       	std	Y+13, r26	; 0x0d
    2dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	4a ef       	ldi	r20, 0xFA	; 250
    2de2:	54 e4       	ldi	r21, 0x44	; 68
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8f 83       	std	Y+7, r24	; 0x07
    2dee:	98 87       	std	Y+8, r25	; 0x08
    2df0:	a9 87       	std	Y+9, r26	; 0x09
    2df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df4:	6f 81       	ldd	r22, Y+7	; 0x07
    2df6:	78 85       	ldd	r23, Y+8	; 0x08
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
    2e14:	3f c0       	rjmp	.+126    	; 0x2e94 <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    2e16:	6f 81       	ldd	r22, Y+7	; 0x07
    2e18:	78 85       	ldd	r23, Y+8	; 0x08
    2e1a:	89 85       	ldd	r24, Y+9	; 0x09
    2e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	3f ef       	ldi	r19, 0xFF	; 255
    2e22:	4f e7       	ldi	r20, 0x7F	; 127
    2e24:	57 e4       	ldi	r21, 0x47	; 71
    2e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2a:	18 16       	cp	r1, r24
    2e2c:	4c f5       	brge	.+82     	; 0x2e80 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	0f c0       	rjmp	.+30     	; 0x2e76 <HCLCD_Vid8Bits_Init+0x3aa>
    2e58:	88 ec       	ldi	r24, 0xC8	; 200
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <HCLCD_Vid8Bits_Init+0x398>
    2e68:	9c 83       	std	Y+4, r25	; 0x04
    2e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	9e 83       	std	Y+6, r25	; 0x06
    2e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e76:	8d 81       	ldd	r24, Y+5	; 0x05
    2e78:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	69 f7       	brne	.-38     	; 0x2e58 <HCLCD_Vid8Bits_Init+0x38c>
    2e7e:	14 c0       	rjmp	.+40     	; 0x2ea8 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e80:	6f 81       	ldd	r22, Y+7	; 0x07
    2e82:	78 85       	ldd	r23, Y+8	; 0x08
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	8d 81       	ldd	r24, Y+5	; 0x05
    2e96:	9e 81       	ldd	r25, Y+6	; 0x06
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <HCLCD_Vid8Bits_Init+0x3d4>
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2ea8:	86 e0       	ldi	r24, 0x06	; 6
    2eaa:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
}
    2eae:	e8 96       	adiw	r28, 0x38	; 56
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	6d 97       	sbiw	r28, 0x1d	; 29
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	61 e0       	ldi	r22, 0x01	; 1
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	40 e0       	ldi	r20, 0x00	; 0
    2ee6:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2eee:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	61 e0       	ldi	r22, 0x01	; 1
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	a0 e0       	ldi	r26, 0x00	; 0
    2f02:	b0 e4       	ldi	r27, 0x40	; 64
    2f04:	89 8f       	std	Y+25, r24	; 0x19
    2f06:	9a 8f       	std	Y+26, r25	; 0x1a
    2f08:	ab 8f       	std	Y+27, r26	; 0x1b
    2f0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	4a ef       	ldi	r20, 0xFA	; 250
    2f1a:	54 e4       	ldi	r21, 0x44	; 68
    2f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	8d 8b       	std	Y+21, r24	; 0x15
    2f26:	9e 8b       	std	Y+22, r25	; 0x16
    2f28:	af 8b       	std	Y+23, r26	; 0x17
    2f2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f30:	8f 89       	ldd	r24, Y+23	; 0x17
    2f32:	98 8d       	ldd	r25, Y+24	; 0x18
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e8       	ldi	r20, 0x80	; 128
    2f3a:	5f e3       	ldi	r21, 0x3F	; 63
    2f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f40:	88 23       	and	r24, r24
    2f42:	2c f4       	brge	.+10     	; 0x2f4e <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	9c 8b       	std	Y+20, r25	; 0x14
    2f4a:	8b 8b       	std	Y+19, r24	; 0x13
    2f4c:	3f c0       	rjmp	.+126    	; 0x2fcc <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f50:	7e 89       	ldd	r23, Y+22	; 0x16
    2f52:	8f 89       	ldd	r24, Y+23	; 0x17
    2f54:	98 8d       	ldd	r25, Y+24	; 0x18
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	3f ef       	ldi	r19, 0xFF	; 255
    2f5a:	4f e7       	ldi	r20, 0x7F	; 127
    2f5c:	57 e4       	ldi	r21, 0x47	; 71
    2f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f62:	18 16       	cp	r1, r24
    2f64:	4c f5       	brge	.+82     	; 0x2fb8 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f66:	69 8d       	ldd	r22, Y+25	; 0x19
    2f68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e2       	ldi	r20, 0x20	; 32
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	bc 01       	movw	r22, r24
    2f80:	cd 01       	movw	r24, r26
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	9c 8b       	std	Y+20, r25	; 0x14
    2f8c:	8b 8b       	std	Y+19, r24	; 0x13
    2f8e:	0f c0       	rjmp	.+30     	; 0x2fae <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2f90:	88 ec       	ldi	r24, 0xC8	; 200
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9a 8b       	std	Y+18, r25	; 0x12
    2f96:	89 8b       	std	Y+17, r24	; 0x11
    2f98:	89 89       	ldd	r24, Y+17	; 0x11
    2f9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2fa0:	9a 8b       	std	Y+18, r25	; 0x12
    2fa2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	9c 8b       	std	Y+20, r25	; 0x14
    2fac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fae:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	69 f7       	brne	.-38     	; 0x2f90 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2fb6:	14 c0       	rjmp	.+40     	; 0x2fe0 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fba:	7e 89       	ldd	r23, Y+22	; 0x16
    2fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9c 8b       	std	Y+20, r25	; 0x14
    2fca:	8b 8b       	std	Y+19, r24	; 0x13
    2fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fce:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd0:	98 8b       	std	Y+16, r25	; 0x10
    2fd2:	8f 87       	std	Y+15, r24	; 0x0f
    2fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fd6:	98 89       	ldd	r25, Y+16	; 0x10
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2fdc:	98 8b       	std	Y+16, r25	; 0x10
    2fde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2fe0:	82 e0       	ldi	r24, 0x02	; 2
    2fe2:	61 e0       	ldi	r22, 0x01	; 1
    2fe4:	40 e0       	ldi	r20, 0x00	; 0
    2fe6:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e0       	ldi	r26, 0x00	; 0
    2ff0:	b0 e4       	ldi	r27, 0x40	; 64
    2ff2:	8b 87       	std	Y+11, r24	; 0x0b
    2ff4:	9c 87       	std	Y+12, r25	; 0x0c
    2ff6:	ad 87       	std	Y+13, r26	; 0x0d
    2ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3000:	9e 85       	ldd	r25, Y+14	; 0x0e
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4a ef       	ldi	r20, 0xFA	; 250
    3008:	54 e4       	ldi	r21, 0x44	; 68
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	8f 83       	std	Y+7, r24	; 0x07
    3014:	98 87       	std	Y+8, r25	; 0x08
    3016:	a9 87       	std	Y+9, r26	; 0x09
    3018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    301a:	6f 81       	ldd	r22, Y+7	; 0x07
    301c:	78 85       	ldd	r23, Y+8	; 0x08
    301e:	89 85       	ldd	r24, Y+9	; 0x09
    3020:	9a 85       	ldd	r25, Y+10	; 0x0a
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e8       	ldi	r20, 0x80	; 128
    3028:	5f e3       	ldi	r21, 0x3F	; 63
    302a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302e:	88 23       	and	r24, r24
    3030:	2c f4       	brge	.+10     	; 0x303c <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	9e 83       	std	Y+6, r25	; 0x06
    3038:	8d 83       	std	Y+5, r24	; 0x05
    303a:	3f c0       	rjmp	.+126    	; 0x30ba <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    303c:	6f 81       	ldd	r22, Y+7	; 0x07
    303e:	78 85       	ldd	r23, Y+8	; 0x08
    3040:	89 85       	ldd	r24, Y+9	; 0x09
    3042:	9a 85       	ldd	r25, Y+10	; 0x0a
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	3f ef       	ldi	r19, 0xFF	; 255
    3048:	4f e7       	ldi	r20, 0x7F	; 127
    304a:	57 e4       	ldi	r21, 0x47	; 71
    304c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3050:	18 16       	cp	r1, r24
    3052:	4c f5       	brge	.+82     	; 0x30a6 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3054:	6b 85       	ldd	r22, Y+11	; 0x0b
    3056:	7c 85       	ldd	r23, Y+12	; 0x0c
    3058:	8d 85       	ldd	r24, Y+13	; 0x0d
    305a:	9e 85       	ldd	r25, Y+14	; 0x0e
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e2       	ldi	r20, 0x20	; 32
    3062:	51 e4       	ldi	r21, 0x41	; 65
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9e 83       	std	Y+6, r25	; 0x06
    307a:	8d 83       	std	Y+5, r24	; 0x05
    307c:	0f c0       	rjmp	.+30     	; 0x309c <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    307e:	88 ec       	ldi	r24, 0xC8	; 200
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	9c 83       	std	Y+4, r25	; 0x04
    3084:	8b 83       	std	Y+3, r24	; 0x03
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	9c 81       	ldd	r25, Y+4	; 0x04
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    308e:	9c 83       	std	Y+4, r25	; 0x04
    3090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3092:	8d 81       	ldd	r24, Y+5	; 0x05
    3094:	9e 81       	ldd	r25, Y+6	; 0x06
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	9e 83       	std	Y+6, r25	; 0x06
    309a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309c:	8d 81       	ldd	r24, Y+5	; 0x05
    309e:	9e 81       	ldd	r25, Y+6	; 0x06
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	69 f7       	brne	.-38     	; 0x307e <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    30a4:	14 c0       	rjmp	.+40     	; 0x30ce <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a6:	6f 81       	ldd	r22, Y+7	; 0x07
    30a8:	78 85       	ldd	r23, Y+8	; 0x08
    30aa:	89 85       	ldd	r24, Y+9	; 0x09
    30ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	9e 83       	std	Y+6, r25	; 0x06
    30b8:	8d 83       	std	Y+5, r24	; 0x05
    30ba:	8d 81       	ldd	r24, Y+5	; 0x05
    30bc:	9e 81       	ldd	r25, Y+6	; 0x06
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	61 e0       	ldi	r22, 0x01	; 1
    30d2:	41 e0       	ldi	r20, 0x01	; 1
    30d4:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
}
    30d8:	6d 96       	adiw	r28, 0x1d	; 29
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	00 d0       	rcall	.+0      	; 0x30f0 <HCLCD_Vid8Bits_DisplayString+0x6>
    30f0:	0f 92       	push	r0
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	9b 83       	std	Y+3, r25	; 0x03
    30f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    30fa:	19 82       	std	Y+1, r1	; 0x01
    30fc:	0e c0       	rjmp	.+28     	; 0x311a <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	9b 81       	ldd	r25, Y+3	; 0x03
    3108:	fc 01       	movw	r30, r24
    310a:	e2 0f       	add	r30, r18
    310c:	f3 1f       	adc	r31, r19
    310e:	80 81       	ld	r24, Z
    3110:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	8f 5f       	subi	r24, 0xFF	; 255
    3118:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	28 2f       	mov	r18, r24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	9b 81       	ldd	r25, Y+3	; 0x03
    3124:	fc 01       	movw	r30, r24
    3126:	e2 0f       	add	r30, r18
    3128:	f3 1f       	adc	r31, r19
    312a:	80 81       	ld	r24, Z
    312c:	88 23       	and	r24, r24
    312e:	39 f7       	brne	.-50     	; 0x30fe <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    313c:	0f 93       	push	r16
    313e:	1f 93       	push	r17
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	60 97       	sbiw	r28, 0x10	; 16
    314a:	0f b6       	in	r0, 0x3f	; 63
    314c:	f8 94       	cli
    314e:	de bf       	out	0x3e, r29	; 62
    3150:	0f be       	out	0x3f, r0	; 63
    3152:	cd bf       	out	0x3d, r28	; 61
    3154:	6d 87       	std	Y+13, r22	; 0x0d
    3156:	7e 87       	std	Y+14, r23	; 0x0e
    3158:	8f 87       	std	Y+15, r24	; 0x0f
    315a:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    315c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    315e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3160:	9e 85       	ldd	r25, Y+14	; 0x0e
    3162:	af 85       	ldd	r26, Y+15	; 0x0f
    3164:	b8 89       	ldd	r27, Y+16	; 0x10
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	a1 05       	cpc	r26, r1
    316a:	b1 05       	cpc	r27, r1
    316c:	09 f4       	brne	.+2      	; 0x3170 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    316e:	4f c0       	rjmp	.+158    	; 0x320e <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    3170:	2d c0       	rjmp	.+90     	; 0x31cc <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	08 2f       	mov	r16, r24
    3176:	10 e0       	ldi	r17, 0x00	; 0
    3178:	8d 85       	ldd	r24, Y+13	; 0x0d
    317a:	9e 85       	ldd	r25, Y+14	; 0x0e
    317c:	af 85       	ldd	r26, Y+15	; 0x0f
    317e:	b8 89       	ldd	r27, Y+16	; 0x10
    3180:	2a e0       	ldi	r18, 0x0A	; 10
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	bc 01       	movw	r22, r24
    318a:	cd 01       	movw	r24, r26
    318c:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__udivmodsi4>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	28 2f       	mov	r18, r24
    3196:	ce 01       	movw	r24, r28
    3198:	03 96       	adiw	r24, 0x03	; 3
    319a:	fc 01       	movw	r30, r24
    319c:	e0 0f       	add	r30, r16
    319e:	f1 1f       	adc	r31, r17
    31a0:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    31a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a6:	af 85       	ldd	r26, Y+15	; 0x0f
    31a8:	b8 89       	ldd	r27, Y+16	; 0x10
    31aa:	2a e0       	ldi	r18, 0x0A	; 10
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	50 e0       	ldi	r21, 0x00	; 0
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__udivmodsi4>
    31ba:	da 01       	movw	r26, r20
    31bc:	c9 01       	movw	r24, r18
    31be:	8d 87       	std	Y+13, r24	; 0x0d
    31c0:	9e 87       	std	Y+14, r25	; 0x0e
    31c2:	af 87       	std	Y+15, r26	; 0x0f
    31c4:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    31c6:	8a 81       	ldd	r24, Y+2	; 0x02
    31c8:	8f 5f       	subi	r24, 0xFF	; 255
    31ca:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    31cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d0:	af 85       	ldd	r26, Y+15	; 0x0f
    31d2:	b8 89       	ldd	r27, Y+16	; 0x10
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	a1 05       	cpc	r26, r1
    31d8:	b1 05       	cpc	r27, r1
    31da:	59 f6       	brne	.-106    	; 0x3172 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	81 50       	subi	r24, 0x01	; 1
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	11 c0       	rjmp	.+34     	; 0x3206 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	28 2f       	mov	r18, r24
    31e8:	33 27       	eor	r19, r19
    31ea:	27 fd       	sbrc	r18, 7
    31ec:	30 95       	com	r19
    31ee:	ce 01       	movw	r24, r28
    31f0:	03 96       	adiw	r24, 0x03	; 3
    31f2:	fc 01       	movw	r30, r24
    31f4:	e2 0f       	add	r30, r18
    31f6:	f3 1f       	adc	r31, r19
    31f8:	80 81       	ld	r24, Z
    31fa:	80 5d       	subi	r24, 0xD0	; 208
    31fc:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	81 50       	subi	r24, 0x01	; 1
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	88 23       	and	r24, r24
    320a:	64 f7       	brge	.-40     	; 0x31e4 <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    320c:	03 c0       	rjmp	.+6      	; 0x3214 <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    320e:	80 e3       	ldi	r24, 0x30	; 48
    3210:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    3214:	60 96       	adiw	r28, 0x10	; 16
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	08 95       	ret

0000322a <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	00 d0       	rcall	.+0      	; 0x3230 <HCLCD_Vid8Bits_SetPosition+0x6>
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	81 30       	cpi	r24, 0x01	; 1
    323c:	41 f4       	brne	.+16     	; 0x324e <HCLCD_Vid8Bits_SetPosition+0x24>
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	80 31       	cpi	r24, 0x10	; 16
    3242:	28 f4       	brcc	.+10     	; 0x324e <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	80 58       	subi	r24, 0x80	; 128
    3248:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    324c:	0a c0       	rjmp	.+20     	; 0x3262 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	82 30       	cpi	r24, 0x02	; 2
    3252:	39 f4       	brne	.+14     	; 0x3262 <HCLCD_Vid8Bits_SetPosition+0x38>
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	80 31       	cpi	r24, 0x10	; 16
    3258:	20 f4       	brcc	.+8      	; 0x3262 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	80 54       	subi	r24, 0x40	; 64
    325e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	00 d0       	rcall	.+0      	; 0x3272 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    3272:	00 d0       	rcall	.+0      	; 0x3274 <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	8a 83       	std	Y+2, r24	; 0x02
    327a:	7c 83       	std	Y+4, r23	; 0x04
    327c:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	88 30       	cpi	r24, 0x08	; 8
    3282:	f8 f4       	brcc	.+62     	; 0x32c2 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    3284:	8a 81       	ldd	r24, Y+2	; 0x02
    3286:	88 2f       	mov	r24, r24
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	08 96       	adiw	r24, 0x08	; 8
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	88 0f       	add	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    329c:	19 82       	std	Y+1, r1	; 0x01
    329e:	0e c0       	rjmp	.+28     	; 0x32bc <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	9c 81       	ldd	r25, Y+4	; 0x04
    32aa:	fc 01       	movw	r30, r24
    32ac:	e2 0f       	add	r30, r18
    32ae:	f3 1f       	adc	r31, r19
    32b0:	80 81       	ld	r24, Z
    32b2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	8f 5f       	subi	r24, 0xFF	; 255
    32ba:	89 83       	std	Y+1, r24	; 0x01
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	88 30       	cpi	r24, 0x08	; 8
    32c0:	78 f3       	brcs	.-34     	; 0x32a0 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	08 95       	ret

000032d0 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	2e 97       	sbiw	r28, 0x0e	; 14
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a0 e0       	ldi	r26, 0x00	; 0
    32f0:	b0 e4       	ldi	r27, 0x40	; 64
    32f2:	8b 87       	std	Y+11, r24	; 0x0b
    32f4:	9c 87       	std	Y+12, r25	; 0x0c
    32f6:	ad 87       	std	Y+13, r26	; 0x0d
    32f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3300:	9e 85       	ldd	r25, Y+14	; 0x0e
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8f 83       	std	Y+7, r24	; 0x07
    3314:	98 87       	std	Y+8, r25	; 0x08
    3316:	a9 87       	std	Y+9, r26	; 0x09
    3318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    333c:	6f 81       	ldd	r22, Y+7	; 0x07
    333e:	78 85       	ldd	r23, Y+8	; 0x08
    3340:	89 85       	ldd	r24, Y+9	; 0x09
    3342:	9a 85       	ldd	r25, Y+10	; 0x0a
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	6b 85       	ldd	r22, Y+11	; 0x0b
    3356:	7c 85       	ldd	r23, Y+12	; 0x0c
    3358:	8d 85       	ldd	r24, Y+13	; 0x0d
    335a:	9e 85       	ldd	r25, Y+14	; 0x0e
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9e 83       	std	Y+6, r25	; 0x06
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	0f c0       	rjmp	.+30     	; 0x339c <HCLCD_Vid8Bits_ClearScreen+0xcc>
    337e:	88 ec       	ldi	r24, 0xC8	; 200
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9c 83       	std	Y+4, r25	; 0x04
    3384:	8b 83       	std	Y+3, r24	; 0x03
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	9c 81       	ldd	r25, Y+4	; 0x04
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <HCLCD_Vid8Bits_ClearScreen+0xba>
    338e:	9c 83       	std	Y+4, r25	; 0x04
    3390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	8d 81       	ldd	r24, Y+5	; 0x05
    3394:	9e 81       	ldd	r25, Y+6	; 0x06
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9e 83       	std	Y+6, r25	; 0x06
    339a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	8d 81       	ldd	r24, Y+5	; 0x05
    339e:	9e 81       	ldd	r25, Y+6	; 0x06
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <HCLCD_Vid8Bits_ClearScreen+0xae>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6f 81       	ldd	r22, Y+7	; 0x07
    33a8:	78 85       	ldd	r23, Y+8	; 0x08
    33aa:	89 85       	ldd	r24, Y+9	; 0x09
    33ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	9a 83       	std	Y+2, r25	; 0x02
    33c0:	89 83       	std	Y+1, r24	; 0x01
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	9a 81       	ldd	r25, Y+2	; 0x02
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    33ce:	2e 96       	adiw	r28, 0x0e	; 14
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	cf 91       	pop	r28
    33dc:	df 91       	pop	r29
    33de:	08 95       	ret

000033e0 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    33e0:	df 93       	push	r29
    33e2:	cf 93       	push	r28
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
    33e8:	60 97       	sbiw	r28, 0x10	; 16
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    33f6:	1f 86       	std	Y+15, r1	; 0x0f
    33f8:	78 c0       	rjmp	.+240    	; 0x34ea <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    33fa:	88 e1       	ldi	r24, 0x18	; 24
    33fc:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	a6 e9       	ldi	r26, 0x96	; 150
    3406:	b3 e4       	ldi	r27, 0x43	; 67
    3408:	8b 87       	std	Y+11, r24	; 0x0b
    340a:	9c 87       	std	Y+12, r25	; 0x0c
    340c:	ad 87       	std	Y+13, r26	; 0x0d
    340e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3410:	6b 85       	ldd	r22, Y+11	; 0x0b
    3412:	7c 85       	ldd	r23, Y+12	; 0x0c
    3414:	8d 85       	ldd	r24, Y+13	; 0x0d
    3416:	9e 85       	ldd	r25, Y+14	; 0x0e
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	4a ef       	ldi	r20, 0xFA	; 250
    341e:	54 e4       	ldi	r21, 0x44	; 68
    3420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	8f 83       	std	Y+7, r24	; 0x07
    342a:	98 87       	std	Y+8, r25	; 0x08
    342c:	a9 87       	std	Y+9, r26	; 0x09
    342e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3430:	6f 81       	ldd	r22, Y+7	; 0x07
    3432:	78 85       	ldd	r23, Y+8	; 0x08
    3434:	89 85       	ldd	r24, Y+9	; 0x09
    3436:	9a 85       	ldd	r25, Y+10	; 0x0a
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e8       	ldi	r20, 0x80	; 128
    343e:	5f e3       	ldi	r21, 0x3F	; 63
    3440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3444:	88 23       	and	r24, r24
    3446:	2c f4       	brge	.+10     	; 0x3452 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	3f c0       	rjmp	.+126    	; 0x34d0 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    3452:	6f 81       	ldd	r22, Y+7	; 0x07
    3454:	78 85       	ldd	r23, Y+8	; 0x08
    3456:	89 85       	ldd	r24, Y+9	; 0x09
    3458:	9a 85       	ldd	r25, Y+10	; 0x0a
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	3f ef       	ldi	r19, 0xFF	; 255
    345e:	4f e7       	ldi	r20, 0x7F	; 127
    3460:	57 e4       	ldi	r21, 0x47	; 71
    3462:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3466:	18 16       	cp	r1, r24
    3468:	4c f5       	brge	.+82     	; 0x34bc <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346a:	6b 85       	ldd	r22, Y+11	; 0x0b
    346c:	7c 85       	ldd	r23, Y+12	; 0x0c
    346e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3470:	9e 85       	ldd	r25, Y+14	; 0x0e
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e2       	ldi	r20, 0x20	; 32
    3478:	51 e4       	ldi	r21, 0x41	; 65
    347a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	bc 01       	movw	r22, r24
    3484:	cd 01       	movw	r24, r26
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	0f c0       	rjmp	.+30     	; 0x34b2 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    3494:	88 ec       	ldi	r24, 0xC8	; 200
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	9c 83       	std	Y+4, r25	; 0x04
    349a:	8b 83       	std	Y+3, r24	; 0x03
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	9c 81       	ldd	r25, Y+4	; 0x04
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    34a4:	9c 83       	std	Y+4, r25	; 0x04
    34a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	9e 83       	std	Y+6, r25	; 0x06
    34b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b2:	8d 81       	ldd	r24, Y+5	; 0x05
    34b4:	9e 81       	ldd	r25, Y+6	; 0x06
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	69 f7       	brne	.-38     	; 0x3494 <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    34ba:	14 c0       	rjmp	.+40     	; 0x34e4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34bc:	6f 81       	ldd	r22, Y+7	; 0x07
    34be:	78 85       	ldd	r23, Y+8	; 0x08
    34c0:	89 85       	ldd	r24, Y+9	; 0x09
    34c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	9e 83       	std	Y+6, r25	; 0x06
    34ce:	8d 83       	std	Y+5, r24	; 0x05
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    34e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e6:	8f 5f       	subi	r24, 0xFF	; 255
    34e8:	8f 87       	std	Y+15, r24	; 0x0f
    34ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    34ec:	88 89       	ldd	r24, Y+16	; 0x10
    34ee:	98 17       	cp	r25, r24
    34f0:	08 f4       	brcc	.+2      	; 0x34f4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    34f2:	83 cf       	rjmp	.-250    	; 0x33fa <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    34f4:	60 96       	adiw	r28, 0x10	; 16
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	f8 94       	cli
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	cd bf       	out	0x3d, r28	; 61
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	60 97       	sbiw	r28, 0x10	; 16
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    351c:	1f 86       	std	Y+15, r1	; 0x0f
    351e:	78 c0       	rjmp	.+240    	; 0x3610 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3520:	8c e1       	ldi	r24, 0x1C	; 28
    3522:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	a6 e9       	ldi	r26, 0x96	; 150
    352c:	b3 e4       	ldi	r27, 0x43	; 67
    352e:	8b 87       	std	Y+11, r24	; 0x0b
    3530:	9c 87       	std	Y+12, r25	; 0x0c
    3532:	ad 87       	std	Y+13, r26	; 0x0d
    3534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3536:	6b 85       	ldd	r22, Y+11	; 0x0b
    3538:	7c 85       	ldd	r23, Y+12	; 0x0c
    353a:	8d 85       	ldd	r24, Y+13	; 0x0d
    353c:	9e 85       	ldd	r25, Y+14	; 0x0e
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a ef       	ldi	r20, 0xFA	; 250
    3544:	54 e4       	ldi	r21, 0x44	; 68
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	8f 83       	std	Y+7, r24	; 0x07
    3550:	98 87       	std	Y+8, r25	; 0x08
    3552:	a9 87       	std	Y+9, r26	; 0x09
    3554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3556:	6f 81       	ldd	r22, Y+7	; 0x07
    3558:	78 85       	ldd	r23, Y+8	; 0x08
    355a:	89 85       	ldd	r24, Y+9	; 0x09
    355c:	9a 85       	ldd	r25, Y+10	; 0x0a
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e8       	ldi	r20, 0x80	; 128
    3564:	5f e3       	ldi	r21, 0x3F	; 63
    3566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    356a:	88 23       	and	r24, r24
    356c:	2c f4       	brge	.+10     	; 0x3578 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9e 83       	std	Y+6, r25	; 0x06
    3574:	8d 83       	std	Y+5, r24	; 0x05
    3576:	3f c0       	rjmp	.+126    	; 0x35f6 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    3578:	6f 81       	ldd	r22, Y+7	; 0x07
    357a:	78 85       	ldd	r23, Y+8	; 0x08
    357c:	89 85       	ldd	r24, Y+9	; 0x09
    357e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	4c f5       	brge	.+82     	; 0x35e2 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3590:	6b 85       	ldd	r22, Y+11	; 0x0b
    3592:	7c 85       	ldd	r23, Y+12	; 0x0c
    3594:	8d 85       	ldd	r24, Y+13	; 0x0d
    3596:	9e 85       	ldd	r25, Y+14	; 0x0e
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	40 e2       	ldi	r20, 0x20	; 32
    359e:	51 e4       	ldi	r21, 0x41	; 65
    35a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	9e 83       	std	Y+6, r25	; 0x06
    35b6:	8d 83       	std	Y+5, r24	; 0x05
    35b8:	0f c0       	rjmp	.+30     	; 0x35d8 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    35ba:	88 ec       	ldi	r24, 0xC8	; 200
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9c 83       	std	Y+4, r25	; 0x04
    35c0:	8b 83       	std	Y+3, r24	; 0x03
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	9c 81       	ldd	r25, Y+4	; 0x04
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    35ca:	9c 83       	std	Y+4, r25	; 0x04
    35cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ce:	8d 81       	ldd	r24, Y+5	; 0x05
    35d0:	9e 81       	ldd	r25, Y+6	; 0x06
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d8:	8d 81       	ldd	r24, Y+5	; 0x05
    35da:	9e 81       	ldd	r25, Y+6	; 0x06
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	69 f7       	brne	.-38     	; 0x35ba <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    35e0:	14 c0       	rjmp	.+40     	; 0x360a <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	78 85       	ldd	r23, Y+8	; 0x08
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	9e 83       	std	Y+6, r25	; 0x06
    35f4:	8d 83       	std	Y+5, r24	; 0x05
    35f6:	8d 81       	ldd	r24, Y+5	; 0x05
    35f8:	9e 81       	ldd	r25, Y+6	; 0x06
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	9a 81       	ldd	r25, Y+2	; 0x02
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    3606:	9a 83       	std	Y+2, r25	; 0x02
    3608:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    360a:	8f 85       	ldd	r24, Y+15	; 0x0f
    360c:	8f 5f       	subi	r24, 0xFF	; 255
    360e:	8f 87       	std	Y+15, r24	; 0x0f
    3610:	9f 85       	ldd	r25, Y+15	; 0x0f
    3612:	88 89       	ldd	r24, Y+16	; 0x10
    3614:	98 17       	cp	r25, r24
    3616:	08 f4       	brcc	.+2      	; 0x361a <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    3618:	83 cf       	rjmp	.-250    	; 0x3520 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    361a:	60 96       	adiw	r28, 0x10	; 16
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	08 95       	ret

0000362c <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	60 97       	sbiw	r28, 0x10	; 16
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3642:	1f 86       	std	Y+15, r1	; 0x0f
    3644:	78 c0       	rjmp	.+240    	; 0x3736 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3646:	80 e1       	ldi	r24, 0x10	; 16
    3648:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	a6 e9       	ldi	r26, 0x96	; 150
    3652:	b3 e4       	ldi	r27, 0x43	; 67
    3654:	8b 87       	std	Y+11, r24	; 0x0b
    3656:	9c 87       	std	Y+12, r25	; 0x0c
    3658:	ad 87       	std	Y+13, r26	; 0x0d
    365a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    365c:	6b 85       	ldd	r22, Y+11	; 0x0b
    365e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3660:	8d 85       	ldd	r24, Y+13	; 0x0d
    3662:	9e 85       	ldd	r25, Y+14	; 0x0e
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	4a ef       	ldi	r20, 0xFA	; 250
    366a:	54 e4       	ldi	r21, 0x44	; 68
    366c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	8f 83       	std	Y+7, r24	; 0x07
    3676:	98 87       	std	Y+8, r25	; 0x08
    3678:	a9 87       	std	Y+9, r26	; 0x09
    367a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    367c:	6f 81       	ldd	r22, Y+7	; 0x07
    367e:	78 85       	ldd	r23, Y+8	; 0x08
    3680:	89 85       	ldd	r24, Y+9	; 0x09
    3682:	9a 85       	ldd	r25, Y+10	; 0x0a
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e8       	ldi	r20, 0x80	; 128
    368a:	5f e3       	ldi	r21, 0x3F	; 63
    368c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3690:	88 23       	and	r24, r24
    3692:	2c f4       	brge	.+10     	; 0x369e <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	9e 83       	std	Y+6, r25	; 0x06
    369a:	8d 83       	std	Y+5, r24	; 0x05
    369c:	3f c0       	rjmp	.+126    	; 0x371c <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    369e:	6f 81       	ldd	r22, Y+7	; 0x07
    36a0:	78 85       	ldd	r23, Y+8	; 0x08
    36a2:	89 85       	ldd	r24, Y+9	; 0x09
    36a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	3f ef       	ldi	r19, 0xFF	; 255
    36aa:	4f e7       	ldi	r20, 0x7F	; 127
    36ac:	57 e4       	ldi	r21, 0x47	; 71
    36ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36b2:	18 16       	cp	r1, r24
    36b4:	4c f5       	brge	.+82     	; 0x3708 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    36b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    36bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	40 e2       	ldi	r20, 0x20	; 32
    36c4:	51 e4       	ldi	r21, 0x41	; 65
    36c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	bc 01       	movw	r22, r24
    36d0:	cd 01       	movw	r24, r26
    36d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	9e 83       	std	Y+6, r25	; 0x06
    36dc:	8d 83       	std	Y+5, r24	; 0x05
    36de:	0f c0       	rjmp	.+30     	; 0x36fe <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    36e0:	88 ec       	ldi	r24, 0xC8	; 200
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	9c 83       	std	Y+4, r25	; 0x04
    36e6:	8b 83       	std	Y+3, r24	; 0x03
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	f1 f7       	brne	.-4      	; 0x36ec <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    36f0:	9c 83       	std	Y+4, r25	; 0x04
    36f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f4:	8d 81       	ldd	r24, Y+5	; 0x05
    36f6:	9e 81       	ldd	r25, Y+6	; 0x06
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	9e 83       	std	Y+6, r25	; 0x06
    36fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3700:	9e 81       	ldd	r25, Y+6	; 0x06
    3702:	00 97       	sbiw	r24, 0x00	; 0
    3704:	69 f7       	brne	.-38     	; 0x36e0 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    3706:	14 c0       	rjmp	.+40     	; 0x3730 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3708:	6f 81       	ldd	r22, Y+7	; 0x07
    370a:	78 85       	ldd	r23, Y+8	; 0x08
    370c:	89 85       	ldd	r24, Y+9	; 0x09
    370e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	9e 83       	std	Y+6, r25	; 0x06
    371a:	8d 83       	std	Y+5, r24	; 0x05
    371c:	8d 81       	ldd	r24, Y+5	; 0x05
    371e:	9e 81       	ldd	r25, Y+6	; 0x06
    3720:	9a 83       	std	Y+2, r25	; 0x02
    3722:	89 83       	std	Y+1, r24	; 0x01
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	9a 81       	ldd	r25, Y+2	; 0x02
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    372c:	9a 83       	std	Y+2, r25	; 0x02
    372e:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3730:	8f 85       	ldd	r24, Y+15	; 0x0f
    3732:	8f 5f       	subi	r24, 0xFF	; 255
    3734:	8f 87       	std	Y+15, r24	; 0x0f
    3736:	9f 85       	ldd	r25, Y+15	; 0x0f
    3738:	88 89       	ldd	r24, Y+16	; 0x10
    373a:	98 17       	cp	r25, r24
    373c:	08 f4       	brcc	.+2      	; 0x3740 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    373e:	83 cf       	rjmp	.-250    	; 0x3646 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    3740:	60 96       	adiw	r28, 0x10	; 16
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	60 97       	sbiw	r28, 0x10	; 16
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3768:	1f 86       	std	Y+15, r1	; 0x0f
    376a:	78 c0       	rjmp	.+240    	; 0x385c <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    376c:	84 e1       	ldi	r24, 0x14	; 20
    376e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HCLCD_Vid8Bits_SendCommand>
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	a6 e9       	ldi	r26, 0x96	; 150
    3778:	b3 e4       	ldi	r27, 0x43	; 67
    377a:	8b 87       	std	Y+11, r24	; 0x0b
    377c:	9c 87       	std	Y+12, r25	; 0x0c
    377e:	ad 87       	std	Y+13, r26	; 0x0d
    3780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3782:	6b 85       	ldd	r22, Y+11	; 0x0b
    3784:	7c 85       	ldd	r23, Y+12	; 0x0c
    3786:	8d 85       	ldd	r24, Y+13	; 0x0d
    3788:	9e 85       	ldd	r25, Y+14	; 0x0e
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	4a ef       	ldi	r20, 0xFA	; 250
    3790:	54 e4       	ldi	r21, 0x44	; 68
    3792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	8f 83       	std	Y+7, r24	; 0x07
    379c:	98 87       	std	Y+8, r25	; 0x08
    379e:	a9 87       	std	Y+9, r26	; 0x09
    37a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37a2:	6f 81       	ldd	r22, Y+7	; 0x07
    37a4:	78 85       	ldd	r23, Y+8	; 0x08
    37a6:	89 85       	ldd	r24, Y+9	; 0x09
    37a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	40 e8       	ldi	r20, 0x80	; 128
    37b0:	5f e3       	ldi	r21, 0x3F	; 63
    37b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37b6:	88 23       	and	r24, r24
    37b8:	2c f4       	brge	.+10     	; 0x37c4 <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	9e 83       	std	Y+6, r25	; 0x06
    37c0:	8d 83       	std	Y+5, r24	; 0x05
    37c2:	3f c0       	rjmp	.+126    	; 0x3842 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    37c4:	6f 81       	ldd	r22, Y+7	; 0x07
    37c6:	78 85       	ldd	r23, Y+8	; 0x08
    37c8:	89 85       	ldd	r24, Y+9	; 0x09
    37ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	3f ef       	ldi	r19, 0xFF	; 255
    37d0:	4f e7       	ldi	r20, 0x7F	; 127
    37d2:	57 e4       	ldi	r21, 0x47	; 71
    37d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37d8:	18 16       	cp	r1, r24
    37da:	4c f5       	brge	.+82     	; 0x382e <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37de:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	40 e2       	ldi	r20, 0x20	; 32
    37ea:	51 e4       	ldi	r21, 0x41	; 65
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	9e 83       	std	Y+6, r25	; 0x06
    3802:	8d 83       	std	Y+5, r24	; 0x05
    3804:	0f c0       	rjmp	.+30     	; 0x3824 <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    3806:	88 ec       	ldi	r24, 0xC8	; 200
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	9c 83       	std	Y+4, r25	; 0x04
    380c:	8b 83       	std	Y+3, r24	; 0x03
    380e:	8b 81       	ldd	r24, Y+3	; 0x03
    3810:	9c 81       	ldd	r25, Y+4	; 0x04
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	f1 f7       	brne	.-4      	; 0x3812 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    3816:	9c 83       	std	Y+4, r25	; 0x04
    3818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    381a:	8d 81       	ldd	r24, Y+5	; 0x05
    381c:	9e 81       	ldd	r25, Y+6	; 0x06
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	9e 83       	std	Y+6, r25	; 0x06
    3822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3824:	8d 81       	ldd	r24, Y+5	; 0x05
    3826:	9e 81       	ldd	r25, Y+6	; 0x06
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	69 f7       	brne	.-38     	; 0x3806 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    382c:	14 c0       	rjmp	.+40     	; 0x3856 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    382e:	6f 81       	ldd	r22, Y+7	; 0x07
    3830:	78 85       	ldd	r23, Y+8	; 0x08
    3832:	89 85       	ldd	r24, Y+9	; 0x09
    3834:	9a 85       	ldd	r25, Y+10	; 0x0a
    3836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	9e 83       	std	Y+6, r25	; 0x06
    3840:	8d 83       	std	Y+5, r24	; 0x05
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	9e 81       	ldd	r25, Y+6	; 0x06
    3846:	9a 83       	std	Y+2, r25	; 0x02
    3848:	89 83       	std	Y+1, r24	; 0x01
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	9a 81       	ldd	r25, Y+2	; 0x02
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	f1 f7       	brne	.-4      	; 0x384e <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    3852:	9a 83       	std	Y+2, r25	; 0x02
    3854:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3856:	8f 85       	ldd	r24, Y+15	; 0x0f
    3858:	8f 5f       	subi	r24, 0xFF	; 255
    385a:	8f 87       	std	Y+15, r24	; 0x0f
    385c:	9f 85       	ldd	r25, Y+15	; 0x0f
    385e:	88 89       	ldd	r24, Y+16	; 0x10
    3860:	98 17       	cp	r25, r24
    3862:	08 f4       	brcc	.+2      	; 0x3866 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    3864:	83 cf       	rjmp	.-250    	; 0x376c <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3866:	60 96       	adiw	r28, 0x10	; 16
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	cf 91       	pop	r28
    3874:	df 91       	pop	r29
    3876:	08 95       	ret

00003878 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	2f 97       	sbiw	r28, 0x0f	; 15
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	61 e0       	ldi	r22, 0x01	; 1
    3892:	40 e0       	ldi	r20, 0x00	; 0
    3894:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	61 e0       	ldi	r22, 0x01	; 1
    389c:	40 e0       	ldi	r20, 0x00	; 0
    389e:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    38a2:	84 e0       	ldi	r24, 0x04	; 4
    38a4:	60 e0       	ldi	r22, 0x00	; 0
    38a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    38a8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    38ac:	82 e0       	ldi	r24, 0x02	; 2
    38ae:	61 e0       	ldi	r22, 0x01	; 1
    38b0:	41 e0       	ldi	r20, 0x01	; 1
    38b2:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	a0 e0       	ldi	r26, 0x00	; 0
    38bc:	b0 e4       	ldi	r27, 0x40	; 64
    38be:	8b 87       	std	Y+11, r24	; 0x0b
    38c0:	9c 87       	std	Y+12, r25	; 0x0c
    38c2:	ad 87       	std	Y+13, r26	; 0x0d
    38c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    38cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	4a ef       	ldi	r20, 0xFA	; 250
    38d4:	54 e4       	ldi	r21, 0x44	; 68
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	8f 83       	std	Y+7, r24	; 0x07
    38e0:	98 87       	std	Y+8, r25	; 0x08
    38e2:	a9 87       	std	Y+9, r26	; 0x09
    38e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38e6:	6f 81       	ldd	r22, Y+7	; 0x07
    38e8:	78 85       	ldd	r23, Y+8	; 0x08
    38ea:	89 85       	ldd	r24, Y+9	; 0x09
    38ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	40 e8       	ldi	r20, 0x80	; 128
    38f4:	5f e3       	ldi	r21, 0x3F	; 63
    38f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38fa:	88 23       	and	r24, r24
    38fc:	2c f4       	brge	.+10     	; 0x3908 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	9e 83       	std	Y+6, r25	; 0x06
    3904:	8d 83       	std	Y+5, r24	; 0x05
    3906:	3f c0       	rjmp	.+126    	; 0x3986 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    3908:	6f 81       	ldd	r22, Y+7	; 0x07
    390a:	78 85       	ldd	r23, Y+8	; 0x08
    390c:	89 85       	ldd	r24, Y+9	; 0x09
    390e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	3f ef       	ldi	r19, 0xFF	; 255
    3914:	4f e7       	ldi	r20, 0x7F	; 127
    3916:	57 e4       	ldi	r21, 0x47	; 71
    3918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    391c:	18 16       	cp	r1, r24
    391e:	4c f5       	brge	.+82     	; 0x3972 <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3920:	6b 85       	ldd	r22, Y+11	; 0x0b
    3922:	7c 85       	ldd	r23, Y+12	; 0x0c
    3924:	8d 85       	ldd	r24, Y+13	; 0x0d
    3926:	9e 85       	ldd	r25, Y+14	; 0x0e
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	40 e2       	ldi	r20, 0x20	; 32
    392e:	51 e4       	ldi	r21, 0x41	; 65
    3930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	bc 01       	movw	r22, r24
    393a:	cd 01       	movw	r24, r26
    393c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	9e 83       	std	Y+6, r25	; 0x06
    3946:	8d 83       	std	Y+5, r24	; 0x05
    3948:	0f c0       	rjmp	.+30     	; 0x3968 <HCLCD_Vid4Bits_SendCommand+0xf0>
    394a:	88 ec       	ldi	r24, 0xC8	; 200
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	9c 83       	std	Y+4, r25	; 0x04
    3950:	8b 83       	std	Y+3, r24	; 0x03
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	9c 81       	ldd	r25, Y+4	; 0x04
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	f1 f7       	brne	.-4      	; 0x3956 <HCLCD_Vid4Bits_SendCommand+0xde>
    395a:	9c 83       	std	Y+4, r25	; 0x04
    395c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395e:	8d 81       	ldd	r24, Y+5	; 0x05
    3960:	9e 81       	ldd	r25, Y+6	; 0x06
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	9e 83       	std	Y+6, r25	; 0x06
    3966:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3968:	8d 81       	ldd	r24, Y+5	; 0x05
    396a:	9e 81       	ldd	r25, Y+6	; 0x06
    396c:	00 97       	sbiw	r24, 0x00	; 0
    396e:	69 f7       	brne	.-38     	; 0x394a <HCLCD_Vid4Bits_SendCommand+0xd2>
    3970:	14 c0       	rjmp	.+40     	; 0x399a <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3972:	6f 81       	ldd	r22, Y+7	; 0x07
    3974:	78 85       	ldd	r23, Y+8	; 0x08
    3976:	89 85       	ldd	r24, Y+9	; 0x09
    3978:	9a 85       	ldd	r25, Y+10	; 0x0a
    397a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	9e 83       	std	Y+6, r25	; 0x06
    3984:	8d 83       	std	Y+5, r24	; 0x05
    3986:	8d 81       	ldd	r24, Y+5	; 0x05
    3988:	9e 81       	ldd	r25, Y+6	; 0x06
    398a:	9a 83       	std	Y+2, r25	; 0x02
    398c:	89 83       	std	Y+1, r24	; 0x01
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	9a 81       	ldd	r25, Y+2	; 0x02
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	f1 f7       	brne	.-4      	; 0x3992 <HCLCD_Vid4Bits_SendCommand+0x11a>
    3996:	9a 83       	std	Y+2, r25	; 0x02
    3998:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	61 e0       	ldi	r22, 0x01	; 1
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
}
    39a4:	2f 96       	adiw	r28, 0x0f	; 15
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	de bf       	out	0x3e, r29	; 62
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	cd bf       	out	0x3d, r28	; 61
    39b0:	cf 91       	pop	r28
    39b2:	df 91       	pop	r29
    39b4:	08 95       	ret

000039b6 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	e9 97       	sbiw	r28, 0x39	; 57
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    39ca:	87 e0       	ldi	r24, 0x07	; 7
    39cc:	89 af       	std	Y+57, r24	; 0x39
    39ce:	08 c0       	rjmp	.+16     	; 0x39e0 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    39d0:	89 ad       	ldd	r24, Y+57	; 0x39
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	41 e0       	ldi	r20, 0x01	; 1
    39d6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    39da:	89 ad       	ldd	r24, Y+57	; 0x39
    39dc:	81 50       	subi	r24, 0x01	; 1
    39de:	89 af       	std	Y+57, r24	; 0x39
    39e0:	89 ad       	ldd	r24, Y+57	; 0x39
    39e2:	84 30       	cpi	r24, 0x04	; 4
    39e4:	ac f7       	brge	.-22     	; 0x39d0 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	61 e0       	ldi	r22, 0x01	; 1
    39ea:	41 e0       	ldi	r20, 0x01	; 1
    39ec:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	61 e0       	ldi	r22, 0x01	; 1
    39f4:	41 e0       	ldi	r20, 0x01	; 1
    39f6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    39fa:	82 e0       	ldi	r24, 0x02	; 2
    39fc:	61 e0       	ldi	r22, 0x01	; 1
    39fe:	41 e0       	ldi	r20, 0x01	; 1
    3a00:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MDIO_Error_State_SetPinDirection>
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	a0 ef       	ldi	r26, 0xF0	; 240
    3a0a:	b1 e4       	ldi	r27, 0x41	; 65
    3a0c:	8d ab       	std	Y+53, r24	; 0x35
    3a0e:	9e ab       	std	Y+54, r25	; 0x36
    3a10:	af ab       	std	Y+55, r26	; 0x37
    3a12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a14:	6d a9       	ldd	r22, Y+53	; 0x35
    3a16:	7e a9       	ldd	r23, Y+54	; 0x36
    3a18:	8f a9       	ldd	r24, Y+55	; 0x37
    3a1a:	98 ad       	ldd	r25, Y+56	; 0x38
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	4a ef       	ldi	r20, 0xFA	; 250
    3a22:	54 e4       	ldi	r21, 0x44	; 68
    3a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	89 ab       	std	Y+49, r24	; 0x31
    3a2e:	9a ab       	std	Y+50, r25	; 0x32
    3a30:	ab ab       	std	Y+51, r26	; 0x33
    3a32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a34:	69 a9       	ldd	r22, Y+49	; 0x31
    3a36:	7a a9       	ldd	r23, Y+50	; 0x32
    3a38:	8b a9       	ldd	r24, Y+51	; 0x33
    3a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	40 e8       	ldi	r20, 0x80	; 128
    3a42:	5f e3       	ldi	r21, 0x3F	; 63
    3a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a48:	88 23       	and	r24, r24
    3a4a:	2c f4       	brge	.+10     	; 0x3a56 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	98 ab       	std	Y+48, r25	; 0x30
    3a52:	8f a7       	std	Y+47, r24	; 0x2f
    3a54:	3f c0       	rjmp	.+126    	; 0x3ad4 <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    3a56:	69 a9       	ldd	r22, Y+49	; 0x31
    3a58:	7a a9       	ldd	r23, Y+50	; 0x32
    3a5a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a5c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	3f ef       	ldi	r19, 0xFF	; 255
    3a62:	4f e7       	ldi	r20, 0x7F	; 127
    3a64:	57 e4       	ldi	r21, 0x47	; 71
    3a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a6a:	18 16       	cp	r1, r24
    3a6c:	4c f5       	brge	.+82     	; 0x3ac0 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a6e:	6d a9       	ldd	r22, Y+53	; 0x35
    3a70:	7e a9       	ldd	r23, Y+54	; 0x36
    3a72:	8f a9       	ldd	r24, Y+55	; 0x37
    3a74:	98 ad       	ldd	r25, Y+56	; 0x38
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e2       	ldi	r20, 0x20	; 32
    3a7c:	51 e4       	ldi	r21, 0x41	; 65
    3a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	bc 01       	movw	r22, r24
    3a88:	cd 01       	movw	r24, r26
    3a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	98 ab       	std	Y+48, r25	; 0x30
    3a94:	8f a7       	std	Y+47, r24	; 0x2f
    3a96:	0f c0       	rjmp	.+30     	; 0x3ab6 <HCLCD_Vid4Bits_Init+0x100>
    3a98:	88 ec       	ldi	r24, 0xC8	; 200
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	9e a7       	std	Y+46, r25	; 0x2e
    3a9e:	8d a7       	std	Y+45, r24	; 0x2d
    3aa0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3aa2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	f1 f7       	brne	.-4      	; 0x3aa4 <HCLCD_Vid4Bits_Init+0xee>
    3aa8:	9e a7       	std	Y+46, r25	; 0x2e
    3aaa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aac:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aae:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab0:	01 97       	sbiw	r24, 0x01	; 1
    3ab2:	98 ab       	std	Y+48, r25	; 0x30
    3ab4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab8:	98 a9       	ldd	r25, Y+48	; 0x30
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	69 f7       	brne	.-38     	; 0x3a98 <HCLCD_Vid4Bits_Init+0xe2>
    3abe:	14 c0       	rjmp	.+40     	; 0x3ae8 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ac2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ac4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ac6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	98 ab       	std	Y+48, r25	; 0x30
    3ad2:	8f a7       	std	Y+47, r24	; 0x2f
    3ad4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ad6:	98 a9       	ldd	r25, Y+48	; 0x30
    3ad8:	9c a7       	std	Y+44, r25	; 0x2c
    3ada:	8b a7       	std	Y+43, r24	; 0x2b
    3adc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ade:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	f1 f7       	brne	.-4      	; 0x3ae0 <HCLCD_Vid4Bits_Init+0x12a>
    3ae4:	9c a7       	std	Y+44, r25	; 0x2c
    3ae6:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3aee:	82 e0       	ldi	r24, 0x02	; 2
    3af0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    3af4:	88 e2       	ldi	r24, 0x28	; 40
    3af6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	a0 e8       	ldi	r26, 0x80	; 128
    3b00:	bf e3       	ldi	r27, 0x3F	; 63
    3b02:	8f a3       	std	Y+39, r24	; 0x27
    3b04:	98 a7       	std	Y+40, r25	; 0x28
    3b06:	a9 a7       	std	Y+41, r26	; 0x29
    3b08:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0a:	6f a1       	ldd	r22, Y+39	; 0x27
    3b0c:	78 a5       	ldd	r23, Y+40	; 0x28
    3b0e:	89 a5       	ldd	r24, Y+41	; 0x29
    3b10:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	4a ef       	ldi	r20, 0xFA	; 250
    3b18:	54 e4       	ldi	r21, 0x44	; 68
    3b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	8b a3       	std	Y+35, r24	; 0x23
    3b24:	9c a3       	std	Y+36, r25	; 0x24
    3b26:	ad a3       	std	Y+37, r26	; 0x25
    3b28:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b2a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b2c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b2e:	8d a1       	ldd	r24, Y+37	; 0x25
    3b30:	9e a1       	ldd	r25, Y+38	; 0x26
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e8       	ldi	r20, 0x80	; 128
    3b38:	5f e3       	ldi	r21, 0x3F	; 63
    3b3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b3e:	88 23       	and	r24, r24
    3b40:	2c f4       	brge	.+10     	; 0x3b4c <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	9a a3       	std	Y+34, r25	; 0x22
    3b48:	89 a3       	std	Y+33, r24	; 0x21
    3b4a:	3f c0       	rjmp	.+126    	; 0x3bca <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    3b4c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b4e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b50:	8d a1       	ldd	r24, Y+37	; 0x25
    3b52:	9e a1       	ldd	r25, Y+38	; 0x26
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	3f ef       	ldi	r19, 0xFF	; 255
    3b58:	4f e7       	ldi	r20, 0x7F	; 127
    3b5a:	57 e4       	ldi	r21, 0x47	; 71
    3b5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b60:	18 16       	cp	r1, r24
    3b62:	4c f5       	brge	.+82     	; 0x3bb6 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b64:	6f a1       	ldd	r22, Y+39	; 0x27
    3b66:	78 a5       	ldd	r23, Y+40	; 0x28
    3b68:	89 a5       	ldd	r24, Y+41	; 0x29
    3b6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e2       	ldi	r20, 0x20	; 32
    3b72:	51 e4       	ldi	r21, 0x41	; 65
    3b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	bc 01       	movw	r22, r24
    3b7e:	cd 01       	movw	r24, r26
    3b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	9a a3       	std	Y+34, r25	; 0x22
    3b8a:	89 a3       	std	Y+33, r24	; 0x21
    3b8c:	0f c0       	rjmp	.+30     	; 0x3bac <HCLCD_Vid4Bits_Init+0x1f6>
    3b8e:	88 ec       	ldi	r24, 0xC8	; 200
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	98 a3       	std	Y+32, r25	; 0x20
    3b94:	8f 8f       	std	Y+31, r24	; 0x1f
    3b96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b98:	98 a1       	ldd	r25, Y+32	; 0x20
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	f1 f7       	brne	.-4      	; 0x3b9a <HCLCD_Vid4Bits_Init+0x1e4>
    3b9e:	98 a3       	std	Y+32, r25	; 0x20
    3ba0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ba4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	9a a3       	std	Y+34, r25	; 0x22
    3baa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bac:	89 a1       	ldd	r24, Y+33	; 0x21
    3bae:	9a a1       	ldd	r25, Y+34	; 0x22
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	69 f7       	brne	.-38     	; 0x3b8e <HCLCD_Vid4Bits_Init+0x1d8>
    3bb4:	14 c0       	rjmp	.+40     	; 0x3bde <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb6:	6b a1       	ldd	r22, Y+35	; 0x23
    3bb8:	7c a1       	ldd	r23, Y+36	; 0x24
    3bba:	8d a1       	ldd	r24, Y+37	; 0x25
    3bbc:	9e a1       	ldd	r25, Y+38	; 0x26
    3bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	9a a3       	std	Y+34, r25	; 0x22
    3bc8:	89 a3       	std	Y+33, r24	; 0x21
    3bca:	89 a1       	ldd	r24, Y+33	; 0x21
    3bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    3bce:	9e 8f       	std	Y+30, r25	; 0x1e
    3bd0:	8d 8f       	std	Y+29, r24	; 0x1d
    3bd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <HCLCD_Vid4Bits_Init+0x220>
    3bda:	9e 8f       	std	Y+30, r25	; 0x1e
    3bdc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    3be4:	8f e0       	ldi	r24, 0x0F	; 15
    3be6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	a0 e8       	ldi	r26, 0x80	; 128
    3bf0:	bf e3       	ldi	r27, 0x3F	; 63
    3bf2:	89 8f       	std	Y+25, r24	; 0x19
    3bf4:	9a 8f       	std	Y+26, r25	; 0x1a
    3bf6:	ab 8f       	std	Y+27, r26	; 0x1b
    3bf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    3bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	4a ef       	ldi	r20, 0xFA	; 250
    3c08:	54 e4       	ldi	r21, 0x44	; 68
    3c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	8d 8b       	std	Y+21, r24	; 0x15
    3c14:	9e 8b       	std	Y+22, r25	; 0x16
    3c16:	af 8b       	std	Y+23, r26	; 0x17
    3c18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c20:	98 8d       	ldd	r25, Y+24	; 0x18
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e8       	ldi	r20, 0x80	; 128
    3c28:	5f e3       	ldi	r21, 0x3F	; 63
    3c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c2e:	88 23       	and	r24, r24
    3c30:	2c f4       	brge	.+10     	; 0x3c3c <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	9c 8b       	std	Y+20, r25	; 0x14
    3c38:	8b 8b       	std	Y+19, r24	; 0x13
    3c3a:	3f c0       	rjmp	.+126    	; 0x3cba <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    3c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c40:	8f 89       	ldd	r24, Y+23	; 0x17
    3c42:	98 8d       	ldd	r25, Y+24	; 0x18
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	3f ef       	ldi	r19, 0xFF	; 255
    3c48:	4f e7       	ldi	r20, 0x7F	; 127
    3c4a:	57 e4       	ldi	r21, 0x47	; 71
    3c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c50:	18 16       	cp	r1, r24
    3c52:	4c f5       	brge	.+82     	; 0x3ca6 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c54:	69 8d       	ldd	r22, Y+25	; 0x19
    3c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e2       	ldi	r20, 0x20	; 32
    3c62:	51 e4       	ldi	r21, 0x41	; 65
    3c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	bc 01       	movw	r22, r24
    3c6e:	cd 01       	movw	r24, r26
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9c 8b       	std	Y+20, r25	; 0x14
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	0f c0       	rjmp	.+30     	; 0x3c9c <HCLCD_Vid4Bits_Init+0x2e6>
    3c7e:	88 ec       	ldi	r24, 0xC8	; 200
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	9a 8b       	std	Y+18, r25	; 0x12
    3c84:	89 8b       	std	Y+17, r24	; 0x11
    3c86:	89 89       	ldd	r24, Y+17	; 0x11
    3c88:	9a 89       	ldd	r25, Y+18	; 0x12
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	f1 f7       	brne	.-4      	; 0x3c8a <HCLCD_Vid4Bits_Init+0x2d4>
    3c8e:	9a 8b       	std	Y+18, r25	; 0x12
    3c90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c92:	8b 89       	ldd	r24, Y+19	; 0x13
    3c94:	9c 89       	ldd	r25, Y+20	; 0x14
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	9c 8b       	std	Y+20, r25	; 0x14
    3c9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca0:	00 97       	sbiw	r24, 0x00	; 0
    3ca2:	69 f7       	brne	.-38     	; 0x3c7e <HCLCD_Vid4Bits_Init+0x2c8>
    3ca4:	14 c0       	rjmp	.+40     	; 0x3cce <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    3caa:	8f 89       	ldd	r24, Y+23	; 0x17
    3cac:	98 8d       	ldd	r25, Y+24	; 0x18
    3cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	9c 8b       	std	Y+20, r25	; 0x14
    3cb8:	8b 8b       	std	Y+19, r24	; 0x13
    3cba:	8b 89       	ldd	r24, Y+19	; 0x13
    3cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cbe:	98 8b       	std	Y+16, r25	; 0x10
    3cc0:	8f 87       	std	Y+15, r24	; 0x0f
    3cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc4:	98 89       	ldd	r25, Y+16	; 0x10
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	f1 f7       	brne	.-4      	; 0x3cc6 <HCLCD_Vid4Bits_Init+0x310>
    3cca:	98 8b       	std	Y+16, r25	; 0x10
    3ccc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	a0 e0       	ldi	r26, 0x00	; 0
    3ce0:	b0 e4       	ldi	r27, 0x40	; 64
    3ce2:	8b 87       	std	Y+11, r24	; 0x0b
    3ce4:	9c 87       	std	Y+12, r25	; 0x0c
    3ce6:	ad 87       	std	Y+13, r26	; 0x0d
    3ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	4a ef       	ldi	r20, 0xFA	; 250
    3cf8:	54 e4       	ldi	r21, 0x44	; 68
    3cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	8f 83       	std	Y+7, r24	; 0x07
    3d04:	98 87       	std	Y+8, r25	; 0x08
    3d06:	a9 87       	std	Y+9, r26	; 0x09
    3d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d0c:	78 85       	ldd	r23, Y+8	; 0x08
    3d0e:	89 85       	ldd	r24, Y+9	; 0x09
    3d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e8       	ldi	r20, 0x80	; 128
    3d18:	5f e3       	ldi	r21, 0x3F	; 63
    3d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d1e:	88 23       	and	r24, r24
    3d20:	2c f4       	brge	.+10     	; 0x3d2c <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	9e 83       	std	Y+6, r25	; 0x06
    3d28:	8d 83       	std	Y+5, r24	; 0x05
    3d2a:	3f c0       	rjmp	.+126    	; 0x3daa <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    3d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2e:	78 85       	ldd	r23, Y+8	; 0x08
    3d30:	89 85       	ldd	r24, Y+9	; 0x09
    3d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	3f ef       	ldi	r19, 0xFF	; 255
    3d38:	4f e7       	ldi	r20, 0x7F	; 127
    3d3a:	57 e4       	ldi	r21, 0x47	; 71
    3d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d40:	18 16       	cp	r1, r24
    3d42:	4c f5       	brge	.+82     	; 0x3d96 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	40 e2       	ldi	r20, 0x20	; 32
    3d52:	51 e4       	ldi	r21, 0x41	; 65
    3d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	bc 01       	movw	r22, r24
    3d5e:	cd 01       	movw	r24, r26
    3d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	9e 83       	std	Y+6, r25	; 0x06
    3d6a:	8d 83       	std	Y+5, r24	; 0x05
    3d6c:	0f c0       	rjmp	.+30     	; 0x3d8c <HCLCD_Vid4Bits_Init+0x3d6>
    3d6e:	88 ec       	ldi	r24, 0xC8	; 200
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9c 83       	std	Y+4, r25	; 0x04
    3d74:	8b 83       	std	Y+3, r24	; 0x03
    3d76:	8b 81       	ldd	r24, Y+3	; 0x03
    3d78:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <HCLCD_Vid4Bits_Init+0x3c4>
    3d7e:	9c 83       	std	Y+4, r25	; 0x04
    3d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d82:	8d 81       	ldd	r24, Y+5	; 0x05
    3d84:	9e 81       	ldd	r25, Y+6	; 0x06
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	9e 83       	std	Y+6, r25	; 0x06
    3d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d90:	00 97       	sbiw	r24, 0x00	; 0
    3d92:	69 f7       	brne	.-38     	; 0x3d6e <HCLCD_Vid4Bits_Init+0x3b8>
    3d94:	14 c0       	rjmp	.+40     	; 0x3dbe <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d96:	6f 81       	ldd	r22, Y+7	; 0x07
    3d98:	78 85       	ldd	r23, Y+8	; 0x08
    3d9a:	89 85       	ldd	r24, Y+9	; 0x09
    3d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	9e 83       	std	Y+6, r25	; 0x06
    3da8:	8d 83       	std	Y+5, r24	; 0x05
    3daa:	8d 81       	ldd	r24, Y+5	; 0x05
    3dac:	9e 81       	ldd	r25, Y+6	; 0x06
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	9a 81       	ldd	r25, Y+2	; 0x02
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	f1 f7       	brne	.-4      	; 0x3db6 <HCLCD_Vid4Bits_Init+0x400>
    3dba:	9a 83       	std	Y+2, r25	; 0x02
    3dbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    3dc4:	86 e0       	ldi	r24, 0x06	; 6
    3dc6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
}
    3dca:	e9 96       	adiw	r28, 0x39	; 57
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	f8 94       	cli
    3dd0:	de bf       	out	0x3e, r29	; 62
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	cd bf       	out	0x3d, r28	; 61
    3dd6:	cf 91       	pop	r28
    3dd8:	df 91       	pop	r29
    3dda:	08 95       	ret

00003ddc <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    3ddc:	df 93       	push	r29
    3dde:	cf 93       	push	r28
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	2f 97       	sbiw	r28, 0x0f	; 15
    3de6:	0f b6       	in	r0, 0x3f	; 63
    3de8:	f8 94       	cli
    3dea:	de bf       	out	0x3e, r29	; 62
    3dec:	0f be       	out	0x3f, r0	; 63
    3dee:	cd bf       	out	0x3d, r28	; 61
    3df0:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	41 e0       	ldi	r20, 0x01	; 1
    3df8:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	61 e0       	ldi	r22, 0x01	; 1
    3e00:	40 e0       	ldi	r20, 0x00	; 0
    3e02:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    3e06:	84 e0       	ldi	r24, 0x04	; 4
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	4f 85       	ldd	r20, Y+15	; 0x0f
    3e0c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3e10:	82 e0       	ldi	r24, 0x02	; 2
    3e12:	61 e0       	ldi	r22, 0x01	; 1
    3e14:	41 e0       	ldi	r20, 0x01	; 1
    3e16:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	a0 e0       	ldi	r26, 0x00	; 0
    3e20:	b0 e4       	ldi	r27, 0x40	; 64
    3e22:	8b 87       	std	Y+11, r24	; 0x0b
    3e24:	9c 87       	std	Y+12, r25	; 0x0c
    3e26:	ad 87       	std	Y+13, r26	; 0x0d
    3e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	4a ef       	ldi	r20, 0xFA	; 250
    3e38:	54 e4       	ldi	r21, 0x44	; 68
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	8f 83       	std	Y+7, r24	; 0x07
    3e44:	98 87       	std	Y+8, r25	; 0x08
    3e46:	a9 87       	std	Y+9, r26	; 0x09
    3e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e4c:	78 85       	ldd	r23, Y+8	; 0x08
    3e4e:	89 85       	ldd	r24, Y+9	; 0x09
    3e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	40 e8       	ldi	r20, 0x80	; 128
    3e58:	5f e3       	ldi	r21, 0x3F	; 63
    3e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e5e:	88 23       	and	r24, r24
    3e60:	2c f4       	brge	.+10     	; 0x3e6c <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	9e 83       	std	Y+6, r25	; 0x06
    3e68:	8d 83       	std	Y+5, r24	; 0x05
    3e6a:	3f c0       	rjmp	.+126    	; 0x3eea <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    3e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6e:	78 85       	ldd	r23, Y+8	; 0x08
    3e70:	89 85       	ldd	r24, Y+9	; 0x09
    3e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	3f ef       	ldi	r19, 0xFF	; 255
    3e78:	4f e7       	ldi	r20, 0x7F	; 127
    3e7a:	57 e4       	ldi	r21, 0x47	; 71
    3e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e80:	18 16       	cp	r1, r24
    3e82:	4c f5       	brge	.+82     	; 0x3ed6 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e2       	ldi	r20, 0x20	; 32
    3e92:	51 e4       	ldi	r21, 0x41	; 65
    3e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	bc 01       	movw	r22, r24
    3e9e:	cd 01       	movw	r24, r26
    3ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	9e 83       	std	Y+6, r25	; 0x06
    3eaa:	8d 83       	std	Y+5, r24	; 0x05
    3eac:	0f c0       	rjmp	.+30     	; 0x3ecc <HCLCD_VidWriteChar_4Bits+0xf0>
    3eae:	88 ec       	ldi	r24, 0xC8	; 200
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	9c 83       	std	Y+4, r25	; 0x04
    3eb4:	8b 83       	std	Y+3, r24	; 0x03
    3eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eba:	01 97       	sbiw	r24, 0x01	; 1
    3ebc:	f1 f7       	brne	.-4      	; 0x3eba <HCLCD_VidWriteChar_4Bits+0xde>
    3ebe:	9c 83       	std	Y+4, r25	; 0x04
    3ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ece:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed0:	00 97       	sbiw	r24, 0x00	; 0
    3ed2:	69 f7       	brne	.-38     	; 0x3eae <HCLCD_VidWriteChar_4Bits+0xd2>
    3ed4:	14 c0       	rjmp	.+40     	; 0x3efe <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed8:	78 85       	ldd	r23, Y+8	; 0x08
    3eda:	89 85       	ldd	r24, Y+9	; 0x09
    3edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	9e 83       	std	Y+6, r25	; 0x06
    3ee8:	8d 83       	std	Y+5, r24	; 0x05
    3eea:	8d 81       	ldd	r24, Y+5	; 0x05
    3eec:	9e 81       	ldd	r25, Y+6	; 0x06
    3eee:	9a 83       	std	Y+2, r25	; 0x02
    3ef0:	89 83       	std	Y+1, r24	; 0x01
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	f1 f7       	brne	.-4      	; 0x3ef6 <HCLCD_VidWriteChar_4Bits+0x11a>
    3efa:	9a 83       	std	Y+2, r25	; 0x02
    3efc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3efe:	82 e0       	ldi	r24, 0x02	; 2
    3f00:	61 e0       	ldi	r22, 0x01	; 1
    3f02:	40 e0       	ldi	r20, 0x00	; 0
    3f04:	0e 94 df 0c 	call	0x19be	; 0x19be <MDIO_Error_State_SetPinValue>
}
    3f08:	2f 96       	adiw	r28, 0x0f	; 15
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	cf 91       	pop	r28
    3f16:	df 91       	pop	r29
    3f18:	08 95       	ret

00003f1a <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3f1a:	df 93       	push	r29
    3f1c:	cf 93       	push	r28
    3f1e:	0f 92       	push	r0
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
    3f24:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3f26:	89 81       	ldd	r24, Y+1	; 0x01
    3f28:	82 95       	swap	r24
    3f2a:	8f 70       	andi	r24, 0x0F	; 15
    3f2c:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <HCLCD_VidWriteChar_4Bits>
}
    3f36:	0f 90       	pop	r0
    3f38:	cf 91       	pop	r28
    3f3a:	df 91       	pop	r29
    3f3c:	08 95       	ret

00003f3e <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3f3e:	df 93       	push	r29
    3f40:	cf 93       	push	r28
    3f42:	00 d0       	rcall	.+0      	; 0x3f44 <HCLCD_Vid4Bits_DisplayString+0x6>
    3f44:	0f 92       	push	r0
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
    3f4a:	9b 83       	std	Y+3, r25	; 0x03
    3f4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3f4e:	19 82       	std	Y+1, r1	; 0x01
    3f50:	0e c0       	rjmp	.+28     	; 0x3f6e <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3f52:	89 81       	ldd	r24, Y+1	; 0x01
    3f54:	28 2f       	mov	r18, r24
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	e2 0f       	add	r30, r18
    3f60:	f3 1f       	adc	r31, r19
    3f62:	80 81       	ld	r24, Z
    3f64:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	8f 5f       	subi	r24, 0xFF	; 255
    3f6c:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	28 2f       	mov	r18, r24
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	9b 81       	ldd	r25, Y+3	; 0x03
    3f78:	fc 01       	movw	r30, r24
    3f7a:	e2 0f       	add	r30, r18
    3f7c:	f3 1f       	adc	r31, r19
    3f7e:	80 81       	ld	r24, Z
    3f80:	88 23       	and	r24, r24
    3f82:	39 f7       	brne	.-50     	; 0x3f52 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3f84:	0f 90       	pop	r0
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	cf 91       	pop	r28
    3f8c:	df 91       	pop	r29
    3f8e:	08 95       	ret

00003f90 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3f90:	0f 93       	push	r16
    3f92:	1f 93       	push	r17
    3f94:	df 93       	push	r29
    3f96:	cf 93       	push	r28
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
    3f9c:	60 97       	sbiw	r28, 0x10	; 16
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	de bf       	out	0x3e, r29	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	cd bf       	out	0x3d, r28	; 61
    3fa8:	6d 87       	std	Y+13, r22	; 0x0d
    3faa:	7e 87       	std	Y+14, r23	; 0x0e
    3fac:	8f 87       	std	Y+15, r24	; 0x0f
    3fae:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3fb0:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb6:	af 85       	ldd	r26, Y+15	; 0x0f
    3fb8:	b8 89       	ldd	r27, Y+16	; 0x10
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	a1 05       	cpc	r26, r1
    3fbe:	b1 05       	cpc	r27, r1
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3fc2:	4f c0       	rjmp	.+158    	; 0x4062 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3fc4:	2d c0       	rjmp	.+90     	; 0x4020 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc8:	08 2f       	mov	r16, r24
    3fca:	10 e0       	ldi	r17, 0x00	; 0
    3fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd0:	af 85       	ldd	r26, Y+15	; 0x0f
    3fd2:	b8 89       	ldd	r27, Y+16	; 0x10
    3fd4:	2a e0       	ldi	r18, 0x0A	; 10
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e0       	ldi	r20, 0x00	; 0
    3fda:	50 e0       	ldi	r21, 0x00	; 0
    3fdc:	bc 01       	movw	r22, r24
    3fde:	cd 01       	movw	r24, r26
    3fe0:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__udivmodsi4>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	28 2f       	mov	r18, r24
    3fea:	ce 01       	movw	r24, r28
    3fec:	03 96       	adiw	r24, 0x03	; 3
    3fee:	fc 01       	movw	r30, r24
    3ff0:	e0 0f       	add	r30, r16
    3ff2:	f1 1f       	adc	r31, r17
    3ff4:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ffa:	af 85       	ldd	r26, Y+15	; 0x0f
    3ffc:	b8 89       	ldd	r27, Y+16	; 0x10
    3ffe:	2a e0       	ldi	r18, 0x0A	; 10
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	40 e0       	ldi	r20, 0x00	; 0
    4004:	50 e0       	ldi	r21, 0x00	; 0
    4006:	bc 01       	movw	r22, r24
    4008:	cd 01       	movw	r24, r26
    400a:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__udivmodsi4>
    400e:	da 01       	movw	r26, r20
    4010:	c9 01       	movw	r24, r18
    4012:	8d 87       	std	Y+13, r24	; 0x0d
    4014:	9e 87       	std	Y+14, r25	; 0x0e
    4016:	af 87       	std	Y+15, r26	; 0x0f
    4018:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    401a:	8a 81       	ldd	r24, Y+2	; 0x02
    401c:	8f 5f       	subi	r24, 0xFF	; 255
    401e:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    4020:	8d 85       	ldd	r24, Y+13	; 0x0d
    4022:	9e 85       	ldd	r25, Y+14	; 0x0e
    4024:	af 85       	ldd	r26, Y+15	; 0x0f
    4026:	b8 89       	ldd	r27, Y+16	; 0x10
    4028:	00 97       	sbiw	r24, 0x00	; 0
    402a:	a1 05       	cpc	r26, r1
    402c:	b1 05       	cpc	r27, r1
    402e:	59 f6       	brne	.-106    	; 0x3fc6 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    4030:	8a 81       	ldd	r24, Y+2	; 0x02
    4032:	81 50       	subi	r24, 0x01	; 1
    4034:	89 83       	std	Y+1, r24	; 0x01
    4036:	11 c0       	rjmp	.+34     	; 0x405a <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	28 2f       	mov	r18, r24
    403c:	33 27       	eor	r19, r19
    403e:	27 fd       	sbrc	r18, 7
    4040:	30 95       	com	r19
    4042:	ce 01       	movw	r24, r28
    4044:	03 96       	adiw	r24, 0x03	; 3
    4046:	fc 01       	movw	r30, r24
    4048:	e2 0f       	add	r30, r18
    404a:	f3 1f       	adc	r31, r19
    404c:	80 81       	ld	r24, Z
    404e:	80 5d       	subi	r24, 0xD0	; 208
    4050:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	81 50       	subi	r24, 0x01	; 1
    4058:	89 83       	std	Y+1, r24	; 0x01
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	88 23       	and	r24, r24
    405e:	64 f7       	brge	.-40     	; 0x4038 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    4060:	03 c0       	rjmp	.+6      	; 0x4068 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    4062:	80 e3       	ldi	r24, 0x30	; 48
    4064:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    4068:	60 96       	adiw	r28, 0x10	; 16
    406a:	0f b6       	in	r0, 0x3f	; 63
    406c:	f8 94       	cli
    406e:	de bf       	out	0x3e, r29	; 62
    4070:	0f be       	out	0x3f, r0	; 63
    4072:	cd bf       	out	0x3d, r28	; 61
    4074:	cf 91       	pop	r28
    4076:	df 91       	pop	r29
    4078:	1f 91       	pop	r17
    407a:	0f 91       	pop	r16
    407c:	08 95       	ret

0000407e <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    407e:	df 93       	push	r29
    4080:	cf 93       	push	r28
    4082:	00 d0       	rcall	.+0      	; 0x4084 <HCLCD_Vid4Bits_SetPosition+0x6>
    4084:	cd b7       	in	r28, 0x3d	; 61
    4086:	de b7       	in	r29, 0x3e	; 62
    4088:	89 83       	std	Y+1, r24	; 0x01
    408a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	81 30       	cpi	r24, 0x01	; 1
    4090:	b9 f4       	brne	.+46     	; 0x40c0 <HCLCD_Vid4Bits_SetPosition+0x42>
    4092:	8a 81       	ldd	r24, Y+2	; 0x02
    4094:	80 31       	cpi	r24, 0x10	; 16
    4096:	a0 f4       	brcc	.+40     	; 0x40c0 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    4098:	8a 81       	ldd	r24, Y+2	; 0x02
    409a:	88 2f       	mov	r24, r24
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	80 58       	subi	r24, 0x80	; 128
    40a0:	9f 4f       	sbci	r25, 0xFF	; 255
    40a2:	95 95       	asr	r25
    40a4:	87 95       	ror	r24
    40a6:	95 95       	asr	r25
    40a8:	87 95       	ror	r24
    40aa:	95 95       	asr	r25
    40ac:	87 95       	ror	r24
    40ae:	95 95       	asr	r25
    40b0:	87 95       	ror	r24
    40b2:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    40b6:	8a 81       	ldd	r24, Y+2	; 0x02
    40b8:	80 58       	subi	r24, 0x80	; 128
    40ba:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    40be:	19 c0       	rjmp	.+50     	; 0x40f2 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	82 30       	cpi	r24, 0x02	; 2
    40c4:	b1 f4       	brne	.+44     	; 0x40f2 <HCLCD_Vid4Bits_SetPosition+0x74>
    40c6:	8a 81       	ldd	r24, Y+2	; 0x02
    40c8:	80 31       	cpi	r24, 0x10	; 16
    40ca:	98 f4       	brcc	.+38     	; 0x40f2 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    40cc:	8a 81       	ldd	r24, Y+2	; 0x02
    40ce:	88 2f       	mov	r24, r24
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	80 54       	subi	r24, 0x40	; 64
    40d4:	9f 4f       	sbci	r25, 0xFF	; 255
    40d6:	95 95       	asr	r25
    40d8:	87 95       	ror	r24
    40da:	95 95       	asr	r25
    40dc:	87 95       	ror	r24
    40de:	95 95       	asr	r25
    40e0:	87 95       	ror	r24
    40e2:	95 95       	asr	r25
    40e4:	87 95       	ror	r24
    40e6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    40ea:	8a 81       	ldd	r24, Y+2	; 0x02
    40ec:	80 54       	subi	r24, 0x40	; 64
    40ee:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	cf 91       	pop	r28
    40f8:	df 91       	pop	r29
    40fa:	08 95       	ret

000040fc <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	00 d0       	rcall	.+0      	; 0x4102 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    4102:	00 d0       	rcall	.+0      	; 0x4104 <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
    4108:	8a 83       	std	Y+2, r24	; 0x02
    410a:	7c 83       	std	Y+4, r23	; 0x04
    410c:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    410e:	8a 81       	ldd	r24, Y+2	; 0x02
    4110:	88 30       	cpi	r24, 0x08	; 8
    4112:	98 f5       	brcc	.+102    	; 0x417a <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    4114:	8a 81       	ldd	r24, Y+2	; 0x02
    4116:	88 2f       	mov	r24, r24
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	08 96       	adiw	r24, 0x08	; 8
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	88 0f       	add	r24, r24
    4122:	99 1f       	adc	r25, r25
    4124:	88 0f       	add	r24, r24
    4126:	99 1f       	adc	r25, r25
    4128:	95 95       	asr	r25
    412a:	87 95       	ror	r24
    412c:	95 95       	asr	r25
    412e:	87 95       	ror	r24
    4130:	95 95       	asr	r25
    4132:	87 95       	ror	r24
    4134:	95 95       	asr	r25
    4136:	87 95       	ror	r24
    4138:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    413c:	8a 81       	ldd	r24, Y+2	; 0x02
    413e:	88 2f       	mov	r24, r24
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	08 96       	adiw	r24, 0x08	; 8
    4144:	88 0f       	add	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	88 0f       	add	r24, r24
    414a:	99 1f       	adc	r25, r25
    414c:	88 0f       	add	r24, r24
    414e:	99 1f       	adc	r25, r25
    4150:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    4154:	19 82       	std	Y+1, r1	; 0x01
    4156:	0e c0       	rjmp	.+28     	; 0x4174 <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    4158:	89 81       	ldd	r24, Y+1	; 0x01
    415a:	28 2f       	mov	r18, r24
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	8b 81       	ldd	r24, Y+3	; 0x03
    4160:	9c 81       	ldd	r25, Y+4	; 0x04
    4162:	fc 01       	movw	r30, r24
    4164:	e2 0f       	add	r30, r18
    4166:	f3 1f       	adc	r31, r19
    4168:	80 81       	ld	r24, Z
    416a:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    416e:	89 81       	ldd	r24, Y+1	; 0x01
    4170:	8f 5f       	subi	r24, 0xFF	; 255
    4172:	89 83       	std	Y+1, r24	; 0x01
    4174:	89 81       	ldd	r24, Y+1	; 0x01
    4176:	88 30       	cpi	r24, 0x08	; 8
    4178:	78 f3       	brcs	.-34     	; 0x4158 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	0f 90       	pop	r0
    4180:	0f 90       	pop	r0
    4182:	cf 91       	pop	r28
    4184:	df 91       	pop	r29
    4186:	08 95       	ret

00004188 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
    4190:	2e 97       	sbiw	r28, 0x0e	; 14
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	a0 e0       	ldi	r26, 0x00	; 0
    41ae:	b0 e4       	ldi	r27, 0x40	; 64
    41b0:	8b 87       	std	Y+11, r24	; 0x0b
    41b2:	9c 87       	std	Y+12, r25	; 0x0c
    41b4:	ad 87       	std	Y+13, r26	; 0x0d
    41b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    41bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41be:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	4a ef       	ldi	r20, 0xFA	; 250
    41c6:	54 e4       	ldi	r21, 0x44	; 68
    41c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	8f 83       	std	Y+7, r24	; 0x07
    41d2:	98 87       	std	Y+8, r25	; 0x08
    41d4:	a9 87       	std	Y+9, r26	; 0x09
    41d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41d8:	6f 81       	ldd	r22, Y+7	; 0x07
    41da:	78 85       	ldd	r23, Y+8	; 0x08
    41dc:	89 85       	ldd	r24, Y+9	; 0x09
    41de:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	40 e8       	ldi	r20, 0x80	; 128
    41e6:	5f e3       	ldi	r21, 0x3F	; 63
    41e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41ec:	88 23       	and	r24, r24
    41ee:	2c f4       	brge	.+10     	; 0x41fa <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	9e 83       	std	Y+6, r25	; 0x06
    41f6:	8d 83       	std	Y+5, r24	; 0x05
    41f8:	3f c0       	rjmp	.+126    	; 0x4278 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    41fa:	6f 81       	ldd	r22, Y+7	; 0x07
    41fc:	78 85       	ldd	r23, Y+8	; 0x08
    41fe:	89 85       	ldd	r24, Y+9	; 0x09
    4200:	9a 85       	ldd	r25, Y+10	; 0x0a
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	3f ef       	ldi	r19, 0xFF	; 255
    4206:	4f e7       	ldi	r20, 0x7F	; 127
    4208:	57 e4       	ldi	r21, 0x47	; 71
    420a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    420e:	18 16       	cp	r1, r24
    4210:	4c f5       	brge	.+82     	; 0x4264 <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4212:	6b 85       	ldd	r22, Y+11	; 0x0b
    4214:	7c 85       	ldd	r23, Y+12	; 0x0c
    4216:	8d 85       	ldd	r24, Y+13	; 0x0d
    4218:	9e 85       	ldd	r25, Y+14	; 0x0e
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	40 e2       	ldi	r20, 0x20	; 32
    4220:	51 e4       	ldi	r21, 0x41	; 65
    4222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	bc 01       	movw	r22, r24
    422c:	cd 01       	movw	r24, r26
    422e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4232:	dc 01       	movw	r26, r24
    4234:	cb 01       	movw	r24, r22
    4236:	9e 83       	std	Y+6, r25	; 0x06
    4238:	8d 83       	std	Y+5, r24	; 0x05
    423a:	0f c0       	rjmp	.+30     	; 0x425a <HCLCD_Vid4Bits_ClearScreen+0xd2>
    423c:	88 ec       	ldi	r24, 0xC8	; 200
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	9c 83       	std	Y+4, r25	; 0x04
    4242:	8b 83       	std	Y+3, r24	; 0x03
    4244:	8b 81       	ldd	r24, Y+3	; 0x03
    4246:	9c 81       	ldd	r25, Y+4	; 0x04
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	f1 f7       	brne	.-4      	; 0x4248 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    424c:	9c 83       	std	Y+4, r25	; 0x04
    424e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4250:	8d 81       	ldd	r24, Y+5	; 0x05
    4252:	9e 81       	ldd	r25, Y+6	; 0x06
    4254:	01 97       	sbiw	r24, 0x01	; 1
    4256:	9e 83       	std	Y+6, r25	; 0x06
    4258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    425a:	8d 81       	ldd	r24, Y+5	; 0x05
    425c:	9e 81       	ldd	r25, Y+6	; 0x06
    425e:	00 97       	sbiw	r24, 0x00	; 0
    4260:	69 f7       	brne	.-38     	; 0x423c <HCLCD_Vid4Bits_ClearScreen+0xb4>
    4262:	14 c0       	rjmp	.+40     	; 0x428c <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4264:	6f 81       	ldd	r22, Y+7	; 0x07
    4266:	78 85       	ldd	r23, Y+8	; 0x08
    4268:	89 85       	ldd	r24, Y+9	; 0x09
    426a:	9a 85       	ldd	r25, Y+10	; 0x0a
    426c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	9e 83       	std	Y+6, r25	; 0x06
    4276:	8d 83       	std	Y+5, r24	; 0x05
    4278:	8d 81       	ldd	r24, Y+5	; 0x05
    427a:	9e 81       	ldd	r25, Y+6	; 0x06
    427c:	9a 83       	std	Y+2, r25	; 0x02
    427e:	89 83       	std	Y+1, r24	; 0x01
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	9a 81       	ldd	r25, Y+2	; 0x02
    4284:	01 97       	sbiw	r24, 0x01	; 1
    4286:	f1 f7       	brne	.-4      	; 0x4284 <HCLCD_Vid4Bits_ClearScreen+0xfc>
    4288:	9a 83       	std	Y+2, r25	; 0x02
    428a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    428c:	2e 96       	adiw	r28, 0x0e	; 14
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	de bf       	out	0x3e, r29	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	cd bf       	out	0x3d, r28	; 61
    4298:	cf 91       	pop	r28
    429a:	df 91       	pop	r29
    429c:	08 95       	ret

0000429e <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    429e:	df 93       	push	r29
    42a0:	cf 93       	push	r28
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
    42a6:	60 97       	sbiw	r28, 0x10	; 16
    42a8:	0f b6       	in	r0, 0x3f	; 63
    42aa:	f8 94       	cli
    42ac:	de bf       	out	0x3e, r29	; 62
    42ae:	0f be       	out	0x3f, r0	; 63
    42b0:	cd bf       	out	0x3d, r28	; 61
    42b2:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    42b4:	1f 86       	std	Y+15, r1	; 0x0f
    42b6:	7b c0       	rjmp	.+246    	; 0x43ae <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    42be:	88 e1       	ldi	r24, 0x18	; 24
    42c0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    42c4:	80 e0       	ldi	r24, 0x00	; 0
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	a6 e9       	ldi	r26, 0x96	; 150
    42ca:	b3 e4       	ldi	r27, 0x43	; 67
    42cc:	8b 87       	std	Y+11, r24	; 0x0b
    42ce:	9c 87       	std	Y+12, r25	; 0x0c
    42d0:	ad 87       	std	Y+13, r26	; 0x0d
    42d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42da:	9e 85       	ldd	r25, Y+14	; 0x0e
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	4a ef       	ldi	r20, 0xFA	; 250
    42e2:	54 e4       	ldi	r21, 0x44	; 68
    42e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	8f 83       	std	Y+7, r24	; 0x07
    42ee:	98 87       	std	Y+8, r25	; 0x08
    42f0:	a9 87       	std	Y+9, r26	; 0x09
    42f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42f4:	6f 81       	ldd	r22, Y+7	; 0x07
    42f6:	78 85       	ldd	r23, Y+8	; 0x08
    42f8:	89 85       	ldd	r24, Y+9	; 0x09
    42fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e8       	ldi	r20, 0x80	; 128
    4302:	5f e3       	ldi	r21, 0x3F	; 63
    4304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4308:	88 23       	and	r24, r24
    430a:	2c f4       	brge	.+10     	; 0x4316 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	9e 83       	std	Y+6, r25	; 0x06
    4312:	8d 83       	std	Y+5, r24	; 0x05
    4314:	3f c0       	rjmp	.+126    	; 0x4394 <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    4316:	6f 81       	ldd	r22, Y+7	; 0x07
    4318:	78 85       	ldd	r23, Y+8	; 0x08
    431a:	89 85       	ldd	r24, Y+9	; 0x09
    431c:	9a 85       	ldd	r25, Y+10	; 0x0a
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	4f e7       	ldi	r20, 0x7F	; 127
    4324:	57 e4       	ldi	r21, 0x47	; 71
    4326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    432a:	18 16       	cp	r1, r24
    432c:	4c f5       	brge	.+82     	; 0x4380 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    432e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4330:	7c 85       	ldd	r23, Y+12	; 0x0c
    4332:	8d 85       	ldd	r24, Y+13	; 0x0d
    4334:	9e 85       	ldd	r25, Y+14	; 0x0e
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e2       	ldi	r20, 0x20	; 32
    433c:	51 e4       	ldi	r21, 0x41	; 65
    433e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	bc 01       	movw	r22, r24
    4348:	cd 01       	movw	r24, r26
    434a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	9e 83       	std	Y+6, r25	; 0x06
    4354:	8d 83       	std	Y+5, r24	; 0x05
    4356:	0f c0       	rjmp	.+30     	; 0x4376 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    4358:	88 ec       	ldi	r24, 0xC8	; 200
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	9c 83       	std	Y+4, r25	; 0x04
    435e:	8b 83       	std	Y+3, r24	; 0x03
    4360:	8b 81       	ldd	r24, Y+3	; 0x03
    4362:	9c 81       	ldd	r25, Y+4	; 0x04
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	f1 f7       	brne	.-4      	; 0x4364 <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    4368:	9c 83       	std	Y+4, r25	; 0x04
    436a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436c:	8d 81       	ldd	r24, Y+5	; 0x05
    436e:	9e 81       	ldd	r25, Y+6	; 0x06
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	9e 83       	std	Y+6, r25	; 0x06
    4374:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4376:	8d 81       	ldd	r24, Y+5	; 0x05
    4378:	9e 81       	ldd	r25, Y+6	; 0x06
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	69 f7       	brne	.-38     	; 0x4358 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    437e:	14 c0       	rjmp	.+40     	; 0x43a8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4380:	6f 81       	ldd	r22, Y+7	; 0x07
    4382:	78 85       	ldd	r23, Y+8	; 0x08
    4384:	89 85       	ldd	r24, Y+9	; 0x09
    4386:	9a 85       	ldd	r25, Y+10	; 0x0a
    4388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	9e 83       	std	Y+6, r25	; 0x06
    4392:	8d 83       	std	Y+5, r24	; 0x05
    4394:	8d 81       	ldd	r24, Y+5	; 0x05
    4396:	9e 81       	ldd	r25, Y+6	; 0x06
    4398:	9a 83       	std	Y+2, r25	; 0x02
    439a:	89 83       	std	Y+1, r24	; 0x01
    439c:	89 81       	ldd	r24, Y+1	; 0x01
    439e:	9a 81       	ldd	r25, Y+2	; 0x02
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	f1 f7       	brne	.-4      	; 0x43a0 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    43a4:	9a 83       	std	Y+2, r25	; 0x02
    43a6:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    43a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43aa:	8f 5f       	subi	r24, 0xFF	; 255
    43ac:	8f 87       	std	Y+15, r24	; 0x0f
    43ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    43b0:	88 89       	ldd	r24, Y+16	; 0x10
    43b2:	98 17       	cp	r25, r24
    43b4:	08 f4       	brcc	.+2      	; 0x43b8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    43b6:	80 cf       	rjmp	.-256    	; 0x42b8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    43b8:	60 96       	adiw	r28, 0x10	; 16
    43ba:	0f b6       	in	r0, 0x3f	; 63
    43bc:	f8 94       	cli
    43be:	de bf       	out	0x3e, r29	; 62
    43c0:	0f be       	out	0x3f, r0	; 63
    43c2:	cd bf       	out	0x3d, r28	; 61
    43c4:	cf 91       	pop	r28
    43c6:	df 91       	pop	r29
    43c8:	08 95       	ret

000043ca <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    43ca:	df 93       	push	r29
    43cc:	cf 93       	push	r28
    43ce:	cd b7       	in	r28, 0x3d	; 61
    43d0:	de b7       	in	r29, 0x3e	; 62
    43d2:	60 97       	sbiw	r28, 0x10	; 16
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	f8 94       	cli
    43d8:	de bf       	out	0x3e, r29	; 62
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    43e0:	1f 86       	std	Y+15, r1	; 0x0f
    43e2:	7b c0       	rjmp	.+246    	; 0x44da <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    43ea:	8c e1       	ldi	r24, 0x1C	; 28
    43ec:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    43f0:	80 e0       	ldi	r24, 0x00	; 0
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	a6 e9       	ldi	r26, 0x96	; 150
    43f6:	b3 e4       	ldi	r27, 0x43	; 67
    43f8:	8b 87       	std	Y+11, r24	; 0x0b
    43fa:	9c 87       	std	Y+12, r25	; 0x0c
    43fc:	ad 87       	std	Y+13, r26	; 0x0d
    43fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4400:	6b 85       	ldd	r22, Y+11	; 0x0b
    4402:	7c 85       	ldd	r23, Y+12	; 0x0c
    4404:	8d 85       	ldd	r24, Y+13	; 0x0d
    4406:	9e 85       	ldd	r25, Y+14	; 0x0e
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	4a ef       	ldi	r20, 0xFA	; 250
    440e:	54 e4       	ldi	r21, 0x44	; 68
    4410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	8f 83       	std	Y+7, r24	; 0x07
    441a:	98 87       	std	Y+8, r25	; 0x08
    441c:	a9 87       	std	Y+9, r26	; 0x09
    441e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4420:	6f 81       	ldd	r22, Y+7	; 0x07
    4422:	78 85       	ldd	r23, Y+8	; 0x08
    4424:	89 85       	ldd	r24, Y+9	; 0x09
    4426:	9a 85       	ldd	r25, Y+10	; 0x0a
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	40 e8       	ldi	r20, 0x80	; 128
    442e:	5f e3       	ldi	r21, 0x3F	; 63
    4430:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4434:	88 23       	and	r24, r24
    4436:	2c f4       	brge	.+10     	; 0x4442 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	9e 83       	std	Y+6, r25	; 0x06
    443e:	8d 83       	std	Y+5, r24	; 0x05
    4440:	3f c0       	rjmp	.+126    	; 0x44c0 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    4442:	6f 81       	ldd	r22, Y+7	; 0x07
    4444:	78 85       	ldd	r23, Y+8	; 0x08
    4446:	89 85       	ldd	r24, Y+9	; 0x09
    4448:	9a 85       	ldd	r25, Y+10	; 0x0a
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	3f ef       	ldi	r19, 0xFF	; 255
    444e:	4f e7       	ldi	r20, 0x7F	; 127
    4450:	57 e4       	ldi	r21, 0x47	; 71
    4452:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4456:	18 16       	cp	r1, r24
    4458:	4c f5       	brge	.+82     	; 0x44ac <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    445a:	6b 85       	ldd	r22, Y+11	; 0x0b
    445c:	7c 85       	ldd	r23, Y+12	; 0x0c
    445e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4460:	9e 85       	ldd	r25, Y+14	; 0x0e
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	40 e2       	ldi	r20, 0x20	; 32
    4468:	51 e4       	ldi	r21, 0x41	; 65
    446a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	bc 01       	movw	r22, r24
    4474:	cd 01       	movw	r24, r26
    4476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	9e 83       	std	Y+6, r25	; 0x06
    4480:	8d 83       	std	Y+5, r24	; 0x05
    4482:	0f c0       	rjmp	.+30     	; 0x44a2 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    4484:	88 ec       	ldi	r24, 0xC8	; 200
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	9c 83       	std	Y+4, r25	; 0x04
    448a:	8b 83       	std	Y+3, r24	; 0x03
    448c:	8b 81       	ldd	r24, Y+3	; 0x03
    448e:	9c 81       	ldd	r25, Y+4	; 0x04
    4490:	01 97       	sbiw	r24, 0x01	; 1
    4492:	f1 f7       	brne	.-4      	; 0x4490 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    4494:	9c 83       	std	Y+4, r25	; 0x04
    4496:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4498:	8d 81       	ldd	r24, Y+5	; 0x05
    449a:	9e 81       	ldd	r25, Y+6	; 0x06
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	9e 83       	std	Y+6, r25	; 0x06
    44a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a2:	8d 81       	ldd	r24, Y+5	; 0x05
    44a4:	9e 81       	ldd	r25, Y+6	; 0x06
    44a6:	00 97       	sbiw	r24, 0x00	; 0
    44a8:	69 f7       	brne	.-38     	; 0x4484 <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    44aa:	14 c0       	rjmp	.+40     	; 0x44d4 <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ac:	6f 81       	ldd	r22, Y+7	; 0x07
    44ae:	78 85       	ldd	r23, Y+8	; 0x08
    44b0:	89 85       	ldd	r24, Y+9	; 0x09
    44b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b8:	dc 01       	movw	r26, r24
    44ba:	cb 01       	movw	r24, r22
    44bc:	9e 83       	std	Y+6, r25	; 0x06
    44be:	8d 83       	std	Y+5, r24	; 0x05
    44c0:	8d 81       	ldd	r24, Y+5	; 0x05
    44c2:	9e 81       	ldd	r25, Y+6	; 0x06
    44c4:	9a 83       	std	Y+2, r25	; 0x02
    44c6:	89 83       	std	Y+1, r24	; 0x01
    44c8:	89 81       	ldd	r24, Y+1	; 0x01
    44ca:	9a 81       	ldd	r25, Y+2	; 0x02
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	f1 f7       	brne	.-4      	; 0x44cc <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    44d0:	9a 83       	std	Y+2, r25	; 0x02
    44d2:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    44d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    44d6:	8f 5f       	subi	r24, 0xFF	; 255
    44d8:	8f 87       	std	Y+15, r24	; 0x0f
    44da:	9f 85       	ldd	r25, Y+15	; 0x0f
    44dc:	88 89       	ldd	r24, Y+16	; 0x10
    44de:	98 17       	cp	r25, r24
    44e0:	08 f4       	brcc	.+2      	; 0x44e4 <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    44e2:	80 cf       	rjmp	.-256    	; 0x43e4 <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    44e4:	60 96       	adiw	r28, 0x10	; 16
    44e6:	0f b6       	in	r0, 0x3f	; 63
    44e8:	f8 94       	cli
    44ea:	de bf       	out	0x3e, r29	; 62
    44ec:	0f be       	out	0x3f, r0	; 63
    44ee:	cd bf       	out	0x3d, r28	; 61
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	08 95       	ret

000044f6 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    44fe:	60 97       	sbiw	r28, 0x10	; 16
    4500:	0f b6       	in	r0, 0x3f	; 63
    4502:	f8 94       	cli
    4504:	de bf       	out	0x3e, r29	; 62
    4506:	0f be       	out	0x3f, r0	; 63
    4508:	cd bf       	out	0x3d, r28	; 61
    450a:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    450c:	1f 86       	std	Y+15, r1	; 0x0f
    450e:	7b c0       	rjmp	.+246    	; 0x4606 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    4516:	80 e1       	ldi	r24, 0x10	; 16
    4518:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	a6 e9       	ldi	r26, 0x96	; 150
    4522:	b3 e4       	ldi	r27, 0x43	; 67
    4524:	8b 87       	std	Y+11, r24	; 0x0b
    4526:	9c 87       	std	Y+12, r25	; 0x0c
    4528:	ad 87       	std	Y+13, r26	; 0x0d
    452a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    452c:	6b 85       	ldd	r22, Y+11	; 0x0b
    452e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4530:	8d 85       	ldd	r24, Y+13	; 0x0d
    4532:	9e 85       	ldd	r25, Y+14	; 0x0e
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	4a ef       	ldi	r20, 0xFA	; 250
    453a:	54 e4       	ldi	r21, 0x44	; 68
    453c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4540:	dc 01       	movw	r26, r24
    4542:	cb 01       	movw	r24, r22
    4544:	8f 83       	std	Y+7, r24	; 0x07
    4546:	98 87       	std	Y+8, r25	; 0x08
    4548:	a9 87       	std	Y+9, r26	; 0x09
    454a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    454c:	6f 81       	ldd	r22, Y+7	; 0x07
    454e:	78 85       	ldd	r23, Y+8	; 0x08
    4550:	89 85       	ldd	r24, Y+9	; 0x09
    4552:	9a 85       	ldd	r25, Y+10	; 0x0a
    4554:	20 e0       	ldi	r18, 0x00	; 0
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	40 e8       	ldi	r20, 0x80	; 128
    455a:	5f e3       	ldi	r21, 0x3F	; 63
    455c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4560:	88 23       	and	r24, r24
    4562:	2c f4       	brge	.+10     	; 0x456e <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	9e 83       	std	Y+6, r25	; 0x06
    456a:	8d 83       	std	Y+5, r24	; 0x05
    456c:	3f c0       	rjmp	.+126    	; 0x45ec <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    456e:	6f 81       	ldd	r22, Y+7	; 0x07
    4570:	78 85       	ldd	r23, Y+8	; 0x08
    4572:	89 85       	ldd	r24, Y+9	; 0x09
    4574:	9a 85       	ldd	r25, Y+10	; 0x0a
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	3f ef       	ldi	r19, 0xFF	; 255
    457a:	4f e7       	ldi	r20, 0x7F	; 127
    457c:	57 e4       	ldi	r21, 0x47	; 71
    457e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4582:	18 16       	cp	r1, r24
    4584:	4c f5       	brge	.+82     	; 0x45d8 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4586:	6b 85       	ldd	r22, Y+11	; 0x0b
    4588:	7c 85       	ldd	r23, Y+12	; 0x0c
    458a:	8d 85       	ldd	r24, Y+13	; 0x0d
    458c:	9e 85       	ldd	r25, Y+14	; 0x0e
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e2       	ldi	r20, 0x20	; 32
    4594:	51 e4       	ldi	r21, 0x41	; 65
    4596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	bc 01       	movw	r22, r24
    45a0:	cd 01       	movw	r24, r26
    45a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	9e 83       	std	Y+6, r25	; 0x06
    45ac:	8d 83       	std	Y+5, r24	; 0x05
    45ae:	0f c0       	rjmp	.+30     	; 0x45ce <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    45b0:	88 ec       	ldi	r24, 0xC8	; 200
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	9c 83       	std	Y+4, r25	; 0x04
    45b6:	8b 83       	std	Y+3, r24	; 0x03
    45b8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ba:	9c 81       	ldd	r25, Y+4	; 0x04
    45bc:	01 97       	sbiw	r24, 0x01	; 1
    45be:	f1 f7       	brne	.-4      	; 0x45bc <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    45c0:	9c 83       	std	Y+4, r25	; 0x04
    45c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45c4:	8d 81       	ldd	r24, Y+5	; 0x05
    45c6:	9e 81       	ldd	r25, Y+6	; 0x06
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	9e 83       	std	Y+6, r25	; 0x06
    45cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ce:	8d 81       	ldd	r24, Y+5	; 0x05
    45d0:	9e 81       	ldd	r25, Y+6	; 0x06
    45d2:	00 97       	sbiw	r24, 0x00	; 0
    45d4:	69 f7       	brne	.-38     	; 0x45b0 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    45d6:	14 c0       	rjmp	.+40     	; 0x4600 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d8:	6f 81       	ldd	r22, Y+7	; 0x07
    45da:	78 85       	ldd	r23, Y+8	; 0x08
    45dc:	89 85       	ldd	r24, Y+9	; 0x09
    45de:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	9e 83       	std	Y+6, r25	; 0x06
    45ea:	8d 83       	std	Y+5, r24	; 0x05
    45ec:	8d 81       	ldd	r24, Y+5	; 0x05
    45ee:	9e 81       	ldd	r25, Y+6	; 0x06
    45f0:	9a 83       	std	Y+2, r25	; 0x02
    45f2:	89 83       	std	Y+1, r24	; 0x01
    45f4:	89 81       	ldd	r24, Y+1	; 0x01
    45f6:	9a 81       	ldd	r25, Y+2	; 0x02
    45f8:	01 97       	sbiw	r24, 0x01	; 1
    45fa:	f1 f7       	brne	.-4      	; 0x45f8 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    45fc:	9a 83       	std	Y+2, r25	; 0x02
    45fe:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4600:	8f 85       	ldd	r24, Y+15	; 0x0f
    4602:	8f 5f       	subi	r24, 0xFF	; 255
    4604:	8f 87       	std	Y+15, r24	; 0x0f
    4606:	9f 85       	ldd	r25, Y+15	; 0x0f
    4608:	88 89       	ldd	r24, Y+16	; 0x10
    460a:	98 17       	cp	r25, r24
    460c:	08 f4       	brcc	.+2      	; 0x4610 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    460e:	80 cf       	rjmp	.-256    	; 0x4510 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    4610:	60 96       	adiw	r28, 0x10	; 16
    4612:	0f b6       	in	r0, 0x3f	; 63
    4614:	f8 94       	cli
    4616:	de bf       	out	0x3e, r29	; 62
    4618:	0f be       	out	0x3f, r0	; 63
    461a:	cd bf       	out	0x3d, r28	; 61
    461c:	cf 91       	pop	r28
    461e:	df 91       	pop	r29
    4620:	08 95       	ret

00004622 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    4622:	df 93       	push	r29
    4624:	cf 93       	push	r28
    4626:	cd b7       	in	r28, 0x3d	; 61
    4628:	de b7       	in	r29, 0x3e	; 62
    462a:	60 97       	sbiw	r28, 0x10	; 16
    462c:	0f b6       	in	r0, 0x3f	; 63
    462e:	f8 94       	cli
    4630:	de bf       	out	0x3e, r29	; 62
    4632:	0f be       	out	0x3f, r0	; 63
    4634:	cd bf       	out	0x3d, r28	; 61
    4636:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4638:	1f 86       	std	Y+15, r1	; 0x0f
    463a:	7b c0       	rjmp	.+246    	; 0x4732 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    463c:	81 e0       	ldi	r24, 0x01	; 1
    463e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    4642:	84 e1       	ldi	r24, 0x14	; 20
    4644:	0e 94 3c 1c 	call	0x3878	; 0x3878 <HCLCD_Vid4Bits_SendCommand>
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	a6 e9       	ldi	r26, 0x96	; 150
    464e:	b3 e4       	ldi	r27, 0x43	; 67
    4650:	8b 87       	std	Y+11, r24	; 0x0b
    4652:	9c 87       	std	Y+12, r25	; 0x0c
    4654:	ad 87       	std	Y+13, r26	; 0x0d
    4656:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4658:	6b 85       	ldd	r22, Y+11	; 0x0b
    465a:	7c 85       	ldd	r23, Y+12	; 0x0c
    465c:	8d 85       	ldd	r24, Y+13	; 0x0d
    465e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	4a ef       	ldi	r20, 0xFA	; 250
    4666:	54 e4       	ldi	r21, 0x44	; 68
    4668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    466c:	dc 01       	movw	r26, r24
    466e:	cb 01       	movw	r24, r22
    4670:	8f 83       	std	Y+7, r24	; 0x07
    4672:	98 87       	std	Y+8, r25	; 0x08
    4674:	a9 87       	std	Y+9, r26	; 0x09
    4676:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4678:	6f 81       	ldd	r22, Y+7	; 0x07
    467a:	78 85       	ldd	r23, Y+8	; 0x08
    467c:	89 85       	ldd	r24, Y+9	; 0x09
    467e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e8       	ldi	r20, 0x80	; 128
    4686:	5f e3       	ldi	r21, 0x3F	; 63
    4688:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    468c:	88 23       	and	r24, r24
    468e:	2c f4       	brge	.+10     	; 0x469a <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	9e 83       	std	Y+6, r25	; 0x06
    4696:	8d 83       	std	Y+5, r24	; 0x05
    4698:	3f c0       	rjmp	.+126    	; 0x4718 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    469a:	6f 81       	ldd	r22, Y+7	; 0x07
    469c:	78 85       	ldd	r23, Y+8	; 0x08
    469e:	89 85       	ldd	r24, Y+9	; 0x09
    46a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	3f ef       	ldi	r19, 0xFF	; 255
    46a6:	4f e7       	ldi	r20, 0x7F	; 127
    46a8:	57 e4       	ldi	r21, 0x47	; 71
    46aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46ae:	18 16       	cp	r1, r24
    46b0:	4c f5       	brge	.+82     	; 0x4704 <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	40 e2       	ldi	r20, 0x20	; 32
    46c0:	51 e4       	ldi	r21, 0x41	; 65
    46c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	bc 01       	movw	r22, r24
    46cc:	cd 01       	movw	r24, r26
    46ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	9e 83       	std	Y+6, r25	; 0x06
    46d8:	8d 83       	std	Y+5, r24	; 0x05
    46da:	0f c0       	rjmp	.+30     	; 0x46fa <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    46dc:	88 ec       	ldi	r24, 0xC8	; 200
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	9c 83       	std	Y+4, r25	; 0x04
    46e2:	8b 83       	std	Y+3, r24	; 0x03
    46e4:	8b 81       	ldd	r24, Y+3	; 0x03
    46e6:	9c 81       	ldd	r25, Y+4	; 0x04
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	f1 f7       	brne	.-4      	; 0x46e8 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    46ec:	9c 83       	std	Y+4, r25	; 0x04
    46ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f0:	8d 81       	ldd	r24, Y+5	; 0x05
    46f2:	9e 81       	ldd	r25, Y+6	; 0x06
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	9e 83       	std	Y+6, r25	; 0x06
    46f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fa:	8d 81       	ldd	r24, Y+5	; 0x05
    46fc:	9e 81       	ldd	r25, Y+6	; 0x06
    46fe:	00 97       	sbiw	r24, 0x00	; 0
    4700:	69 f7       	brne	.-38     	; 0x46dc <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    4702:	14 c0       	rjmp	.+40     	; 0x472c <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4704:	6f 81       	ldd	r22, Y+7	; 0x07
    4706:	78 85       	ldd	r23, Y+8	; 0x08
    4708:	89 85       	ldd	r24, Y+9	; 0x09
    470a:	9a 85       	ldd	r25, Y+10	; 0x0a
    470c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	9e 83       	std	Y+6, r25	; 0x06
    4716:	8d 83       	std	Y+5, r24	; 0x05
    4718:	8d 81       	ldd	r24, Y+5	; 0x05
    471a:	9e 81       	ldd	r25, Y+6	; 0x06
    471c:	9a 83       	std	Y+2, r25	; 0x02
    471e:	89 83       	std	Y+1, r24	; 0x01
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	9a 81       	ldd	r25, Y+2	; 0x02
    4724:	01 97       	sbiw	r24, 0x01	; 1
    4726:	f1 f7       	brne	.-4      	; 0x4724 <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    4728:	9a 83       	std	Y+2, r25	; 0x02
    472a:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    472c:	8f 85       	ldd	r24, Y+15	; 0x0f
    472e:	8f 5f       	subi	r24, 0xFF	; 255
    4730:	8f 87       	std	Y+15, r24	; 0x0f
    4732:	9f 85       	ldd	r25, Y+15	; 0x0f
    4734:	88 89       	ldd	r24, Y+16	; 0x10
    4736:	98 17       	cp	r25, r24
    4738:	08 f4       	brcc	.+2      	; 0x473c <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    473a:	80 cf       	rjmp	.-256    	; 0x463c <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    473c:	60 96       	adiw	r28, 0x10	; 16
    473e:	0f b6       	in	r0, 0x3f	; 63
    4740:	f8 94       	cli
    4742:	de bf       	out	0x3e, r29	; 62
    4744:	0f be       	out	0x3f, r0	; 63
    4746:	cd bf       	out	0x3d, r28	; 61
    4748:	cf 91       	pop	r28
    474a:	df 91       	pop	r29
    474c:	08 95       	ret

0000474e <main>:
#include"../HAL/HEEPROM/HEEPROM_Interface.h"
#include"../HAL/HCLCD/HCLCD_Interface.h"

#include<util\delay.h>
int main(void)
{
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	df 93       	push	r29
    4754:	cf 93       	push	r28
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
    475a:	c5 55       	subi	r28, 0x55	; 85
    475c:	d0 40       	sbci	r29, 0x00	; 0
    475e:	0f b6       	in	r0, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	de bf       	out	0x3e, r29	; 62
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ReceiveData=1;
    4768:	fe 01       	movw	r30, r28
    476a:	eb 5a       	subi	r30, 0xAB	; 171
    476c:	ff 4f       	sbci	r31, 0xFF	; 255
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	80 83       	st	Z, r24
	/*Set PinC0 as an output*/
	MDIO_Error_State_SetPortDirection(MDIO_PORTD,PORT_OUTPUT);
    4772:	83 e0       	ldi	r24, 0x03	; 3
    4774:	6f ef       	ldi	r22, 0xFF	; 255
    4776:	0e 94 8f 0c 	call	0x191e	; 0x191e <MDIO_Error_State_SetPortDirection>
    477a:	fe 01       	movw	r30, r28
    477c:	ef 5a       	subi	r30, 0xAF	; 175
    477e:	ff 4f       	sbci	r31, 0xFF	; 255
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	aa e7       	ldi	r26, 0x7A	; 122
    4786:	b4 e4       	ldi	r27, 0x44	; 68
    4788:	80 83       	st	Z, r24
    478a:	91 83       	std	Z+1, r25	; 0x01
    478c:	a2 83       	std	Z+2, r26	; 0x02
    478e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4790:	8e 01       	movw	r16, r28
    4792:	03 5b       	subi	r16, 0xB3	; 179
    4794:	1f 4f       	sbci	r17, 0xFF	; 255
    4796:	fe 01       	movw	r30, r28
    4798:	ef 5a       	subi	r30, 0xAF	; 175
    479a:	ff 4f       	sbci	r31, 0xFF	; 255
    479c:	60 81       	ld	r22, Z
    479e:	71 81       	ldd	r23, Z+1	; 0x01
    47a0:	82 81       	ldd	r24, Z+2	; 0x02
    47a2:	93 81       	ldd	r25, Z+3	; 0x03
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	4a ef       	ldi	r20, 0xFA	; 250
    47aa:	54 e4       	ldi	r21, 0x44	; 68
    47ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	f8 01       	movw	r30, r16
    47b6:	80 83       	st	Z, r24
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	a2 83       	std	Z+2, r26	; 0x02
    47bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47be:	fe 01       	movw	r30, r28
    47c0:	e3 5b       	subi	r30, 0xB3	; 179
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	60 81       	ld	r22, Z
    47c6:	71 81       	ldd	r23, Z+1	; 0x01
    47c8:	82 81       	ldd	r24, Z+2	; 0x02
    47ca:	93 81       	ldd	r25, Z+3	; 0x03
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	40 e8       	ldi	r20, 0x80	; 128
    47d2:	5f e3       	ldi	r21, 0x3F	; 63
    47d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47d8:	88 23       	and	r24, r24
    47da:	44 f4       	brge	.+16     	; 0x47ec <main+0x9e>
		__ticks = 1;
    47dc:	fe 01       	movw	r30, r28
    47de:	e5 5b       	subi	r30, 0xB5	; 181
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	91 83       	std	Z+1, r25	; 0x01
    47e8:	80 83       	st	Z, r24
    47ea:	64 c0       	rjmp	.+200    	; 0x48b4 <main+0x166>
	else if (__tmp > 65535)
    47ec:	fe 01       	movw	r30, r28
    47ee:	e3 5b       	subi	r30, 0xB3	; 179
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	60 81       	ld	r22, Z
    47f4:	71 81       	ldd	r23, Z+1	; 0x01
    47f6:	82 81       	ldd	r24, Z+2	; 0x02
    47f8:	93 81       	ldd	r25, Z+3	; 0x03
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	3f ef       	ldi	r19, 0xFF	; 255
    47fe:	4f e7       	ldi	r20, 0x7F	; 127
    4800:	57 e4       	ldi	r21, 0x47	; 71
    4802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4806:	18 16       	cp	r1, r24
    4808:	0c f0       	brlt	.+2      	; 0x480c <main+0xbe>
    480a:	43 c0       	rjmp	.+134    	; 0x4892 <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    480c:	fe 01       	movw	r30, r28
    480e:	ef 5a       	subi	r30, 0xAF	; 175
    4810:	ff 4f       	sbci	r31, 0xFF	; 255
    4812:	60 81       	ld	r22, Z
    4814:	71 81       	ldd	r23, Z+1	; 0x01
    4816:	82 81       	ldd	r24, Z+2	; 0x02
    4818:	93 81       	ldd	r25, Z+3	; 0x03
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	40 e2       	ldi	r20, 0x20	; 32
    4820:	51 e4       	ldi	r21, 0x41	; 65
    4822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4826:	dc 01       	movw	r26, r24
    4828:	cb 01       	movw	r24, r22
    482a:	8e 01       	movw	r16, r28
    482c:	05 5b       	subi	r16, 0xB5	; 181
    482e:	1f 4f       	sbci	r17, 0xFF	; 255
    4830:	bc 01       	movw	r22, r24
    4832:	cd 01       	movw	r24, r26
    4834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	f8 01       	movw	r30, r16
    483e:	91 83       	std	Z+1, r25	; 0x01
    4840:	80 83       	st	Z, r24
    4842:	1f c0       	rjmp	.+62     	; 0x4882 <main+0x134>
    4844:	fe 01       	movw	r30, r28
    4846:	e7 5b       	subi	r30, 0xB7	; 183
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	88 ec       	ldi	r24, 0xC8	; 200
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	91 83       	std	Z+1, r25	; 0x01
    4850:	80 83       	st	Z, r24
    4852:	fe 01       	movw	r30, r28
    4854:	e7 5b       	subi	r30, 0xB7	; 183
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	80 81       	ld	r24, Z
    485a:	91 81       	ldd	r25, Z+1	; 0x01
    485c:	01 97       	sbiw	r24, 0x01	; 1
    485e:	f1 f7       	brne	.-4      	; 0x485c <main+0x10e>
    4860:	fe 01       	movw	r30, r28
    4862:	e7 5b       	subi	r30, 0xB7	; 183
    4864:	ff 4f       	sbci	r31, 0xFF	; 255
    4866:	91 83       	std	Z+1, r25	; 0x01
    4868:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    486a:	de 01       	movw	r26, r28
    486c:	a5 5b       	subi	r26, 0xB5	; 181
    486e:	bf 4f       	sbci	r27, 0xFF	; 255
    4870:	fe 01       	movw	r30, r28
    4872:	e5 5b       	subi	r30, 0xB5	; 181
    4874:	ff 4f       	sbci	r31, 0xFF	; 255
    4876:	80 81       	ld	r24, Z
    4878:	91 81       	ldd	r25, Z+1	; 0x01
    487a:	01 97       	sbiw	r24, 0x01	; 1
    487c:	11 96       	adiw	r26, 0x01	; 1
    487e:	9c 93       	st	X, r25
    4880:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4882:	fe 01       	movw	r30, r28
    4884:	e5 5b       	subi	r30, 0xB5	; 181
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	80 81       	ld	r24, Z
    488a:	91 81       	ldd	r25, Z+1	; 0x01
    488c:	00 97       	sbiw	r24, 0x00	; 0
    488e:	d1 f6       	brne	.-76     	; 0x4844 <main+0xf6>
    4890:	27 c0       	rjmp	.+78     	; 0x48e0 <main+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4892:	8e 01       	movw	r16, r28
    4894:	05 5b       	subi	r16, 0xB5	; 181
    4896:	1f 4f       	sbci	r17, 0xFF	; 255
    4898:	fe 01       	movw	r30, r28
    489a:	e3 5b       	subi	r30, 0xB3	; 179
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	60 81       	ld	r22, Z
    48a0:	71 81       	ldd	r23, Z+1	; 0x01
    48a2:	82 81       	ldd	r24, Z+2	; 0x02
    48a4:	93 81       	ldd	r25, Z+3	; 0x03
    48a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	f8 01       	movw	r30, r16
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	80 83       	st	Z, r24
    48b4:	de 01       	movw	r26, r28
    48b6:	a9 5b       	subi	r26, 0xB9	; 185
    48b8:	bf 4f       	sbci	r27, 0xFF	; 255
    48ba:	fe 01       	movw	r30, r28
    48bc:	e5 5b       	subi	r30, 0xB5	; 181
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	80 81       	ld	r24, Z
    48c2:	91 81       	ldd	r25, Z+1	; 0x01
    48c4:	8d 93       	st	X+, r24
    48c6:	9c 93       	st	X, r25
    48c8:	fe 01       	movw	r30, r28
    48ca:	e9 5b       	subi	r30, 0xB9	; 185
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	80 81       	ld	r24, Z
    48d0:	91 81       	ldd	r25, Z+1	; 0x01
    48d2:	01 97       	sbiw	r24, 0x01	; 1
    48d4:	f1 f7       	brne	.-4      	; 0x48d2 <main+0x184>
    48d6:	fe 01       	movw	r30, r28
    48d8:	e9 5b       	subi	r30, 0xB9	; 185
    48da:	ff 4f       	sbci	r31, 0xFF	; 255
    48dc:	91 83       	std	Z+1, r25	; 0x01
    48de:	80 83       	st	Z, r24
	_delay_ms(1000);

	/*CLCD Initialization*/
	HCLCD_Vid4Bits_Init();
    48e0:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <HCLCD_Vid4Bits_Init>
	HCLCD_Vid4Bits_DisplayString((u8*)"Welcome...");
    48e4:	80 e6       	ldi	r24, 0x60	; 96
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <HCLCD_Vid4Bits_DisplayString>
    48ec:	fe 01       	movw	r30, r28
    48ee:	ed 5b       	subi	r30, 0xBD	; 189
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	aa e7       	ldi	r26, 0x7A	; 122
    48f8:	b4 e4       	ldi	r27, 0x44	; 68
    48fa:	80 83       	st	Z, r24
    48fc:	91 83       	std	Z+1, r25	; 0x01
    48fe:	a2 83       	std	Z+2, r26	; 0x02
    4900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4902:	8e 01       	movw	r16, r28
    4904:	01 5c       	subi	r16, 0xC1	; 193
    4906:	1f 4f       	sbci	r17, 0xFF	; 255
    4908:	fe 01       	movw	r30, r28
    490a:	ed 5b       	subi	r30, 0xBD	; 189
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	60 81       	ld	r22, Z
    4910:	71 81       	ldd	r23, Z+1	; 0x01
    4912:	82 81       	ldd	r24, Z+2	; 0x02
    4914:	93 81       	ldd	r25, Z+3	; 0x03
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	4a ef       	ldi	r20, 0xFA	; 250
    491c:	54 e4       	ldi	r21, 0x44	; 68
    491e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	f8 01       	movw	r30, r16
    4928:	80 83       	st	Z, r24
    492a:	91 83       	std	Z+1, r25	; 0x01
    492c:	a2 83       	std	Z+2, r26	; 0x02
    492e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4930:	fe 01       	movw	r30, r28
    4932:	ff 96       	adiw	r30, 0x3f	; 63
    4934:	60 81       	ld	r22, Z
    4936:	71 81       	ldd	r23, Z+1	; 0x01
    4938:	82 81       	ldd	r24, Z+2	; 0x02
    493a:	93 81       	ldd	r25, Z+3	; 0x03
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	40 e8       	ldi	r20, 0x80	; 128
    4942:	5f e3       	ldi	r21, 0x3F	; 63
    4944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4948:	88 23       	and	r24, r24
    494a:	2c f4       	brge	.+10     	; 0x4956 <main+0x208>
		__ticks = 1;
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	9e af       	std	Y+62, r25	; 0x3e
    4952:	8d af       	std	Y+61, r24	; 0x3d
    4954:	46 c0       	rjmp	.+140    	; 0x49e2 <main+0x294>
	else if (__tmp > 65535)
    4956:	fe 01       	movw	r30, r28
    4958:	ff 96       	adiw	r30, 0x3f	; 63
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	3f ef       	ldi	r19, 0xFF	; 255
    4966:	4f e7       	ldi	r20, 0x7F	; 127
    4968:	57 e4       	ldi	r21, 0x47	; 71
    496a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    496e:	18 16       	cp	r1, r24
    4970:	64 f5       	brge	.+88     	; 0x49ca <main+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4972:	fe 01       	movw	r30, r28
    4974:	ed 5b       	subi	r30, 0xBD	; 189
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	60 81       	ld	r22, Z
    497a:	71 81       	ldd	r23, Z+1	; 0x01
    497c:	82 81       	ldd	r24, Z+2	; 0x02
    497e:	93 81       	ldd	r25, Z+3	; 0x03
    4980:	20 e0       	ldi	r18, 0x00	; 0
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	40 e2       	ldi	r20, 0x20	; 32
    4986:	51 e4       	ldi	r21, 0x41	; 65
    4988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	bc 01       	movw	r22, r24
    4992:	cd 01       	movw	r24, r26
    4994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	9e af       	std	Y+62, r25	; 0x3e
    499e:	8d af       	std	Y+61, r24	; 0x3d
    49a0:	0f c0       	rjmp	.+30     	; 0x49c0 <main+0x272>
    49a2:	88 ec       	ldi	r24, 0xC8	; 200
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	9c af       	std	Y+60, r25	; 0x3c
    49a8:	8b af       	std	Y+59, r24	; 0x3b
    49aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    49ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	f1 f7       	brne	.-4      	; 0x49ae <main+0x260>
    49b2:	9c af       	std	Y+60, r25	; 0x3c
    49b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    49b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    49ba:	01 97       	sbiw	r24, 0x01	; 1
    49bc:	9e af       	std	Y+62, r25	; 0x3e
    49be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    49c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    49c4:	00 97       	sbiw	r24, 0x00	; 0
    49c6:	69 f7       	brne	.-38     	; 0x49a2 <main+0x254>
    49c8:	16 c0       	rjmp	.+44     	; 0x49f6 <main+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ca:	fe 01       	movw	r30, r28
    49cc:	ff 96       	adiw	r30, 0x3f	; 63
    49ce:	60 81       	ld	r22, Z
    49d0:	71 81       	ldd	r23, Z+1	; 0x01
    49d2:	82 81       	ldd	r24, Z+2	; 0x02
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49da:	dc 01       	movw	r26, r24
    49dc:	cb 01       	movw	r24, r22
    49de:	9e af       	std	Y+62, r25	; 0x3e
    49e0:	8d af       	std	Y+61, r24	; 0x3d
    49e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    49e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    49e6:	9a af       	std	Y+58, r25	; 0x3a
    49e8:	89 af       	std	Y+57, r24	; 0x39
    49ea:	89 ad       	ldd	r24, Y+57	; 0x39
    49ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    49ee:	01 97       	sbiw	r24, 0x01	; 1
    49f0:	f1 f7       	brne	.-4      	; 0x49ee <main+0x2a0>
    49f2:	9a af       	std	Y+58, r25	; 0x3a
    49f4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    49f6:	0e 94 c4 20 	call	0x4188	; 0x4188 <HCLCD_Vid4Bits_ClearScreen>

	//Init EEPROM
	HEEPROM_VidInit();
    49fa:	0e 94 7d 13 	call	0x26fa	; 0x26fa <HEEPROM_VidInit>
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	aa e7       	ldi	r26, 0x7A	; 122
    4a04:	b4 e4       	ldi	r27, 0x44	; 68
    4a06:	8d ab       	std	Y+53, r24	; 0x35
    4a08:	9e ab       	std	Y+54, r25	; 0x36
    4a0a:	af ab       	std	Y+55, r26	; 0x37
    4a0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a0e:	6d a9       	ldd	r22, Y+53	; 0x35
    4a10:	7e a9       	ldd	r23, Y+54	; 0x36
    4a12:	8f a9       	ldd	r24, Y+55	; 0x37
    4a14:	98 ad       	ldd	r25, Y+56	; 0x38
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	4a ef       	ldi	r20, 0xFA	; 250
    4a1c:	54 e4       	ldi	r21, 0x44	; 68
    4a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a22:	dc 01       	movw	r26, r24
    4a24:	cb 01       	movw	r24, r22
    4a26:	89 ab       	std	Y+49, r24	; 0x31
    4a28:	9a ab       	std	Y+50, r25	; 0x32
    4a2a:	ab ab       	std	Y+51, r26	; 0x33
    4a2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    4a30:	7a a9       	ldd	r23, Y+50	; 0x32
    4a32:	8b a9       	ldd	r24, Y+51	; 0x33
    4a34:	9c a9       	ldd	r25, Y+52	; 0x34
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	40 e8       	ldi	r20, 0x80	; 128
    4a3c:	5f e3       	ldi	r21, 0x3F	; 63
    4a3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a42:	88 23       	and	r24, r24
    4a44:	2c f4       	brge	.+10     	; 0x4a50 <main+0x302>
		__ticks = 1;
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	98 ab       	std	Y+48, r25	; 0x30
    4a4c:	8f a7       	std	Y+47, r24	; 0x2f
    4a4e:	3f c0       	rjmp	.+126    	; 0x4ace <main+0x380>
	else if (__tmp > 65535)
    4a50:	69 a9       	ldd	r22, Y+49	; 0x31
    4a52:	7a a9       	ldd	r23, Y+50	; 0x32
    4a54:	8b a9       	ldd	r24, Y+51	; 0x33
    4a56:	9c a9       	ldd	r25, Y+52	; 0x34
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	3f ef       	ldi	r19, 0xFF	; 255
    4a5c:	4f e7       	ldi	r20, 0x7F	; 127
    4a5e:	57 e4       	ldi	r21, 0x47	; 71
    4a60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a64:	18 16       	cp	r1, r24
    4a66:	4c f5       	brge	.+82     	; 0x4aba <main+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a68:	6d a9       	ldd	r22, Y+53	; 0x35
    4a6a:	7e a9       	ldd	r23, Y+54	; 0x36
    4a6c:	8f a9       	ldd	r24, Y+55	; 0x37
    4a6e:	98 ad       	ldd	r25, Y+56	; 0x38
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e2       	ldi	r20, 0x20	; 32
    4a76:	51 e4       	ldi	r21, 0x41	; 65
    4a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	bc 01       	movw	r22, r24
    4a82:	cd 01       	movw	r24, r26
    4a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	98 ab       	std	Y+48, r25	; 0x30
    4a8e:	8f a7       	std	Y+47, r24	; 0x2f
    4a90:	0f c0       	rjmp	.+30     	; 0x4ab0 <main+0x362>
    4a92:	88 ec       	ldi	r24, 0xC8	; 200
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	9e a7       	std	Y+46, r25	; 0x2e
    4a98:	8d a7       	std	Y+45, r24	; 0x2d
    4a9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4a9e:	01 97       	sbiw	r24, 0x01	; 1
    4aa0:	f1 f7       	brne	.-4      	; 0x4a9e <main+0x350>
    4aa2:	9e a7       	std	Y+46, r25	; 0x2e
    4aa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    4aaa:	01 97       	sbiw	r24, 0x01	; 1
    4aac:	98 ab       	std	Y+48, r25	; 0x30
    4aae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    4ab4:	00 97       	sbiw	r24, 0x00	; 0
    4ab6:	69 f7       	brne	.-38     	; 0x4a92 <main+0x344>
    4ab8:	14 c0       	rjmp	.+40     	; 0x4ae2 <main+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aba:	69 a9       	ldd	r22, Y+49	; 0x31
    4abc:	7a a9       	ldd	r23, Y+50	; 0x32
    4abe:	8b a9       	ldd	r24, Y+51	; 0x33
    4ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    4ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	cb 01       	movw	r24, r22
    4aca:	98 ab       	std	Y+48, r25	; 0x30
    4acc:	8f a7       	std	Y+47, r24	; 0x2f
    4ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    4ad2:	9c a7       	std	Y+44, r25	; 0x2c
    4ad4:	8b a7       	std	Y+43, r24	; 0x2b
    4ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	f1 f7       	brne	.-4      	; 0x4ada <main+0x38c>
    4ade:	9c a7       	std	Y+44, r25	; 0x2c
    4ae0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);

	HEEPROM_Write_Byte(0x0311,0x0F);    /* Write 0x01 in the external EEPROM*/
    4ae2:	81 e1       	ldi	r24, 0x11	; 17
    4ae4:	93 e0       	ldi	r25, 0x03	; 3
    4ae6:	6f e0       	ldi	r22, 0x0F	; 15
    4ae8:	0e 94 98 13 	call	0x2730	; 0x2730 <HEEPROM_Write_Byte>
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	aa e7       	ldi	r26, 0x7A	; 122
    4af2:	b4 e4       	ldi	r27, 0x44	; 68
    4af4:	8f a3       	std	Y+39, r24	; 0x27
    4af6:	98 a7       	std	Y+40, r25	; 0x28
    4af8:	a9 a7       	std	Y+41, r26	; 0x29
    4afa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4afc:	6f a1       	ldd	r22, Y+39	; 0x27
    4afe:	78 a5       	ldd	r23, Y+40	; 0x28
    4b00:	89 a5       	ldd	r24, Y+41	; 0x29
    4b02:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b04:	20 e0       	ldi	r18, 0x00	; 0
    4b06:	30 e0       	ldi	r19, 0x00	; 0
    4b08:	4a ef       	ldi	r20, 0xFA	; 250
    4b0a:	54 e4       	ldi	r21, 0x44	; 68
    4b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b10:	dc 01       	movw	r26, r24
    4b12:	cb 01       	movw	r24, r22
    4b14:	8b a3       	std	Y+35, r24	; 0x23
    4b16:	9c a3       	std	Y+36, r25	; 0x24
    4b18:	ad a3       	std	Y+37, r26	; 0x25
    4b1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    4b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    4b20:	8d a1       	ldd	r24, Y+37	; 0x25
    4b22:	9e a1       	ldd	r25, Y+38	; 0x26
    4b24:	20 e0       	ldi	r18, 0x00	; 0
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	40 e8       	ldi	r20, 0x80	; 128
    4b2a:	5f e3       	ldi	r21, 0x3F	; 63
    4b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b30:	88 23       	and	r24, r24
    4b32:	2c f4       	brge	.+10     	; 0x4b3e <main+0x3f0>
		__ticks = 1;
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	9a a3       	std	Y+34, r25	; 0x22
    4b3a:	89 a3       	std	Y+33, r24	; 0x21
    4b3c:	3f c0       	rjmp	.+126    	; 0x4bbc <main+0x46e>
	else if (__tmp > 65535)
    4b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    4b40:	7c a1       	ldd	r23, Y+36	; 0x24
    4b42:	8d a1       	ldd	r24, Y+37	; 0x25
    4b44:	9e a1       	ldd	r25, Y+38	; 0x26
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	3f ef       	ldi	r19, 0xFF	; 255
    4b4a:	4f e7       	ldi	r20, 0x7F	; 127
    4b4c:	57 e4       	ldi	r21, 0x47	; 71
    4b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b52:	18 16       	cp	r1, r24
    4b54:	4c f5       	brge	.+82     	; 0x4ba8 <main+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b56:	6f a1       	ldd	r22, Y+39	; 0x27
    4b58:	78 a5       	ldd	r23, Y+40	; 0x28
    4b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    4b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	30 e0       	ldi	r19, 0x00	; 0
    4b62:	40 e2       	ldi	r20, 0x20	; 32
    4b64:	51 e4       	ldi	r21, 0x41	; 65
    4b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	bc 01       	movw	r22, r24
    4b70:	cd 01       	movw	r24, r26
    4b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b76:	dc 01       	movw	r26, r24
    4b78:	cb 01       	movw	r24, r22
    4b7a:	9a a3       	std	Y+34, r25	; 0x22
    4b7c:	89 a3       	std	Y+33, r24	; 0x21
    4b7e:	0f c0       	rjmp	.+30     	; 0x4b9e <main+0x450>
    4b80:	88 ec       	ldi	r24, 0xC8	; 200
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	98 a3       	std	Y+32, r25	; 0x20
    4b86:	8f 8f       	std	Y+31, r24	; 0x1f
    4b88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b8a:	98 a1       	ldd	r25, Y+32	; 0x20
    4b8c:	01 97       	sbiw	r24, 0x01	; 1
    4b8e:	f1 f7       	brne	.-4      	; 0x4b8c <main+0x43e>
    4b90:	98 a3       	std	Y+32, r25	; 0x20
    4b92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b94:	89 a1       	ldd	r24, Y+33	; 0x21
    4b96:	9a a1       	ldd	r25, Y+34	; 0x22
    4b98:	01 97       	sbiw	r24, 0x01	; 1
    4b9a:	9a a3       	std	Y+34, r25	; 0x22
    4b9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    4ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    4ba2:	00 97       	sbiw	r24, 0x00	; 0
    4ba4:	69 f7       	brne	.-38     	; 0x4b80 <main+0x432>
    4ba6:	14 c0       	rjmp	.+40     	; 0x4bd0 <main+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    4baa:	7c a1       	ldd	r23, Y+36	; 0x24
    4bac:	8d a1       	ldd	r24, Y+37	; 0x25
    4bae:	9e a1       	ldd	r25, Y+38	; 0x26
    4bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	9a a3       	std	Y+34, r25	; 0x22
    4bba:	89 a3       	std	Y+33, r24	; 0x21
    4bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    4bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    4bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    4bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    4bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bc8:	01 97       	sbiw	r24, 0x01	; 1
    4bca:	f1 f7       	brne	.-4      	; 0x4bc8 <main+0x47a>
    4bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    4bce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	HEEPROM_Read_Byte(0x0311,&Local_u8ReceiveData);  /* Read 0x01 from the external EEPROM*/
    4bd0:	9e 01       	movw	r18, r28
    4bd2:	2b 5a       	subi	r18, 0xAB	; 171
    4bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd6:	81 e1       	ldi	r24, 0x11	; 17
    4bd8:	93 e0       	ldi	r25, 0x03	; 3
    4bda:	b9 01       	movw	r22, r18
    4bdc:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <HEEPROM_Read_Byte>
	while(1)
	{
		/*EEPROM Send Byte*/
		HEEPROM_Write_Byte(0x0311,0x0F);
    4be0:	81 e1       	ldi	r24, 0x11	; 17
    4be2:	93 e0       	ldi	r25, 0x03	; 3
    4be4:	6f e0       	ldi	r22, 0x0F	; 15
    4be6:	0e 94 98 13 	call	0x2730	; 0x2730 <HEEPROM_Write_Byte>
    4bea:	80 e0       	ldi	r24, 0x00	; 0
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	aa ef       	ldi	r26, 0xFA	; 250
    4bf0:	b4 e4       	ldi	r27, 0x44	; 68
    4bf2:	89 8f       	std	Y+25, r24	; 0x19
    4bf4:	9a 8f       	std	Y+26, r25	; 0x1a
    4bf6:	ab 8f       	std	Y+27, r26	; 0x1b
    4bf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    4bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c02:	20 e0       	ldi	r18, 0x00	; 0
    4c04:	30 e0       	ldi	r19, 0x00	; 0
    4c06:	4a ef       	ldi	r20, 0xFA	; 250
    4c08:	54 e4       	ldi	r21, 0x44	; 68
    4c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c0e:	dc 01       	movw	r26, r24
    4c10:	cb 01       	movw	r24, r22
    4c12:	8d 8b       	std	Y+21, r24	; 0x15
    4c14:	9e 8b       	std	Y+22, r25	; 0x16
    4c16:	af 8b       	std	Y+23, r26	; 0x17
    4c18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    4c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    4c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c20:	98 8d       	ldd	r25, Y+24	; 0x18
    4c22:	20 e0       	ldi	r18, 0x00	; 0
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	40 e8       	ldi	r20, 0x80	; 128
    4c28:	5f e3       	ldi	r21, 0x3F	; 63
    4c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c2e:	88 23       	and	r24, r24
    4c30:	2c f4       	brge	.+10     	; 0x4c3c <main+0x4ee>
		__ticks = 1;
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	9c 8b       	std	Y+20, r25	; 0x14
    4c38:	8b 8b       	std	Y+19, r24	; 0x13
    4c3a:	3f c0       	rjmp	.+126    	; 0x4cba <main+0x56c>
	else if (__tmp > 65535)
    4c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    4c40:	8f 89       	ldd	r24, Y+23	; 0x17
    4c42:	98 8d       	ldd	r25, Y+24	; 0x18
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	3f ef       	ldi	r19, 0xFF	; 255
    4c48:	4f e7       	ldi	r20, 0x7F	; 127
    4c4a:	57 e4       	ldi	r21, 0x47	; 71
    4c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c50:	18 16       	cp	r1, r24
    4c52:	4c f5       	brge	.+82     	; 0x4ca6 <main+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c54:	69 8d       	ldd	r22, Y+25	; 0x19
    4c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e2       	ldi	r20, 0x20	; 32
    4c62:	51 e4       	ldi	r21, 0x41	; 65
    4c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	bc 01       	movw	r22, r24
    4c6e:	cd 01       	movw	r24, r26
    4c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c74:	dc 01       	movw	r26, r24
    4c76:	cb 01       	movw	r24, r22
    4c78:	9c 8b       	std	Y+20, r25	; 0x14
    4c7a:	8b 8b       	std	Y+19, r24	; 0x13
    4c7c:	0f c0       	rjmp	.+30     	; 0x4c9c <main+0x54e>
    4c7e:	88 ec       	ldi	r24, 0xC8	; 200
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	9a 8b       	std	Y+18, r25	; 0x12
    4c84:	89 8b       	std	Y+17, r24	; 0x11
    4c86:	89 89       	ldd	r24, Y+17	; 0x11
    4c88:	9a 89       	ldd	r25, Y+18	; 0x12
    4c8a:	01 97       	sbiw	r24, 0x01	; 1
    4c8c:	f1 f7       	brne	.-4      	; 0x4c8a <main+0x53c>
    4c8e:	9a 8b       	std	Y+18, r25	; 0x12
    4c90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c92:	8b 89       	ldd	r24, Y+19	; 0x13
    4c94:	9c 89       	ldd	r25, Y+20	; 0x14
    4c96:	01 97       	sbiw	r24, 0x01	; 1
    4c98:	9c 8b       	std	Y+20, r25	; 0x14
    4c9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    4ca0:	00 97       	sbiw	r24, 0x00	; 0
    4ca2:	69 f7       	brne	.-38     	; 0x4c7e <main+0x530>
    4ca4:	14 c0       	rjmp	.+40     	; 0x4cce <main+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    4caa:	8f 89       	ldd	r24, Y+23	; 0x17
    4cac:	98 8d       	ldd	r25, Y+24	; 0x18
    4cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	cb 01       	movw	r24, r22
    4cb6:	9c 8b       	std	Y+20, r25	; 0x14
    4cb8:	8b 8b       	std	Y+19, r24	; 0x13
    4cba:	8b 89       	ldd	r24, Y+19	; 0x13
    4cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    4cbe:	98 8b       	std	Y+16, r25	; 0x10
    4cc0:	8f 87       	std	Y+15, r24	; 0x0f
    4cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cc4:	98 89       	ldd	r25, Y+16	; 0x10
    4cc6:	01 97       	sbiw	r24, 0x01	; 1
    4cc8:	f1 f7       	brne	.-4      	; 0x4cc6 <main+0x578>
    4cca:	98 8b       	std	Y+16, r25	; 0x10
    4ccc:	8f 87       	std	Y+15, r24	; 0x0f
		/*Get Data From Memory*/
		_delay_ms(2000);
		HEEPROM_Read_Byte(0x0311,&Local_u8ReceiveData);
    4cce:	9e 01       	movw	r18, r28
    4cd0:	2b 5a       	subi	r18, 0xAB	; 171
    4cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cd4:	81 e1       	ldi	r24, 0x11	; 17
    4cd6:	93 e0       	ldi	r25, 0x03	; 3
    4cd8:	b9 01       	movw	r22, r18
    4cda:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <HEEPROM_Read_Byte>
		MDIO_Error_State_SetPortValue(MDIO_PORTD,Local_u8ReceiveData);
    4cde:	fe 01       	movw	r30, r28
    4ce0:	eb 5a       	subi	r30, 0xAB	; 171
    4ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce4:	90 81       	ld	r25, Z
    4ce6:	83 e0       	ldi	r24, 0x03	; 3
    4ce8:	69 2f       	mov	r22, r25
    4cea:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
		HCLCD_Vid4Bits_ClearScreen();
    4cee:	0e 94 c4 20 	call	0x4188	; 0x4188 <HCLCD_Vid4Bits_ClearScreen>
		HCLCD_Vid4Bits_DisplayString("1st Four LEDs ON");
    4cf2:	8b e6       	ldi	r24, 0x6B	; 107
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <HCLCD_Vid4Bits_DisplayString>
		/*EEPROM Send Byte*/
		HEEPROM_Write_Byte(0x0311,0xF0);
    4cfa:	81 e1       	ldi	r24, 0x11	; 17
    4cfc:	93 e0       	ldi	r25, 0x03	; 3
    4cfe:	60 ef       	ldi	r22, 0xF0	; 240
    4d00:	0e 94 98 13 	call	0x2730	; 0x2730 <HEEPROM_Write_Byte>
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	aa ef       	ldi	r26, 0xFA	; 250
    4d0a:	b4 e4       	ldi	r27, 0x44	; 68
    4d0c:	8b 87       	std	Y+11, r24	; 0x0b
    4d0e:	9c 87       	std	Y+12, r25	; 0x0c
    4d10:	ad 87       	std	Y+13, r26	; 0x0d
    4d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	4a ef       	ldi	r20, 0xFA	; 250
    4d22:	54 e4       	ldi	r21, 0x44	; 68
    4d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	8f 83       	std	Y+7, r24	; 0x07
    4d2e:	98 87       	std	Y+8, r25	; 0x08
    4d30:	a9 87       	std	Y+9, r26	; 0x09
    4d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d34:	6f 81       	ldd	r22, Y+7	; 0x07
    4d36:	78 85       	ldd	r23, Y+8	; 0x08
    4d38:	89 85       	ldd	r24, Y+9	; 0x09
    4d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	40 e8       	ldi	r20, 0x80	; 128
    4d42:	5f e3       	ldi	r21, 0x3F	; 63
    4d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d48:	88 23       	and	r24, r24
    4d4a:	2c f4       	brge	.+10     	; 0x4d56 <main+0x608>
		__ticks = 1;
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	9e 83       	std	Y+6, r25	; 0x06
    4d52:	8d 83       	std	Y+5, r24	; 0x05
    4d54:	3f c0       	rjmp	.+126    	; 0x4dd4 <main+0x686>
	else if (__tmp > 65535)
    4d56:	6f 81       	ldd	r22, Y+7	; 0x07
    4d58:	78 85       	ldd	r23, Y+8	; 0x08
    4d5a:	89 85       	ldd	r24, Y+9	; 0x09
    4d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	3f ef       	ldi	r19, 0xFF	; 255
    4d62:	4f e7       	ldi	r20, 0x7F	; 127
    4d64:	57 e4       	ldi	r21, 0x47	; 71
    4d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d6a:	18 16       	cp	r1, r24
    4d6c:	4c f5       	brge	.+82     	; 0x4dc0 <main+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	40 e2       	ldi	r20, 0x20	; 32
    4d7c:	51 e4       	ldi	r21, 0x41	; 65
    4d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d82:	dc 01       	movw	r26, r24
    4d84:	cb 01       	movw	r24, r22
    4d86:	bc 01       	movw	r22, r24
    4d88:	cd 01       	movw	r24, r26
    4d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	9e 83       	std	Y+6, r25	; 0x06
    4d94:	8d 83       	std	Y+5, r24	; 0x05
    4d96:	0f c0       	rjmp	.+30     	; 0x4db6 <main+0x668>
    4d98:	88 ec       	ldi	r24, 0xC8	; 200
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	9c 83       	std	Y+4, r25	; 0x04
    4d9e:	8b 83       	std	Y+3, r24	; 0x03
    4da0:	8b 81       	ldd	r24, Y+3	; 0x03
    4da2:	9c 81       	ldd	r25, Y+4	; 0x04
    4da4:	01 97       	sbiw	r24, 0x01	; 1
    4da6:	f1 f7       	brne	.-4      	; 0x4da4 <main+0x656>
    4da8:	9c 83       	std	Y+4, r25	; 0x04
    4daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dac:	8d 81       	ldd	r24, Y+5	; 0x05
    4dae:	9e 81       	ldd	r25, Y+6	; 0x06
    4db0:	01 97       	sbiw	r24, 0x01	; 1
    4db2:	9e 83       	std	Y+6, r25	; 0x06
    4db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4db6:	8d 81       	ldd	r24, Y+5	; 0x05
    4db8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dba:	00 97       	sbiw	r24, 0x00	; 0
    4dbc:	69 f7       	brne	.-38     	; 0x4d98 <main+0x64a>
    4dbe:	14 c0       	rjmp	.+40     	; 0x4de8 <main+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    4dc2:	78 85       	ldd	r23, Y+8	; 0x08
    4dc4:	89 85       	ldd	r24, Y+9	; 0x09
    4dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dcc:	dc 01       	movw	r26, r24
    4dce:	cb 01       	movw	r24, r22
    4dd0:	9e 83       	std	Y+6, r25	; 0x06
    4dd2:	8d 83       	std	Y+5, r24	; 0x05
    4dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd8:	9a 83       	std	Y+2, r25	; 0x02
    4dda:	89 83       	std	Y+1, r24	; 0x01
    4ddc:	89 81       	ldd	r24, Y+1	; 0x01
    4dde:	9a 81       	ldd	r25, Y+2	; 0x02
    4de0:	01 97       	sbiw	r24, 0x01	; 1
    4de2:	f1 f7       	brne	.-4      	; 0x4de0 <main+0x692>
    4de4:	9a 83       	std	Y+2, r25	; 0x02
    4de6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		/*Get Data From Memory*/
		HEEPROM_Read_Byte(0x0311,&Local_u8ReceiveData);
    4de8:	9e 01       	movw	r18, r28
    4dea:	2b 5a       	subi	r18, 0xAB	; 171
    4dec:	3f 4f       	sbci	r19, 0xFF	; 255
    4dee:	81 e1       	ldi	r24, 0x11	; 17
    4df0:	93 e0       	ldi	r25, 0x03	; 3
    4df2:	b9 01       	movw	r22, r18
    4df4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <HEEPROM_Read_Byte>
		MDIO_Error_State_SetPortValue(MDIO_PORTD,Local_u8ReceiveData);
    4df8:	fe 01       	movw	r30, r28
    4dfa:	eb 5a       	subi	r30, 0xAB	; 171
    4dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfe:	90 81       	ld	r25, Z
    4e00:	83 e0       	ldi	r24, 0x03	; 3
    4e02:	69 2f       	mov	r22, r25
    4e04:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <MDIO_Error_State_SetPortValue>
		HCLCD_Vid4Bits_ClearScreen();
    4e08:	0e 94 c4 20 	call	0x4188	; 0x4188 <HCLCD_Vid4Bits_ClearScreen>
		HCLCD_Vid4Bits_DisplayString("2nd Four LEDs ON");
    4e0c:	8c e7       	ldi	r24, 0x7C	; 124
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <HCLCD_Vid4Bits_DisplayString>
    4e14:	e5 ce       	rjmp	.-566    	; 0x4be0 <main+0x492>

00004e16 <__udivmodsi4>:
    4e16:	a1 e2       	ldi	r26, 0x21	; 33
    4e18:	1a 2e       	mov	r1, r26
    4e1a:	aa 1b       	sub	r26, r26
    4e1c:	bb 1b       	sub	r27, r27
    4e1e:	fd 01       	movw	r30, r26
    4e20:	0d c0       	rjmp	.+26     	; 0x4e3c <__udivmodsi4_ep>

00004e22 <__udivmodsi4_loop>:
    4e22:	aa 1f       	adc	r26, r26
    4e24:	bb 1f       	adc	r27, r27
    4e26:	ee 1f       	adc	r30, r30
    4e28:	ff 1f       	adc	r31, r31
    4e2a:	a2 17       	cp	r26, r18
    4e2c:	b3 07       	cpc	r27, r19
    4e2e:	e4 07       	cpc	r30, r20
    4e30:	f5 07       	cpc	r31, r21
    4e32:	20 f0       	brcs	.+8      	; 0x4e3c <__udivmodsi4_ep>
    4e34:	a2 1b       	sub	r26, r18
    4e36:	b3 0b       	sbc	r27, r19
    4e38:	e4 0b       	sbc	r30, r20
    4e3a:	f5 0b       	sbc	r31, r21

00004e3c <__udivmodsi4_ep>:
    4e3c:	66 1f       	adc	r22, r22
    4e3e:	77 1f       	adc	r23, r23
    4e40:	88 1f       	adc	r24, r24
    4e42:	99 1f       	adc	r25, r25
    4e44:	1a 94       	dec	r1
    4e46:	69 f7       	brne	.-38     	; 0x4e22 <__udivmodsi4_loop>
    4e48:	60 95       	com	r22
    4e4a:	70 95       	com	r23
    4e4c:	80 95       	com	r24
    4e4e:	90 95       	com	r25
    4e50:	9b 01       	movw	r18, r22
    4e52:	ac 01       	movw	r20, r24
    4e54:	bd 01       	movw	r22, r26
    4e56:	cf 01       	movw	r24, r30
    4e58:	08 95       	ret

00004e5a <__prologue_saves__>:
    4e5a:	2f 92       	push	r2
    4e5c:	3f 92       	push	r3
    4e5e:	4f 92       	push	r4
    4e60:	5f 92       	push	r5
    4e62:	6f 92       	push	r6
    4e64:	7f 92       	push	r7
    4e66:	8f 92       	push	r8
    4e68:	9f 92       	push	r9
    4e6a:	af 92       	push	r10
    4e6c:	bf 92       	push	r11
    4e6e:	cf 92       	push	r12
    4e70:	df 92       	push	r13
    4e72:	ef 92       	push	r14
    4e74:	ff 92       	push	r15
    4e76:	0f 93       	push	r16
    4e78:	1f 93       	push	r17
    4e7a:	cf 93       	push	r28
    4e7c:	df 93       	push	r29
    4e7e:	cd b7       	in	r28, 0x3d	; 61
    4e80:	de b7       	in	r29, 0x3e	; 62
    4e82:	ca 1b       	sub	r28, r26
    4e84:	db 0b       	sbc	r29, r27
    4e86:	0f b6       	in	r0, 0x3f	; 63
    4e88:	f8 94       	cli
    4e8a:	de bf       	out	0x3e, r29	; 62
    4e8c:	0f be       	out	0x3f, r0	; 63
    4e8e:	cd bf       	out	0x3d, r28	; 61
    4e90:	09 94       	ijmp

00004e92 <__epilogue_restores__>:
    4e92:	2a 88       	ldd	r2, Y+18	; 0x12
    4e94:	39 88       	ldd	r3, Y+17	; 0x11
    4e96:	48 88       	ldd	r4, Y+16	; 0x10
    4e98:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ea0:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ea2:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ea4:	b9 84       	ldd	r11, Y+9	; 0x09
    4ea6:	c8 84       	ldd	r12, Y+8	; 0x08
    4ea8:	df 80       	ldd	r13, Y+7	; 0x07
    4eaa:	ee 80       	ldd	r14, Y+6	; 0x06
    4eac:	fd 80       	ldd	r15, Y+5	; 0x05
    4eae:	0c 81       	ldd	r16, Y+4	; 0x04
    4eb0:	1b 81       	ldd	r17, Y+3	; 0x03
    4eb2:	aa 81       	ldd	r26, Y+2	; 0x02
    4eb4:	b9 81       	ldd	r27, Y+1	; 0x01
    4eb6:	ce 0f       	add	r28, r30
    4eb8:	d1 1d       	adc	r29, r1
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	f8 94       	cli
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	cd bf       	out	0x3d, r28	; 61
    4ec4:	ed 01       	movw	r28, r26
    4ec6:	08 95       	ret

00004ec8 <_exit>:
    4ec8:	f8 94       	cli

00004eca <__stop_program>:
    4eca:	ff cf       	rjmp	.-2      	; 0x4eca <__stop_program>
