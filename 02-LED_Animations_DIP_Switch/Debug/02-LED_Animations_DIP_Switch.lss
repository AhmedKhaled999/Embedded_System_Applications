
02-LED_Animations_DIP_Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00003318  000033ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800088  00800088  000033d4  2**0
                  ALLOC
  3 .stab         00002a6c  00000000  00000000  000033d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000130a  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000714a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000728a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009043  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000acdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b897  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 0c 	call	0x1808	; 0x1808 <main>
      8a:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <MDIO_Error_State_SetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <MDIO_Error_State_SetPinDirection+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <MDIO_Error_State_SetPinDirection+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
     b58:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	88 30       	cpi	r24, 0x08	; 8
     b62:	08 f0       	brcs	.+2      	; 0xb66 <MDIO_Error_State_SetPinDirection+0x20>
     b64:	e8 c0       	rjmp	.+464    	; 0xd36 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	3e 83       	std	Y+6, r19	; 0x06
     b6e:	2d 83       	std	Y+5, r18	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 05       	cpc	r25, r1
     b78:	09 f4       	brne	.+2      	; 0xb7c <MDIO_Error_State_SetPinDirection+0x36>
     b7a:	48 c0       	rjmp	.+144    	; 0xc0c <MDIO_Error_State_SetPinDirection+0xc6>
     b7c:	2d 81       	ldd	r18, Y+5	; 0x05
     b7e:	3e 81       	ldd	r19, Y+6	; 0x06
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <MDIO_Error_State_SetPinDirection+0x4a>
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	71 f0       	breq	.+28     	; 0xbaa <MDIO_Error_State_SetPinDirection+0x64>
     b8e:	d1 c0       	rjmp	.+418    	; 0xd32 <MDIO_Error_State_SetPinDirection+0x1ec>
     b90:	2d 81       	ldd	r18, Y+5	; 0x05
     b92:	3e 81       	ldd	r19, Y+6	; 0x06
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <MDIO_Error_State_SetPinDirection+0x56>
     b9a:	69 c0       	rjmp	.+210    	; 0xc6e <MDIO_Error_State_SetPinDirection+0x128>
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <MDIO_Error_State_SetPinDirection+0x62>
     ba6:	94 c0       	rjmp	.+296    	; 0xcd0 <MDIO_Error_State_SetPinDirection+0x18a>
     ba8:	c4 c0       	rjmp	.+392    	; 0xd32 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	a1 f4       	brne	.+40     	; 0xbd8 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e3       	ldi	r30, 0x3A	; 58
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <MDIO_Error_State_SetPinDirection+0x88>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <MDIO_Error_State_SetPinDirection+0x84>
     bd2:	84 2b       	or	r24, r20
     bd4:	8c 93       	st	X, r24
     bd6:	b0 c0       	rjmp	.+352    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	88 23       	and	r24, r24
     bdc:	a9 f4       	brne	.+42     	; 0xc08 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <MDIO_Error_State_SetPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <MDIO_Error_State_SetPinDirection+0xb2>
     c00:	80 95       	com	r24
     c02:	84 23       	and	r24, r20
     c04:	8c 93       	st	X, r24
     c06:	98 c0       	rjmp	.+304    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     c08:	19 82       	std	Y+1, r1	; 0x01
     c0a:	96 c0       	rjmp	.+300    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	a1 f4       	brne	.+40     	; 0xc3a <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
     c12:	a7 e3       	ldi	r26, 0x37	; 55
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e7 e3       	ldi	r30, 0x37	; 55
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <MDIO_Error_State_SetPinDirection+0xea>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <MDIO_Error_State_SetPinDirection+0xe6>
     c34:	84 2b       	or	r24, r20
     c36:	8c 93       	st	X, r24
     c38:	7f c0       	rjmp	.+254    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	88 23       	and	r24, r24
     c3e:	a9 f4       	brne	.+42     	; 0xc6a <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
     c40:	a7 e3       	ldi	r26, 0x37	; 55
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e7 e3       	ldi	r30, 0x37	; 55
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <MDIO_Error_State_SetPinDirection+0x118>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <MDIO_Error_State_SetPinDirection+0x114>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	67 c0       	rjmp	.+206    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	65 c0       	rjmp	.+202    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
     c74:	a4 e3       	ldi	r26, 0x34	; 52
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <MDIO_Error_State_SetPinDirection+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <MDIO_Error_State_SetPinDirection+0x148>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	4e c0       	rjmp	.+156    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	88 23       	and	r24, r24
     ca0:	a9 f4       	brne	.+42     	; 0xccc <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
     ca2:	a4 e3       	ldi	r26, 0x34	; 52
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <MDIO_Error_State_SetPinDirection+0x17a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <MDIO_Error_State_SetPinDirection+0x176>
     cc4:	80 95       	com	r24
     cc6:	84 23       	and	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	36 c0       	rjmp	.+108    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     ccc:	19 82       	std	Y+1, r1	; 0x01
     cce:	34 c0       	rjmp	.+104    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	a1 f4       	brne	.+40     	; 0xcfe <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <MDIO_Error_State_SetPinDirection+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <MDIO_Error_State_SetPinDirection+0x1aa>
     cf8:	84 2b       	or	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	1d c0       	rjmp	.+58     	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	88 23       	and	r24, r24
     d02:	a9 f4       	brne	.+42     	; 0xd2e <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
     d04:	a1 e3       	ldi	r26, 0x31	; 49
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e1 e3       	ldi	r30, 0x31	; 49
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <MDIO_Error_State_SetPinDirection+0x1dc>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <MDIO_Error_State_SetPinDirection+0x1d8>
     d26:	80 95       	com	r24
     d28:	84 23       	and	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     d2e:	19 82       	std	Y+1, r1	; 0x01
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
     d32:	19 82       	std	Y+1, r1	; 0x01
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
     d36:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
     d38:	89 81       	ldd	r24, Y+1	; 0x01

}
     d3a:	26 96       	adiw	r28, 0x06	; 6
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <MDIO_Error_State_SetPortDirection+0x6>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <MDIO_Error_State_SetPortDirection+0x8>
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	8f 3f       	cpi	r24, 0xFF	; 255
     d66:	19 f0       	breq	.+6      	; 0xd6e <MDIO_Error_State_SetPortDirection+0x22>
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	88 23       	and	r24, r24
     d6c:	a9 f5       	brne	.+106    	; 0xdd8 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	3d 83       	std	Y+5, r19	; 0x05
     d76:	2c 83       	std	Y+4, r18	; 0x04
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	91 05       	cpc	r25, r1
     d80:	d1 f0       	breq	.+52     	; 0xdb6 <MDIO_Error_State_SetPortDirection+0x6a>
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	2c f4       	brge	.+10     	; 0xd96 <MDIO_Error_State_SetPortDirection+0x4a>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	61 f0       	breq	.+24     	; 0xdac <MDIO_Error_State_SetPortDirection+0x60>
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <MDIO_Error_State_SetPortDirection+0x88>
     d96:	2c 81       	ldd	r18, Y+4	; 0x04
     d98:	3d 81       	ldd	r19, Y+5	; 0x05
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	81 f0       	breq	.+32     	; 0xdc0 <MDIO_Error_State_SetPortDirection+0x74>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	91 05       	cpc	r25, r1
     da8:	81 f0       	breq	.+32     	; 0xdca <MDIO_Error_State_SetPortDirection+0x7e>
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	80 83       	st	Z, r24
     db4:	12 c0       	rjmp	.+36     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
     db6:	e7 e3       	ldi	r30, 0x37	; 55
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	80 83       	st	Z, r24
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	80 83       	st	Z, r24
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
     dca:	e1 e3       	ldi	r30, 0x31	; 49
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 83       	st	Z, r24
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
     dd4:	19 82       	std	Y+1, r1	; 0x01
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <MDIO_Error_State_SetPinValue+0x6>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <MDIO_Error_State_SetPinValue+0x8>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <MDIO_Error_State_SetPinValue+0xa>
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	8a 83       	std	Y+2, r24	; 0x02
     dfc:	6b 83       	std	Y+3, r22	; 0x03
     dfe:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	08 f0       	brcs	.+2      	; 0xe0c <MDIO_Error_State_SetPinValue+0x20>
     e0a:	e8 c0       	rjmp	.+464    	; 0xfdc <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3e 83       	std	Y+6, r19	; 0x06
     e14:	2d 83       	std	Y+5, r18	; 0x05
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <MDIO_Error_State_SetPinValue+0x36>
     e20:	48 c0       	rjmp	.+144    	; 0xeb2 <MDIO_Error_State_SetPinValue+0xc6>
     e22:	2d 81       	ldd	r18, Y+5	; 0x05
     e24:	3e 81       	ldd	r19, Y+6	; 0x06
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	2c f4       	brge	.+10     	; 0xe36 <MDIO_Error_State_SetPinValue+0x4a>
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	71 f0       	breq	.+28     	; 0xe50 <MDIO_Error_State_SetPinValue+0x64>
     e34:	d1 c0       	rjmp	.+418    	; 0xfd8 <MDIO_Error_State_SetPinValue+0x1ec>
     e36:	2d 81       	ldd	r18, Y+5	; 0x05
     e38:	3e 81       	ldd	r19, Y+6	; 0x06
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <MDIO_Error_State_SetPinValue+0x56>
     e40:	69 c0       	rjmp	.+210    	; 0xf14 <MDIO_Error_State_SetPinValue+0x128>
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <MDIO_Error_State_SetPinValue+0x62>
     e4c:	94 c0       	rjmp	.+296    	; 0xf76 <MDIO_Error_State_SetPinValue+0x18a>
     e4e:	c4 c0       	rjmp	.+392    	; 0xfd8 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	a1 f4       	brne	.+40     	; 0xe7e <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <MDIO_Error_State_SetPinValue+0x88>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <MDIO_Error_State_SetPinValue+0x84>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	b0 c0       	rjmp	.+352    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	88 23       	and	r24, r24
     e82:	a9 f4       	brne	.+42     	; 0xeae <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
     e84:	ab e3       	ldi	r26, 0x3B	; 59
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <MDIO_Error_State_SetPinValue+0xb6>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <MDIO_Error_State_SetPinValue+0xb2>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	98 c0       	rjmp	.+304    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
     eae:	19 82       	std	Y+1, r1	; 0x01
     eb0:	96 c0       	rjmp	.+300    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	a1 f4       	brne	.+40     	; 0xee0 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <MDIO_Error_State_SetPinValue+0xea>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <MDIO_Error_State_SetPinValue+0xe6>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	7f c0       	rjmp	.+254    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	88 23       	and	r24, r24
     ee4:	a9 f4       	brne	.+42     	; 0xf10 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
     ee6:	a8 e3       	ldi	r26, 0x38	; 56
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e3       	ldi	r30, 0x38	; 56
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <MDIO_Error_State_SetPinValue+0x118>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <MDIO_Error_State_SetPinValue+0x114>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	67 c0       	rjmp	.+206    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
     f10:	19 82       	std	Y+1, r1	; 0x01
     f12:	65 c0       	rjmp	.+202    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	a1 f4       	brne	.+40     	; 0xf42 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
     f1a:	a5 e3       	ldi	r26, 0x35	; 53
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e5 e3       	ldi	r30, 0x35	; 53
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <MDIO_Error_State_SetPinValue+0x14c>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <MDIO_Error_State_SetPinValue+0x148>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	4e c0       	rjmp	.+156    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 23       	and	r24, r24
     f46:	a9 f4       	brne	.+42     	; 0xf72 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
     f48:	a5 e3       	ldi	r26, 0x35	; 53
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e5 e3       	ldi	r30, 0x35	; 53
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <MDIO_Error_State_SetPinValue+0x17a>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <MDIO_Error_State_SetPinValue+0x176>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	36 c0       	rjmp	.+108    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	34 c0       	rjmp	.+104    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	a1 f4       	brne	.+40     	; 0xfa4 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
     f7c:	a2 e3       	ldi	r26, 0x32	; 50
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e2 e3       	ldi	r30, 0x32	; 50
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <MDIO_Error_State_SetPinValue+0x1ae>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <MDIO_Error_State_SetPinValue+0x1aa>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	1d c0       	rjmp	.+58     	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	88 23       	and	r24, r24
     fa8:	a9 f4       	brne	.+42     	; 0xfd4 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
     faa:	a2 e3       	ldi	r26, 0x32	; 50
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e2 e3       	ldi	r30, 0x32	; 50
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <MDIO_Error_State_SetPinValue+0x1dc>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <MDIO_Error_State_SetPinValue+0x1d8>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	01 c0       	rjmp	.+2      	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
     fdc:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
     fde:	89 81       	ldd	r24, Y+1	; 0x01

}
     fe0:	26 96       	adiw	r28, 0x06	; 6
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <MDIO_Error_State_SetPortValue+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <MDIO_Error_State_SetPortValue+0x8>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3d 83       	std	Y+5, r19	; 0x05
    1010:	2c 83       	std	Y+4, r18	; 0x04
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	d1 f0       	breq	.+52     	; 0x1050 <MDIO_Error_State_SetPortValue+0x5e>
    101c:	2c 81       	ldd	r18, Y+4	; 0x04
    101e:	3d 81       	ldd	r19, Y+5	; 0x05
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	2c f4       	brge	.+10     	; 0x1030 <MDIO_Error_State_SetPortValue+0x3e>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	61 f0       	breq	.+24     	; 0x1046 <MDIO_Error_State_SetPortValue+0x54>
    102e:	1f c0       	rjmp	.+62     	; 0x106e <MDIO_Error_State_SetPortValue+0x7c>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	81 f0       	breq	.+32     	; 0x105a <MDIO_Error_State_SetPortValue+0x68>
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	91 05       	cpc	r25, r1
    1042:	81 f0       	breq	.+32     	; 0x1064 <MDIO_Error_State_SetPortValue+0x72>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1046:	eb e3       	ldi	r30, 0x3B	; 59
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	80 83       	st	Z, r24
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	80 83       	st	Z, r24
    1058:	0b c0       	rjmp	.+22     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    105a:	e5 e3       	ldi	r30, 0x35	; 53
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	80 83       	st	Z, r24
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1064:	e2 e3       	ldi	r30, 0x32	; 50
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	80 83       	st	Z, r24
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    106e:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	27 97       	sbiw	r28, 0x07	; 7
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	8a 83       	std	Y+2, r24	; 0x02
    1098:	6b 83       	std	Y+3, r22	; 0x03
    109a:	5d 83       	std	Y+5, r21	; 0x05
    109c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <MDIO_Error_State_GetPinValue+0x28>
    10a8:	79 c0       	rjmp	.+242    	; 0x119c <MDIO_Error_State_GetPinValue+0x11a>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <MDIO_Error_State_GetPinValue+0x34>
    10b4:	73 c0       	rjmp	.+230    	; 0x119c <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3f 83       	std	Y+7, r19	; 0x07
    10be:	2e 83       	std	Y+6, r18	; 0x06
    10c0:	4e 81       	ldd	r20, Y+6	; 0x06
    10c2:	5f 81       	ldd	r21, Y+7	; 0x07
    10c4:	41 30       	cpi	r20, 0x01	; 1
    10c6:	51 05       	cpc	r21, r1
    10c8:	59 f1       	breq	.+86     	; 0x1120 <MDIO_Error_State_GetPinValue+0x9e>
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	9f 81       	ldd	r25, Y+7	; 0x07
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	91 05       	cpc	r25, r1
    10d2:	34 f4       	brge	.+12     	; 0x10e0 <MDIO_Error_State_GetPinValue+0x5e>
    10d4:	2e 81       	ldd	r18, Y+6	; 0x06
    10d6:	3f 81       	ldd	r19, Y+7	; 0x07
    10d8:	21 15       	cp	r18, r1
    10da:	31 05       	cpc	r19, r1
    10dc:	69 f0       	breq	.+26     	; 0x10f8 <MDIO_Error_State_GetPinValue+0x76>
    10de:	5c c0       	rjmp	.+184    	; 0x1198 <MDIO_Error_State_GetPinValue+0x116>
    10e0:	4e 81       	ldd	r20, Y+6	; 0x06
    10e2:	5f 81       	ldd	r21, Y+7	; 0x07
    10e4:	42 30       	cpi	r20, 0x02	; 2
    10e6:	51 05       	cpc	r21, r1
    10e8:	79 f1       	breq	.+94     	; 0x1148 <MDIO_Error_State_GetPinValue+0xc6>
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	9f 81       	ldd	r25, Y+7	; 0x07
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <MDIO_Error_State_GetPinValue+0x74>
    10f4:	3d c0       	rjmp	.+122    	; 0x1170 <MDIO_Error_State_GetPinValue+0xee>
    10f6:	50 c0       	rjmp	.+160    	; 0x1198 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    10f8:	e9 e3       	ldi	r30, 0x39	; 57
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <MDIO_Error_State_GetPinValue+0x8e>
    110c:	55 95       	asr	r21
    110e:	47 95       	ror	r20
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <MDIO_Error_State_GetPinValue+0x8a>
    1114:	ca 01       	movw	r24, r20
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	ec 81       	ldd	r30, Y+4	; 0x04
    111a:	fd 81       	ldd	r31, Y+5	; 0x05
    111c:	80 83       	st	Z, r24
    111e:	3f c0       	rjmp	.+126    	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1120:	e6 e3       	ldi	r30, 0x36	; 54
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <MDIO_Error_State_GetPinValue+0xb6>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <MDIO_Error_State_GetPinValue+0xb2>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	ec 81       	ldd	r30, Y+4	; 0x04
    1142:	fd 81       	ldd	r31, Y+5	; 0x05
    1144:	80 83       	st	Z, r24
    1146:	2b c0       	rjmp	.+86     	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1148:	e3 e3       	ldi	r30, 0x33	; 51
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <MDIO_Error_State_GetPinValue+0xde>
    115c:	55 95       	asr	r21
    115e:	47 95       	ror	r20
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <MDIO_Error_State_GetPinValue+0xda>
    1164:	ca 01       	movw	r24, r20
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	ec 81       	ldd	r30, Y+4	; 0x04
    116a:	fd 81       	ldd	r31, Y+5	; 0x05
    116c:	80 83       	st	Z, r24
    116e:	17 c0       	rjmp	.+46     	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1170:	e0 e3       	ldi	r30, 0x30	; 48
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <MDIO_Error_State_GetPinValue+0x106>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <MDIO_Error_State_GetPinValue+0x102>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	ec 81       	ldd	r30, Y+4	; 0x04
    1192:	fd 81       	ldd	r31, Y+5	; 0x05
    1194:	80 83       	st	Z, r24
    1196:	03 c0       	rjmp	.+6      	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	01 c0       	rjmp	.+2      	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    119c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    119e:	89 81       	ldd	r24, Y+1	; 0x01

}
    11a0:	27 96       	adiw	r28, 0x07	; 7
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <MDIO_Error_State_SetNippleValue+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <MDIO_Error_State_SetNippleValue+0x8>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <MDIO_Error_State_SetNippleValue+0xa>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	8a 83       	std	Y+2, r24	; 0x02
    11c2:	6b 83       	std	Y+3, r22	; 0x03
    11c4:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	85 30       	cpi	r24, 0x05	; 5
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <MDIO_Error_State_SetNippleValue+0x20>
    11d0:	c9 c0       	rjmp	.+402    	; 0x1364 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3e 83       	std	Y+6, r19	; 0x06
    11da:	2d 83       	std	Y+5, r18	; 0x05
    11dc:	6d 81       	ldd	r22, Y+5	; 0x05
    11de:	7e 81       	ldd	r23, Y+6	; 0x06
    11e0:	61 30       	cpi	r22, 0x01	; 1
    11e2:	71 05       	cpc	r23, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <MDIO_Error_State_SetNippleValue+0x36>
    11e6:	41 c0       	rjmp	.+130    	; 0x126a <MDIO_Error_State_SetNippleValue+0xb8>
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	91 05       	cpc	r25, r1
    11f0:	34 f4       	brge	.+12     	; 0x11fe <MDIO_Error_State_SetNippleValue+0x4c>
    11f2:	2d 81       	ldd	r18, Y+5	; 0x05
    11f4:	3e 81       	ldd	r19, Y+6	; 0x06
    11f6:	21 15       	cp	r18, r1
    11f8:	31 05       	cpc	r19, r1
    11fa:	71 f0       	breq	.+28     	; 0x1218 <MDIO_Error_State_SetNippleValue+0x66>
    11fc:	b1 c0       	rjmp	.+354    	; 0x1360 <MDIO_Error_State_SetNippleValue+0x1ae>
    11fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1200:	7e 81       	ldd	r23, Y+6	; 0x06
    1202:	62 30       	cpi	r22, 0x02	; 2
    1204:	71 05       	cpc	r23, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <MDIO_Error_State_SetNippleValue+0x58>
    1208:	59 c0       	rjmp	.+178    	; 0x12bc <MDIO_Error_State_SetNippleValue+0x10a>
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	91 05       	cpc	r25, r1
    1212:	09 f4       	brne	.+2      	; 0x1216 <MDIO_Error_State_SetNippleValue+0x64>
    1214:	7c c0       	rjmp	.+248    	; 0x130e <MDIO_Error_State_SetNippleValue+0x15c>
    1216:	a4 c0       	rjmp	.+328    	; 0x1360 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8f e0       	ldi	r24, 0x0F	; 15
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <MDIO_Error_State_SetNippleValue+0x82>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	2a 95       	dec	r18
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <MDIO_Error_State_SetNippleValue+0x7e>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    123e:	ab e3       	ldi	r26, 0x3B	; 59
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	b9 01       	movw	r22, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <MDIO_Error_State_SetNippleValue+0xac>
    125a:	66 0f       	add	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	8a 95       	dec	r24
    1260:	e2 f7       	brpl	.-8      	; 0x125a <MDIO_Error_State_SetNippleValue+0xa8>
    1262:	cb 01       	movw	r24, r22
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	7e c0       	rjmp	.+252    	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    126a:	a8 e3       	ldi	r26, 0x38	; 56
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e8 e3       	ldi	r30, 0x38	; 56
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8f e0       	ldi	r24, 0x0F	; 15
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <MDIO_Error_State_SetNippleValue+0xd4>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	2a 95       	dec	r18
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <MDIO_Error_State_SetNippleValue+0xd0>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	b9 01       	movw	r22, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <MDIO_Error_State_SetNippleValue+0xfe>
    12ac:	66 0f       	add	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <MDIO_Error_State_SetNippleValue+0xfa>
    12b4:	cb 01       	movw	r24, r22
    12b6:	84 2b       	or	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	55 c0       	rjmp	.+170    	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    12bc:	a5 e3       	ldi	r26, 0x35	; 53
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e5 e3       	ldi	r30, 0x35	; 53
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8f e0       	ldi	r24, 0x0F	; 15
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <MDIO_Error_State_SetNippleValue+0x126>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	2a 95       	dec	r18
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <MDIO_Error_State_SetNippleValue+0x122>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    12e2:	a5 e3       	ldi	r26, 0x35	; 53
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	b9 01       	movw	r22, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <MDIO_Error_State_SetNippleValue+0x150>
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <MDIO_Error_State_SetNippleValue+0x14c>
    1306:	cb 01       	movw	r24, r22
    1308:	84 2b       	or	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	2c c0       	rjmp	.+88     	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    130e:	a2 e3       	ldi	r26, 0x32	; 50
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	8f e0       	ldi	r24, 0x0F	; 15
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <MDIO_Error_State_SetNippleValue+0x178>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	2a 95       	dec	r18
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <MDIO_Error_State_SetNippleValue+0x174>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1334:	a2 e3       	ldi	r26, 0x32	; 50
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e2 e3       	ldi	r30, 0x32	; 50
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	b9 01       	movw	r22, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <MDIO_Error_State_SetNippleValue+0x1a2>
    1350:	66 0f       	add	r22, r22
    1352:	77 1f       	adc	r23, r23
    1354:	8a 95       	dec	r24
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <MDIO_Error_State_SetNippleValue+0x19e>
    1358:	cb 01       	movw	r24, r22
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1364:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
}
    1368:	26 96       	adiw	r28, 0x06	; 6
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <MDIO_VidActivePullUP+0x6>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	6a 81       	ldd	r22, Y+2	; 0x02
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	6a 81       	ldd	r22, Y+2	; 0x02
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>

}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <HSWITCH_VidInit_PullUP+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    13b4:	e9 81       	ldd	r30, Y+1	; 0x01
    13b6:	fa 81       	ldd	r31, Y+2	; 0x02
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	90 81       	ld	r25, Z
    13c0:	69 2f       	mov	r22, r25
    13c2:	0e 94 bd 09 	call	0x137a	; 0x137a <MDIO_VidActivePullUP>
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <HSWITCH_u8SwitchState+0x6>
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	9b 83       	std	Y+3, r25	; 0x03
    13de:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    13e4:	ea 81       	ldd	r30, Y+2	; 0x02
    13e6:	fb 81       	ldd	r31, Y+3	; 0x03
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	ea 81       	ldd	r30, Y+2	; 0x02
    13ec:	fb 81       	ldd	r31, Y+3	; 0x03
    13ee:	90 81       	ld	r25, Z
    13f0:	69 2f       	mov	r22, r25
    13f2:	9e 01       	movw	r18, r28
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	a9 01       	movw	r20, r18
    13fa:	0e 94 41 08 	call	0x1082	; 0x1082 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <HSEVEN_SEGMENT_VidInit+0x6>
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	80 81       	ld	r24, Z
    1420:	6f ef       	ldi	r22, 0xFF	; 255
    1422:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MDIO_Error_State_SetPortDirection>
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <HSEVEN_SEGMENT_VidOff+0x6>
    1436:	0f 92       	push	r0
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	81 81       	ldd	r24, Z+1	; 0x01
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	31 f4       	brne	.+12     	; 0x1458 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	80 81       	ld	r24, Z
    1452:	6b 81       	ldd	r22, Y+3	; 0x03
    1454:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1458:	e9 81       	ldd	r30, Y+1	; 0x01
    145a:	fa 81       	ldd	r31, Y+2	; 0x02
    145c:	81 81       	ldd	r24, Z+1	; 0x01
    145e:	88 23       	and	r24, r24
    1460:	51 f4       	brne	.+20     	; 0x1476 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	20 81       	ld	r18, Z
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	98 2f       	mov	r25, r24
    146c:	90 95       	com	r25
    146e:	82 2f       	mov	r24, r18
    1470:	69 2f       	mov	r22, r25
    1472:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	}
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	27 97       	sbiw	r28, 0x07	; 7
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	81 81       	ldd	r24, Z+1	; 0x01
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    14a6:	9b c0       	rjmp	.+310    	; 0x15de <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3f 83       	std	Y+7, r19	; 0x07
    14b0:	2e 83       	std	Y+6, r18	; 0x06
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    14bc:	5f c0       	rjmp	.+190    	; 0x157c <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    14be:	2e 81       	ldd	r18, Y+6	; 0x06
    14c0:	3f 81       	ldd	r19, Y+7	; 0x07
    14c2:	25 30       	cpi	r18, 0x05	; 5
    14c4:	31 05       	cpc	r19, r1
    14c6:	dc f4       	brge	.+54     	; 0x14fe <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    14c8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ca:	9f 81       	ldd	r25, Y+7	; 0x07
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    14d4:	2e 81       	ldd	r18, Y+6	; 0x06
    14d6:	3f 81       	ldd	r19, Y+7	; 0x07
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    14de:	8e 81       	ldd	r24, Y+6	; 0x06
    14e0:	9f 81       	ldd	r25, Y+7	; 0x07
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	79 f1       	breq	.+94     	; 0x1544 <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    14e6:	74 c0       	rjmp	.+232    	; 0x15d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    14e8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ea:	3f 81       	ldd	r19, Y+7	; 0x07
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	b9 f1       	breq	.+110    	; 0x1560 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    14f2:	8e 81       	ldd	r24, Y+6	; 0x06
    14f4:	9f 81       	ldd	r25, Y+7	; 0x07
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	91 05       	cpc	r25, r1
    14fa:	c9 f1       	breq	.+114    	; 0x156e <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    14fc:	69 c0       	rjmp	.+210    	; 0x15d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    14fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1500:	3f 81       	ldd	r19, Y+7	; 0x07
    1502:	27 30       	cpi	r18, 0x07	; 7
    1504:	31 05       	cpc	r19, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1508:	4e c0       	rjmp	.+156    	; 0x15a6 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    150a:	8e 81       	ldd	r24, Y+6	; 0x06
    150c:	9f 81       	ldd	r25, Y+7	; 0x07
    150e:	88 30       	cpi	r24, 0x08	; 8
    1510:	91 05       	cpc	r25, r1
    1512:	5c f4       	brge	.+22     	; 0x152a <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1514:	2e 81       	ldd	r18, Y+6	; 0x06
    1516:	3f 81       	ldd	r19, Y+7	; 0x07
    1518:	25 30       	cpi	r18, 0x05	; 5
    151a:	31 05       	cpc	r19, r1
    151c:	b1 f1       	breq	.+108    	; 0x158a <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    151e:	8e 81       	ldd	r24, Y+6	; 0x06
    1520:	9f 81       	ldd	r25, Y+7	; 0x07
    1522:	86 30       	cpi	r24, 0x06	; 6
    1524:	91 05       	cpc	r25, r1
    1526:	c1 f1       	breq	.+112    	; 0x1598 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1528:	53 c0       	rjmp	.+166    	; 0x15d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    152a:	2e 81       	ldd	r18, Y+6	; 0x06
    152c:	3f 81       	ldd	r19, Y+7	; 0x07
    152e:	28 30       	cpi	r18, 0x08	; 8
    1530:	31 05       	cpc	r19, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1534:	3f c0       	rjmp	.+126    	; 0x15b4 <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1536:	8e 81       	ldd	r24, Y+6	; 0x06
    1538:	9f 81       	ldd	r25, Y+7	; 0x07
    153a:	89 30       	cpi	r24, 0x09	; 9
    153c:	91 05       	cpc	r25, r1
    153e:	09 f4       	brne	.+2      	; 0x1542 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1540:	40 c0       	rjmp	.+128    	; 0x15c2 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1542:	46 c0       	rjmp	.+140    	; 0x15d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1544:	e9 81       	ldd	r30, Y+1	; 0x01
    1546:	fa 81       	ldd	r31, Y+2	; 0x02
    1548:	80 81       	ld	r24, Z
    154a:	6f e3       	ldi	r22, 0x3F	; 63
    154c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1550:	e6 c0       	rjmp	.+460    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1552:	e9 81       	ldd	r30, Y+1	; 0x01
    1554:	fa 81       	ldd	r31, Y+2	; 0x02
    1556:	80 81       	ld	r24, Z
    1558:	66 e0       	ldi	r22, 0x06	; 6
    155a:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    155e:	df c0       	rjmp	.+446    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	80 81       	ld	r24, Z
    1566:	6b e5       	ldi	r22, 0x5B	; 91
    1568:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    156c:	d8 c0       	rjmp	.+432    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    156e:	e9 81       	ldd	r30, Y+1	; 0x01
    1570:	fa 81       	ldd	r31, Y+2	; 0x02
    1572:	80 81       	ld	r24, Z
    1574:	6f e4       	ldi	r22, 0x4F	; 79
    1576:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    157a:	d1 c0       	rjmp	.+418    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	80 81       	ld	r24, Z
    1582:	66 e6       	ldi	r22, 0x66	; 102
    1584:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1588:	ca c0       	rjmp	.+404    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	80 81       	ld	r24, Z
    1590:	6d e6       	ldi	r22, 0x6D	; 109
    1592:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1596:	c3 c0       	rjmp	.+390    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1598:	e9 81       	ldd	r30, Y+1	; 0x01
    159a:	fa 81       	ldd	r31, Y+2	; 0x02
    159c:	80 81       	ld	r24, Z
    159e:	6d e7       	ldi	r22, 0x7D	; 125
    15a0:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15a4:	bc c0       	rjmp	.+376    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    15a6:	e9 81       	ldd	r30, Y+1	; 0x01
    15a8:	fa 81       	ldd	r31, Y+2	; 0x02
    15aa:	80 81       	ld	r24, Z
    15ac:	67 e0       	ldi	r22, 0x07	; 7
    15ae:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15b2:	b5 c0       	rjmp	.+362    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    15b4:	e9 81       	ldd	r30, Y+1	; 0x01
    15b6:	fa 81       	ldd	r31, Y+2	; 0x02
    15b8:	80 81       	ld	r24, Z
    15ba:	6f e7       	ldi	r22, 0x7F	; 127
    15bc:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15c0:	ae c0       	rjmp	.+348    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    15c2:	e9 81       	ldd	r30, Y+1	; 0x01
    15c4:	fa 81       	ldd	r31, Y+2	; 0x02
    15c6:	80 81       	ld	r24, Z
    15c8:	6f e6       	ldi	r22, 0x6F	; 111
    15ca:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15ce:	a7 c0       	rjmp	.+334    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    15d0:	e9 81       	ldd	r30, Y+1	; 0x01
    15d2:	fa 81       	ldd	r31, Y+2	; 0x02
    15d4:	80 81       	ld	r24, Z
    15d6:	69 e7       	ldi	r22, 0x79	; 121
    15d8:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    15dc:	a0 c0       	rjmp	.+320    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	88 23       	and	r24, r24
    15e6:	09 f0       	breq	.+2      	; 0x15ea <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    15e8:	9a c0       	rjmp	.+308    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	3d 83       	std	Y+5, r19	; 0x05
    15f2:	2c 83       	std	Y+4, r18	; 0x04
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	91 05       	cpc	r25, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    15fe:	5f c0       	rjmp	.+190    	; 0x16be <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    1600:	2c 81       	ldd	r18, Y+4	; 0x04
    1602:	3d 81       	ldd	r19, Y+5	; 0x05
    1604:	25 30       	cpi	r18, 0x05	; 5
    1606:	31 05       	cpc	r19, r1
    1608:	dc f4       	brge	.+54     	; 0x1640 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	9d 81       	ldd	r25, Y+5	; 0x05
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    1616:	2c 81       	ldd	r18, Y+4	; 0x04
    1618:	3d 81       	ldd	r19, Y+5	; 0x05
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	2c f4       	brge	.+10     	; 0x162a <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	79 f1       	breq	.+94     	; 0x1686 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1628:	74 c0       	rjmp	.+232    	; 0x1712 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    162a:	2c 81       	ldd	r18, Y+4	; 0x04
    162c:	3d 81       	ldd	r19, Y+5	; 0x05
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	b9 f1       	breq	.+110    	; 0x16a2 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	c9 f1       	breq	.+114    	; 0x16b0 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    163e:	69 c0       	rjmp	.+210    	; 0x1712 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1640:	2c 81       	ldd	r18, Y+4	; 0x04
    1642:	3d 81       	ldd	r19, Y+5	; 0x05
    1644:	27 30       	cpi	r18, 0x07	; 7
    1646:	31 05       	cpc	r19, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    164a:	4e c0       	rjmp	.+156    	; 0x16e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	9d 81       	ldd	r25, Y+5	; 0x05
    1650:	88 30       	cpi	r24, 0x08	; 8
    1652:	91 05       	cpc	r25, r1
    1654:	5c f4       	brge	.+22     	; 0x166c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    1656:	2c 81       	ldd	r18, Y+4	; 0x04
    1658:	3d 81       	ldd	r19, Y+5	; 0x05
    165a:	25 30       	cpi	r18, 0x05	; 5
    165c:	31 05       	cpc	r19, r1
    165e:	b1 f1       	breq	.+108    	; 0x16cc <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	9d 81       	ldd	r25, Y+5	; 0x05
    1664:	86 30       	cpi	r24, 0x06	; 6
    1666:	91 05       	cpc	r25, r1
    1668:	c1 f1       	breq	.+112    	; 0x16da <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    166a:	53 c0       	rjmp	.+166    	; 0x1712 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    166c:	2c 81       	ldd	r18, Y+4	; 0x04
    166e:	3d 81       	ldd	r19, Y+5	; 0x05
    1670:	28 30       	cpi	r18, 0x08	; 8
    1672:	31 05       	cpc	r19, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    1676:	3f c0       	rjmp	.+126    	; 0x16f6 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	89 30       	cpi	r24, 0x09	; 9
    167e:	91 05       	cpc	r25, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    1682:	40 c0       	rjmp	.+128    	; 0x1704 <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    1684:	46 c0       	rjmp	.+140    	; 0x1712 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    1686:	e9 81       	ldd	r30, Y+1	; 0x01
    1688:	fa 81       	ldd	r31, Y+2	; 0x02
    168a:	80 81       	ld	r24, Z
    168c:	60 ec       	ldi	r22, 0xC0	; 192
    168e:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1692:	45 c0       	rjmp	.+138    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	80 81       	ld	r24, Z
    169a:	69 ef       	ldi	r22, 0xF9	; 249
    169c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16a0:	3e c0       	rjmp	.+124    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	80 81       	ld	r24, Z
    16a8:	64 ea       	ldi	r22, 0xA4	; 164
    16aa:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16ae:	37 c0       	rjmp	.+110    	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	80 81       	ld	r24, Z
    16b6:	60 eb       	ldi	r22, 0xB0	; 176
    16b8:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16bc:	30 c0       	rjmp	.+96     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    16be:	e9 81       	ldd	r30, Y+1	; 0x01
    16c0:	fa 81       	ldd	r31, Y+2	; 0x02
    16c2:	80 81       	ld	r24, Z
    16c4:	69 e9       	ldi	r22, 0x99	; 153
    16c6:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16ca:	29 c0       	rjmp	.+82     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    16cc:	e9 81       	ldd	r30, Y+1	; 0x01
    16ce:	fa 81       	ldd	r31, Y+2	; 0x02
    16d0:	80 81       	ld	r24, Z
    16d2:	62 e9       	ldi	r22, 0x92	; 146
    16d4:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16d8:	22 c0       	rjmp	.+68     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    16da:	e9 81       	ldd	r30, Y+1	; 0x01
    16dc:	fa 81       	ldd	r31, Y+2	; 0x02
    16de:	80 81       	ld	r24, Z
    16e0:	62 e8       	ldi	r22, 0x82	; 130
    16e2:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16e6:	1b c0       	rjmp	.+54     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    16e8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ea:	fa 81       	ldd	r31, Y+2	; 0x02
    16ec:	80 81       	ld	r24, Z
    16ee:	68 ef       	ldi	r22, 0xF8	; 248
    16f0:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    16f6:	e9 81       	ldd	r30, Y+1	; 0x01
    16f8:	fa 81       	ldd	r31, Y+2	; 0x02
    16fa:	80 81       	ld	r24, Z
    16fc:	60 e8       	ldi	r22, 0x80	; 128
    16fe:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1702:	0d c0       	rjmp	.+26     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	80 81       	ld	r24, Z
    170a:	60 e9       	ldi	r22, 0x90	; 144
    170c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
    1710:	06 c0       	rjmp	.+12     	; 0x171e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    1712:	e9 81       	ldd	r30, Y+1	; 0x01
    1714:	fa 81       	ldd	r31, Y+2	; 0x02
    1716:	80 81       	ld	r24, Z
    1718:	66 e8       	ldi	r22, 0x86	; 134
    171a:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	}
}
}
    171e:	27 96       	adiw	r28, 0x07	; 7
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <HLED_VidInit+0x6>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    173e:	e9 81       	ldd	r30, Y+1	; 0x01
    1740:	fa 81       	ldd	r31, Y+2	; 0x02
    1742:	81 81       	ldd	r24, Z+1	; 0x01
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	90 81       	ld	r25, Z
    174a:	69 2f       	mov	r22, r25
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <HLED_VidLed_On+0x6>
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	81 81       	ldd	r24, Z+1	; 0x01
    1770:	e9 81       	ldd	r30, Y+1	; 0x01
    1772:	fa 81       	ldd	r31, Y+2	; 0x02
    1774:	90 81       	ld	r25, Z
    1776:	69 2f       	mov	r22, r25
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <HLED_VidLed_Off+0x6>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1796:	e9 81       	ldd	r30, Y+1	; 0x01
    1798:	fa 81       	ldd	r31, Y+2	; 0x02
    179a:	81 81       	ldd	r24, Z+1	; 0x01
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	90 81       	ld	r25, Z
    17a2:	69 2f       	mov	r22, r25
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <HLED_VidLed_Toggle+0x6>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    17c2:	80 91 88 00 	lds	r24, 0x0088
    17c6:	88 23       	and	r24, r24
    17c8:	71 f4       	brne	.+28     	; 0x17e6 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	81 81       	ldd	r24, Z+1	; 0x01
    17d0:	e9 81       	ldd	r30, Y+1	; 0x01
    17d2:	fa 81       	ldd	r31, Y+2	; 0x02
    17d4:	90 81       	ld	r25, Z
    17d6:	69 2f       	mov	r22, r25
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
		Flag=1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	80 93 88 00 	sts	0x0088, r24
    17e4:	0c c0       	rjmp	.+24     	; 0x17fe <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	81 81       	ldd	r24, Z+1	; 0x01
    17ec:	e9 81       	ldd	r30, Y+1	; 0x01
    17ee:	fa 81       	ldd	r31, Y+2	; 0x02
    17f0:	90 81       	ld	r25, Z
    17f2:	69 2f       	mov	r22, r25
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
		Flag=0;
    17fa:	10 92 88 00 	sts	0x0088, r1
	}
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <main>:

void APP_VidLED_Mode(u8 Copy_u8SwitchNumber);


int main(void)
{
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	c0 57       	subi	r28, 0x70	; 112
    1816:	d0 40       	sbci	r29, 0x00	; 0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
	/*Initialize  8 LEDs*/
	HLED_VidInit(&LED1);
    1822:	89 e8       	ldi	r24, 0x89	; 137
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED2);
    182a:	88 e6       	ldi	r24, 0x68	; 104
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED3);
    1832:	8a e6       	ldi	r24, 0x6A	; 106
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED4);
    183a:	8c e6       	ldi	r24, 0x6C	; 108
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED5);
    1842:	8e e6       	ldi	r24, 0x6E	; 110
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED6);
    184a:	80 e7       	ldi	r24, 0x70	; 112
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED7);
    1852:	82 e7       	ldi	r24, 0x72	; 114
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	HLED_VidInit(&LED8);
    185a:	84 e7       	ldi	r24, 0x74	; 116
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 98 0b 	call	0x1730	; 0x1730 <HLED_VidInit>
	/*Initialize Seven Segment*/
	HSEVEN_SEGMENT_VidInit(&SEVEN_SEG1);
    1862:	86 e7       	ldi	r24, 0x76	; 118
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 06 0a 	call	0x140c	; 0x140c <HSEVEN_SEGMENT_VidInit>
	/*Initialize 8 Switches interface as Pull resistance */
	HSWITCH_VidInit_PullUP(&Switch_1);
    186a:	88 e7       	ldi	r24, 0x78	; 120
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_2);
    1872:	8a e7       	ldi	r24, 0x7A	; 122
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_3);
    187a:	8c e7       	ldi	r24, 0x7C	; 124
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_4);
    1882:	8e e7       	ldi	r24, 0x7E	; 126
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_5);
    188a:	80 e8       	ldi	r24, 0x80	; 128
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_6);
    1892:	82 e8       	ldi	r24, 0x82	; 130
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_7);
    189a:	84 e8       	ldi	r24, 0x84	; 132
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	HSWITCH_VidInit_PullUP(&Switch_8);
    18a2:	86 e8       	ldi	r24, 0x86	; 134
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <HSWITCH_VidInit_PullUP>
	while(1)
	{
		if(PRESSED == HSWITCH_u8SwitchState(&Switch_1))
    18aa:	88 e7       	ldi	r24, 0x78	; 120
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    18b2:	88 23       	and	r24, r24
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <main+0xb0>
    18b6:	be c0       	rjmp	.+380    	; 0x1a34 <main+0x22c>
    18b8:	fe 01       	movw	r30, r28
    18ba:	e3 59       	subi	r30, 0x93	; 147
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a8 e4       	ldi	r26, 0x48	; 72
    18c4:	b2 e4       	ldi	r27, 0x42	; 66
    18c6:	80 83       	st	Z, r24
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	a2 83       	std	Z+2, r26	; 0x02
    18cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ce:	8e 01       	movw	r16, r28
    18d0:	07 59       	subi	r16, 0x97	; 151
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	fe 01       	movw	r30, r28
    18d6:	e3 59       	subi	r30, 0x93	; 147
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	f8 01       	movw	r30, r16
    18f4:	80 83       	st	Z, r24
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	a2 83       	std	Z+2, r26	; 0x02
    18fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18fc:	fe 01       	movw	r30, r28
    18fe:	e7 59       	subi	r30, 0x97	; 151
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e8       	ldi	r20, 0x80	; 128
    1910:	5f e3       	ldi	r21, 0x3F	; 63
    1912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1916:	88 23       	and	r24, r24
    1918:	44 f4       	brge	.+16     	; 0x192a <main+0x122>
		__ticks = 1;
    191a:	fe 01       	movw	r30, r28
    191c:	e9 59       	subi	r30, 0x99	; 153
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
    1928:	64 c0       	rjmp	.+200    	; 0x19f2 <main+0x1ea>
	else if (__tmp > 65535)
    192a:	fe 01       	movw	r30, r28
    192c:	e7 59       	subi	r30, 0x97	; 151
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	0c f0       	brlt	.+2      	; 0x194a <main+0x142>
    1948:	43 c0       	rjmp	.+134    	; 0x19d0 <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	fe 01       	movw	r30, r28
    194c:	e3 59       	subi	r30, 0x93	; 147
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8e 01       	movw	r16, r28
    196a:	09 59       	subi	r16, 0x99	; 153
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	f8 01       	movw	r30, r16
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	80 83       	st	Z, r24
    1980:	1f c0       	rjmp	.+62     	; 0x19c0 <main+0x1b8>
    1982:	fe 01       	movw	r30, r28
    1984:	eb 59       	subi	r30, 0x9B	; 155
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1990:	fe 01       	movw	r30, r28
    1992:	eb 59       	subi	r30, 0x9B	; 155
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <main+0x192>
    199e:	fe 01       	movw	r30, r28
    19a0:	eb 59       	subi	r30, 0x9B	; 155
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	de 01       	movw	r26, r28
    19aa:	a9 59       	subi	r26, 0x99	; 153
    19ac:	bf 4f       	sbci	r27, 0xFF	; 255
    19ae:	fe 01       	movw	r30, r28
    19b0:	e9 59       	subi	r30, 0x99	; 153
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	11 96       	adiw	r26, 0x01	; 1
    19bc:	9c 93       	st	X, r25
    19be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c0:	fe 01       	movw	r30, r28
    19c2:	e9 59       	subi	r30, 0x99	; 153
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	d1 f6       	brne	.-76     	; 0x1982 <main+0x17a>
    19ce:	27 c0       	rjmp	.+78     	; 0x1a1e <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	8e 01       	movw	r16, r28
    19d2:	09 59       	subi	r16, 0x99	; 153
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	fe 01       	movw	r30, r28
    19d8:	e7 59       	subi	r30, 0x97	; 151
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	de 01       	movw	r26, r28
    19f4:	ad 59       	subi	r26, 0x9D	; 157
    19f6:	bf 4f       	sbci	r27, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	e9 59       	subi	r30, 0x99	; 153
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	8d 93       	st	X+, r24
    1a04:	9c 93       	st	X, r25
    1a06:	fe 01       	movw	r30, r28
    1a08:	ed 59       	subi	r30, 0x9D	; 157
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <main+0x208>
    1a14:	fe 01       	movw	r30, r28
    1a16:	ed 59       	subi	r30, 0x9D	; 157
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	80 83       	st	Z, r24
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_1))
    1a1e:	88 e7       	ldi	r24, 0x78	; 120
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1a26:	88 23       	and	r24, r24
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <main+0x224>
    1a2a:	3f cf       	rjmp	.-386    	; 0x18aa <main+0xa2>
			{
				/*1- Flashing every 500 ms */
				APP_VidLED_Mode(switch1);
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	0e 94 4b 11 	call	0x2296	; 0x2296 <APP_VidLED_Mode>
    1a32:	3b cf       	rjmp	.-394    	; 0x18aa <main+0xa2>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_2))
    1a34:	8a e7       	ldi	r24, 0x7A	; 122
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1a3c:	88 23       	and	r24, r24
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <main+0x23a>
    1a40:	be c0       	rjmp	.+380    	; 0x1bbe <main+0x3b6>
    1a42:	fe 01       	movw	r30, r28
    1a44:	e1 5a       	subi	r30, 0xA1	; 161
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a8 e4       	ldi	r26, 0x48	; 72
    1a4e:	b2 e4       	ldi	r27, 0x42	; 66
    1a50:	80 83       	st	Z, r24
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	a2 83       	std	Z+2, r26	; 0x02
    1a56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	8e 01       	movw	r16, r28
    1a5a:	05 5a       	subi	r16, 0xA5	; 165
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e1 5a       	subi	r30, 0xA1	; 161
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	4a ef       	ldi	r20, 0xFA	; 250
    1a72:	54 e4       	ldi	r21, 0x44	; 68
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	80 83       	st	Z, r24
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	a2 83       	std	Z+2, r26	; 0x02
    1a84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a86:	fe 01       	movw	r30, r28
    1a88:	e5 5a       	subi	r30, 0xA5	; 165
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	60 81       	ld	r22, Z
    1a8e:	71 81       	ldd	r23, Z+1	; 0x01
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	93 81       	ldd	r25, Z+3	; 0x03
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	44 f4       	brge	.+16     	; 0x1ab4 <main+0x2ac>
		__ticks = 1;
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e7 5a       	subi	r30, 0xA7	; 167
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
    1ab2:	64 c0       	rjmp	.+200    	; 0x1b7c <main+0x374>
	else if (__tmp > 65535)
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e5 5a       	subi	r30, 0xA5	; 165
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	57 e4       	ldi	r21, 0x47	; 71
    1aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	0c f0       	brlt	.+2      	; 0x1ad4 <main+0x2cc>
    1ad2:	43 c0       	rjmp	.+134    	; 0x1b5a <main+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e1 5a       	subi	r30, 0xA1	; 161
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e2       	ldi	r20, 0x20	; 32
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	8e 01       	movw	r16, r28
    1af4:	07 5a       	subi	r16, 0xA7	; 167
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	f8 01       	movw	r30, r16
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
    1b0a:	1f c0       	rjmp	.+62     	; 0x1b4a <main+0x342>
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e9 5a       	subi	r30, 0xA9	; 169
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	88 ec       	ldi	r24, 0xC8	; 200
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e9 5a       	subi	r30, 0xA9	; 169
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <main+0x31c>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e9 5a       	subi	r30, 0xA9	; 169
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	de 01       	movw	r26, r28
    1b34:	a7 5a       	subi	r26, 0xA7	; 167
    1b36:	bf 4f       	sbci	r27, 0xFF	; 255
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e7 5a       	subi	r30, 0xA7	; 167
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	11 96       	adiw	r26, 0x01	; 1
    1b46:	9c 93       	st	X, r25
    1b48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e7 5a       	subi	r30, 0xA7	; 167
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	d1 f6       	brne	.-76     	; 0x1b0c <main+0x304>
    1b58:	27 c0       	rjmp	.+78     	; 0x1ba8 <main+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	8e 01       	movw	r16, r28
    1b5c:	07 5a       	subi	r16, 0xA7	; 167
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	fe 01       	movw	r30, r28
    1b62:	e5 5a       	subi	r30, 0xA5	; 165
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	f8 01       	movw	r30, r16
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	de 01       	movw	r26, r28
    1b7e:	ab 5a       	subi	r26, 0xAB	; 171
    1b80:	bf 4f       	sbci	r27, 0xFF	; 255
    1b82:	fe 01       	movw	r30, r28
    1b84:	e7 5a       	subi	r30, 0xA7	; 167
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	8d 93       	st	X+, r24
    1b8e:	9c 93       	st	X, r25
    1b90:	fe 01       	movw	r30, r28
    1b92:	eb 5a       	subi	r30, 0xAB	; 171
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 81       	ld	r24, Z
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <main+0x392>
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	eb 5a       	subi	r30, 0xAB	; 171
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_2))
    1ba8:	8a e7       	ldi	r24, 0x7A	; 122
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1bb0:	88 23       	and	r24, r24
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <main+0x3ae>
    1bb4:	7a ce       	rjmp	.-780    	; 0x18aa <main+0xa2>
			{
				/*2- Shifting Left every 150 ms*/
				APP_VidLED_Mode(switch2);
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	0e 94 4b 11 	call	0x2296	; 0x2296 <APP_VidLED_Mode>
    1bbc:	76 ce       	rjmp	.-788    	; 0x18aa <main+0xa2>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_3))
    1bbe:	8c e7       	ldi	r24, 0x7C	; 124
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <main+0x3c4>
    1bca:	be c0       	rjmp	.+380    	; 0x1d48 <main+0x540>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ef 5a       	subi	r30, 0xAF	; 175
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a8 e4       	ldi	r26, 0x48	; 72
    1bd8:	b2 e4       	ldi	r27, 0x42	; 66
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	8e 01       	movw	r16, r28
    1be4:	03 5b       	subi	r16, 0xB3	; 179
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	ef 5a       	subi	r30, 0xAF	; 175
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c10:	fe 01       	movw	r30, r28
    1c12:	e3 5b       	subi	r30, 0xB3	; 179
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	44 f4       	brge	.+16     	; 0x1c3e <main+0x436>
		__ticks = 1;
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e5 5b       	subi	r30, 0xB5	; 181
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	64 c0       	rjmp	.+200    	; 0x1d06 <main+0x4fe>
	else if (__tmp > 65535)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e3 5b       	subi	r30, 0xB3	; 179
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <main+0x456>
    1c5c:	43 c0       	rjmp	.+134    	; 0x1ce4 <main+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ef 5a       	subi	r30, 0xAF	; 175
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	05 5b       	subi	r16, 0xB5	; 181
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	1f c0       	rjmp	.+62     	; 0x1cd4 <main+0x4cc>
    1c96:	fe 01       	movw	r30, r28
    1c98:	e7 5b       	subi	r30, 0xB7	; 183
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e7 5b       	subi	r30, 0xB7	; 183
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <main+0x4a6>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e7 5b       	subi	r30, 0xB7	; 183
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	de 01       	movw	r26, r28
    1cbe:	a5 5b       	subi	r26, 0xB5	; 181
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e5 5b       	subi	r30, 0xB5	; 181
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e5 5b       	subi	r30, 0xB5	; 181
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	d1 f6       	brne	.-76     	; 0x1c96 <main+0x48e>
    1ce2:	27 c0       	rjmp	.+78     	; 0x1d32 <main+0x52a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	05 5b       	subi	r16, 0xB5	; 181
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	e3 5b       	subi	r30, 0xB3	; 179
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	de 01       	movw	r26, r28
    1d08:	a9 5b       	subi	r26, 0xB9	; 185
    1d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e5 5b       	subi	r30, 0xB5	; 181
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	8d 93       	st	X+, r24
    1d18:	9c 93       	st	X, r25
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e9 5b       	subi	r30, 0xB9	; 185
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <main+0x51c>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 5b       	subi	r30, 0xB9	; 185
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_3))
    1d32:	8c e7       	ldi	r24, 0x7C	; 124
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1d3a:	88 23       	and	r24, r24
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <main+0x538>
    1d3e:	b5 cd       	rjmp	.-1174   	; 0x18aa <main+0xa2>
			{
				/*3- Shifting Right every 150 ms*/

				APP_VidLED_Mode(switch3);
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	0e 94 4b 11 	call	0x2296	; 0x2296 <APP_VidLED_Mode>
    1d46:	b1 cd       	rjmp	.-1182   	; 0x18aa <main+0xa2>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_4))
    1d48:	8e e7       	ldi	r24, 0x7E	; 126
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1d50:	88 23       	and	r24, r24
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <main+0x54e>
    1d54:	90 c0       	rjmp	.+288    	; 0x1e76 <main+0x66e>
    1d56:	fe 01       	movw	r30, r28
    1d58:	ed 5b       	subi	r30, 0xBD	; 189
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a8 e4       	ldi	r26, 0x48	; 72
    1d62:	b2 e4       	ldi	r27, 0x42	; 66
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	a2 83       	std	Z+2, r26	; 0x02
    1d6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	01 5c       	subi	r16, 0xC1	; 193
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	fe 01       	movw	r30, r28
    1d74:	ed 5b       	subi	r30, 0xBD	; 189
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	f8 01       	movw	r30, r16
    1d92:	80 83       	st	Z, r24
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	a2 83       	std	Z+2, r26	; 0x02
    1d98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	ff 96       	adiw	r30, 0x3f	; 63
    1d9e:	60 81       	ld	r22, Z
    1da0:	71 81       	ldd	r23, Z+1	; 0x01
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	93 81       	ldd	r25, Z+3	; 0x03
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e8       	ldi	r20, 0x80	; 128
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db2:	88 23       	and	r24, r24
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <main+0x5b8>
		__ticks = 1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9e af       	std	Y+62, r25	; 0x3e
    1dbc:	8d af       	std	Y+61, r24	; 0x3d
    1dbe:	46 c0       	rjmp	.+140    	; 0x1e4c <main+0x644>
	else if (__tmp > 65535)
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ff 96       	adiw	r30, 0x3f	; 63
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	64 f5       	brge	.+88     	; 0x1e34 <main+0x62c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ed 5b       	subi	r30, 0xBD	; 189
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9e af       	std	Y+62, r25	; 0x3e
    1e08:	8d af       	std	Y+61, r24	; 0x3d
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <main+0x622>
    1e0c:	88 ec       	ldi	r24, 0xC8	; 200
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9c af       	std	Y+60, r25	; 0x3c
    1e12:	8b af       	std	Y+59, r24	; 0x3b
    1e14:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e16:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <main+0x610>
    1e1c:	9c af       	std	Y+60, r25	; 0x3c
    1e1e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	9e af       	std	Y+62, r25	; 0x3e
    1e28:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <main+0x604>
    1e32:	16 c0       	rjmp	.+44     	; 0x1e60 <main+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	fe 01       	movw	r30, r28
    1e36:	ff 96       	adiw	r30, 0x3f	; 63
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e af       	std	Y+62, r25	; 0x3e
    1e4a:	8d af       	std	Y+61, r24	; 0x3d
    1e4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e50:	9a af       	std	Y+58, r25	; 0x3a
    1e52:	89 af       	std	Y+57, r24	; 0x39
    1e54:	89 ad       	ldd	r24, Y+57	; 0x39
    1e56:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <main+0x650>
    1e5c:	9a af       	std	Y+58, r25	; 0x3a
    1e5e:	89 af       	std	Y+57, r24	; 0x39
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_4))
    1e60:	8e e7       	ldi	r24, 0x7E	; 126
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1e68:	88 23       	and	r24, r24
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <main+0x666>
    1e6c:	1e cd       	rjmp	.-1476   	; 0x18aa <main+0xa2>
			{
		    	/*4- 2-LEDs Converging every 250 ms*/
				APP_VidLED_Mode(switch4);
    1e6e:	84 e0       	ldi	r24, 0x04	; 4
    1e70:	0e 94 4b 11 	call	0x2296	; 0x2296 <APP_VidLED_Mode>
    1e74:	1a cd       	rjmp	.-1484   	; 0x18aa <main+0xa2>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_5))
    1e76:	80 e8       	ldi	r24, 0x80	; 128
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1e7e:	88 23       	and	r24, r24
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <main+0x67c>
    1e82:	7d c0       	rjmp	.+250    	; 0x1f7e <main+0x776>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a8 e4       	ldi	r26, 0x48	; 72
    1e8a:	b2 e4       	ldi	r27, 0x42	; 66
    1e8c:	8d ab       	std	Y+53, r24	; 0x35
    1e8e:	9e ab       	std	Y+54, r25	; 0x36
    1e90:	af ab       	std	Y+55, r26	; 0x37
    1e92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	6d a9       	ldd	r22, Y+53	; 0x35
    1e96:	7e a9       	ldd	r23, Y+54	; 0x36
    1e98:	8f a9       	ldd	r24, Y+55	; 0x37
    1e9a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	89 ab       	std	Y+49, r24	; 0x31
    1eae:	9a ab       	std	Y+50, r25	; 0x32
    1eb0:	ab ab       	std	Y+51, r26	; 0x33
    1eb2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eba:	9c a9       	ldd	r25, Y+52	; 0x34
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <main+0x6ce>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	98 ab       	std	Y+48, r25	; 0x30
    1ed2:	8f a7       	std	Y+47, r24	; 0x2f
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <main+0x74c>
	else if (__tmp > 65535)
    1ed6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ed8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eda:	8b a9       	ldd	r24, Y+51	; 0x33
    1edc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <main+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	98 ab       	std	Y+48, r25	; 0x30
    1f14:	8f a7       	std	Y+47, r24	; 0x2f
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <main+0x72e>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9e a7       	std	Y+46, r25	; 0x2e
    1f1e:	8d a7       	std	Y+45, r24	; 0x2d
    1f20:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f22:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <main+0x71c>
    1f28:	9e a7       	std	Y+46, r25	; 0x2e
    1f2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	98 ab       	std	Y+48, r25	; 0x30
    1f34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f38:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <main+0x710>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <main+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	69 a9       	ldd	r22, Y+49	; 0x31
    1f42:	7a a9       	ldd	r23, Y+50	; 0x32
    1f44:	8b a9       	ldd	r24, Y+51	; 0x33
    1f46:	9c a9       	ldd	r25, Y+52	; 0x34
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	98 ab       	std	Y+48, r25	; 0x30
    1f52:	8f a7       	std	Y+47, r24	; 0x2f
    1f54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f56:	98 a9       	ldd	r25, Y+48	; 0x30
    1f58:	9c a7       	std	Y+44, r25	; 0x2c
    1f5a:	8b a7       	std	Y+43, r24	; 0x2b
    1f5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <main+0x758>
    1f64:	9c a7       	std	Y+44, r25	; 0x2c
    1f66:	8b a7       	std	Y+43, r24	; 0x2b
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_5))
    1f68:	80 e8       	ldi	r24, 0x80	; 128
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1f70:	88 23       	and	r24, r24
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <main+0x76e>
    1f74:	9a cc       	rjmp	.-1740   	; 0x18aa <main+0xa2>
			{
				/*5- 2-LEDs Diverging every 250 ms*/
				APP_VidLED_Mode(switch5);
    1f76:	85 e0       	ldi	r24, 0x05	; 5
    1f78:	0e 94 4b 11 	call	0x2296	; 0x2296 <APP_VidLED_Mode>
    1f7c:	96 cc       	rjmp	.-1748   	; 0x18aa <main+0xa2>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_6))
    1f7e:	82 e8       	ldi	r24, 0x82	; 130
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    1f86:	88 23       	and	r24, r24
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <main+0x784>
    1f8a:	7d c0       	rjmp	.+250    	; 0x2086 <main+0x87e>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a8 e4       	ldi	r26, 0x48	; 72
    1f92:	b2 e4       	ldi	r27, 0x42	; 66
    1f94:	8f a3       	std	Y+39, r24	; 0x27
    1f96:	98 a7       	std	Y+40, r25	; 0x28
    1f98:	a9 a7       	std	Y+41, r26	; 0x29
    1f9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1fa0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4a ef       	ldi	r20, 0xFA	; 250
    1faa:	54 e4       	ldi	r21, 0x44	; 68
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8b a3       	std	Y+35, r24	; 0x23
    1fb6:	9c a3       	std	Y+36, r25	; 0x24
    1fb8:	ad a3       	std	Y+37, r26	; 0x25
    1fba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <main+0x7d6>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9a a3       	std	Y+34, r25	; 0x22
    1fda:	89 a3       	std	Y+33, r24	; 0x21
    1fdc:	3f c0       	rjmp	.+126    	; 0x205c <main+0x854>
	else if (__tmp > 65535)
    1fde:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	4f e7       	ldi	r20, 0x7F	; 127
    1fec:	57 e4       	ldi	r21, 0x47	; 71
    1fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	4c f5       	brge	.+82     	; 0x2048 <main+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff8:	78 a5       	ldd	r23, Y+40	; 0x28
    1ffa:	89 a5       	ldd	r24, Y+41	; 0x29
    1ffc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9a a3       	std	Y+34, r25	; 0x22
    201c:	89 a3       	std	Y+33, r24	; 0x21
    201e:	0f c0       	rjmp	.+30     	; 0x203e <main+0x836>
    2020:	88 ec       	ldi	r24, 0xC8	; 200
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	98 a3       	std	Y+32, r25	; 0x20
    2026:	8f 8f       	std	Y+31, r24	; 0x1f
    2028:	8f 8d       	ldd	r24, Y+31	; 0x1f
    202a:	98 a1       	ldd	r25, Y+32	; 0x20
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <main+0x824>
    2030:	98 a3       	std	Y+32, r25	; 0x20
    2032:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	89 a1       	ldd	r24, Y+33	; 0x21
    2036:	9a a1       	ldd	r25, Y+34	; 0x22
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	9a a3       	std	Y+34, r25	; 0x22
    203c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	89 a1       	ldd	r24, Y+33	; 0x21
    2040:	9a a1       	ldd	r25, Y+34	; 0x22
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	69 f7       	brne	.-38     	; 0x2020 <main+0x818>
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <main+0x868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	6b a1       	ldd	r22, Y+35	; 0x23
    204a:	7c a1       	ldd	r23, Y+36	; 0x24
    204c:	8d a1       	ldd	r24, Y+37	; 0x25
    204e:	9e a1       	ldd	r25, Y+38	; 0x26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9a a3       	std	Y+34, r25	; 0x22
    205a:	89 a3       	std	Y+33, r24	; 0x21
    205c:	89 a1       	ldd	r24, Y+33	; 0x21
    205e:	9a a1       	ldd	r25, Y+34	; 0x22
    2060:	9e 8f       	std	Y+30, r25	; 0x1e
    2062:	8d 8f       	std	Y+29, r24	; 0x1d
    2064:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2066:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <main+0x860>
    206c:	9e 8f       	std	Y+30, r25	; 0x1e
    206e:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_6))
    2070:	82 e8       	ldi	r24, 0x82	; 130
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    2078:	88 23       	and	r24, r24
    207a:	09 f0       	breq	.+2      	; 0x207e <main+0x876>
    207c:	16 cc       	rjmp	.-2004   	; 0x18aa <main+0xa2>
			{
				/*6- Ping Pong effect every 250 ms*/
				APP_VidLED_Mode(switch6);
    207e:	86 e0       	ldi	r24, 0x06	; 6
    2080:	0e 94 4b 11 	call	0x2296	; 0x2296 <APP_VidLED_Mode>
    2084:	12 cc       	rjmp	.-2012   	; 0x18aa <main+0xa2>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_7))
    2086:	84 e8       	ldi	r24, 0x84	; 132
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    208e:	88 23       	and	r24, r24
    2090:	09 f0       	breq	.+2      	; 0x2094 <main+0x88c>
    2092:	7d c0       	rjmp	.+250    	; 0x218e <main+0x986>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a8 e4       	ldi	r26, 0x48	; 72
    209a:	b2 e4       	ldi	r27, 0x42	; 66
    209c:	89 8f       	std	Y+25, r24	; 0x19
    209e:	9a 8f       	std	Y+26, r25	; 0x1a
    20a0:	ab 8f       	std	Y+27, r26	; 0x1b
    20a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	69 8d       	ldd	r22, Y+25	; 0x19
    20a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a ef       	ldi	r20, 0xFA	; 250
    20b2:	54 e4       	ldi	r21, 0x44	; 68
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8d 8b       	std	Y+21, r24	; 0x15
    20be:	9e 8b       	std	Y+22, r25	; 0x16
    20c0:	af 8b       	std	Y+23, r26	; 0x17
    20c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <main+0x8de>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <main+0x95c>
	else if (__tmp > 65535)
    20e6:	6d 89       	ldd	r22, Y+21	; 0x15
    20e8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ea:	8f 89       	ldd	r24, Y+23	; 0x17
    20ec:	98 8d       	ldd	r25, Y+24	; 0x18
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <main+0x948>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <main+0x93e>
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9a 8b       	std	Y+18, r25	; 0x12
    212e:	89 8b       	std	Y+17, r24	; 0x11
    2130:	89 89       	ldd	r24, Y+17	; 0x11
    2132:	9a 89       	ldd	r25, Y+18	; 0x12
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <main+0x92c>
    2138:	9a 8b       	std	Y+18, r25	; 0x12
    213a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8b 89       	ldd	r24, Y+19	; 0x13
    2148:	9c 89       	ldd	r25, Y+20	; 0x14
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <main+0x920>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <main+0x970>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6d 89       	ldd	r22, Y+21	; 0x15
    2152:	7e 89       	ldd	r23, Y+22	; 0x16
    2154:	8f 89       	ldd	r24, Y+23	; 0x17
    2156:	98 8d       	ldd	r25, Y+24	; 0x18
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	8b 8b       	std	Y+19, r24	; 0x13
    2164:	8b 89       	ldd	r24, Y+19	; 0x13
    2166:	9c 89       	ldd	r25, Y+20	; 0x14
    2168:	98 8b       	std	Y+16, r25	; 0x10
    216a:	8f 87       	std	Y+15, r24	; 0x0f
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	98 89       	ldd	r25, Y+16	; 0x10
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <main+0x968>
    2174:	98 8b       	std	Y+16, r25	; 0x10
    2176:	8f 87       	std	Y+15, r24	; 0x0f
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_7))
    2178:	84 e8       	ldi	r24, 0x84	; 132
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    2180:	88 23       	and	r24, r24
    2182:	09 f0       	breq	.+2      	; 0x2186 <main+0x97e>
    2184:	92 cb       	rjmp	.-2268   	; 0x18aa <main+0xa2>
			{
				/*7- Incrementing (Snake effect) every 250 ms*/
				APP_VidLED_Mode(switch7);
    2186:	87 e0       	ldi	r24, 0x07	; 7
    2188:	0e 94 4b 11 	call	0x2296	; 0x2296 <APP_VidLED_Mode>
    218c:	8e cb       	rjmp	.-2276   	; 0x18aa <main+0xa2>
			{
				/*Do Nothing*/
			}

		}
		else if(PRESSED == HSWITCH_u8SwitchState(&Switch_8))
    218e:	86 e8       	ldi	r24, 0x86	; 134
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    2196:	88 23       	and	r24, r24
    2198:	09 f0       	breq	.+2      	; 0x219c <main+0x994>
    219a:	87 cb       	rjmp	.-2290   	; 0x18aa <main+0xa2>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a8 e4       	ldi	r26, 0x48	; 72
    21a2:	b2 e4       	ldi	r27, 0x42	; 66
    21a4:	8b 87       	std	Y+11, r24	; 0x0b
    21a6:	9c 87       	std	Y+12, r25	; 0x0c
    21a8:	ad 87       	std	Y+13, r26	; 0x0d
    21aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a ef       	ldi	r20, 0xFA	; 250
    21ba:	54 e4       	ldi	r21, 0x44	; 68
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	8f 83       	std	Y+7, r24	; 0x07
    21c6:	98 87       	std	Y+8, r25	; 0x08
    21c8:	a9 87       	std	Y+9, r26	; 0x09
    21ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21cc:	6f 81       	ldd	r22, Y+7	; 0x07
    21ce:	78 85       	ldd	r23, Y+8	; 0x08
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <main+0x9e6>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <main+0xa64>
	else if (__tmp > 65535)
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <main+0xa50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	6b 85       	ldd	r22, Y+11	; 0x0b
    2208:	7c 85       	ldd	r23, Y+12	; 0x0c
    220a:	8d 85       	ldd	r24, Y+13	; 0x0d
    220c:	9e 85       	ldd	r25, Y+14	; 0x0e
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
    222e:	0f c0       	rjmp	.+30     	; 0x224e <main+0xa46>
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9c 83       	std	Y+4, r25	; 0x04
    2236:	8b 83       	std	Y+3, r24	; 0x03
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <main+0xa34>
    2240:	9c 83       	std	Y+4, r25	; 0x04
    2242:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8d 81       	ldd	r24, Y+5	; 0x05
    2250:	9e 81       	ldd	r25, Y+6	; 0x06
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <main+0xa28>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <main+0xa78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	6f 81       	ldd	r22, Y+7	; 0x07
    225a:	78 85       	ldd	r23, Y+8	; 0x08
    225c:	89 85       	ldd	r24, Y+9	; 0x09
    225e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	9a 81       	ldd	r25, Y+2	; 0x02
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <main+0xa70>
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
		{
			/*to Slove De-Bouncing Problem wait few ms*/
			_delay_ms(50);
			/*Check again on Switch state*/
			if(PRESSED==HSWITCH_u8SwitchState(&Switch_8))
    2280:	86 e8       	ldi	r24, 0x86	; 134
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <HSWITCH_u8SwitchState>
    2288:	88 23       	and	r24, r24
    228a:	09 f0       	breq	.+2      	; 0x228e <main+0xa86>
    228c:	0e cb       	rjmp	.-2532   	; 0x18aa <main+0xa2>
			{
				/*8-	2-LEDs Converging/Diverging every 250 ms*/
				APP_VidLED_Mode(switch8);
    228e:	88 e0       	ldi	r24, 0x08	; 8
    2290:	0e 94 4b 11 	call	0x2296	; 0x2296 <APP_VidLED_Mode>
    2294:	0a cb       	rjmp	.-2540   	; 0x18aa <main+0xa2>

00002296 <APP_VidLED_Mode>:
	}
	return 0 ;
}

void APP_VidLED_Mode(u8 Copy_u8SwitchNumber)
{
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	c7 59       	subi	r28, 0x97	; 151
    22a4:	d0 40       	sbci	r29, 0x00	; 0
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	fe 01       	movw	r30, r28
    22b2:	eb 56       	subi	r30, 0x6B	; 107
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 83       	st	Z, r24

	switch(Copy_u8SwitchNumber)
    22b8:	fe 01       	movw	r30, r28
    22ba:	eb 56       	subi	r30, 0x6B	; 107
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	ca 56       	subi	r28, 0x6A	; 106
    22c6:	df 4f       	sbci	r29, 0xFF	; 255
    22c8:	39 83       	std	Y+1, r19	; 0x01
    22ca:	28 83       	st	Y, r18
    22cc:	c6 59       	subi	r28, 0x96	; 150
    22ce:	d0 40       	sbci	r29, 0x00	; 0
    22d0:	ca 56       	subi	r28, 0x6A	; 106
    22d2:	df 4f       	sbci	r29, 0xFF	; 255
    22d4:	88 81       	ld	r24, Y
    22d6:	99 81       	ldd	r25, Y+1	; 0x01
    22d8:	c6 59       	subi	r28, 0x96	; 150
    22da:	d0 40       	sbci	r29, 0x00	; 0
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	91 05       	cpc	r25, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <APP_VidLED_Mode+0x4e>
    22e2:	bf c3       	rjmp	.+1918   	; 0x2a62 <APP_VidLED_Mode+0x7cc>
    22e4:	ca 56       	subi	r28, 0x6A	; 106
    22e6:	df 4f       	sbci	r29, 0xFF	; 255
    22e8:	e8 81       	ld	r30, Y
    22ea:	f9 81       	ldd	r31, Y+1	; 0x01
    22ec:	c6 59       	subi	r28, 0x96	; 150
    22ee:	d0 40       	sbci	r29, 0x00	; 0
    22f0:	e5 30       	cpi	r30, 0x05	; 5
    22f2:	f1 05       	cpc	r31, r1
    22f4:	fc f4       	brge	.+62     	; 0x2334 <APP_VidLED_Mode+0x9e>
    22f6:	ca 56       	subi	r28, 0x6A	; 106
    22f8:	df 4f       	sbci	r29, 0xFF	; 255
    22fa:	28 81       	ld	r18, Y
    22fc:	39 81       	ldd	r19, Y+1	; 0x01
    22fe:	c6 59       	subi	r28, 0x96	; 150
    2300:	d0 40       	sbci	r29, 0x00	; 0
    2302:	22 30       	cpi	r18, 0x02	; 2
    2304:	31 05       	cpc	r19, r1
    2306:	09 f4       	brne	.+2      	; 0x230a <APP_VidLED_Mode+0x74>
    2308:	ec c1       	rjmp	.+984    	; 0x26e2 <APP_VidLED_Mode+0x44c>
    230a:	ca 56       	subi	r28, 0x6A	; 106
    230c:	df 4f       	sbci	r29, 0xFF	; 255
    230e:	88 81       	ld	r24, Y
    2310:	99 81       	ldd	r25, Y+1	; 0x01
    2312:	c6 59       	subi	r28, 0x96	; 150
    2314:	d0 40       	sbci	r29, 0x00	; 0
    2316:	83 30       	cpi	r24, 0x03	; 3
    2318:	91 05       	cpc	r25, r1
    231a:	0c f0       	brlt	.+2      	; 0x231e <APP_VidLED_Mode+0x88>
    231c:	c0 c2       	rjmp	.+1408   	; 0x289e <APP_VidLED_Mode+0x608>
    231e:	ca 56       	subi	r28, 0x6A	; 106
    2320:	df 4f       	sbci	r29, 0xFF	; 255
    2322:	e8 81       	ld	r30, Y
    2324:	f9 81       	ldd	r31, Y+1	; 0x01
    2326:	c6 59       	subi	r28, 0x96	; 150
    2328:	d0 40       	sbci	r29, 0x00	; 0
    232a:	e1 30       	cpi	r30, 0x01	; 1
    232c:	f1 05       	cpc	r31, r1
    232e:	61 f1       	breq	.+88     	; 0x2388 <APP_VidLED_Mode+0xf2>
    2330:	0c 94 47 19 	jmp	0x328e	; 0x328e <APP_VidLED_Mode+0xff8>
    2334:	ca 56       	subi	r28, 0x6A	; 106
    2336:	df 4f       	sbci	r29, 0xFF	; 255
    2338:	28 81       	ld	r18, Y
    233a:	39 81       	ldd	r19, Y+1	; 0x01
    233c:	c6 59       	subi	r28, 0x96	; 150
    233e:	d0 40       	sbci	r29, 0x00	; 0
    2340:	26 30       	cpi	r18, 0x06	; 6
    2342:	31 05       	cpc	r19, r1
    2344:	09 f4       	brne	.+2      	; 0x2348 <APP_VidLED_Mode+0xb2>
    2346:	31 c5       	rjmp	.+2658   	; 0x2daa <APP_VidLED_Mode+0xb14>
    2348:	ca 56       	subi	r28, 0x6A	; 106
    234a:	df 4f       	sbci	r29, 0xFF	; 255
    234c:	88 81       	ld	r24, Y
    234e:	99 81       	ldd	r25, Y+1	; 0x01
    2350:	c6 59       	subi	r28, 0x96	; 150
    2352:	d0 40       	sbci	r29, 0x00	; 0
    2354:	86 30       	cpi	r24, 0x06	; 6
    2356:	91 05       	cpc	r25, r1
    2358:	0c f4       	brge	.+2      	; 0x235c <APP_VidLED_Mode+0xc6>
    235a:	6c c4       	rjmp	.+2264   	; 0x2c34 <APP_VidLED_Mode+0x99e>
    235c:	ca 56       	subi	r28, 0x6A	; 106
    235e:	df 4f       	sbci	r29, 0xFF	; 255
    2360:	e8 81       	ld	r30, Y
    2362:	f9 81       	ldd	r31, Y+1	; 0x01
    2364:	c6 59       	subi	r28, 0x96	; 150
    2366:	d0 40       	sbci	r29, 0x00	; 0
    2368:	e7 30       	cpi	r30, 0x07	; 7
    236a:	f1 05       	cpc	r31, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <APP_VidLED_Mode+0xda>
    236e:	b6 c5       	rjmp	.+2924   	; 0x2edc <APP_VidLED_Mode+0xc46>
    2370:	ca 56       	subi	r28, 0x6A	; 106
    2372:	df 4f       	sbci	r29, 0xFF	; 255
    2374:	28 81       	ld	r18, Y
    2376:	39 81       	ldd	r19, Y+1	; 0x01
    2378:	c6 59       	subi	r28, 0x96	; 150
    237a:	d0 40       	sbci	r29, 0x00	; 0
    237c:	28 30       	cpi	r18, 0x08	; 8
    237e:	31 05       	cpc	r19, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <APP_VidLED_Mode+0xee>
    2382:	dd c6       	rjmp	.+3514   	; 0x313e <APP_VidLED_Mode+0xea8>
    2384:	0c 94 47 19 	jmp	0x328e	; 0x328e <APP_VidLED_Mode+0xff8>
	{
	/*1- Flashing every 500 ms */
	case switch1 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch1);
    2388:	86 e7       	ldi	r24, 0x76	; 118
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		HLED_VidLed_On(&LED1);
    2392:	89 e8       	ldi	r24, 0x89	; 137
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED2);
    239a:	88 e6       	ldi	r24, 0x68	; 104
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED3);
    23a2:	8a e6       	ldi	r24, 0x6A	; 106
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED4);
    23aa:	8c e6       	ldi	r24, 0x6C	; 108
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED5);
    23b2:	8e e6       	ldi	r24, 0x6E	; 110
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED6);
    23ba:	80 e7       	ldi	r24, 0x70	; 112
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED7);
    23c2:	82 e7       	ldi	r24, 0x72	; 114
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
		HLED_VidLed_On(&LED8);
    23ca:	84 e7       	ldi	r24, 0x74	; 116
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_VidLed_On>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e7 57       	subi	r30, 0x77	; 119
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	aa ef       	ldi	r26, 0xFA	; 250
    23de:	b3 e4       	ldi	r27, 0x43	; 67
    23e0:	80 83       	st	Z, r24
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	a2 83       	std	Z+2, r26	; 0x02
    23e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e8:	8e 01       	movw	r16, r28
    23ea:	0b 57       	subi	r16, 0x7B	; 123
    23ec:	1f 4f       	sbci	r17, 0xFF	; 255
    23ee:	fe 01       	movw	r30, r28
    23f0:	e7 57       	subi	r30, 0x77	; 119
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	4a ef       	ldi	r20, 0xFA	; 250
    2402:	54 e4       	ldi	r21, 0x44	; 68
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	f8 01       	movw	r30, r16
    240e:	80 83       	st	Z, r24
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	a2 83       	std	Z+2, r26	; 0x02
    2414:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2416:	fe 01       	movw	r30, r28
    2418:	eb 57       	subi	r30, 0x7B	; 123
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2430:	88 23       	and	r24, r24
    2432:	44 f4       	brge	.+16     	; 0x2444 <APP_VidLED_Mode+0x1ae>
		__ticks = 1;
    2434:	fe 01       	movw	r30, r28
    2436:	ed 57       	subi	r30, 0x7D	; 125
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
    2442:	64 c0       	rjmp	.+200    	; 0x250c <APP_VidLED_Mode+0x276>
	else if (__tmp > 65535)
    2444:	fe 01       	movw	r30, r28
    2446:	eb 57       	subi	r30, 0x7B	; 123
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	57 e4       	ldi	r21, 0x47	; 71
    245a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	0c f0       	brlt	.+2      	; 0x2464 <APP_VidLED_Mode+0x1ce>
    2462:	43 c0       	rjmp	.+134    	; 0x24ea <APP_VidLED_Mode+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2464:	fe 01       	movw	r30, r28
    2466:	e7 57       	subi	r30, 0x77	; 119
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	60 81       	ld	r22, Z
    246c:	71 81       	ldd	r23, Z+1	; 0x01
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8e 01       	movw	r16, r28
    2484:	0d 57       	subi	r16, 0x7D	; 125
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	f8 01       	movw	r30, r16
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	80 83       	st	Z, r24
    249a:	1f c0       	rjmp	.+62     	; 0x24da <APP_VidLED_Mode+0x244>
    249c:	fe 01       	movw	r30, r28
    249e:	ef 57       	subi	r30, 0x7F	; 127
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	88 ec       	ldi	r24, 0xC8	; 200
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	fe 01       	movw	r30, r28
    24ac:	ef 57       	subi	r30, 0x7F	; 127
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <APP_VidLED_Mode+0x21e>
    24b8:	fe 01       	movw	r30, r28
    24ba:	ef 57       	subi	r30, 0x7F	; 127
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	de 01       	movw	r26, r28
    24c4:	ad 57       	subi	r26, 0x7D	; 125
    24c6:	bf 4f       	sbci	r27, 0xFF	; 255
    24c8:	fe 01       	movw	r30, r28
    24ca:	ed 57       	subi	r30, 0x7D	; 125
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	11 96       	adiw	r26, 0x01	; 1
    24d6:	9c 93       	st	X, r25
    24d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24da:	fe 01       	movw	r30, r28
    24dc:	ed 57       	subi	r30, 0x7D	; 125
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	d1 f6       	brne	.-76     	; 0x249c <APP_VidLED_Mode+0x206>
    24e8:	27 c0       	rjmp	.+78     	; 0x2538 <APP_VidLED_Mode+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	8e 01       	movw	r16, r28
    24ec:	0d 57       	subi	r16, 0x7D	; 125
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	fe 01       	movw	r30, r28
    24f2:	eb 57       	subi	r30, 0x7B	; 123
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	f8 01       	movw	r30, r16
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
    250c:	de 01       	movw	r26, r28
    250e:	a1 58       	subi	r26, 0x81	; 129
    2510:	bf 4f       	sbci	r27, 0xFF	; 255
    2512:	fe 01       	movw	r30, r28
    2514:	ed 57       	subi	r30, 0x7D	; 125
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	91 81       	ldd	r25, Z+1	; 0x01
    251c:	8d 93       	st	X+, r24
    251e:	9c 93       	st	X, r25
    2520:	fe 01       	movw	r30, r28
    2522:	e1 58       	subi	r30, 0x81	; 129
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <APP_VidLED_Mode+0x294>
    252e:	fe 01       	movw	r30, r28
    2530:	e1 58       	subi	r30, 0x81	; 129
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
		_delay_ms(500);
		HLED_VidLed_Off(&LED1);
    2538:	89 e8       	ldi	r24, 0x89	; 137
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED2);
    2540:	88 e6       	ldi	r24, 0x68	; 104
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED3);
    2548:	8a e6       	ldi	r24, 0x6A	; 106
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED4);
    2550:	8c e6       	ldi	r24, 0x6C	; 108
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED5);
    2558:	8e e6       	ldi	r24, 0x6E	; 110
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED6);
    2560:	80 e7       	ldi	r24, 0x70	; 112
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED7);
    2568:	82 e7       	ldi	r24, 0x72	; 114
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
		HLED_VidLed_Off(&LED8);
    2570:	84 e7       	ldi	r24, 0x74	; 116
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 c4 0b 	call	0x1788	; 0x1788 <HLED_VidLed_Off>
    2578:	fe 01       	movw	r30, r28
    257a:	e5 58       	subi	r30, 0x85	; 133
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	aa ef       	ldi	r26, 0xFA	; 250
    2584:	b3 e4       	ldi	r27, 0x43	; 67
    2586:	80 83       	st	Z, r24
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	a2 83       	std	Z+2, r26	; 0x02
    258c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	8e 01       	movw	r16, r28
    2590:	09 58       	subi	r16, 0x89	; 137
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	e5 58       	subi	r30, 0x85	; 133
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	54 e4       	ldi	r21, 0x44	; 68
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	f8 01       	movw	r30, r16
    25b4:	80 83       	st	Z, r24
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	a2 83       	std	Z+2, r26	; 0x02
    25ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25bc:	fe 01       	movw	r30, r28
    25be:	e9 58       	subi	r30, 0x89	; 137
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	44 f4       	brge	.+16     	; 0x25ea <APP_VidLED_Mode+0x354>
		__ticks = 1;
    25da:	fe 01       	movw	r30, r28
    25dc:	eb 58       	subi	r30, 0x8B	; 139
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	64 c0       	rjmp	.+200    	; 0x26b2 <APP_VidLED_Mode+0x41c>
	else if (__tmp > 65535)
    25ea:	fe 01       	movw	r30, r28
    25ec:	e9 58       	subi	r30, 0x89	; 137
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	0c f0       	brlt	.+2      	; 0x260a <APP_VidLED_Mode+0x374>
    2608:	43 c0       	rjmp	.+134    	; 0x2690 <APP_VidLED_Mode+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	fe 01       	movw	r30, r28
    260c:	e5 58       	subi	r30, 0x85	; 133
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8e 01       	movw	r16, r28
    262a:	0b 58       	subi	r16, 0x8B	; 139
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	f8 01       	movw	r30, r16
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	80 83       	st	Z, r24
    2640:	1f c0       	rjmp	.+62     	; 0x2680 <APP_VidLED_Mode+0x3ea>
    2642:	fe 01       	movw	r30, r28
    2644:	ed 58       	subi	r30, 0x8D	; 141
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	88 ec       	ldi	r24, 0xC8	; 200
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	fe 01       	movw	r30, r28
    2652:	ed 58       	subi	r30, 0x8D	; 141
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <APP_VidLED_Mode+0x3c4>
    265e:	fe 01       	movw	r30, r28
    2660:	ed 58       	subi	r30, 0x8D	; 141
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2668:	de 01       	movw	r26, r28
    266a:	ab 58       	subi	r26, 0x8B	; 139
    266c:	bf 4f       	sbci	r27, 0xFF	; 255
    266e:	fe 01       	movw	r30, r28
    2670:	eb 58       	subi	r30, 0x8B	; 139
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	11 96       	adiw	r26, 0x01	; 1
    267c:	9c 93       	st	X, r25
    267e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	fe 01       	movw	r30, r28
    2682:	eb 58       	subi	r30, 0x8B	; 139
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	d1 f6       	brne	.-76     	; 0x2642 <APP_VidLED_Mode+0x3ac>
    268e:	ff c5       	rjmp	.+3070   	; 0x328e <APP_VidLED_Mode+0xff8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	8e 01       	movw	r16, r28
    2692:	0b 58       	subi	r16, 0x8B	; 139
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	fe 01       	movw	r30, r28
    2698:	e9 58       	subi	r30, 0x89	; 137
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	f8 01       	movw	r30, r16
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
    26b2:	de 01       	movw	r26, r28
    26b4:	af 58       	subi	r26, 0x8F	; 143
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	eb 58       	subi	r30, 0x8B	; 139
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	11 96       	adiw	r26, 0x01	; 1
    26c4:	9c 93       	st	X, r25
    26c6:	8e 93       	st	-X, r24
    26c8:	fe 01       	movw	r30, r28
    26ca:	ef 58       	subi	r30, 0x8F	; 143
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <APP_VidLED_Mode+0x43c>
    26d6:	fe 01       	movw	r30, r28
    26d8:	ef 58       	subi	r30, 0x8F	; 143
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	d6 c5       	rjmp	.+2988   	; 0x328e <APP_VidLED_Mode+0xff8>
		_delay_ms(500);
		break ;

	/*2- Shifting Left every 150 ms*/
	case switch2 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch2);
    26e2:	86 e7       	ldi	r24, 0x76	; 118
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	62 e0       	ldi	r22, 0x02	; 2
    26e8:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>

		for(u8 i =0 ; i<8 ;i++)
    26f4:	fe 01       	movw	r30, r28
    26f6:	ec 56       	subi	r30, 0x6C	; 108
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	10 82       	st	Z, r1
    26fc:	c8 c0       	rjmp	.+400    	; 0x288e <APP_VidLED_Mode+0x5f8>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    2706:	fe 01       	movw	r30, r28
    2708:	ec 56       	subi	r30, 0x6C	; 108
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    2716:	fe 01       	movw	r30, r28
    2718:	e3 59       	subi	r30, 0x93	; 147
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a6 e1       	ldi	r26, 0x16	; 22
    2722:	b3 e4       	ldi	r27, 0x43	; 67
    2724:	80 83       	st	Z, r24
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	a2 83       	std	Z+2, r26	; 0x02
    272a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272c:	8e 01       	movw	r16, r28
    272e:	07 59       	subi	r16, 0x97	; 151
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	fe 01       	movw	r30, r28
    2734:	e3 59       	subi	r30, 0x93	; 147
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4a ef       	ldi	r20, 0xFA	; 250
    2746:	54 e4       	ldi	r21, 0x44	; 68
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	f8 01       	movw	r30, r16
    2752:	80 83       	st	Z, r24
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	a2 83       	std	Z+2, r26	; 0x02
    2758:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275a:	fe 01       	movw	r30, r28
    275c:	e7 59       	subi	r30, 0x97	; 151
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2774:	88 23       	and	r24, r24
    2776:	44 f4       	brge	.+16     	; 0x2788 <APP_VidLED_Mode+0x4f2>
		__ticks = 1;
    2778:	fe 01       	movw	r30, r28
    277a:	e9 59       	subi	r30, 0x99	; 153
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	64 c0       	rjmp	.+200    	; 0x2850 <APP_VidLED_Mode+0x5ba>
	else if (__tmp > 65535)
    2788:	fe 01       	movw	r30, r28
    278a:	e7 59       	subi	r30, 0x97	; 151
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <APP_VidLED_Mode+0x512>
    27a6:	43 c0       	rjmp	.+134    	; 0x282e <APP_VidLED_Mode+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	fe 01       	movw	r30, r28
    27aa:	e3 59       	subi	r30, 0x93	; 147
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8e 01       	movw	r16, r28
    27c8:	09 59       	subi	r16, 0x99	; 153
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	f8 01       	movw	r30, r16
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	1f c0       	rjmp	.+62     	; 0x281e <APP_VidLED_Mode+0x588>
    27e0:	fe 01       	movw	r30, r28
    27e2:	eb 59       	subi	r30, 0x9B	; 155
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	88 ec       	ldi	r24, 0xC8	; 200
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	fe 01       	movw	r30, r28
    27f0:	eb 59       	subi	r30, 0x9B	; 155
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <APP_VidLED_Mode+0x562>
    27fc:	fe 01       	movw	r30, r28
    27fe:	eb 59       	subi	r30, 0x9B	; 155
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2806:	de 01       	movw	r26, r28
    2808:	a9 59       	subi	r26, 0x99	; 153
    280a:	bf 4f       	sbci	r27, 0xFF	; 255
    280c:	fe 01       	movw	r30, r28
    280e:	e9 59       	subi	r30, 0x99	; 153
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	9c 93       	st	X, r25
    281c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	fe 01       	movw	r30, r28
    2820:	e9 59       	subi	r30, 0x99	; 153
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	d1 f6       	brne	.-76     	; 0x27e0 <APP_VidLED_Mode+0x54a>
    282c:	27 c0       	rjmp	.+78     	; 0x287c <APP_VidLED_Mode+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282e:	8e 01       	movw	r16, r28
    2830:	09 59       	subi	r16, 0x99	; 153
    2832:	1f 4f       	sbci	r17, 0xFF	; 255
    2834:	fe 01       	movw	r30, r28
    2836:	e7 59       	subi	r30, 0x97	; 151
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	f8 01       	movw	r30, r16
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
    2850:	de 01       	movw	r26, r28
    2852:	ad 59       	subi	r26, 0x9D	; 157
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	e9 59       	subi	r30, 0x99	; 153
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	8d 93       	st	X+, r24
    2862:	9c 93       	st	X, r25
    2864:	fe 01       	movw	r30, r28
    2866:	ed 59       	subi	r30, 0x9D	; 157
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <APP_VidLED_Mode+0x5d8>
    2872:	fe 01       	movw	r30, r28
    2874:	ed 59       	subi	r30, 0x9D	; 157
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
	/*2- Shifting Left every 150 ms*/
	case switch2 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch2);
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);

		for(u8 i =0 ; i<8 ;i++)
    287c:	de 01       	movw	r26, r28
    287e:	ac 56       	subi	r26, 0x6C	; 108
    2880:	bf 4f       	sbci	r27, 0xFF	; 255
    2882:	fe 01       	movw	r30, r28
    2884:	ec 56       	subi	r30, 0x6C	; 108
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	8c 93       	st	X, r24
    288e:	fe 01       	movw	r30, r28
    2890:	ec 56       	subi	r30, 0x6C	; 108
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	88 30       	cpi	r24, 0x08	; 8
    2898:	08 f4       	brcc	.+2      	; 0x289c <APP_VidLED_Mode+0x606>
    289a:	31 cf       	rjmp	.-414    	; 0x26fe <APP_VidLED_Mode+0x468>
    289c:	f8 c4       	rjmp	.+2544   	; 0x328e <APP_VidLED_Mode+0xff8>
			_delay_ms(150);
		}
		break  ;
		/*3- Shifting Right every 150 ms*/
	case switch3 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch3);
    289e:	86 e7       	ldi	r24, 0x76	; 118
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	63 e0       	ldi	r22, 0x03	; 3
    28a4:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(u8 i =0 ; i<8 ;i++)
    28b0:	fe 01       	movw	r30, r28
    28b2:	ed 56       	subi	r30, 0x6D	; 109
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	10 82       	st	Z, r1
    28b8:	cc c0       	rjmp	.+408    	; 0x2a52 <APP_VidLED_Mode+0x7bc>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue((7-i),HLED_PORTA,PIN_HIGH);
    28c2:	fe 01       	movw	r30, r28
    28c4:	ed 56       	subi	r30, 0x6D	; 109
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	97 e0       	ldi	r25, 0x07	; 7
    28ca:	80 81       	ld	r24, Z
    28cc:	f9 2f       	mov	r31, r25
    28ce:	f8 1b       	sub	r31, r24
    28d0:	8f 2f       	mov	r24, r31
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    28da:	fe 01       	movw	r30, r28
    28dc:	e1 5a       	subi	r30, 0xA1	; 161
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a6 e1       	ldi	r26, 0x16	; 22
    28e6:	b3 e4       	ldi	r27, 0x43	; 67
    28e8:	80 83       	st	Z, r24
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	a2 83       	std	Z+2, r26	; 0x02
    28ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	8e 01       	movw	r16, r28
    28f2:	05 5a       	subi	r16, 0xA5	; 165
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	fe 01       	movw	r30, r28
    28f8:	e1 5a       	subi	r30, 0xA1	; 161
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	4a ef       	ldi	r20, 0xFA	; 250
    290a:	54 e4       	ldi	r21, 0x44	; 68
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	f8 01       	movw	r30, r16
    2916:	80 83       	st	Z, r24
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	a2 83       	std	Z+2, r26	; 0x02
    291c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291e:	fe 01       	movw	r30, r28
    2920:	e5 5a       	subi	r30, 0xA5	; 165
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	44 f4       	brge	.+16     	; 0x294c <APP_VidLED_Mode+0x6b6>
		__ticks = 1;
    293c:	fe 01       	movw	r30, r28
    293e:	e7 5a       	subi	r30, 0xA7	; 167
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	64 c0       	rjmp	.+200    	; 0x2a14 <APP_VidLED_Mode+0x77e>
	else if (__tmp > 65535)
    294c:	fe 01       	movw	r30, r28
    294e:	e5 5a       	subi	r30, 0xA5	; 165
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	3f ef       	ldi	r19, 0xFF	; 255
    295e:	4f e7       	ldi	r20, 0x7F	; 127
    2960:	57 e4       	ldi	r21, 0x47	; 71
    2962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2966:	18 16       	cp	r1, r24
    2968:	0c f0       	brlt	.+2      	; 0x296c <APP_VidLED_Mode+0x6d6>
    296a:	43 c0       	rjmp	.+134    	; 0x29f2 <APP_VidLED_Mode+0x75c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	fe 01       	movw	r30, r28
    296e:	e1 5a       	subi	r30, 0xA1	; 161
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	8e 01       	movw	r16, r28
    298c:	07 5a       	subi	r16, 0xA7	; 167
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	f8 01       	movw	r30, r16
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	1f c0       	rjmp	.+62     	; 0x29e2 <APP_VidLED_Mode+0x74c>
    29a4:	fe 01       	movw	r30, r28
    29a6:	e9 5a       	subi	r30, 0xA9	; 169
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	88 ec       	ldi	r24, 0xC8	; 200
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
    29b2:	fe 01       	movw	r30, r28
    29b4:	e9 5a       	subi	r30, 0xA9	; 169
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	91 81       	ldd	r25, Z+1	; 0x01
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <APP_VidLED_Mode+0x726>
    29c0:	fe 01       	movw	r30, r28
    29c2:	e9 5a       	subi	r30, 0xA9	; 169
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ca:	de 01       	movw	r26, r28
    29cc:	a7 5a       	subi	r26, 0xA7	; 167
    29ce:	bf 4f       	sbci	r27, 0xFF	; 255
    29d0:	fe 01       	movw	r30, r28
    29d2:	e7 5a       	subi	r30, 0xA7	; 167
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	11 96       	adiw	r26, 0x01	; 1
    29de:	9c 93       	st	X, r25
    29e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e2:	fe 01       	movw	r30, r28
    29e4:	e7 5a       	subi	r30, 0xA7	; 167
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	d1 f6       	brne	.-76     	; 0x29a4 <APP_VidLED_Mode+0x70e>
    29f0:	27 c0       	rjmp	.+78     	; 0x2a40 <APP_VidLED_Mode+0x7aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f2:	8e 01       	movw	r16, r28
    29f4:	07 5a       	subi	r16, 0xA7	; 167
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	fe 01       	movw	r30, r28
    29fa:	e5 5a       	subi	r30, 0xA5	; 165
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	f8 01       	movw	r30, r16
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	80 83       	st	Z, r24
    2a14:	de 01       	movw	r26, r28
    2a16:	ab 5a       	subi	r26, 0xAB	; 171
    2a18:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e7 5a       	subi	r30, 0xA7	; 167
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	8d 93       	st	X+, r24
    2a26:	9c 93       	st	X, r25
    2a28:	fe 01       	movw	r30, r28
    2a2a:	eb 5a       	subi	r30, 0xAB	; 171
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <APP_VidLED_Mode+0x79c>
    2a36:	fe 01       	movw	r30, r28
    2a38:	eb 5a       	subi	r30, 0xAB	; 171
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
		break  ;
		/*3- Shifting Right every 150 ms*/
	case switch3 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch3);
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(u8 i =0 ; i<8 ;i++)
    2a40:	de 01       	movw	r26, r28
    2a42:	ad 56       	subi	r26, 0x6D	; 109
    2a44:	bf 4f       	sbci	r27, 0xFF	; 255
    2a46:	fe 01       	movw	r30, r28
    2a48:	ed 56       	subi	r30, 0x6D	; 109
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8f 5f       	subi	r24, 0xFF	; 255
    2a50:	8c 93       	st	X, r24
    2a52:	fe 01       	movw	r30, r28
    2a54:	ed 56       	subi	r30, 0x6D	; 109
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	88 30       	cpi	r24, 0x08	; 8
    2a5c:	08 f4       	brcc	.+2      	; 0x2a60 <APP_VidLED_Mode+0x7ca>
    2a5e:	2d cf       	rjmp	.-422    	; 0x28ba <APP_VidLED_Mode+0x624>
    2a60:	16 c4       	rjmp	.+2092   	; 0x328e <APP_VidLED_Mode+0xff8>

		}
		break  ;
		/*4- 2-LEDs Converging every 250 ms*/
	case switch4 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch4);
    2a62:	86 e7       	ldi	r24, 0x76	; 118
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	64 e0       	ldi	r22, 0x04	; 4
    2a68:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	60 e0       	ldi	r22, 0x00	; 0
    2a70:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(s8 i =7 ; i>=4 ;i--)
    2a74:	fe 01       	movw	r30, r28
    2a76:	ee 56       	subi	r30, 0x6E	; 110
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	87 e0       	ldi	r24, 0x07	; 7
    2a7c:	80 83       	st	Z, r24
    2a7e:	d2 c0       	rjmp	.+420    	; 0x2c24 <APP_VidLED_Mode+0x98e>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue((7-i),HLED_PORTA,PIN_HIGH);
    2a88:	fe 01       	movw	r30, r28
    2a8a:	ee 56       	subi	r30, 0x6E	; 110
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	90 81       	ld	r25, Z
    2a90:	87 e0       	ldi	r24, 0x07	; 7
    2a92:	89 1b       	sub	r24, r25
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	41 e0       	ldi	r20, 0x01	; 1
    2a98:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ee 56       	subi	r30, 0x6E	; 110
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    2aac:	fe 01       	movw	r30, r28
    2aae:	ef 5a       	subi	r30, 0xAF	; 175
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	aa e7       	ldi	r26, 0x7A	; 122
    2ab8:	b3 e4       	ldi	r27, 0x43	; 67
    2aba:	80 83       	st	Z, r24
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	a2 83       	std	Z+2, r26	; 0x02
    2ac0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac2:	8e 01       	movw	r16, r28
    2ac4:	03 5b       	subi	r16, 0xB3	; 179
    2ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac8:	fe 01       	movw	r30, r28
    2aca:	ef 5a       	subi	r30, 0xAF	; 175
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	4a ef       	ldi	r20, 0xFA	; 250
    2adc:	54 e4       	ldi	r21, 0x44	; 68
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	80 83       	st	Z, r24
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	a2 83       	std	Z+2, r26	; 0x02
    2aee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2af0:	fe 01       	movw	r30, r28
    2af2:	e3 5b       	subi	r30, 0xB3	; 179
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	60 81       	ld	r22, Z
    2af8:	71 81       	ldd	r23, Z+1	; 0x01
    2afa:	82 81       	ldd	r24, Z+2	; 0x02
    2afc:	93 81       	ldd	r25, Z+3	; 0x03
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	44 f4       	brge	.+16     	; 0x2b1e <APP_VidLED_Mode+0x888>
		__ticks = 1;
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e5 5b       	subi	r30, 0xB5	; 181
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	80 83       	st	Z, r24
    2b1c:	64 c0       	rjmp	.+200    	; 0x2be6 <APP_VidLED_Mode+0x950>
	else if (__tmp > 65535)
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e3 5b       	subi	r30, 0xB3	; 179
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	0c f0       	brlt	.+2      	; 0x2b3e <APP_VidLED_Mode+0x8a8>
    2b3c:	43 c0       	rjmp	.+134    	; 0x2bc4 <APP_VidLED_Mode+0x92e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ef 5a       	subi	r30, 0xAF	; 175
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e2       	ldi	r20, 0x20	; 32
    2b52:	51 e4       	ldi	r21, 0x41	; 65
    2b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8e 01       	movw	r16, r28
    2b5e:	05 5b       	subi	r16, 0xB5	; 181
    2b60:	1f 4f       	sbci	r17, 0xFF	; 255
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	f8 01       	movw	r30, r16
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
    2b74:	1f c0       	rjmp	.+62     	; 0x2bb4 <APP_VidLED_Mode+0x91e>
    2b76:	fe 01       	movw	r30, r28
    2b78:	e7 5b       	subi	r30, 0xB7	; 183
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	88 ec       	ldi	r24, 0xC8	; 200
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	91 83       	std	Z+1, r25	; 0x01
    2b82:	80 83       	st	Z, r24
    2b84:	fe 01       	movw	r30, r28
    2b86:	e7 5b       	subi	r30, 0xB7	; 183
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <APP_VidLED_Mode+0x8f8>
    2b92:	fe 01       	movw	r30, r28
    2b94:	e7 5b       	subi	r30, 0xB7	; 183
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	91 83       	std	Z+1, r25	; 0x01
    2b9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9c:	de 01       	movw	r26, r28
    2b9e:	a5 5b       	subi	r26, 0xB5	; 181
    2ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e5 5b       	subi	r30, 0xB5	; 181
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	9c 93       	st	X, r25
    2bb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e5 5b       	subi	r30, 0xB5	; 181
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	d1 f6       	brne	.-76     	; 0x2b76 <APP_VidLED_Mode+0x8e0>
    2bc2:	27 c0       	rjmp	.+78     	; 0x2c12 <APP_VidLED_Mode+0x97c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc4:	8e 01       	movw	r16, r28
    2bc6:	05 5b       	subi	r16, 0xB5	; 181
    2bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e3 5b       	subi	r30, 0xB3	; 179
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	60 81       	ld	r22, Z
    2bd2:	71 81       	ldd	r23, Z+1	; 0x01
    2bd4:	82 81       	ldd	r24, Z+2	; 0x02
    2bd6:	93 81       	ldd	r25, Z+3	; 0x03
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	f8 01       	movw	r30, r16
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	80 83       	st	Z, r24
    2be6:	de 01       	movw	r26, r28
    2be8:	a9 5b       	subi	r26, 0xB9	; 185
    2bea:	bf 4f       	sbci	r27, 0xFF	; 255
    2bec:	fe 01       	movw	r30, r28
    2bee:	e5 5b       	subi	r30, 0xB5	; 181
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	8d 93       	st	X+, r24
    2bf8:	9c 93       	st	X, r25
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e9 5b       	subi	r30, 0xB9	; 185
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <APP_VidLED_Mode+0x96e>
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e9 5b       	subi	r30, 0xB9	; 185
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	91 83       	std	Z+1, r25	; 0x01
    2c10:	80 83       	st	Z, r24
		break  ;
		/*4- 2-LEDs Converging every 250 ms*/
	case switch4 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch4);
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(s8 i =7 ; i>=4 ;i--)
    2c12:	de 01       	movw	r26, r28
    2c14:	ae 56       	subi	r26, 0x6E	; 110
    2c16:	bf 4f       	sbci	r27, 0xFF	; 255
    2c18:	fe 01       	movw	r30, r28
    2c1a:	ee 56       	subi	r30, 0x6E	; 110
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	80 81       	ld	r24, Z
    2c20:	81 50       	subi	r24, 0x01	; 1
    2c22:	8c 93       	st	X, r24
    2c24:	fe 01       	movw	r30, r28
    2c26:	ee 56       	subi	r30, 0x6E	; 110
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	84 30       	cpi	r24, 0x04	; 4
    2c2e:	0c f0       	brlt	.+2      	; 0x2c32 <APP_VidLED_Mode+0x99c>
    2c30:	27 cf       	rjmp	.-434    	; 0x2a80 <APP_VidLED_Mode+0x7ea>
    2c32:	2d c3       	rjmp	.+1626   	; 0x328e <APP_VidLED_Mode+0xff8>
			_delay_ms(250);
		}
		break  ;
		/*5- 2-LEDs Diverging every 250 ms*/
	case switch5 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch5);
    2c34:	86 e7       	ldi	r24, 0x76	; 118
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	65 e0       	ldi	r22, 0x05	; 5
    2c3a:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	60 e0       	ldi	r22, 0x00	; 0
    2c42:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(s8 i =3 ; i>= 0 ;i--)
    2c46:	fe 01       	movw	r30, r28
    2c48:	ef 56       	subi	r30, 0x6F	; 111
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	83 e0       	ldi	r24, 0x03	; 3
    2c4e:	80 83       	st	Z, r24
    2c50:	a4 c0       	rjmp	.+328    	; 0x2d9a <APP_VidLED_Mode+0xb04>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ef 56       	subi	r30, 0x6F	; 111
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 81       	ld	r24, Z
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue((7-i),HLED_PORTA,PIN_HIGH);
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	ef 56       	subi	r30, 0x6F	; 111
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	90 81       	ld	r25, Z
    2c72:	87 e0       	ldi	r24, 0x07	; 7
    2c74:	89 1b       	sub	r24, r25
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ed 5b       	subi	r30, 0xBD	; 189
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	aa e7       	ldi	r26, 0x7A	; 122
    2c8a:	b3 e4       	ldi	r27, 0x43	; 67
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	8e 01       	movw	r16, r28
    2c96:	01 5c       	subi	r16, 0xC1	; 193
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ed 5b       	subi	r30, 0xBD	; 189
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	4a ef       	ldi	r20, 0xFA	; 250
    2cae:	54 e4       	ldi	r21, 0x44	; 68
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	f8 01       	movw	r30, r16
    2cba:	80 83       	st	Z, r24
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	a2 83       	std	Z+2, r26	; 0x02
    2cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ff 96       	adiw	r30, 0x3f	; 63
    2cc6:	60 81       	ld	r22, Z
    2cc8:	71 81       	ldd	r23, Z+1	; 0x01
    2cca:	82 81       	ldd	r24, Z+2	; 0x02
    2ccc:	93 81       	ldd	r25, Z+3	; 0x03
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e8       	ldi	r20, 0x80	; 128
    2cd4:	5f e3       	ldi	r21, 0x3F	; 63
    2cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cda:	88 23       	and	r24, r24
    2cdc:	2c f4       	brge	.+10     	; 0x2ce8 <APP_VidLED_Mode+0xa52>
		__ticks = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9e af       	std	Y+62, r25	; 0x3e
    2ce4:	8d af       	std	Y+61, r24	; 0x3d
    2ce6:	46 c0       	rjmp	.+140    	; 0x2d74 <APP_VidLED_Mode+0xade>
	else if (__tmp > 65535)
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ff 96       	adiw	r30, 0x3f	; 63
    2cec:	60 81       	ld	r22, Z
    2cee:	71 81       	ldd	r23, Z+1	; 0x01
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	93 81       	ldd	r25, Z+3	; 0x03
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	3f ef       	ldi	r19, 0xFF	; 255
    2cf8:	4f e7       	ldi	r20, 0x7F	; 127
    2cfa:	57 e4       	ldi	r21, 0x47	; 71
    2cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d00:	18 16       	cp	r1, r24
    2d02:	64 f5       	brge	.+88     	; 0x2d5c <APP_VidLED_Mode+0xac6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d04:	fe 01       	movw	r30, r28
    2d06:	ed 5b       	subi	r30, 0xBD	; 189
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e2       	ldi	r20, 0x20	; 32
    2d18:	51 e4       	ldi	r21, 0x41	; 65
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	bc 01       	movw	r22, r24
    2d24:	cd 01       	movw	r24, r26
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9e af       	std	Y+62, r25	; 0x3e
    2d30:	8d af       	std	Y+61, r24	; 0x3d
    2d32:	0f c0       	rjmp	.+30     	; 0x2d52 <APP_VidLED_Mode+0xabc>
    2d34:	88 ec       	ldi	r24, 0xC8	; 200
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9c af       	std	Y+60, r25	; 0x3c
    2d3a:	8b af       	std	Y+59, r24	; 0x3b
    2d3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <APP_VidLED_Mode+0xaaa>
    2d44:	9c af       	std	Y+60, r25	; 0x3c
    2d46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	9e af       	std	Y+62, r25	; 0x3e
    2d50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d52:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d54:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	69 f7       	brne	.-38     	; 0x2d34 <APP_VidLED_Mode+0xa9e>
    2d5a:	16 c0       	rjmp	.+44     	; 0x2d88 <APP_VidLED_Mode+0xaf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	ff 96       	adiw	r30, 0x3f	; 63
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	9e af       	std	Y+62, r25	; 0x3e
    2d72:	8d af       	std	Y+61, r24	; 0x3d
    2d74:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d76:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d78:	9a af       	std	Y+58, r25	; 0x3a
    2d7a:	89 af       	std	Y+57, r24	; 0x39
    2d7c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <APP_VidLED_Mode+0xaea>
    2d84:	9a af       	std	Y+58, r25	; 0x3a
    2d86:	89 af       	std	Y+57, r24	; 0x39
		break  ;
		/*5- 2-LEDs Diverging every 250 ms*/
	case switch5 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch5);
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(s8 i =3 ; i>= 0 ;i--)
    2d88:	de 01       	movw	r26, r28
    2d8a:	af 56       	subi	r26, 0x6F	; 111
    2d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ef 56       	subi	r30, 0x6F	; 111
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	81 50       	subi	r24, 0x01	; 1
    2d98:	8c 93       	st	X, r24
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ef 56       	subi	r30, 0x6F	; 111
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	88 23       	and	r24, r24
    2da4:	0c f0       	brlt	.+2      	; 0x2da8 <APP_VidLED_Mode+0xb12>
    2da6:	55 cf       	rjmp	.-342    	; 0x2c52 <APP_VidLED_Mode+0x9bc>
    2da8:	72 c2       	rjmp	.+1252   	; 0x328e <APP_VidLED_Mode+0xff8>
			_delay_ms(250);
		}
		break  ;
		/*6- Ping Pong effect every 250 ms*/
	case switch6 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch6);
    2daa:	86 e7       	ldi	r24, 0x76	; 118
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	66 e0       	ldi	r22, 0x06	; 6
    2db0:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(u8 i = 0 ; i<8 ;i++)
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e0 57       	subi	r30, 0x70	; 112
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	10 82       	st	Z, r1
    2dc4:	83 c0       	rjmp	.+262    	; 0x2ecc <APP_VidLED_Mode+0xc36>
		{
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e0 57       	subi	r30, 0x70	; 112
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 81       	ld	r24, Z
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	41 e0       	ldi	r20, 0x01	; 1
    2dd2:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	aa e7       	ldi	r26, 0x7A	; 122
    2ddc:	b3 e4       	ldi	r27, 0x43	; 67
    2dde:	8d ab       	std	Y+53, r24	; 0x35
    2de0:	9e ab       	std	Y+54, r25	; 0x36
    2de2:	af ab       	std	Y+55, r26	; 0x37
    2de4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de6:	6d a9       	ldd	r22, Y+53	; 0x35
    2de8:	7e a9       	ldd	r23, Y+54	; 0x36
    2dea:	8f a9       	ldd	r24, Y+55	; 0x37
    2dec:	98 ad       	ldd	r25, Y+56	; 0x38
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a ef       	ldi	r20, 0xFA	; 250
    2df4:	54 e4       	ldi	r21, 0x44	; 68
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	89 ab       	std	Y+49, r24	; 0x31
    2e00:	9a ab       	std	Y+50, r25	; 0x32
    2e02:	ab ab       	std	Y+51, r26	; 0x33
    2e04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e06:	69 a9       	ldd	r22, Y+49	; 0x31
    2e08:	7a a9       	ldd	r23, Y+50	; 0x32
    2e0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e8       	ldi	r20, 0x80	; 128
    2e14:	5f e3       	ldi	r21, 0x3F	; 63
    2e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e1a:	88 23       	and	r24, r24
    2e1c:	2c f4       	brge	.+10     	; 0x2e28 <APP_VidLED_Mode+0xb92>
		__ticks = 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	98 ab       	std	Y+48, r25	; 0x30
    2e24:	8f a7       	std	Y+47, r24	; 0x2f
    2e26:	3f c0       	rjmp	.+126    	; 0x2ea6 <APP_VidLED_Mode+0xc10>
	else if (__tmp > 65535)
    2e28:	69 a9       	ldd	r22, Y+49	; 0x31
    2e2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	3f ef       	ldi	r19, 0xFF	; 255
    2e34:	4f e7       	ldi	r20, 0x7F	; 127
    2e36:	57 e4       	ldi	r21, 0x47	; 71
    2e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3c:	18 16       	cp	r1, r24
    2e3e:	4c f5       	brge	.+82     	; 0x2e92 <APP_VidLED_Mode+0xbfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e40:	6d a9       	ldd	r22, Y+53	; 0x35
    2e42:	7e a9       	ldd	r23, Y+54	; 0x36
    2e44:	8f a9       	ldd	r24, Y+55	; 0x37
    2e46:	98 ad       	ldd	r25, Y+56	; 0x38
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	98 ab       	std	Y+48, r25	; 0x30
    2e66:	8f a7       	std	Y+47, r24	; 0x2f
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <APP_VidLED_Mode+0xbf2>
    2e6a:	88 ec       	ldi	r24, 0xC8	; 200
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	9e a7       	std	Y+46, r25	; 0x2e
    2e70:	8d a7       	std	Y+45, r24	; 0x2d
    2e72:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e74:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <APP_VidLED_Mode+0xbe0>
    2e7a:	9e a7       	std	Y+46, r25	; 0x2e
    2e7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e80:	98 a9       	ldd	r25, Y+48	; 0x30
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	98 ab       	std	Y+48, r25	; 0x30
    2e86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	69 f7       	brne	.-38     	; 0x2e6a <APP_VidLED_Mode+0xbd4>
    2e90:	14 c0       	rjmp	.+40     	; 0x2eba <APP_VidLED_Mode+0xc24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e92:	69 a9       	ldd	r22, Y+49	; 0x31
    2e94:	7a a9       	ldd	r23, Y+50	; 0x32
    2e96:	8b a9       	ldd	r24, Y+51	; 0x33
    2e98:	9c a9       	ldd	r25, Y+52	; 0x34
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	98 ab       	std	Y+48, r25	; 0x30
    2ea4:	8f a7       	std	Y+47, r24	; 0x2f
    2ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eaa:	9c a7       	std	Y+44, r25	; 0x2c
    2eac:	8b a7       	std	Y+43, r24	; 0x2b
    2eae:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <APP_VidLED_Mode+0xc1c>
    2eb6:	9c a7       	std	Y+44, r25	; 0x2c
    2eb8:	8b a7       	std	Y+43, r24	; 0x2b
		break  ;
		/*6- Ping Pong effect every 250 ms*/
	case switch6 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch6);
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(u8 i = 0 ; i<8 ;i++)
    2eba:	de 01       	movw	r26, r28
    2ebc:	a0 57       	subi	r26, 0x70	; 112
    2ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e0 57       	subi	r30, 0x70	; 112
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	8f 5f       	subi	r24, 0xFF	; 255
    2eca:	8c 93       	st	X, r24
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e0 57       	subi	r30, 0x70	; 112
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	88 30       	cpi	r24, 0x08	; 8
    2ed6:	08 f4       	brcc	.+2      	; 0x2eda <APP_VidLED_Mode+0xc44>
    2ed8:	76 cf       	rjmp	.-276    	; 0x2dc6 <APP_VidLED_Mode+0xb30>
    2eda:	d9 c1       	rjmp	.+946    	; 0x328e <APP_VidLED_Mode+0xff8>
			_delay_ms(250);
		}
		break  ;
		/*7- Incrementing (Snake effect) every 250 ms*/
	case switch7 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch7);
    2edc:	86 e7       	ldi	r24, 0x76	; 118
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	67 e0       	ldi	r22, 0x07	; 7
    2ee2:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(u8 i = 0 ; i<8 ;i++)
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e1 57       	subi	r30, 0x71	; 113
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	10 82       	st	Z, r1
    2ef6:	87 c0       	rjmp	.+270    	; 0x3006 <APP_VidLED_Mode+0xd70>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    2f00:	fe 01       	movw	r30, r28
    2f02:	e1 57       	subi	r30, 0x71	; 113
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 81       	ld	r24, Z
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	aa e7       	ldi	r26, 0x7A	; 122
    2f16:	b3 e4       	ldi	r27, 0x43	; 67
    2f18:	8f a3       	std	Y+39, r24	; 0x27
    2f1a:	98 a7       	std	Y+40, r25	; 0x28
    2f1c:	a9 a7       	std	Y+41, r26	; 0x29
    2f1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6f a1       	ldd	r22, Y+39	; 0x27
    2f22:	78 a5       	ldd	r23, Y+40	; 0x28
    2f24:	89 a5       	ldd	r24, Y+41	; 0x29
    2f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	8b a3       	std	Y+35, r24	; 0x23
    2f3a:	9c a3       	std	Y+36, r25	; 0x24
    2f3c:	ad a3       	std	Y+37, r26	; 0x25
    2f3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f40:	6b a1       	ldd	r22, Y+35	; 0x23
    2f42:	7c a1       	ldd	r23, Y+36	; 0x24
    2f44:	8d a1       	ldd	r24, Y+37	; 0x25
    2f46:	9e a1       	ldd	r25, Y+38	; 0x26
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <APP_VidLED_Mode+0xccc>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9a a3       	std	Y+34, r25	; 0x22
    2f5e:	89 a3       	std	Y+33, r24	; 0x21
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <APP_VidLED_Mode+0xd4a>
	else if (__tmp > 65535)
    2f62:	6b a1       	ldd	r22, Y+35	; 0x23
    2f64:	7c a1       	ldd	r23, Y+36	; 0x24
    2f66:	8d a1       	ldd	r24, Y+37	; 0x25
    2f68:	9e a1       	ldd	r25, Y+38	; 0x26
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <APP_VidLED_Mode+0xd36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9a a3       	std	Y+34, r25	; 0x22
    2fa0:	89 a3       	std	Y+33, r24	; 0x21
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <APP_VidLED_Mode+0xd2c>
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	98 a3       	std	Y+32, r25	; 0x20
    2faa:	8f 8f       	std	Y+31, r24	; 0x1f
    2fac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fae:	98 a1       	ldd	r25, Y+32	; 0x20
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <APP_VidLED_Mode+0xd1a>
    2fb4:	98 a3       	std	Y+32, r25	; 0x20
    2fb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fba:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <APP_VidLED_Mode+0xd0e>
    2fca:	14 c0       	rjmp	.+40     	; 0x2ff4 <APP_VidLED_Mode+0xd5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2fce:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9a a3       	std	Y+34, r25	; 0x22
    2fde:	89 a3       	std	Y+33, r24	; 0x21
    2fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fe6:	8d 8f       	std	Y+29, r24	; 0x1d
    2fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <APP_VidLED_Mode+0xd56>
    2ff0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ff2:	8d 8f       	std	Y+29, r24	; 0x1d
		break  ;
		/*7- Incrementing (Snake effect) every 250 ms*/
	case switch7 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch7);
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(u8 i = 0 ; i<8 ;i++)
    2ff4:	de 01       	movw	r26, r28
    2ff6:	a1 57       	subi	r26, 0x71	; 113
    2ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e1 57       	subi	r30, 0x71	; 113
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	80 81       	ld	r24, Z
    3002:	8f 5f       	subi	r24, 0xFF	; 255
    3004:	8c 93       	st	X, r24
    3006:	fe 01       	movw	r30, r28
    3008:	e1 57       	subi	r30, 0x71	; 113
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	80 81       	ld	r24, Z
    300e:	88 30       	cpi	r24, 0x08	; 8
    3010:	08 f4       	brcc	.+2      	; 0x3014 <APP_VidLED_Mode+0xd7e>
    3012:	72 cf       	rjmp	.-284    	; 0x2ef8 <APP_VidLED_Mode+0xc62>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
			_delay_ms(250);
		}
		for(s8 i =7 ; i>=0 ;i--)
    3014:	fe 01       	movw	r30, r28
    3016:	e2 57       	subi	r30, 0x72	; 114
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	87 e0       	ldi	r24, 0x07	; 7
    301c:	80 83       	st	Z, r24
    301e:	87 c0       	rjmp	.+270    	; 0x312e <APP_VidLED_Mode+0xe98>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    3028:	fe 01       	movw	r30, r28
    302a:	e2 57       	subi	r30, 0x72	; 114
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	41 e0       	ldi	r20, 0x01	; 1
    3034:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	aa e7       	ldi	r26, 0x7A	; 122
    303e:	b3 e4       	ldi	r27, 0x43	; 67
    3040:	89 8f       	std	Y+25, r24	; 0x19
    3042:	9a 8f       	std	Y+26, r25	; 0x1a
    3044:	ab 8f       	std	Y+27, r26	; 0x1b
    3046:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	69 8d       	ldd	r22, Y+25	; 0x19
    304a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8d 8b       	std	Y+21, r24	; 0x15
    3062:	9e 8b       	std	Y+22, r25	; 0x16
    3064:	af 8b       	std	Y+23, r26	; 0x17
    3066:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3068:	6d 89       	ldd	r22, Y+21	; 0x15
    306a:	7e 89       	ldd	r23, Y+22	; 0x16
    306c:	8f 89       	ldd	r24, Y+23	; 0x17
    306e:	98 8d       	ldd	r25, Y+24	; 0x18
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <APP_VidLED_Mode+0xdf4>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9c 8b       	std	Y+20, r25	; 0x14
    3086:	8b 8b       	std	Y+19, r24	; 0x13
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <APP_VidLED_Mode+0xe72>
	else if (__tmp > 65535)
    308a:	6d 89       	ldd	r22, Y+21	; 0x15
    308c:	7e 89       	ldd	r23, Y+22	; 0x16
    308e:	8f 89       	ldd	r24, Y+23	; 0x17
    3090:	98 8d       	ldd	r25, Y+24	; 0x18
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <APP_VidLED_Mode+0xe5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	69 8d       	ldd	r22, Y+25	; 0x19
    30a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9c 8b       	std	Y+20, r25	; 0x14
    30c8:	8b 8b       	std	Y+19, r24	; 0x13
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <APP_VidLED_Mode+0xe54>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9a 8b       	std	Y+18, r25	; 0x12
    30d2:	89 8b       	std	Y+17, r24	; 0x11
    30d4:	89 89       	ldd	r24, Y+17	; 0x11
    30d6:	9a 89       	ldd	r25, Y+18	; 0x12
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <APP_VidLED_Mode+0xe42>
    30dc:	9a 8b       	std	Y+18, r25	; 0x12
    30de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8b 89       	ldd	r24, Y+19	; 0x13
    30e2:	9c 89       	ldd	r25, Y+20	; 0x14
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9c 8b       	std	Y+20, r25	; 0x14
    30e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8b 89       	ldd	r24, Y+19	; 0x13
    30ec:	9c 89       	ldd	r25, Y+20	; 0x14
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <APP_VidLED_Mode+0xe36>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <APP_VidLED_Mode+0xe86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6d 89       	ldd	r22, Y+21	; 0x15
    30f6:	7e 89       	ldd	r23, Y+22	; 0x16
    30f8:	8f 89       	ldd	r24, Y+23	; 0x17
    30fa:	98 8d       	ldd	r25, Y+24	; 0x18
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9c 8b       	std	Y+20, r25	; 0x14
    3106:	8b 8b       	std	Y+19, r24	; 0x13
    3108:	8b 89       	ldd	r24, Y+19	; 0x13
    310a:	9c 89       	ldd	r25, Y+20	; 0x14
    310c:	98 8b       	std	Y+16, r25	; 0x10
    310e:	8f 87       	std	Y+15, r24	; 0x0f
    3110:	8f 85       	ldd	r24, Y+15	; 0x0f
    3112:	98 89       	ldd	r25, Y+16	; 0x10
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <APP_VidLED_Mode+0xe7e>
    3118:	98 8b       	std	Y+16, r25	; 0x10
    311a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
			_delay_ms(250);
		}
		for(s8 i =7 ; i>=0 ;i--)
    311c:	de 01       	movw	r26, r28
    311e:	a2 57       	subi	r26, 0x72	; 114
    3120:	bf 4f       	sbci	r27, 0xFF	; 255
    3122:	fe 01       	movw	r30, r28
    3124:	e2 57       	subi	r30, 0x72	; 114
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	80 81       	ld	r24, Z
    312a:	81 50       	subi	r24, 0x01	; 1
    312c:	8c 93       	st	X, r24
    312e:	fe 01       	movw	r30, r28
    3130:	e2 57       	subi	r30, 0x72	; 114
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	88 23       	and	r24, r24
    3138:	0c f0       	brlt	.+2      	; 0x313c <APP_VidLED_Mode+0xea6>
    313a:	72 cf       	rjmp	.-284    	; 0x3020 <APP_VidLED_Mode+0xd8a>
    313c:	a8 c0       	rjmp	.+336    	; 0x328e <APP_VidLED_Mode+0xff8>
			_delay_ms(250);
		}
		break  ;
		/*8-	2-LEDs Converging/Diverging every 250 ms*/
	case switch8 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch8);
    313e:	86 e7       	ldi	r24, 0x76	; 118
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	68 e0       	ldi	r22, 0x08	; 8
    3144:	0e 94 41 0a 	call	0x1482	; 0x1482 <HSEVEN_SEGMENT_VidDisplayNumber>
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
		for(u8 i =0 ; i<8 ;i++)
    3150:	fe 01       	movw	r30, r28
    3152:	e3 57       	subi	r30, 0x73	; 115
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	10 82       	st	Z, r1
    3158:	93 c0       	rjmp	.+294    	; 0x3280 <APP_VidLED_Mode+0xfea>
		{
			MDIO_Error_State_SetPortValue(HLED_PORTA,0);
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	60 e0       	ldi	r22, 0x00	; 0
    315e:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
			MDIO_Error_State_SetPinValue((7-i),HLED_PORTA,PIN_HIGH);
    3162:	fe 01       	movw	r30, r28
    3164:	e3 57       	subi	r30, 0x73	; 115
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	97 e0       	ldi	r25, 0x07	; 7
    316a:	80 81       	ld	r24, Z
    316c:	f9 2f       	mov	r31, r25
    316e:	f8 1b       	sub	r31, r24
    3170:	8f 2f       	mov	r24, r31
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	41 e0       	ldi	r20, 0x01	; 1
    3176:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(i,HLED_PORTA,PIN_HIGH);
    317a:	fe 01       	movw	r30, r28
    317c:	e3 57       	subi	r30, 0x73	; 115
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	60 e0       	ldi	r22, 0x00	; 0
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	aa e7       	ldi	r26, 0x7A	; 122
    3190:	b3 e4       	ldi	r27, 0x43	; 67
    3192:	8b 87       	std	Y+11, r24	; 0x0b
    3194:	9c 87       	std	Y+12, r25	; 0x0c
    3196:	ad 87       	std	Y+13, r26	; 0x0d
    3198:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    319a:	6b 85       	ldd	r22, Y+11	; 0x0b
    319c:	7c 85       	ldd	r23, Y+12	; 0x0c
    319e:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	4a ef       	ldi	r20, 0xFA	; 250
    31a8:	54 e4       	ldi	r21, 0x44	; 68
    31aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	8f 83       	std	Y+7, r24	; 0x07
    31b4:	98 87       	std	Y+8, r25	; 0x08
    31b6:	a9 87       	std	Y+9, r26	; 0x09
    31b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ba:	6f 81       	ldd	r22, Y+7	; 0x07
    31bc:	78 85       	ldd	r23, Y+8	; 0x08
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e8       	ldi	r20, 0x80	; 128
    31c8:	5f e3       	ldi	r21, 0x3F	; 63
    31ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ce:	88 23       	and	r24, r24
    31d0:	2c f4       	brge	.+10     	; 0x31dc <APP_VidLED_Mode+0xf46>
		__ticks = 1;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
    31da:	3f c0       	rjmp	.+126    	; 0x325a <APP_VidLED_Mode+0xfc4>
	else if (__tmp > 65535)
    31dc:	6f 81       	ldd	r22, Y+7	; 0x07
    31de:	78 85       	ldd	r23, Y+8	; 0x08
    31e0:	89 85       	ldd	r24, Y+9	; 0x09
    31e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	3f ef       	ldi	r19, 0xFF	; 255
    31e8:	4f e7       	ldi	r20, 0x7F	; 127
    31ea:	57 e4       	ldi	r21, 0x47	; 71
    31ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31f0:	18 16       	cp	r1, r24
    31f2:	4c f5       	brge	.+82     	; 0x3246 <APP_VidLED_Mode+0xfb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e2       	ldi	r20, 0x20	; 32
    3202:	51 e4       	ldi	r21, 0x41	; 65
    3204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	bc 01       	movw	r22, r24
    320e:	cd 01       	movw	r24, r26
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
    321c:	0f c0       	rjmp	.+30     	; 0x323c <APP_VidLED_Mode+0xfa6>
    321e:	88 ec       	ldi	r24, 0xC8	; 200
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	9c 83       	std	Y+4, r25	; 0x04
    3224:	8b 83       	std	Y+3, r24	; 0x03
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	f1 f7       	brne	.-4      	; 0x322a <APP_VidLED_Mode+0xf94>
    322e:	9c 83       	std	Y+4, r25	; 0x04
    3230:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3232:	8d 81       	ldd	r24, Y+5	; 0x05
    3234:	9e 81       	ldd	r25, Y+6	; 0x06
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	9e 83       	std	Y+6, r25	; 0x06
    323a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	69 f7       	brne	.-38     	; 0x321e <APP_VidLED_Mode+0xf88>
    3244:	14 c0       	rjmp	.+40     	; 0x326e <APP_VidLED_Mode+0xfd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3246:	6f 81       	ldd	r22, Y+7	; 0x07
    3248:	78 85       	ldd	r23, Y+8	; 0x08
    324a:	89 85       	ldd	r24, Y+9	; 0x09
    324c:	9a 85       	ldd	r25, Y+10	; 0x0a
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	8d 81       	ldd	r24, Y+5	; 0x05
    325c:	9e 81       	ldd	r25, Y+6	; 0x06
    325e:	9a 83       	std	Y+2, r25	; 0x02
    3260:	89 83       	std	Y+1, r24	; 0x01
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	9a 81       	ldd	r25, Y+2	; 0x02
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <APP_VidLED_Mode+0xfd0>
    326a:	9a 83       	std	Y+2, r25	; 0x02
    326c:	89 83       	std	Y+1, r24	; 0x01
		break  ;
		/*8-	2-LEDs Converging/Diverging every 250 ms*/
	case switch8 :
		HSEVEN_SEGMENT_VidDisplayNumber(&SEVEN_SEG1,switch8);
		MDIO_Error_State_SetPortValue(HLED_PORTA,0);
		for(u8 i =0 ; i<8 ;i++)
    326e:	de 01       	movw	r26, r28
    3270:	a3 57       	subi	r26, 0x73	; 115
    3272:	bf 4f       	sbci	r27, 0xFF	; 255
    3274:	fe 01       	movw	r30, r28
    3276:	e3 57       	subi	r30, 0x73	; 115
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	80 81       	ld	r24, Z
    327c:	8f 5f       	subi	r24, 0xFF	; 255
    327e:	8c 93       	st	X, r24
    3280:	fe 01       	movw	r30, r28
    3282:	e3 57       	subi	r30, 0x73	; 115
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 81       	ld	r24, Z
    3288:	88 30       	cpi	r24, 0x08	; 8
    328a:	08 f4       	brcc	.+2      	; 0x328e <APP_VidLED_Mode+0xff8>
    328c:	66 cf       	rjmp	.-308    	; 0x315a <APP_VidLED_Mode+0xec4>
		break  ;
	default :
		break ;
		/*Do Nothing*/
	}
}
    328e:	c9 56       	subi	r28, 0x69	; 105
    3290:	df 4f       	sbci	r29, 0xFF	; 255
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	1f 91       	pop	r17
    32a2:	0f 91       	pop	r16
    32a4:	08 95       	ret

000032a6 <__prologue_saves__>:
    32a6:	2f 92       	push	r2
    32a8:	3f 92       	push	r3
    32aa:	4f 92       	push	r4
    32ac:	5f 92       	push	r5
    32ae:	6f 92       	push	r6
    32b0:	7f 92       	push	r7
    32b2:	8f 92       	push	r8
    32b4:	9f 92       	push	r9
    32b6:	af 92       	push	r10
    32b8:	bf 92       	push	r11
    32ba:	cf 92       	push	r12
    32bc:	df 92       	push	r13
    32be:	ef 92       	push	r14
    32c0:	ff 92       	push	r15
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	ca 1b       	sub	r28, r26
    32d0:	db 0b       	sbc	r29, r27
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	09 94       	ijmp

000032de <__epilogue_restores__>:
    32de:	2a 88       	ldd	r2, Y+18	; 0x12
    32e0:	39 88       	ldd	r3, Y+17	; 0x11
    32e2:	48 88       	ldd	r4, Y+16	; 0x10
    32e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    32e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    32e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    32ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    32ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    32ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    32f0:	b9 84       	ldd	r11, Y+9	; 0x09
    32f2:	c8 84       	ldd	r12, Y+8	; 0x08
    32f4:	df 80       	ldd	r13, Y+7	; 0x07
    32f6:	ee 80       	ldd	r14, Y+6	; 0x06
    32f8:	fd 80       	ldd	r15, Y+5	; 0x05
    32fa:	0c 81       	ldd	r16, Y+4	; 0x04
    32fc:	1b 81       	ldd	r17, Y+3	; 0x03
    32fe:	aa 81       	ldd	r26, Y+2	; 0x02
    3300:	b9 81       	ldd	r27, Y+1	; 0x01
    3302:	ce 0f       	add	r28, r30
    3304:	d1 1d       	adc	r29, r1
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	ed 01       	movw	r28, r26
    3312:	08 95       	ret

00003314 <_exit>:
    3314:	f8 94       	cli

00003316 <__stop_program>:
    3316:	ff cf       	rjmp	.-2      	; 0x3316 <__stop_program>
