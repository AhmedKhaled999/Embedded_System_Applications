
13-ICU_By_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00004716  000047aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080019e  0080019e  000048e8  2**0
                  ALLOC
  3 .stab         00004a28  00000000  00000000  000048e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cde  00000000  00000000  00009310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000afee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b18e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d78b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000eb11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001019e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_9>
      28:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__vector_10>
      2c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 21 	call	0x4294	; 0x4294 <main>
      8a:	0c 94 89 23 	jmp	0x4712	; 0x4712 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 23 	jmp	0x46b4	; 0x46b4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 62 23 	jmp	0x46c4	; 0x46c4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7e 23 	jmp	0x46fc	; 0x46fc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5a 23 	jmp	0x46b4	; 0x46b4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 57       	subi	r30, 0x75	; 117
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 7f       	andi	r24, 0xF8	; 248
     e42:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	83 60       	ori	r24, 0x03	; 3
     e50:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7e       	andi	r24, 0xEF	; 239
     e88:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     e9c:	e2 e5       	ldi	r30, 0x52	; 82
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	80 83       	st	Z, r24
}
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     eb8:	ec e5       	ldi	r30, 0x5C	; 92
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	80 83       	st	Z, r24
}
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <MTIMER0_VidOVF_SetCallBack+0x6>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	90 93 ae 01 	sts	0x01AE, r25
     ede:	80 93 ad 01 	sts	0x01AD, r24
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <MTIMER0_VidCTC_SetCallBack+0x6>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	90 93 ae 01 	sts	0x01AE, r25
     f02:	80 93 ad 01 	sts	0x01AD, r24
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     f3a:	e0 91 ad 01 	lds	r30, 0x01AD
     f3e:	f0 91 ae 01 	lds	r31, 0x01AE
     f42:	09 95       	icall
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	ff 91       	pop	r31
     f4a:	ef 91       	pop	r30
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	ef 93       	push	r30
     f8a:	ff 93       	push	r31
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     f94:	e0 91 ad 01 	lds	r30, 0x01AD
     f98:	f0 91 ae 01 	lds	r31, 0x01AE
     f9c:	09 95       	icall
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     fcc:	ae e4       	ldi	r26, 0x4E	; 78
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ee e4       	ldi	r30, 0x4E	; 78
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 7f       	andi	r24, 0xF8	; 248
     fd8:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     fda:	ae e4       	ldi	r26, 0x4E	; 78
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ee e4       	ldi	r30, 0x4E	; 78
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);

#elif TIMER1_SET_MODE == TIMER1_ICU_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     fe8:	ae e4       	ldi	r26, 0x4E	; 78
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ee e4       	ldi	r30, 0x4E	; 78
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8f 7e       	andi	r24, 0xEF	; 239
     ff4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     ff6:	ae e4       	ldi	r26, 0x4E	; 78
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ee e4       	ldi	r30, 0x4E	; 78
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	87 7f       	andi	r24, 0xF7	; 247
    1002:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8d 7f       	andi	r24, 0xFD	; 253
    1010:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
    1012:	af e4       	ldi	r26, 0x4F	; 79
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8e 7f       	andi	r24, 0xFE	; 254
    101e:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
    1020:	a9 e5       	ldi	r26, 0x59	; 89
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e9 e5       	ldi	r30, 0x59	; 89
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	84 60       	ori	r24, 0x04	; 4
    102e:	11 96       	adiw	r26, 0x01	; 1
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
    1034:	a9 e5       	ldi	r26, 0x59	; 89
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e9 e5       	ldi	r30, 0x59	; 89
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	80 62       	ori	r24, 0x20	; 32
    1042:	11 96       	adiw	r26, 0x01	; 1
    1044:	9c 93       	st	X, r25
    1046:	8e 93       	st	-X, r24
	/*ICU Edge Select-->Rising edge*/
#if TIMER1_ICU_EDGE_SELECT == TIMER1_ICU_RISING_EDGE
	SET_BIT(TCCR1B,6);
    1048:	ae e4       	ldi	r26, 0x4E	; 78
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ee e4       	ldi	r30, 0x4E	; 78
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	80 64       	ori	r24, 0x40	; 64
    1054:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <MTIMER1_VidSetPreload+0x6>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
    106a:	ec e4       	ldi	r30, 0x4C	; 76
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	80 83       	st	Z, r24
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1088:	ec e4       	ldi	r30, 0x4C	; 76
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
    109e:	e6 e4       	ldi	r30, 0x46	; 70
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	88 23       	and	r24, r24
    10bc:	41 f4       	brne	.+16     	; 0x10ce <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
    10be:	ae e4       	ldi	r26, 0x4E	; 78
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	ee e4       	ldi	r30, 0x4E	; 78
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8f 7b       	andi	r24, 0xBF	; 191
    10ca:	8c 93       	st	X, r24
    10cc:	0a c0       	rjmp	.+20     	; 0x10e2 <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	39 f4       	brne	.+14     	; 0x10e2 <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
    10d4:	ae e4       	ldi	r26, 0x4E	; 78
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ee e4       	ldi	r30, 0x4E	; 78
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 64       	ori	r24, 0x40	; 64
    10e0:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <MTIMER1_VidOVF_SetCallBack+0x6>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	90 93 b0 01 	sts	0x01B0, r25
    1100:	80 93 af 01 	sts	0x01AF, r24
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <MTIMER1_VidICF_SetCallBack+0x6>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	90 93 b2 01 	sts	0x01B2, r25
    1124:	80 93 b1 01 	sts	0x01B1, r24
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    115c:	e0 91 af 01 	lds	r30, 0x01AF
    1160:	f0 91 b0 01 	lds	r31, 0x01B0
    1164:	09 95       	icall
}
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	bf 91       	pop	r27
    1170:	af 91       	pop	r26
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	7f 91       	pop	r23
    1178:	6f 91       	pop	r22
    117a:	5f 91       	pop	r21
    117c:	4f 91       	pop	r20
    117e:	3f 91       	pop	r19
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti

0000118c <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
    118c:	1f 92       	push	r1
    118e:	0f 92       	push	r0
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	0f 92       	push	r0
    1194:	11 24       	eor	r1, r1
    1196:	2f 93       	push	r18
    1198:	3f 93       	push	r19
    119a:	4f 93       	push	r20
    119c:	5f 93       	push	r21
    119e:	6f 93       	push	r22
    11a0:	7f 93       	push	r23
    11a2:	8f 93       	push	r24
    11a4:	9f 93       	push	r25
    11a6:	af 93       	push	r26
    11a8:	bf 93       	push	r27
    11aa:	ef 93       	push	r30
    11ac:	ff 93       	push	r31
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
    11b6:	e0 91 b1 01 	lds	r30, 0x01B1
    11ba:	f0 91 b2 01 	lds	r31, 0x01B2
    11be:	09 95       	icall
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	ff 91       	pop	r31
    11c6:	ef 91       	pop	r30
    11c8:	bf 91       	pop	r27
    11ca:	af 91       	pop	r26
    11cc:	9f 91       	pop	r25
    11ce:	8f 91       	pop	r24
    11d0:	7f 91       	pop	r23
    11d2:	6f 91       	pop	r22
    11d4:	5f 91       	pop	r21
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    11ee:	af e5       	ldi	r26, 0x5F	; 95
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ef e5       	ldi	r30, 0x5F	; 95
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	80 68       	ori	r24, 0x80	; 128
    11fa:	8c 93       	st	X, r24
}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    120a:	af e5       	ldi	r26, 0x5F	; 95
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ef e5       	ldi	r30, 0x5F	; 95
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	8f 77       	andi	r24, 0x7F	; 127
    1216:	8c 93       	st	X, r24
}
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    1226:	a5 e5       	ldi	r26, 0x55	; 85
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e5       	ldi	r30, 0x55	; 85
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    1234:	a5 e5       	ldi	r26, 0x55	; 85
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e5 e5       	ldi	r30, 0x55	; 85
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	82 60       	ori	r24, 0x02	; 2
    1240:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	8c 93       	st	X, r24
}
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    125e:	a5 e5       	ldi	r26, 0x55	; 85
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e5       	ldi	r30, 0x55	; 85
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 60       	ori	r24, 0x08	; 8
    1278:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    127a:	ab e5       	ldi	r26, 0x5B	; 91
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e5       	ldi	r30, 0x5B	; 91
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	8c 93       	st	X, r24
}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    1296:	a4 e5       	ldi	r26, 0x54	; 84
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e4 e5       	ldi	r30, 0x54	; 84
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 64       	ori	r24, 0x40	; 64
    12a2:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    12a4:	ab e5       	ldi	r26, 0x5B	; 91
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	eb e5       	ldi	r30, 0x5B	; 91
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	80 62       	ori	r24, 0x20	; 32
    12b0:	8c 93       	st	X, r24
}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <MEXTI_VidSenseControl+0x6>
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <MEXTI_VidSenseControl+0x8>
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3c 83       	std	Y+4, r19	; 0x04
    12d0:	2b 83       	std	Y+3, r18	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	91 05       	cpc	r25, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <MEXTI_VidSenseControl+0x26>
    12dc:	54 c0       	rjmp	.+168    	; 0x1386 <MEXTI_VidSenseControl+0xce>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <MEXTI_VidSenseControl+0x32>
    12e8:	96 c0       	rjmp	.+300    	; 0x1416 <MEXTI_VidSenseControl+0x15e>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <MEXTI_VidSenseControl+0x3c>
    12f2:	a6 c0       	rjmp	.+332    	; 0x1440 <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 23       	and	r24, r24
    12f8:	79 f4       	brne	.+30     	; 0x1318 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    12fa:	a5 e5       	ldi	r26, 0x55	; 85
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e5 e5       	ldi	r30, 0x55	; 85
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8e 7f       	andi	r24, 0xFE	; 254
    1306:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1308:	a5 e5       	ldi	r26, 0x55	; 85
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e5 e5       	ldi	r30, 0x55	; 85
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8d 7f       	andi	r24, 0xFD	; 253
    1314:	8c 93       	st	X, r24
    1316:	94 c0       	rjmp	.+296    	; 0x1440 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	79 f4       	brne	.+30     	; 0x133c <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    131e:	a5 e5       	ldi	r26, 0x55	; 85
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e5       	ldi	r30, 0x55	; 85
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	81 60       	ori	r24, 0x01	; 1
    132a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    132c:	a5 e5       	ldi	r26, 0x55	; 85
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e5       	ldi	r30, 0x55	; 85
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8d 7f       	andi	r24, 0xFD	; 253
    1338:	8c 93       	st	X, r24
    133a:	82 c0       	rjmp	.+260    	; 0x1440 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	79 f4       	brne	.+30     	; 0x1360 <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    1342:	a5 e5       	ldi	r26, 0x55	; 85
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e5       	ldi	r30, 0x55	; 85
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1350:	a5 e5       	ldi	r26, 0x55	; 85
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e5       	ldi	r30, 0x55	; 85
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	82 60       	ori	r24, 0x02	; 2
    135c:	8c 93       	st	X, r24
    135e:	70 c0       	rjmp	.+224    	; 0x1440 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	09 f0       	breq	.+2      	; 0x1368 <MEXTI_VidSenseControl+0xb0>
    1366:	6c c0       	rjmp	.+216    	; 0x1440 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    1368:	a5 e5       	ldi	r26, 0x55	; 85
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e5       	ldi	r30, 0x55	; 85
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	81 60       	ori	r24, 0x01	; 1
    1374:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1376:	a5 e5       	ldi	r26, 0x55	; 85
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e5       	ldi	r30, 0x55	; 85
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	8c 93       	st	X, r24
    1384:	5d c0       	rjmp	.+186    	; 0x1440 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	88 23       	and	r24, r24
    138a:	79 f4       	brne	.+30     	; 0x13aa <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    138c:	a5 e5       	ldi	r26, 0x55	; 85
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e5       	ldi	r30, 0x55	; 85
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8b 7f       	andi	r24, 0xFB	; 251
    1398:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    139a:	a5 e5       	ldi	r26, 0x55	; 85
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e5       	ldi	r30, 0x55	; 85
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	87 7f       	andi	r24, 0xF7	; 247
    13a6:	8c 93       	st	X, r24
    13a8:	4b c0       	rjmp	.+150    	; 0x1440 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	79 f4       	brne	.+30     	; 0x13ce <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    13b0:	a5 e5       	ldi	r26, 0x55	; 85
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e5       	ldi	r30, 0x55	; 85
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	84 60       	ori	r24, 0x04	; 4
    13bc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    13be:	a5 e5       	ldi	r26, 0x55	; 85
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e5       	ldi	r30, 0x55	; 85
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	87 7f       	andi	r24, 0xF7	; 247
    13ca:	8c 93       	st	X, r24
    13cc:	39 c0       	rjmp	.+114    	; 0x1440 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	79 f4       	brne	.+30     	; 0x13f2 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    13d4:	a5 e5       	ldi	r26, 0x55	; 85
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e5 e5       	ldi	r30, 0x55	; 85
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    13e2:	a5 e5       	ldi	r26, 0x55	; 85
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e5 e5       	ldi	r30, 0x55	; 85
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	88 60       	ori	r24, 0x08	; 8
    13ee:	8c 93       	st	X, r24
    13f0:	27 c0       	rjmp	.+78     	; 0x1440 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	21 f5       	brne	.+72     	; 0x1440 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    13f8:	a5 e5       	ldi	r26, 0x55	; 85
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e5       	ldi	r30, 0x55	; 85
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	84 60       	ori	r24, 0x04	; 4
    1404:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1406:	a5 e5       	ldi	r26, 0x55	; 85
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e5       	ldi	r30, 0x55	; 85
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	8c 93       	st	X, r24
    1414:	15 c0       	rjmp	.+42     	; 0x1440 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	41 f4       	brne	.+16     	; 0x142c <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    141c:	a4 e5       	ldi	r26, 0x54	; 84
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e5       	ldi	r30, 0x54	; 84
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8f 7b       	andi	r24, 0xBF	; 191
    1428:	8c 93       	st	X, r24
    142a:	0a c0       	rjmp	.+20     	; 0x1440 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	39 f4       	brne	.+14     	; 0x1440 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    1432:	a4 e5       	ldi	r26, 0x54	; 84
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e4 e5       	ldi	r30, 0x54	; 84
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 64       	ori	r24, 0x40	; 64
    143e:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <MEXTI0_Set_CallBackFunction+0x6>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
    1460:	90 93 b4 01 	sts	0x01B4, r25
    1464:	80 93 b3 01 	sts	0x01B3, r24
}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	4f 93       	push	r20
    1482:	5f 93       	push	r21
    1484:	6f 93       	push	r22
    1486:	7f 93       	push	r23
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	af 93       	push	r26
    148e:	bf 93       	push	r27
    1490:	ef 93       	push	r30
    1492:	ff 93       	push	r31
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    149c:	e0 91 b3 01 	lds	r30, 0x01B3
    14a0:	f0 91 b4 01 	lds	r31, 0x01B4
    14a4:	09 95       	icall
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <MDIO_Error_State_SetPinDirection+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <MDIO_Error_State_SetPinDirection+0x8>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <MDIO_Error_State_SetPinDirection+0xa>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	6b 83       	std	Y+3, r22	; 0x03
    14de:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 30       	cpi	r24, 0x08	; 8
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <MDIO_Error_State_SetPinDirection+0x20>
    14ea:	e8 c0       	rjmp	.+464    	; 0x16bc <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3e 83       	std	Y+6, r19	; 0x06
    14f4:	2d 83       	std	Y+5, r18	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <MDIO_Error_State_SetPinDirection+0x36>
    1500:	48 c0       	rjmp	.+144    	; 0x1592 <MDIO_Error_State_SetPinDirection+0xc6>
    1502:	2d 81       	ldd	r18, Y+5	; 0x05
    1504:	3e 81       	ldd	r19, Y+6	; 0x06
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	2c f4       	brge	.+10     	; 0x1516 <MDIO_Error_State_SetPinDirection+0x4a>
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	71 f0       	breq	.+28     	; 0x1530 <MDIO_Error_State_SetPinDirection+0x64>
    1514:	d1 c0       	rjmp	.+418    	; 0x16b8 <MDIO_Error_State_SetPinDirection+0x1ec>
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <MDIO_Error_State_SetPinDirection+0x56>
    1520:	69 c0       	rjmp	.+210    	; 0x15f4 <MDIO_Error_State_SetPinDirection+0x128>
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <MDIO_Error_State_SetPinDirection+0x62>
    152c:	94 c0       	rjmp	.+296    	; 0x1656 <MDIO_Error_State_SetPinDirection+0x18a>
    152e:	c4 c0       	rjmp	.+392    	; 0x16b8 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	a1 f4       	brne	.+40     	; 0x155e <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    1536:	aa e3       	ldi	r26, 0x3A	; 58
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ea e3       	ldi	r30, 0x3A	; 58
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <MDIO_Error_State_SetPinDirection+0x88>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <MDIO_Error_State_SetPinDirection+0x84>
    1558:	84 2b       	or	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	b0 c0       	rjmp	.+352    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	88 23       	and	r24, r24
    1562:	a9 f4       	brne	.+42     	; 0x158e <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    1564:	aa e3       	ldi	r26, 0x3A	; 58
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <MDIO_Error_State_SetPinDirection+0xb6>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <MDIO_Error_State_SetPinDirection+0xb2>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	98 c0       	rjmp	.+304    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    158e:	19 82       	std	Y+1, r1	; 0x01
    1590:	96 c0       	rjmp	.+300    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	a1 f4       	brne	.+40     	; 0x15c0 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    1598:	a7 e3       	ldi	r26, 0x37	; 55
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e7 e3       	ldi	r30, 0x37	; 55
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <MDIO_Error_State_SetPinDirection+0xea>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <MDIO_Error_State_SetPinDirection+0xe6>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	7f c0       	rjmp	.+254    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	88 23       	and	r24, r24
    15c4:	a9 f4       	brne	.+42     	; 0x15f0 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    15c6:	a7 e3       	ldi	r26, 0x37	; 55
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <MDIO_Error_State_SetPinDirection+0x118>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <MDIO_Error_State_SetPinDirection+0x114>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	67 c0       	rjmp	.+206    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    15f0:	19 82       	std	Y+1, r1	; 0x01
    15f2:	65 c0       	rjmp	.+202    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	a1 f4       	brne	.+40     	; 0x1622 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    15fa:	a4 e3       	ldi	r26, 0x34	; 52
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e4 e3       	ldi	r30, 0x34	; 52
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <MDIO_Error_State_SetPinDirection+0x14c>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <MDIO_Error_State_SetPinDirection+0x148>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	4e c0       	rjmp	.+156    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	88 23       	and	r24, r24
    1626:	a9 f4       	brne	.+42     	; 0x1652 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    1628:	a4 e3       	ldi	r26, 0x34	; 52
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e4 e3       	ldi	r30, 0x34	; 52
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <MDIO_Error_State_SetPinDirection+0x17a>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <MDIO_Error_State_SetPinDirection+0x176>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	36 c0       	rjmp	.+108    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1652:	19 82       	std	Y+1, r1	; 0x01
    1654:	34 c0       	rjmp	.+104    	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	a1 f4       	brne	.+40     	; 0x1684 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    165c:	a1 e3       	ldi	r26, 0x31	; 49
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e1 e3       	ldi	r30, 0x31	; 49
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <MDIO_Error_State_SetPinDirection+0x1ae>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <MDIO_Error_State_SetPinDirection+0x1aa>
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	1d c0       	rjmp	.+58     	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	88 23       	and	r24, r24
    1688:	a9 f4       	brne	.+42     	; 0x16b4 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    168a:	a1 e3       	ldi	r26, 0x31	; 49
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e1 e3       	ldi	r30, 0x31	; 49
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <MDIO_Error_State_SetPinDirection+0x1dc>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <MDIO_Error_State_SetPinDirection+0x1d8>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    16b4:	19 82       	std	Y+1, r1	; 0x01
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    16b8:	19 82       	std	Y+1, r1	; 0x01
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    16bc:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    16be:	89 81       	ldd	r24, Y+1	; 0x01

}
    16c0:	26 96       	adiw	r28, 0x06	; 6
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <MDIO_Error_State_SetPortDirection+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <MDIO_Error_State_SetPortDirection+0x8>
    16da:	0f 92       	push	r0
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	8a 83       	std	Y+2, r24	; 0x02
    16e2:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	8f 3f       	cpi	r24, 0xFF	; 255
    16ec:	19 f0       	breq	.+6      	; 0x16f4 <MDIO_Error_State_SetPortDirection+0x22>
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	88 23       	and	r24, r24
    16f2:	a9 f5       	brne	.+106    	; 0x175e <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3d 83       	std	Y+5, r19	; 0x05
    16fc:	2c 83       	std	Y+4, r18	; 0x04
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	d1 f0       	breq	.+52     	; 0x173c <MDIO_Error_State_SetPortDirection+0x6a>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <MDIO_Error_State_SetPortDirection+0x4a>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	61 f0       	breq	.+24     	; 0x1732 <MDIO_Error_State_SetPortDirection+0x60>
    171a:	1f c0       	rjmp	.+62     	; 0x175a <MDIO_Error_State_SetPortDirection+0x88>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	81 f0       	breq	.+32     	; 0x1746 <MDIO_Error_State_SetPortDirection+0x74>
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	81 f0       	breq	.+32     	; 0x1750 <MDIO_Error_State_SetPortDirection+0x7e>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    1732:	ea e3       	ldi	r30, 0x3A	; 58
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	80 83       	st	Z, r24
    173a:	12 c0       	rjmp	.+36     	; 0x1760 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    173c:	e7 e3       	ldi	r30, 0x37	; 55
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	80 83       	st	Z, r24
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    1746:	e4 e3       	ldi	r30, 0x34	; 52
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	80 83       	st	Z, r24
    174e:	08 c0       	rjmp	.+16     	; 0x1760 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    1750:	e1 e3       	ldi	r30, 0x31	; 49
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	80 83       	st	Z, r24
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    175a:	19 82       	std	Y+1, r1	; 0x01
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    175e:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <MDIO_Error_State_SetPinValue+0x6>
    1778:	00 d0       	rcall	.+0      	; 0x177a <MDIO_Error_State_SetPinValue+0x8>
    177a:	00 d0       	rcall	.+0      	; 0x177c <MDIO_Error_State_SetPinValue+0xa>
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	8a 83       	std	Y+2, r24	; 0x02
    1782:	6b 83       	std	Y+3, r22	; 0x03
    1784:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	08 f0       	brcs	.+2      	; 0x1792 <MDIO_Error_State_SetPinValue+0x20>
    1790:	e8 c0       	rjmp	.+464    	; 0x1962 <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3e 83       	std	Y+6, r19	; 0x06
    179a:	2d 83       	std	Y+5, r18	; 0x05
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <MDIO_Error_State_SetPinValue+0x36>
    17a6:	48 c0       	rjmp	.+144    	; 0x1838 <MDIO_Error_State_SetPinValue+0xc6>
    17a8:	2d 81       	ldd	r18, Y+5	; 0x05
    17aa:	3e 81       	ldd	r19, Y+6	; 0x06
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	2c f4       	brge	.+10     	; 0x17bc <MDIO_Error_State_SetPinValue+0x4a>
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	71 f0       	breq	.+28     	; 0x17d6 <MDIO_Error_State_SetPinValue+0x64>
    17ba:	d1 c0       	rjmp	.+418    	; 0x195e <MDIO_Error_State_SetPinValue+0x1ec>
    17bc:	2d 81       	ldd	r18, Y+5	; 0x05
    17be:	3e 81       	ldd	r19, Y+6	; 0x06
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <MDIO_Error_State_SetPinValue+0x56>
    17c6:	69 c0       	rjmp	.+210    	; 0x189a <MDIO_Error_State_SetPinValue+0x128>
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	83 30       	cpi	r24, 0x03	; 3
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <MDIO_Error_State_SetPinValue+0x62>
    17d2:	94 c0       	rjmp	.+296    	; 0x18fc <MDIO_Error_State_SetPinValue+0x18a>
    17d4:	c4 c0       	rjmp	.+392    	; 0x195e <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	a1 f4       	brne	.+40     	; 0x1804 <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    17dc:	ab e3       	ldi	r26, 0x3B	; 59
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e3       	ldi	r30, 0x3B	; 59
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <MDIO_Error_State_SetPinValue+0x88>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <MDIO_Error_State_SetPinValue+0x84>
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	b0 c0       	rjmp	.+352    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	88 23       	and	r24, r24
    1808:	a9 f4       	brne	.+42     	; 0x1834 <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    180a:	ab e3       	ldi	r26, 0x3B	; 59
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	eb e3       	ldi	r30, 0x3B	; 59
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <MDIO_Error_State_SetPinValue+0xb6>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <MDIO_Error_State_SetPinValue+0xb2>
    182c:	80 95       	com	r24
    182e:	84 23       	and	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	98 c0       	rjmp	.+304    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1834:	19 82       	std	Y+1, r1	; 0x01
    1836:	96 c0       	rjmp	.+300    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	a1 f4       	brne	.+40     	; 0x1866 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    183e:	a8 e3       	ldi	r26, 0x38	; 56
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e8 e3       	ldi	r30, 0x38	; 56
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <MDIO_Error_State_SetPinValue+0xea>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <MDIO_Error_State_SetPinValue+0xe6>
    1860:	84 2b       	or	r24, r20
    1862:	8c 93       	st	X, r24
    1864:	7f c0       	rjmp	.+254    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	88 23       	and	r24, r24
    186a:	a9 f4       	brne	.+42     	; 0x1896 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    186c:	a8 e3       	ldi	r26, 0x38	; 56
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e8 e3       	ldi	r30, 0x38	; 56
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <MDIO_Error_State_SetPinValue+0x118>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <MDIO_Error_State_SetPinValue+0x114>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	67 c0       	rjmp	.+206    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1896:	19 82       	std	Y+1, r1	; 0x01
    1898:	65 c0       	rjmp	.+202    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	a1 f4       	brne	.+40     	; 0x18c8 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    18a0:	a5 e3       	ldi	r26, 0x35	; 53
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e5 e3       	ldi	r30, 0x35	; 53
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <MDIO_Error_State_SetPinValue+0x14c>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <MDIO_Error_State_SetPinValue+0x148>
    18c2:	84 2b       	or	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	4e c0       	rjmp	.+156    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	88 23       	and	r24, r24
    18cc:	a9 f4       	brne	.+42     	; 0x18f8 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    18ce:	a5 e3       	ldi	r26, 0x35	; 53
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e5 e3       	ldi	r30, 0x35	; 53
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <MDIO_Error_State_SetPinValue+0x17a>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <MDIO_Error_State_SetPinValue+0x176>
    18f0:	80 95       	com	r24
    18f2:	84 23       	and	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	36 c0       	rjmp	.+108    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    18f8:	19 82       	std	Y+1, r1	; 0x01
    18fa:	34 c0       	rjmp	.+104    	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	a1 f4       	brne	.+40     	; 0x192a <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    1902:	a2 e3       	ldi	r26, 0x32	; 50
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e2 e3       	ldi	r30, 0x32	; 50
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <MDIO_Error_State_SetPinValue+0x1ae>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <MDIO_Error_State_SetPinValue+0x1aa>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	1d c0       	rjmp	.+58     	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	88 23       	and	r24, r24
    192e:	a9 f4       	brne	.+42     	; 0x195a <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    1930:	a2 e3       	ldi	r26, 0x32	; 50
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e2 e3       	ldi	r30, 0x32	; 50
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <MDIO_Error_State_SetPinValue+0x1dc>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <MDIO_Error_State_SetPinValue+0x1d8>
    1952:	80 95       	com	r24
    1954:	84 23       	and	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    195a:	19 82       	std	Y+1, r1	; 0x01
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    195e:	19 82       	std	Y+1, r1	; 0x01
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    1962:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    1964:	89 81       	ldd	r24, Y+1	; 0x01

}
    1966:	26 96       	adiw	r28, 0x06	; 6
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <MDIO_Error_State_SetPortValue+0x6>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <MDIO_Error_State_SetPortValue+0x8>
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	8a 83       	std	Y+2, r24	; 0x02
    1988:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	3d 83       	std	Y+5, r19	; 0x05
    1996:	2c 83       	std	Y+4, r18	; 0x04
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	91 05       	cpc	r25, r1
    19a0:	d1 f0       	breq	.+52     	; 0x19d6 <MDIO_Error_State_SetPortValue+0x5e>
    19a2:	2c 81       	ldd	r18, Y+4	; 0x04
    19a4:	3d 81       	ldd	r19, Y+5	; 0x05
    19a6:	22 30       	cpi	r18, 0x02	; 2
    19a8:	31 05       	cpc	r19, r1
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <MDIO_Error_State_SetPortValue+0x3e>
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	61 f0       	breq	.+24     	; 0x19cc <MDIO_Error_State_SetPortValue+0x54>
    19b4:	1f c0       	rjmp	.+62     	; 0x19f4 <MDIO_Error_State_SetPortValue+0x7c>
    19b6:	2c 81       	ldd	r18, Y+4	; 0x04
    19b8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ba:	22 30       	cpi	r18, 0x02	; 2
    19bc:	31 05       	cpc	r19, r1
    19be:	81 f0       	breq	.+32     	; 0x19e0 <MDIO_Error_State_SetPortValue+0x68>
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	91 05       	cpc	r25, r1
    19c8:	81 f0       	breq	.+32     	; 0x19ea <MDIO_Error_State_SetPortValue+0x72>
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    19cc:	eb e3       	ldi	r30, 0x3B	; 59
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	80 83       	st	Z, r24
    19d4:	10 c0       	rjmp	.+32     	; 0x19f6 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    19d6:	e8 e3       	ldi	r30, 0x38	; 56
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	80 83       	st	Z, r24
    19de:	0b c0       	rjmp	.+22     	; 0x19f6 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    19e0:	e5 e3       	ldi	r30, 0x35	; 53
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	80 83       	st	Z, r24
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    19ea:	e2 e3       	ldi	r30, 0x32	; 50
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	80 83       	st	Z, r24
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    19f4:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	27 97       	sbiw	r28, 0x07	; 7
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	6b 83       	std	Y+3, r22	; 0x03
    1a20:	5d 83       	std	Y+5, r21	; 0x05
    1a22:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	88 30       	cpi	r24, 0x08	; 8
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <MDIO_Error_State_GetPinValue+0x28>
    1a2e:	79 c0       	rjmp	.+242    	; 0x1b22 <MDIO_Error_State_GetPinValue+0x11a>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <MDIO_Error_State_GetPinValue+0x34>
    1a3a:	73 c0       	rjmp	.+230    	; 0x1b22 <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	3f 83       	std	Y+7, r19	; 0x07
    1a44:	2e 83       	std	Y+6, r18	; 0x06
    1a46:	4e 81       	ldd	r20, Y+6	; 0x06
    1a48:	5f 81       	ldd	r21, Y+7	; 0x07
    1a4a:	41 30       	cpi	r20, 0x01	; 1
    1a4c:	51 05       	cpc	r21, r1
    1a4e:	59 f1       	breq	.+86     	; 0x1aa6 <MDIO_Error_State_GetPinValue+0x9e>
    1a50:	8e 81       	ldd	r24, Y+6	; 0x06
    1a52:	9f 81       	ldd	r25, Y+7	; 0x07
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	91 05       	cpc	r25, r1
    1a58:	34 f4       	brge	.+12     	; 0x1a66 <MDIO_Error_State_GetPinValue+0x5e>
    1a5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a5e:	21 15       	cp	r18, r1
    1a60:	31 05       	cpc	r19, r1
    1a62:	69 f0       	breq	.+26     	; 0x1a7e <MDIO_Error_State_GetPinValue+0x76>
    1a64:	5c c0       	rjmp	.+184    	; 0x1b1e <MDIO_Error_State_GetPinValue+0x116>
    1a66:	4e 81       	ldd	r20, Y+6	; 0x06
    1a68:	5f 81       	ldd	r21, Y+7	; 0x07
    1a6a:	42 30       	cpi	r20, 0x02	; 2
    1a6c:	51 05       	cpc	r21, r1
    1a6e:	79 f1       	breq	.+94     	; 0x1ace <MDIO_Error_State_GetPinValue+0xc6>
    1a70:	8e 81       	ldd	r24, Y+6	; 0x06
    1a72:	9f 81       	ldd	r25, Y+7	; 0x07
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <MDIO_Error_State_GetPinValue+0x74>
    1a7a:	3d c0       	rjmp	.+122    	; 0x1af6 <MDIO_Error_State_GetPinValue+0xee>
    1a7c:	50 c0       	rjmp	.+160    	; 0x1b1e <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    1a7e:	e9 e3       	ldi	r30, 0x39	; 57
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a9 01       	movw	r20, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <MDIO_Error_State_GetPinValue+0x8e>
    1a92:	55 95       	asr	r21
    1a94:	47 95       	ror	r20
    1a96:	8a 95       	dec	r24
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <MDIO_Error_State_GetPinValue+0x8a>
    1a9a:	ca 01       	movw	r24, r20
    1a9c:	81 70       	andi	r24, 0x01	; 1
    1a9e:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa0:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa2:	80 83       	st	Z, r24
    1aa4:	3f c0       	rjmp	.+126    	; 0x1b24 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1aa6:	e6 e3       	ldi	r30, 0x36	; 54
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a9 01       	movw	r20, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <MDIO_Error_State_GetPinValue+0xb6>
    1aba:	55 95       	asr	r21
    1abc:	47 95       	ror	r20
    1abe:	8a 95       	dec	r24
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <MDIO_Error_State_GetPinValue+0xb2>
    1ac2:	ca 01       	movw	r24, r20
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac8:	fd 81       	ldd	r31, Y+5	; 0x05
    1aca:	80 83       	st	Z, r24
    1acc:	2b c0       	rjmp	.+86     	; 0x1b24 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1ace:	e3 e3       	ldi	r30, 0x33	; 51
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a9 01       	movw	r20, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <MDIO_Error_State_GetPinValue+0xde>
    1ae2:	55 95       	asr	r21
    1ae4:	47 95       	ror	r20
    1ae6:	8a 95       	dec	r24
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <MDIO_Error_State_GetPinValue+0xda>
    1aea:	ca 01       	movw	r24, r20
    1aec:	81 70       	andi	r24, 0x01	; 1
    1aee:	ec 81       	ldd	r30, Y+4	; 0x04
    1af0:	fd 81       	ldd	r31, Y+5	; 0x05
    1af2:	80 83       	st	Z, r24
    1af4:	17 c0       	rjmp	.+46     	; 0x1b24 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1af6:	e0 e3       	ldi	r30, 0x30	; 48
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a9 01       	movw	r20, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <MDIO_Error_State_GetPinValue+0x106>
    1b0a:	55 95       	asr	r21
    1b0c:	47 95       	ror	r20
    1b0e:	8a 95       	dec	r24
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <MDIO_Error_State_GetPinValue+0x102>
    1b12:	ca 01       	movw	r24, r20
    1b14:	81 70       	andi	r24, 0x01	; 1
    1b16:	ec 81       	ldd	r30, Y+4	; 0x04
    1b18:	fd 81       	ldd	r31, Y+5	; 0x05
    1b1a:	80 83       	st	Z, r24
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1b1e:	19 82       	std	Y+1, r1	; 0x01
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1b22:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b26:	27 96       	adiw	r28, 0x07	; 7
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <MDIO_Error_State_SetNippleValue+0x6>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <MDIO_Error_State_SetNippleValue+0x8>
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <MDIO_Error_State_SetNippleValue+0xa>
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	8a 83       	std	Y+2, r24	; 0x02
    1b48:	6b 83       	std	Y+3, r22	; 0x03
    1b4a:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	85 30       	cpi	r24, 0x05	; 5
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <MDIO_Error_State_SetNippleValue+0x20>
    1b56:	c9 c0       	rjmp	.+402    	; 0x1cea <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	3e 83       	std	Y+6, r19	; 0x06
    1b60:	2d 83       	std	Y+5, r18	; 0x05
    1b62:	6d 81       	ldd	r22, Y+5	; 0x05
    1b64:	7e 81       	ldd	r23, Y+6	; 0x06
    1b66:	61 30       	cpi	r22, 0x01	; 1
    1b68:	71 05       	cpc	r23, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <MDIO_Error_State_SetNippleValue+0x36>
    1b6c:	41 c0       	rjmp	.+130    	; 0x1bf0 <MDIO_Error_State_SetNippleValue+0xb8>
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	82 30       	cpi	r24, 0x02	; 2
    1b74:	91 05       	cpc	r25, r1
    1b76:	34 f4       	brge	.+12     	; 0x1b84 <MDIO_Error_State_SetNippleValue+0x4c>
    1b78:	2d 81       	ldd	r18, Y+5	; 0x05
    1b7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b7c:	21 15       	cp	r18, r1
    1b7e:	31 05       	cpc	r19, r1
    1b80:	71 f0       	breq	.+28     	; 0x1b9e <MDIO_Error_State_SetNippleValue+0x66>
    1b82:	b1 c0       	rjmp	.+354    	; 0x1ce6 <MDIO_Error_State_SetNippleValue+0x1ae>
    1b84:	6d 81       	ldd	r22, Y+5	; 0x05
    1b86:	7e 81       	ldd	r23, Y+6	; 0x06
    1b88:	62 30       	cpi	r22, 0x02	; 2
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <MDIO_Error_State_SetNippleValue+0x58>
    1b8e:	59 c0       	rjmp	.+178    	; 0x1c42 <MDIO_Error_State_SetNippleValue+0x10a>
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <MDIO_Error_State_SetNippleValue+0x64>
    1b9a:	7c c0       	rjmp	.+248    	; 0x1c94 <MDIO_Error_State_SetNippleValue+0x15c>
    1b9c:	a4 c0       	rjmp	.+328    	; 0x1ce6 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1b9e:	ab e3       	ldi	r26, 0x3B	; 59
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	8f e0       	ldi	r24, 0x0F	; 15
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <MDIO_Error_State_SetNippleValue+0x82>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	2a 95       	dec	r18
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <MDIO_Error_State_SetNippleValue+0x7e>
    1bbe:	80 95       	com	r24
    1bc0:	84 23       	and	r24, r20
    1bc2:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1bc4:	ab e3       	ldi	r26, 0x3B	; 59
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	eb e3       	ldi	r30, 0x3B	; 59
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	b9 01       	movw	r22, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <MDIO_Error_State_SetNippleValue+0xac>
    1be0:	66 0f       	add	r22, r22
    1be2:	77 1f       	adc	r23, r23
    1be4:	8a 95       	dec	r24
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <MDIO_Error_State_SetNippleValue+0xa8>
    1be8:	cb 01       	movw	r24, r22
    1bea:	84 2b       	or	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	7e c0       	rjmp	.+252    	; 0x1cec <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1bf0:	a8 e3       	ldi	r26, 0x38	; 56
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e8 e3       	ldi	r30, 0x38	; 56
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8f e0       	ldi	r24, 0x0F	; 15
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <MDIO_Error_State_SetNippleValue+0xd4>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	2a 95       	dec	r18
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <MDIO_Error_State_SetNippleValue+0xd0>
    1c10:	80 95       	com	r24
    1c12:	84 23       	and	r24, r20
    1c14:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1c16:	a8 e3       	ldi	r26, 0x38	; 56
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e8 e3       	ldi	r30, 0x38	; 56
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	b9 01       	movw	r22, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <MDIO_Error_State_SetNippleValue+0xfe>
    1c32:	66 0f       	add	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	8a 95       	dec	r24
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <MDIO_Error_State_SetNippleValue+0xfa>
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	84 2b       	or	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	55 c0       	rjmp	.+170    	; 0x1cec <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1c42:	a5 e3       	ldi	r26, 0x35	; 53
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e5 e3       	ldi	r30, 0x35	; 53
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	8f e0       	ldi	r24, 0x0F	; 15
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <MDIO_Error_State_SetNippleValue+0x126>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	2a 95       	dec	r18
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <MDIO_Error_State_SetNippleValue+0x122>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1c68:	a5 e3       	ldi	r26, 0x35	; 53
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e5 e3       	ldi	r30, 0x35	; 53
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	b9 01       	movw	r22, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <MDIO_Error_State_SetNippleValue+0x150>
    1c84:	66 0f       	add	r22, r22
    1c86:	77 1f       	adc	r23, r23
    1c88:	8a 95       	dec	r24
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <MDIO_Error_State_SetNippleValue+0x14c>
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	84 2b       	or	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	2c c0       	rjmp	.+88     	; 0x1cec <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1c94:	a2 e3       	ldi	r26, 0x32	; 50
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e2 e3       	ldi	r30, 0x32	; 50
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8f e0       	ldi	r24, 0x0F	; 15
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <MDIO_Error_State_SetNippleValue+0x178>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	2a 95       	dec	r18
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <MDIO_Error_State_SetNippleValue+0x174>
    1cb4:	80 95       	com	r24
    1cb6:	84 23       	and	r24, r20
    1cb8:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1cba:	a2 e3       	ldi	r26, 0x32	; 50
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e2 e3       	ldi	r30, 0x32	; 50
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	b9 01       	movw	r22, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <MDIO_Error_State_SetNippleValue+0x1a2>
    1cd6:	66 0f       	add	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	8a 95       	dec	r24
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <MDIO_Error_State_SetNippleValue+0x19e>
    1cde:	cb 01       	movw	r24, r22
    1ce0:	84 2b       	or	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1cea:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cee:	26 96       	adiw	r28, 0x06	; 6
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <MDIO_VidActivePullUP+0x6>
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	6a 81       	ldd	r22, Y+2	; 0x02
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1d1c:	41 e0       	ldi	r20, 0x01	; 1
    1d1e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>

}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <HSWITCH_VidInit_PullUP+0x6>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3e:	81 81       	ldd	r24, Z+1	; 0x01
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	90 81       	ld	r25, Z
    1d46:	69 2f       	mov	r22, r25
    1d48:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <MDIO_VidActivePullUP>
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <HSWITCH_u8SwitchState+0x6>
    1d5c:	0f 92       	push	r0
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	9b 83       	std	Y+3, r25	; 0x03
    1d64:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6e:	81 81       	ldd	r24, Z+1	; 0x01
    1d70:	ea 81       	ldd	r30, Y+2	; 0x02
    1d72:	fb 81       	ldd	r31, Y+3	; 0x03
    1d74:	90 81       	ld	r25, Z
    1d76:	69 2f       	mov	r22, r25
    1d78:	9e 01       	movw	r18, r28
    1d7a:	2f 5f       	subi	r18, 0xFF	; 255
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	a9 01       	movw	r20, r18
    1d80:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <HSEVEN_SEGMENT_VidInit+0x6>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1da0:	e9 81       	ldd	r30, Y+1	; 0x01
    1da2:	fa 81       	ldd	r31, Y+2	; 0x02
    1da4:	80 81       	ld	r24, Z
    1da6:	6f ef       	ldi	r22, 0xFF	; 255
    1da8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <MDIO_Error_State_SetPortDirection>
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <HSEVEN_SEGMENT_VidOff+0x6>
    1dbc:	0f 92       	push	r0
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	81 81       	ldd	r24, Z+1	; 0x01
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	31 f4       	brne	.+12     	; 0x1dde <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	80 81       	ld	r24, Z
    1dd8:	6b 81       	ldd	r22, Y+3	; 0x03
    1dda:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1dde:	e9 81       	ldd	r30, Y+1	; 0x01
    1de0:	fa 81       	ldd	r31, Y+2	; 0x02
    1de2:	81 81       	ldd	r24, Z+1	; 0x01
    1de4:	88 23       	and	r24, r24
    1de6:	51 f4       	brne	.+20     	; 0x1dfc <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	20 81       	ld	r18, Z
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	98 2f       	mov	r25, r24
    1df2:	90 95       	com	r25
    1df4:	82 2f       	mov	r24, r18
    1df6:	69 2f       	mov	r22, r25
    1df8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
	}
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	27 97       	sbiw	r28, 0x07	; 7
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1e22:	e9 81       	ldd	r30, Y+1	; 0x01
    1e24:	fa 81       	ldd	r31, Y+2	; 0x02
    1e26:	81 81       	ldd	r24, Z+1	; 0x01
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1e2c:	9b c0       	rjmp	.+310    	; 0x1f64 <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	3f 83       	std	Y+7, r19	; 0x07
    1e36:	2e 83       	std	Y+6, r18	; 0x06
    1e38:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3c:	84 30       	cpi	r24, 0x04	; 4
    1e3e:	91 05       	cpc	r25, r1
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1e42:	5f c0       	rjmp	.+190    	; 0x1f02 <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1e44:	2e 81       	ldd	r18, Y+6	; 0x06
    1e46:	3f 81       	ldd	r19, Y+7	; 0x07
    1e48:	25 30       	cpi	r18, 0x05	; 5
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	dc f4       	brge	.+54     	; 0x1e84 <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e50:	9f 81       	ldd	r25, Y+7	; 0x07
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	91 05       	cpc	r25, r1
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    1e58:	3f c0       	rjmp	.+126    	; 0x1ed8 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    1e5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e5c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1e64:	8e 81       	ldd	r24, Y+6	; 0x06
    1e66:	9f 81       	ldd	r25, Y+7	; 0x07
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	79 f1       	breq	.+94     	; 0x1eca <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    1e6c:	74 c0       	rjmp	.+232    	; 0x1f56 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1e6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e70:	3f 81       	ldd	r19, Y+7	; 0x07
    1e72:	22 30       	cpi	r18, 0x02	; 2
    1e74:	31 05       	cpc	r19, r1
    1e76:	b9 f1       	breq	.+110    	; 0x1ee6 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    1e78:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7c:	83 30       	cpi	r24, 0x03	; 3
    1e7e:	91 05       	cpc	r25, r1
    1e80:	c9 f1       	breq	.+114    	; 0x1ef4 <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1e82:	69 c0       	rjmp	.+210    	; 0x1f56 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1e84:	2e 81       	ldd	r18, Y+6	; 0x06
    1e86:	3f 81       	ldd	r19, Y+7	; 0x07
    1e88:	27 30       	cpi	r18, 0x07	; 7
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1e8e:	4e c0       	rjmp	.+156    	; 0x1f2c <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1e90:	8e 81       	ldd	r24, Y+6	; 0x06
    1e92:	9f 81       	ldd	r25, Y+7	; 0x07
    1e94:	88 30       	cpi	r24, 0x08	; 8
    1e96:	91 05       	cpc	r25, r1
    1e98:	5c f4       	brge	.+22     	; 0x1eb0 <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1e9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e9e:	25 30       	cpi	r18, 0x05	; 5
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	b1 f1       	breq	.+108    	; 0x1f10 <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1ea4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea8:	86 30       	cpi	r24, 0x06	; 6
    1eaa:	91 05       	cpc	r25, r1
    1eac:	c1 f1       	breq	.+112    	; 0x1f1e <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1eae:	53 c0       	rjmp	.+166    	; 0x1f56 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1eb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb4:	28 30       	cpi	r18, 0x08	; 8
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec0:	89 30       	cpi	r24, 0x09	; 9
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1ec6:	40 c0       	rjmp	.+128    	; 0x1f48 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1ec8:	46 c0       	rjmp	.+140    	; 0x1f56 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1eca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ece:	80 81       	ld	r24, Z
    1ed0:	6f e3       	ldi	r22, 0x3F	; 63
    1ed2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1ed6:	e6 c0       	rjmp	.+460    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eda:	fa 81       	ldd	r31, Y+2	; 0x02
    1edc:	80 81       	ld	r24, Z
    1ede:	66 e0       	ldi	r22, 0x06	; 6
    1ee0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1ee4:	df c0       	rjmp	.+446    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	80 81       	ld	r24, Z
    1eec:	6b e5       	ldi	r22, 0x5B	; 91
    1eee:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1ef2:	d8 c0       	rjmp	.+432    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	80 81       	ld	r24, Z
    1efa:	6f e4       	ldi	r22, 0x4F	; 79
    1efc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1f00:	d1 c0       	rjmp	.+418    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	80 81       	ld	r24, Z
    1f08:	66 e6       	ldi	r22, 0x66	; 102
    1f0a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1f0e:	ca c0       	rjmp	.+404    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    1f10:	e9 81       	ldd	r30, Y+1	; 0x01
    1f12:	fa 81       	ldd	r31, Y+2	; 0x02
    1f14:	80 81       	ld	r24, Z
    1f16:	6d e6       	ldi	r22, 0x6D	; 109
    1f18:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1f1c:	c3 c0       	rjmp	.+390    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f20:	fa 81       	ldd	r31, Y+2	; 0x02
    1f22:	80 81       	ld	r24, Z
    1f24:	6d e7       	ldi	r22, 0x7D	; 125
    1f26:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1f2a:	bc c0       	rjmp	.+376    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	80 81       	ld	r24, Z
    1f32:	67 e0       	ldi	r22, 0x07	; 7
    1f34:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1f38:	b5 c0       	rjmp	.+362    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    1f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3e:	80 81       	ld	r24, Z
    1f40:	6f e7       	ldi	r22, 0x7F	; 127
    1f42:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1f46:	ae c0       	rjmp	.+348    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    1f48:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4c:	80 81       	ld	r24, Z
    1f4e:	6f e6       	ldi	r22, 0x6F	; 111
    1f50:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1f54:	a7 c0       	rjmp	.+334    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	80 81       	ld	r24, Z
    1f5c:	69 e7       	ldi	r22, 0x79	; 121
    1f5e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    1f62:	a0 c0       	rjmp	.+320    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    1f64:	e9 81       	ldd	r30, Y+1	; 0x01
    1f66:	fa 81       	ldd	r31, Y+2	; 0x02
    1f68:	81 81       	ldd	r24, Z+1	; 0x01
    1f6a:	88 23       	and	r24, r24
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    1f6e:	9a c0       	rjmp	.+308    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3d 83       	std	Y+5, r19	; 0x05
    1f78:	2c 83       	std	Y+4, r18	; 0x04
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7e:	84 30       	cpi	r24, 0x04	; 4
    1f80:	91 05       	cpc	r25, r1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    1f84:	5f c0       	rjmp	.+190    	; 0x2044 <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    1f86:	2c 81       	ldd	r18, Y+4	; 0x04
    1f88:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8a:	25 30       	cpi	r18, 0x05	; 5
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	dc f4       	brge	.+54     	; 0x1fc6 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	91 05       	cpc	r25, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    1f9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	79 f1       	breq	.+94     	; 0x200c <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1fae:	74 c0       	rjmp	.+232    	; 0x2098 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1fb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	b9 f1       	breq	.+110    	; 0x2028 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbe:	83 30       	cpi	r24, 0x03	; 3
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	c9 f1       	breq	.+114    	; 0x2036 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    1fc4:	69 c0       	rjmp	.+210    	; 0x2098 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1fc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fca:	27 30       	cpi	r18, 0x07	; 7
    1fcc:	31 05       	cpc	r19, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    1fd0:	4e c0       	rjmp	.+156    	; 0x206e <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd6:	88 30       	cpi	r24, 0x08	; 8
    1fd8:	91 05       	cpc	r25, r1
    1fda:	5c f4       	brge	.+22     	; 0x1ff2 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    1fdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1fde:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe0:	25 30       	cpi	r18, 0x05	; 5
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	b1 f1       	breq	.+108    	; 0x2052 <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fea:	86 30       	cpi	r24, 0x06	; 6
    1fec:	91 05       	cpc	r25, r1
    1fee:	c1 f1       	breq	.+112    	; 0x2060 <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    1ff0:	53 c0       	rjmp	.+166    	; 0x2098 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1ff2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff6:	28 30       	cpi	r18, 0x08	; 8
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	9d 81       	ldd	r25, Y+5	; 0x05
    2002:	89 30       	cpi	r24, 0x09	; 9
    2004:	91 05       	cpc	r25, r1
    2006:	09 f4       	brne	.+2      	; 0x200a <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    2008:	40 c0       	rjmp	.+128    	; 0x208a <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    200a:	46 c0       	rjmp	.+140    	; 0x2098 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	80 81       	ld	r24, Z
    2012:	60 ec       	ldi	r22, 0xC0	; 192
    2014:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    2018:	45 c0       	rjmp	.+138    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    201a:	e9 81       	ldd	r30, Y+1	; 0x01
    201c:	fa 81       	ldd	r31, Y+2	; 0x02
    201e:	80 81       	ld	r24, Z
    2020:	69 ef       	ldi	r22, 0xF9	; 249
    2022:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    2026:	3e c0       	rjmp	.+124    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    2028:	e9 81       	ldd	r30, Y+1	; 0x01
    202a:	fa 81       	ldd	r31, Y+2	; 0x02
    202c:	80 81       	ld	r24, Z
    202e:	64 ea       	ldi	r22, 0xA4	; 164
    2030:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    2034:	37 c0       	rjmp	.+110    	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    2036:	e9 81       	ldd	r30, Y+1	; 0x01
    2038:	fa 81       	ldd	r31, Y+2	; 0x02
    203a:	80 81       	ld	r24, Z
    203c:	60 eb       	ldi	r22, 0xB0	; 176
    203e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    2042:	30 c0       	rjmp	.+96     	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	80 81       	ld	r24, Z
    204a:	69 e9       	ldi	r22, 0x99	; 153
    204c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    2050:	29 c0       	rjmp	.+82     	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	80 81       	ld	r24, Z
    2058:	62 e9       	ldi	r22, 0x92	; 146
    205a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    205e:	22 c0       	rjmp	.+68     	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    2060:	e9 81       	ldd	r30, Y+1	; 0x01
    2062:	fa 81       	ldd	r31, Y+2	; 0x02
    2064:	80 81       	ld	r24, Z
    2066:	62 e8       	ldi	r22, 0x82	; 130
    2068:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    206c:	1b c0       	rjmp	.+54     	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    206e:	e9 81       	ldd	r30, Y+1	; 0x01
    2070:	fa 81       	ldd	r31, Y+2	; 0x02
    2072:	80 81       	ld	r24, Z
    2074:	68 ef       	ldi	r22, 0xF8	; 248
    2076:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	80 81       	ld	r24, Z
    2082:	60 e8       	ldi	r22, 0x80	; 128
    2084:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    2088:	0d c0       	rjmp	.+26     	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    208a:	e9 81       	ldd	r30, Y+1	; 0x01
    208c:	fa 81       	ldd	r31, Y+2	; 0x02
    208e:	80 81       	ld	r24, Z
    2090:	60 e9       	ldi	r22, 0x90	; 144
    2092:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
    2096:	06 c0       	rjmp	.+12     	; 0x20a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    2098:	e9 81       	ldd	r30, Y+1	; 0x01
    209a:	fa 81       	ldd	r31, Y+2	; 0x02
    209c:	80 81       	ld	r24, Z
    209e:	66 e8       	ldi	r22, 0x86	; 134
    20a0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
	}
}
}
    20a4:	27 96       	adiw	r28, 0x07	; 7
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <HLED_VidInit+0x6>
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	81 81       	ldd	r24, Z+1	; 0x01
    20ca:	e9 81       	ldd	r30, Y+1	; 0x01
    20cc:	fa 81       	ldd	r31, Y+2	; 0x02
    20ce:	90 81       	ld	r25, Z
    20d0:	69 2f       	mov	r22, r25
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <HLED_VidLed_On+0x6>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    20f0:	e9 81       	ldd	r30, Y+1	; 0x01
    20f2:	fa 81       	ldd	r31, Y+2	; 0x02
    20f4:	81 81       	ldd	r24, Z+1	; 0x01
    20f6:	e9 81       	ldd	r30, Y+1	; 0x01
    20f8:	fa 81       	ldd	r31, Y+2	; 0x02
    20fa:	90 81       	ld	r25, Z
    20fc:	69 2f       	mov	r22, r25
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <HLED_VidLed_Off+0x6>
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    211c:	e9 81       	ldd	r30, Y+1	; 0x01
    211e:	fa 81       	ldd	r31, Y+2	; 0x02
    2120:	81 81       	ldd	r24, Z+1	; 0x01
    2122:	e9 81       	ldd	r30, Y+1	; 0x01
    2124:	fa 81       	ldd	r31, Y+2	; 0x02
    2126:	90 81       	ld	r25, Z
    2128:	69 2f       	mov	r22, r25
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
}
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <HLED_VidLed_Toggle+0x6>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    2148:	80 91 9e 01 	lds	r24, 0x019E
    214c:	88 23       	and	r24, r24
    214e:	71 f4       	brne	.+28     	; 0x216c <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	81 81       	ldd	r24, Z+1	; 0x01
    2156:	e9 81       	ldd	r30, Y+1	; 0x01
    2158:	fa 81       	ldd	r31, Y+2	; 0x02
    215a:	90 81       	ld	r25, Z
    215c:	69 2f       	mov	r22, r25
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
		Flag=1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	80 93 9e 01 	sts	0x019E, r24
    216a:	0c c0       	rjmp	.+24     	; 0x2184 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    216c:	e9 81       	ldd	r30, Y+1	; 0x01
    216e:	fa 81       	ldd	r31, Y+2	; 0x02
    2170:	81 81       	ldd	r24, Z+1	; 0x01
    2172:	e9 81       	ldd	r30, Y+1	; 0x01
    2174:	fa 81       	ldd	r31, Y+2	; 0x02
    2176:	90 81       	ld	r25, Z
    2178:	69 2f       	mov	r22, r25
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
		Flag=0;
    2180:	10 92 9e 01 	sts	0x019E, r1
	}
}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	62 e0       	ldi	r22, 0x02	; 2
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	62 e0       	ldi	r22, 0x02	; 2
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    21aa:	82 e0       	ldi	r24, 0x02	; 2
    21ac:	62 e0       	ldi	r22, 0x02	; 2
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    21b4:	83 e0       	ldi	r24, 0x03	; 3
    21b6:	62 e0       	ldi	r22, 0x02	; 2
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    21be:	84 e0       	ldi	r24, 0x04	; 4
    21c0:	62 e0       	ldi	r22, 0x02	; 2
    21c2:	41 e0       	ldi	r20, 0x01	; 1
    21c4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    21c8:	85 e0       	ldi	r24, 0x05	; 5
    21ca:	62 e0       	ldi	r22, 0x02	; 2
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    21d2:	86 e0       	ldi	r24, 0x06	; 6
    21d4:	62 e0       	ldi	r22, 0x02	; 2
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    21dc:	87 e0       	ldi	r24, 0x07	; 7
    21de:	62 e0       	ldi	r22, 0x02	; 2
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	62 e0       	ldi	r22, 0x02	; 2
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	62 e0       	ldi	r22, 0x02	; 2
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    2204:	83 e0       	ldi	r24, 0x03	; 3
    2206:	62 e0       	ldi	r22, 0x02	; 2
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    220e:	84 e0       	ldi	r24, 0x04	; 4
    2210:	62 e0       	ldi	r22, 0x02	; 2
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    2218:	85 e0       	ldi	r24, 0x05	; 5
    221a:	62 e0       	ldi	r22, 0x02	; 2
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    2222:	86 e0       	ldi	r24, 0x06	; 6
    2224:	62 e0       	ldi	r22, 0x02	; 2
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    222c:	87 e0       	ldi	r24, 0x07	; 7
    222e:	62 e0       	ldi	r22, 0x02	; 2
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>

}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	62 97       	sbiw	r28, 0x12	; 18
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    2250:	8f ef       	ldi	r24, 0xFF	; 255
    2252:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2254:	84 e0       	ldi	r24, 0x04	; 4
    2256:	88 8b       	std	Y+16, r24	; 0x10
    2258:	b5 c0       	rjmp	.+362    	; 0x23c4 <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    225a:	88 89       	ldd	r24, Y+16	; 0x10
    225c:	62 e0       	ldi	r22, 0x02	; 2
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2264:	19 8a       	std	Y+17, r1	; 0x11
    2266:	a2 c0       	rjmp	.+324    	; 0x23ac <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2268:	9e 01       	movw	r18, r28
    226a:	2e 5e       	subi	r18, 0xEE	; 238
    226c:	3f 4f       	sbci	r19, 0xFF	; 255
    226e:	89 89       	ldd	r24, Y+17	; 0x11
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	a9 01       	movw	r20, r18
    2274:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    2278:	8a 89       	ldd	r24, Y+18	; 0x12
    227a:	88 23       	and	r24, r24
    227c:	09 f0       	breq	.+2      	; 0x2280 <HKPD_U8GetKeyPressed+0x44>
    227e:	93 c0       	rjmp	.+294    	; 0x23a6 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    2280:	88 89       	ldd	r24, Y+16	; 0x10
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	ac 01       	movw	r20, r24
    2288:	44 50       	subi	r20, 0x04	; 4
    228a:	50 40       	sbci	r21, 0x00	; 0
    228c:	89 89       	ldd	r24, Y+17	; 0x11
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	ca 01       	movw	r24, r20
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	82 0f       	add	r24, r18
    229e:	93 1f       	adc	r25, r19
    22a0:	fc 01       	movw	r30, r24
    22a2:	e3 57       	subi	r30, 0x73	; 115
    22a4:	fe 4f       	sbci	r31, 0xFE	; 254
    22a6:	80 81       	ld	r24, Z
    22a8:	8f 87       	std	Y+15, r24	; 0x0f
    22aa:	08 c0       	rjmp	.+16     	; 0x22bc <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    22ac:	9e 01       	movw	r18, r28
    22ae:	2e 5e       	subi	r18, 0xEE	; 238
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	89 89       	ldd	r24, Y+17	; 0x11
    22b4:	62 e0       	ldi	r22, 0x02	; 2
    22b6:	a9 01       	movw	r20, r18
    22b8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    22bc:	8a 89       	ldd	r24, Y+18	; 0x12
    22be:	88 23       	and	r24, r24
    22c0:	a9 f3       	breq	.-22     	; 0x22ac <HKPD_U8GetKeyPressed+0x70>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e2       	ldi	r26, 0x20	; 32
    22c8:	b1 e4       	ldi	r27, 0x41	; 65
    22ca:	8b 87       	std	Y+11, r24	; 0x0b
    22cc:	9c 87       	std	Y+12, r25	; 0x0c
    22ce:	ad 87       	std	Y+13, r26	; 0x0d
    22d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8f 83       	std	Y+7, r24	; 0x07
    22ec:	98 87       	std	Y+8, r25	; 0x08
    22ee:	a9 87       	std	Y+9, r26	; 0x09
    22f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f2:	6f 81       	ldd	r22, Y+7	; 0x07
    22f4:	78 85       	ldd	r23, Y+8	; 0x08
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	6b 85       	ldd	r22, Y+11	; 0x0b
    232e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <HKPD_U8GetKeyPressed+0x138>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9c 83       	std	Y+4, r25	; 0x04
    235c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <HKPD_U8GetKeyPressed+0x126>
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <HKPD_U8GetKeyPressed+0x11a>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	9e 81       	ldd	r25, Y+6	; 0x06
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <HKPD_U8GetKeyPressed+0x162>
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    23a6:	89 89       	ldd	r24, Y+17	; 0x11
    23a8:	8f 5f       	subi	r24, 0xFF	; 255
    23aa:	89 8b       	std	Y+17, r24	; 0x11
    23ac:	89 89       	ldd	r24, Y+17	; 0x11
    23ae:	84 30       	cpi	r24, 0x04	; 4
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <HKPD_U8GetKeyPressed+0x178>
    23b2:	5a cf       	rjmp	.-332    	; 0x2268 <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    23b4:	88 89       	ldd	r24, Y+16	; 0x10
    23b6:	62 e0       	ldi	r22, 0x02	; 2
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    23be:	88 89       	ldd	r24, Y+16	; 0x10
    23c0:	8f 5f       	subi	r24, 0xFF	; 255
    23c2:	88 8b       	std	Y+16, r24	; 0x10
    23c4:	88 89       	ldd	r24, Y+16	; 0x10
    23c6:	88 30       	cpi	r24, 0x08	; 8
    23c8:	08 f4       	brcc	.+2      	; 0x23cc <HKPD_U8GetKeyPressed+0x190>
    23ca:	47 cf       	rjmp	.-370    	; 0x225a <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    23cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ce:	8f 3f       	cpi	r24, 0xFF	; 255
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <HKPD_U8GetKeyPressed+0x198>
    23d2:	40 cf       	rjmp	.-384    	; 0x2254 <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    23d4:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    23d6:	62 96       	adiw	r28, 0x12	; 18
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	6d 97       	sbiw	r28, 0x1d	; 29
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	62 e0       	ldi	r22, 0x02	; 2
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2416:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	62 e0       	ldi	r22, 0x02	; 2
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a0 e0       	ldi	r26, 0x00	; 0
    242a:	b0 e4       	ldi	r27, 0x40	; 64
    242c:	89 8f       	std	Y+25, r24	; 0x19
    242e:	9a 8f       	std	Y+26, r25	; 0x1a
    2430:	ab 8f       	std	Y+27, r26	; 0x1b
    2432:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	69 8d       	ldd	r22, Y+25	; 0x19
    2436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a ef       	ldi	r20, 0xFA	; 250
    2442:	54 e4       	ldi	r21, 0x44	; 68
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8d 8b       	std	Y+21, r24	; 0x15
    244e:	9e 8b       	std	Y+22, r25	; 0x16
    2450:	af 8b       	std	Y+23, r26	; 0x17
    2452:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2454:	6d 89       	ldd	r22, Y+21	; 0x15
    2456:	7e 89       	ldd	r23, Y+22	; 0x16
    2458:	8f 89       	ldd	r24, Y+23	; 0x17
    245a:	98 8d       	ldd	r25, Y+24	; 0x18
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 8b       	std	Y+20, r25	; 0x14
    2472:	8b 8b       	std	Y+19, r24	; 0x13
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    2476:	6d 89       	ldd	r22, Y+21	; 0x15
    2478:	7e 89       	ldd	r23, Y+22	; 0x16
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	69 8d       	ldd	r22, Y+25	; 0x19
    2490:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2492:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2494:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <HCLCD_Vid8Bits_SendCommand+0xee>
    24b8:	88 ec       	ldi	r24, 0xC8	; 200
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9a 8b       	std	Y+18, r25	; 0x12
    24be:	89 8b       	std	Y+17, r24	; 0x11
    24c0:	89 89       	ldd	r24, Y+17	; 0x11
    24c2:	9a 89       	ldd	r25, Y+18	; 0x12
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <HCLCD_Vid8Bits_SendCommand+0xdc>
    24c8:	9a 8b       	std	Y+18, r25	; 0x12
    24ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9c 8b       	std	Y+20, r25	; 0x14
    24d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8b 89       	ldd	r24, Y+19	; 0x13
    24d8:	9c 89       	ldd	r25, Y+20	; 0x14
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <HCLCD_Vid8Bits_SendCommand+0xd0>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	6d 89       	ldd	r22, Y+21	; 0x15
    24e2:	7e 89       	ldd	r23, Y+22	; 0x16
    24e4:	8f 89       	ldd	r24, Y+23	; 0x17
    24e6:	98 8d       	ldd	r25, Y+24	; 0x18
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9c 8b       	std	Y+20, r25	; 0x14
    24f2:	8b 8b       	std	Y+19, r24	; 0x13
    24f4:	8b 89       	ldd	r24, Y+19	; 0x13
    24f6:	9c 89       	ldd	r25, Y+20	; 0x14
    24f8:	98 8b       	std	Y+16, r25	; 0x10
    24fa:	8f 87       	std	Y+15, r24	; 0x0f
    24fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fe:	98 89       	ldd	r25, Y+16	; 0x10
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <HCLCD_Vid8Bits_SendCommand+0x118>
    2504:	98 8b       	std	Y+16, r25	; 0x10
    2506:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	b0 e4       	ldi	r27, 0x40	; 64
    251a:	8b 87       	std	Y+11, r24	; 0x0b
    251c:	9c 87       	std	Y+12, r25	; 0x0c
    251e:	ad 87       	std	Y+13, r26	; 0x0d
    2520:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2522:	6b 85       	ldd	r22, Y+11	; 0x0b
    2524:	7c 85       	ldd	r23, Y+12	; 0x0c
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a ef       	ldi	r20, 0xFA	; 250
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8f 83       	std	Y+7, r24	; 0x07
    253c:	98 87       	std	Y+8, r25	; 0x08
    253e:	a9 87       	std	Y+9, r26	; 0x09
    2540:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	2c f4       	brge	.+10     	; 0x2564 <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	3f c0       	rjmp	.+126    	; 0x25e2 <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	4c f5       	brge	.+82     	; 0x25ce <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e2       	ldi	r20, 0x20	; 32
    258a:	51 e4       	ldi	r21, 0x41	; 65
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <HCLCD_Vid8Bits_SendCommand+0x1dc>
    25a6:	88 ec       	ldi	r24, 0xC8	; 200
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <HCLCD_Vid8Bits_SendCommand+0x1ca>
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	69 f7       	brne	.-38     	; 0x25a6 <HCLCD_Vid8Bits_SendCommand+0x1be>
    25cc:	14 c0       	rjmp	.+40     	; 0x25f6 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <HCLCD_Vid8Bits_SendCommand+0x206>
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	62 e0       	ldi	r22, 0x02	; 2
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
}
    2600:	6d 96       	adiw	r28, 0x1d	; 29
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	e8 97       	sbiw	r28, 0x38	; 56
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	6f ef       	ldi	r22, 0xFF	; 255
    262a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	62 e0       	ldi	r22, 0x02	; 2
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	62 e0       	ldi	r22, 0x02	; 2
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	62 e0       	ldi	r22, 0x02	; 2
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 ef       	ldi	r26, 0xF0	; 240
    2652:	b1 e4       	ldi	r27, 0x41	; 65
    2654:	8d ab       	std	Y+53, r24	; 0x35
    2656:	9e ab       	std	Y+54, r25	; 0x36
    2658:	af ab       	std	Y+55, r26	; 0x37
    265a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265c:	6d a9       	ldd	r22, Y+53	; 0x35
    265e:	7e a9       	ldd	r23, Y+54	; 0x36
    2660:	8f a9       	ldd	r24, Y+55	; 0x37
    2662:	98 ad       	ldd	r25, Y+56	; 0x38
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	4a ef       	ldi	r20, 0xFA	; 250
    266a:	54 e4       	ldi	r21, 0x44	; 68
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	89 ab       	std	Y+49, r24	; 0x31
    2676:	9a ab       	std	Y+50, r25	; 0x32
    2678:	ab ab       	std	Y+51, r26	; 0x33
    267a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    267c:	69 a9       	ldd	r22, Y+49	; 0x31
    267e:	7a a9       	ldd	r23, Y+50	; 0x32
    2680:	8b a9       	ldd	r24, Y+51	; 0x33
    2682:	9c a9       	ldd	r25, Y+52	; 0x34
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e8       	ldi	r20, 0x80	; 128
    268a:	5f e3       	ldi	r21, 0x3F	; 63
    268c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2690:	88 23       	and	r24, r24
    2692:	2c f4       	brge	.+10     	; 0x269e <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	98 ab       	std	Y+48, r25	; 0x30
    269a:	8f a7       	std	Y+47, r24	; 0x2f
    269c:	3f c0       	rjmp	.+126    	; 0x271c <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    269e:	69 a9       	ldd	r22, Y+49	; 0x31
    26a0:	7a a9       	ldd	r23, Y+50	; 0x32
    26a2:	8b a9       	ldd	r24, Y+51	; 0x33
    26a4:	9c a9       	ldd	r25, Y+52	; 0x34
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	3f ef       	ldi	r19, 0xFF	; 255
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	57 e4       	ldi	r21, 0x47	; 71
    26ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	4c f5       	brge	.+82     	; 0x2708 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b6:	6d a9       	ldd	r22, Y+53	; 0x35
    26b8:	7e a9       	ldd	r23, Y+54	; 0x36
    26ba:	8f a9       	ldd	r24, Y+55	; 0x37
    26bc:	98 ad       	ldd	r25, Y+56	; 0x38
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e2       	ldi	r20, 0x20	; 32
    26c4:	51 e4       	ldi	r21, 0x41	; 65
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	98 ab       	std	Y+48, r25	; 0x30
    26dc:	8f a7       	std	Y+47, r24	; 0x2f
    26de:	0f c0       	rjmp	.+30     	; 0x26fe <HCLCD_Vid8Bits_Init+0xec>
    26e0:	88 ec       	ldi	r24, 0xC8	; 200
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	9e a7       	std	Y+46, r25	; 0x2e
    26e6:	8d a7       	std	Y+45, r24	; 0x2d
    26e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    26ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <HCLCD_Vid8Bits_Init+0xda>
    26f0:	9e a7       	std	Y+46, r25	; 0x2e
    26f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f6:	98 a9       	ldd	r25, Y+48	; 0x30
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	98 ab       	std	Y+48, r25	; 0x30
    26fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2700:	98 a9       	ldd	r25, Y+48	; 0x30
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	69 f7       	brne	.-38     	; 0x26e0 <HCLCD_Vid8Bits_Init+0xce>
    2706:	14 c0       	rjmp	.+40     	; 0x2730 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2708:	69 a9       	ldd	r22, Y+49	; 0x31
    270a:	7a a9       	ldd	r23, Y+50	; 0x32
    270c:	8b a9       	ldd	r24, Y+51	; 0x33
    270e:	9c a9       	ldd	r25, Y+52	; 0x34
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	98 ab       	std	Y+48, r25	; 0x30
    271a:	8f a7       	std	Y+47, r24	; 0x2f
    271c:	8f a5       	ldd	r24, Y+47	; 0x2f
    271e:	98 a9       	ldd	r25, Y+48	; 0x30
    2720:	9c a7       	std	Y+44, r25	; 0x2c
    2722:	8b a7       	std	Y+43, r24	; 0x2b
    2724:	8b a5       	ldd	r24, Y+43	; 0x2b
    2726:	9c a5       	ldd	r25, Y+44	; 0x2c
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <HCLCD_Vid8Bits_Init+0x116>
    272c:	9c a7       	std	Y+44, r25	; 0x2c
    272e:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    2730:	88 e2       	ldi	r24, 0x28	; 40
    2732:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	a0 e8       	ldi	r26, 0x80	; 128
    273c:	bf e3       	ldi	r27, 0x3F	; 63
    273e:	8f a3       	std	Y+39, r24	; 0x27
    2740:	98 a7       	std	Y+40, r25	; 0x28
    2742:	a9 a7       	std	Y+41, r26	; 0x29
    2744:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	6f a1       	ldd	r22, Y+39	; 0x27
    2748:	78 a5       	ldd	r23, Y+40	; 0x28
    274a:	89 a5       	ldd	r24, Y+41	; 0x29
    274c:	9a a5       	ldd	r25, Y+42	; 0x2a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a ef       	ldi	r20, 0xFA	; 250
    2754:	54 e4       	ldi	r21, 0x44	; 68
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8b a3       	std	Y+35, r24	; 0x23
    2760:	9c a3       	std	Y+36, r25	; 0x24
    2762:	ad a3       	std	Y+37, r26	; 0x25
    2764:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2766:	6b a1       	ldd	r22, Y+35	; 0x23
    2768:	7c a1       	ldd	r23, Y+36	; 0x24
    276a:	8d a1       	ldd	r24, Y+37	; 0x25
    276c:	9e a1       	ldd	r25, Y+38	; 0x26
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9a a3       	std	Y+34, r25	; 0x22
    2784:	89 a3       	std	Y+33, r24	; 0x21
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    2788:	6b a1       	ldd	r22, Y+35	; 0x23
    278a:	7c a1       	ldd	r23, Y+36	; 0x24
    278c:	8d a1       	ldd	r24, Y+37	; 0x25
    278e:	9e a1       	ldd	r25, Y+38	; 0x26
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	6f a1       	ldd	r22, Y+39	; 0x27
    27a2:	78 a5       	ldd	r23, Y+40	; 0x28
    27a4:	89 a5       	ldd	r24, Y+41	; 0x29
    27a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9a a3       	std	Y+34, r25	; 0x22
    27c6:	89 a3       	std	Y+33, r24	; 0x21
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <HCLCD_Vid8Bits_Init+0x1d6>
    27ca:	88 ec       	ldi	r24, 0xC8	; 200
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	98 a3       	std	Y+32, r25	; 0x20
    27d0:	8f 8f       	std	Y+31, r24	; 0x1f
    27d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27d4:	98 a1       	ldd	r25, Y+32	; 0x20
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <HCLCD_Vid8Bits_Init+0x1c4>
    27da:	98 a3       	std	Y+32, r25	; 0x20
    27dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	89 a1       	ldd	r24, Y+33	; 0x21
    27e0:	9a a1       	ldd	r25, Y+34	; 0x22
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9a a3       	std	Y+34, r25	; 0x22
    27e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ea:	9a a1       	ldd	r25, Y+34	; 0x22
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <HCLCD_Vid8Bits_Init+0x1b8>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6b a1       	ldd	r22, Y+35	; 0x23
    27f4:	7c a1       	ldd	r23, Y+36	; 0x24
    27f6:	8d a1       	ldd	r24, Y+37	; 0x25
    27f8:	9e a1       	ldd	r25, Y+38	; 0x26
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9a a3       	std	Y+34, r25	; 0x22
    2804:	89 a3       	std	Y+33, r24	; 0x21
    2806:	89 a1       	ldd	r24, Y+33	; 0x21
    2808:	9a a1       	ldd	r25, Y+34	; 0x22
    280a:	9e 8f       	std	Y+30, r25	; 0x1e
    280c:	8d 8f       	std	Y+29, r24	; 0x1d
    280e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2810:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <HCLCD_Vid8Bits_Init+0x200>
    2816:	9e 8f       	std	Y+30, r25	; 0x1e
    2818:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    281a:	8f e0       	ldi	r24, 0x0F	; 15
    281c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	a0 e8       	ldi	r26, 0x80	; 128
    2826:	bf e3       	ldi	r27, 0x3F	; 63
    2828:	89 8f       	std	Y+25, r24	; 0x19
    282a:	9a 8f       	std	Y+26, r25	; 0x1a
    282c:	ab 8f       	std	Y+27, r26	; 0x1b
    282e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2830:	69 8d       	ldd	r22, Y+25	; 0x19
    2832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	4a ef       	ldi	r20, 0xFA	; 250
    283e:	54 e4       	ldi	r21, 0x44	; 68
    2840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	8d 8b       	std	Y+21, r24	; 0x15
    284a:	9e 8b       	std	Y+22, r25	; 0x16
    284c:	af 8b       	std	Y+23, r26	; 0x17
    284e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2850:	6d 89       	ldd	r22, Y+21	; 0x15
    2852:	7e 89       	ldd	r23, Y+22	; 0x16
    2854:	8f 89       	ldd	r24, Y+23	; 0x17
    2856:	98 8d       	ldd	r25, Y+24	; 0x18
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e8       	ldi	r20, 0x80	; 128
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2864:	88 23       	and	r24, r24
    2866:	2c f4       	brge	.+10     	; 0x2872 <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	9c 8b       	std	Y+20, r25	; 0x14
    286e:	8b 8b       	std	Y+19, r24	; 0x13
    2870:	3f c0       	rjmp	.+126    	; 0x28f0 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    2872:	6d 89       	ldd	r22, Y+21	; 0x15
    2874:	7e 89       	ldd	r23, Y+22	; 0x16
    2876:	8f 89       	ldd	r24, Y+23	; 0x17
    2878:	98 8d       	ldd	r25, Y+24	; 0x18
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	3f ef       	ldi	r19, 0xFF	; 255
    287e:	4f e7       	ldi	r20, 0x7F	; 127
    2880:	57 e4       	ldi	r21, 0x47	; 71
    2882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2886:	18 16       	cp	r1, r24
    2888:	4c f5       	brge	.+82     	; 0x28dc <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288a:	69 8d       	ldd	r22, Y+25	; 0x19
    288c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e2       	ldi	r20, 0x20	; 32
    2898:	51 e4       	ldi	r21, 0x41	; 65
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9c 8b       	std	Y+20, r25	; 0x14
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
    28b2:	0f c0       	rjmp	.+30     	; 0x28d2 <HCLCD_Vid8Bits_Init+0x2c0>
    28b4:	88 ec       	ldi	r24, 0xC8	; 200
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9a 8b       	std	Y+18, r25	; 0x12
    28ba:	89 8b       	std	Y+17, r24	; 0x11
    28bc:	89 89       	ldd	r24, Y+17	; 0x11
    28be:	9a 89       	ldd	r25, Y+18	; 0x12
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <HCLCD_Vid8Bits_Init+0x2ae>
    28c4:	9a 8b       	std	Y+18, r25	; 0x12
    28c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ca:	9c 89       	ldd	r25, Y+20	; 0x14
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	9c 8b       	std	Y+20, r25	; 0x14
    28d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d2:	8b 89       	ldd	r24, Y+19	; 0x13
    28d4:	9c 89       	ldd	r25, Y+20	; 0x14
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	69 f7       	brne	.-38     	; 0x28b4 <HCLCD_Vid8Bits_Init+0x2a2>
    28da:	14 c0       	rjmp	.+40     	; 0x2904 <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28dc:	6d 89       	ldd	r22, Y+21	; 0x15
    28de:	7e 89       	ldd	r23, Y+22	; 0x16
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	9c 8b       	std	Y+20, r25	; 0x14
    28ee:	8b 8b       	std	Y+19, r24	; 0x13
    28f0:	8b 89       	ldd	r24, Y+19	; 0x13
    28f2:	9c 89       	ldd	r25, Y+20	; 0x14
    28f4:	98 8b       	std	Y+16, r25	; 0x10
    28f6:	8f 87       	std	Y+15, r24	; 0x0f
    28f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fa:	98 89       	ldd	r25, Y+16	; 0x10
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <HCLCD_Vid8Bits_Init+0x2ea>
    2900:	98 8b       	std	Y+16, r25	; 0x10
    2902:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e4       	ldi	r27, 0x40	; 64
    2912:	8b 87       	std	Y+11, r24	; 0x0b
    2914:	9c 87       	std	Y+12, r25	; 0x0c
    2916:	ad 87       	std	Y+13, r26	; 0x0d
    2918:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	4a ef       	ldi	r20, 0xFA	; 250
    2928:	54 e4       	ldi	r21, 0x44	; 68
    292a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8f 83       	std	Y+7, r24	; 0x07
    2934:	98 87       	std	Y+8, r25	; 0x08
    2936:	a9 87       	std	Y+9, r26	; 0x09
    2938:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e8       	ldi	r20, 0x80	; 128
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    294e:	88 23       	and	r24, r24
    2950:	2c f4       	brge	.+10     	; 0x295c <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	3f c0       	rjmp	.+126    	; 0x29da <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    295c:	6f 81       	ldd	r22, Y+7	; 0x07
    295e:	78 85       	ldd	r23, Y+8	; 0x08
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	3f ef       	ldi	r19, 0xFF	; 255
    2968:	4f e7       	ldi	r20, 0x7F	; 127
    296a:	57 e4       	ldi	r21, 0x47	; 71
    296c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2970:	18 16       	cp	r1, r24
    2972:	4c f5       	brge	.+82     	; 0x29c6 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e2       	ldi	r20, 0x20	; 32
    2982:	51 e4       	ldi	r21, 0x41	; 65
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <HCLCD_Vid8Bits_Init+0x3aa>
    299e:	88 ec       	ldi	r24, 0xC8	; 200
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <HCLCD_Vid8Bits_Init+0x398>
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	9e 81       	ldd	r25, Y+6	; 0x06
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	69 f7       	brne	.-38     	; 0x299e <HCLCD_Vid8Bits_Init+0x38c>
    29c4:	14 c0       	rjmp	.+40     	; 0x29ee <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	9a 81       	ldd	r25, Y+2	; 0x02
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <HCLCD_Vid8Bits_Init+0x3d4>
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    29ee:	86 e0       	ldi	r24, 0x06	; 6
    29f0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
}
    29f4:	e8 96       	adiw	r28, 0x38	; 56
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	6d 97       	sbiw	r28, 0x1d	; 29
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	62 e0       	ldi	r22, 0x02	; 2
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a34:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a0 e0       	ldi	r26, 0x00	; 0
    2a48:	b0 e4       	ldi	r27, 0x40	; 64
    2a4a:	89 8f       	std	Y+25, r24	; 0x19
    2a4c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a4e:	ab 8f       	std	Y+27, r26	; 0x1b
    2a50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a52:	69 8d       	ldd	r22, Y+25	; 0x19
    2a54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a ef       	ldi	r20, 0xFA	; 250
    2a60:	54 e4       	ldi	r21, 0x44	; 68
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	8d 8b       	std	Y+21, r24	; 0x15
    2a6c:	9e 8b       	std	Y+22, r25	; 0x16
    2a6e:	af 8b       	std	Y+23, r26	; 0x17
    2a70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a72:	6d 89       	ldd	r22, Y+21	; 0x15
    2a74:	7e 89       	ldd	r23, Y+22	; 0x16
    2a76:	8f 89       	ldd	r24, Y+23	; 0x17
    2a78:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9c 8b       	std	Y+20, r25	; 0x14
    2a90:	8b 8b       	std	Y+19, r24	; 0x13
    2a92:	3f c0       	rjmp	.+126    	; 0x2b12 <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2a94:	6d 89       	ldd	r22, Y+21	; 0x15
    2a96:	7e 89       	ldd	r23, Y+22	; 0x16
    2a98:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	4c f5       	brge	.+82     	; 0x2afe <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	69 8d       	ldd	r22, Y+25	; 0x19
    2aae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ab2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e2       	ldi	r20, 0x20	; 32
    2aba:	51 e4       	ldi	r21, 0x41	; 65
    2abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9c 8b       	std	Y+20, r25	; 0x14
    2ad2:	8b 8b       	std	Y+19, r24	; 0x13
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2ad6:	88 ec       	ldi	r24, 0xC8	; 200
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	9a 8b       	std	Y+18, r25	; 0x12
    2adc:	89 8b       	std	Y+17, r24	; 0x11
    2ade:	89 89       	ldd	r24, Y+17	; 0x11
    2ae0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2ae6:	9a 8b       	std	Y+18, r25	; 0x12
    2ae8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	8b 89       	ldd	r24, Y+19	; 0x13
    2aec:	9c 89       	ldd	r25, Y+20	; 0x14
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	9c 8b       	std	Y+20, r25	; 0x14
    2af2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af4:	8b 89       	ldd	r24, Y+19	; 0x13
    2af6:	9c 89       	ldd	r25, Y+20	; 0x14
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	69 f7       	brne	.-38     	; 0x2ad6 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2afc:	14 c0       	rjmp	.+40     	; 0x2b26 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afe:	6d 89       	ldd	r22, Y+21	; 0x15
    2b00:	7e 89       	ldd	r23, Y+22	; 0x16
    2b02:	8f 89       	ldd	r24, Y+23	; 0x17
    2b04:	98 8d       	ldd	r25, Y+24	; 0x18
    2b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9c 8b       	std	Y+20, r25	; 0x14
    2b10:	8b 8b       	std	Y+19, r24	; 0x13
    2b12:	8b 89       	ldd	r24, Y+19	; 0x13
    2b14:	9c 89       	ldd	r25, Y+20	; 0x14
    2b16:	98 8b       	std	Y+16, r25	; 0x10
    2b18:	8f 87       	std	Y+15, r24	; 0x0f
    2b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1c:	98 89       	ldd	r25, Y+16	; 0x10
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2b22:	98 8b       	std	Y+16, r25	; 0x10
    2b24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	62 e0       	ldi	r22, 0x02	; 2
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e0       	ldi	r26, 0x00	; 0
    2b36:	b0 e4       	ldi	r27, 0x40	; 64
    2b38:	8b 87       	std	Y+11, r24	; 0x0b
    2b3a:	9c 87       	std	Y+12, r25	; 0x0c
    2b3c:	ad 87       	std	Y+13, r26	; 0x0d
    2b3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	4a ef       	ldi	r20, 0xFA	; 250
    2b4e:	54 e4       	ldi	r21, 0x44	; 68
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	8f 83       	std	Y+7, r24	; 0x07
    2b5a:	98 87       	std	Y+8, r25	; 0x08
    2b5c:	a9 87       	std	Y+9, r26	; 0x09
    2b5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b60:	6f 81       	ldd	r22, Y+7	; 0x07
    2b62:	78 85       	ldd	r23, Y+8	; 0x08
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e8       	ldi	r20, 0x80	; 128
    2b6e:	5f e3       	ldi	r21, 0x3F	; 63
    2b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b74:	88 23       	and	r24, r24
    2b76:	2c f4       	brge	.+10     	; 0x2b82 <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
    2b80:	3f c0       	rjmp	.+126    	; 0x2c00 <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2b82:	6f 81       	ldd	r22, Y+7	; 0x07
    2b84:	78 85       	ldd	r23, Y+8	; 0x08
    2b86:	89 85       	ldd	r24, Y+9	; 0x09
    2b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	3f ef       	ldi	r19, 0xFF	; 255
    2b8e:	4f e7       	ldi	r20, 0x7F	; 127
    2b90:	57 e4       	ldi	r21, 0x47	; 71
    2b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b96:	18 16       	cp	r1, r24
    2b98:	4c f5       	brge	.+82     	; 0x2bec <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e2       	ldi	r20, 0x20	; 32
    2ba8:	51 e4       	ldi	r21, 0x41	; 65
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
    2bc2:	0f c0       	rjmp	.+30     	; 0x2be2 <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2bc4:	88 ec       	ldi	r24, 0xC8	; 200
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9c 83       	std	Y+4, r25	; 0x04
    2bca:	8b 83       	std	Y+3, r24	; 0x03
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2bd4:	9c 83       	std	Y+4, r25	; 0x04
    2bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bda:	9e 81       	ldd	r25, Y+6	; 0x06
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	9e 83       	std	Y+6, r25	; 0x06
    2be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	9e 81       	ldd	r25, Y+6	; 0x06
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	69 f7       	brne	.-38     	; 0x2bc4 <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2bea:	14 c0       	rjmp	.+40     	; 0x2c14 <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bec:	6f 81       	ldd	r22, Y+7	; 0x07
    2bee:	78 85       	ldd	r23, Y+8	; 0x08
    2bf0:	89 85       	ldd	r24, Y+9	; 0x09
    2bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9e 83       	std	Y+6, r25	; 0x06
    2bfe:	8d 83       	std	Y+5, r24	; 0x05
    2c00:	8d 81       	ldd	r24, Y+5	; 0x05
    2c02:	9e 81       	ldd	r25, Y+6	; 0x06
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2c14:	82 e0       	ldi	r24, 0x02	; 2
    2c16:	62 e0       	ldi	r22, 0x02	; 2
    2c18:	41 e0       	ldi	r20, 0x01	; 1
    2c1a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
}
    2c1e:	6d 96       	adiw	r28, 0x1d	; 29
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <HCLCD_Vid8Bits_DisplayString+0x6>
    2c36:	0f 92       	push	r0
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	9b 83       	std	Y+3, r25	; 0x03
    2c3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2c40:	19 82       	std	Y+1, r1	; 0x01
    2c42:	0e c0       	rjmp	.+28     	; 0x2c60 <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e2 0f       	add	r30, r18
    2c52:	f3 1f       	adc	r31, r19
    2c54:	80 81       	ld	r24, Z
    2c56:	0e 94 03 15 	call	0x2a06	; 0x2a06 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	8f 5f       	subi	r24, 0xFF	; 255
    2c5e:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	e2 0f       	add	r30, r18
    2c6e:	f3 1f       	adc	r31, r19
    2c70:	80 81       	ld	r24, Z
    2c72:	88 23       	and	r24, r24
    2c74:	39 f7       	brne	.-50     	; 0x2c44 <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	60 97       	sbiw	r28, 0x10	; 16
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	6d 87       	std	Y+13, r22	; 0x0d
    2c9c:	7e 87       	std	Y+14, r23	; 0x0e
    2c9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ca0:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2ca2:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca8:	af 85       	ldd	r26, Y+15	; 0x0f
    2caa:	b8 89       	ldd	r27, Y+16	; 0x10
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	a1 05       	cpc	r26, r1
    2cb0:	b1 05       	cpc	r27, r1
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2cb4:	4f c0       	rjmp	.+158    	; 0x2d54 <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2cb6:	2d c0       	rjmp	.+90     	; 0x2d12 <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	08 2f       	mov	r16, r24
    2cbc:	10 e0       	ldi	r17, 0x00	; 0
    2cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc2:	af 85       	ldd	r26, Y+15	; 0x0f
    2cc4:	b8 89       	ldd	r27, Y+16	; 0x10
    2cc6:	2a e0       	ldi	r18, 0x0A	; 10
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 30 23 	call	0x4660	; 0x4660 <__udivmodsi4>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	28 2f       	mov	r18, r24
    2cdc:	ce 01       	movw	r24, r28
    2cde:	03 96       	adiw	r24, 0x03	; 3
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e0 0f       	add	r30, r16
    2ce4:	f1 1f       	adc	r31, r17
    2ce6:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cec:	af 85       	ldd	r26, Y+15	; 0x0f
    2cee:	b8 89       	ldd	r27, Y+16	; 0x10
    2cf0:	2a e0       	ldi	r18, 0x0A	; 10
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 30 23 	call	0x4660	; 0x4660 <__udivmodsi4>
    2d00:	da 01       	movw	r26, r20
    2d02:	c9 01       	movw	r24, r18
    2d04:	8d 87       	std	Y+13, r24	; 0x0d
    2d06:	9e 87       	std	Y+14, r25	; 0x0e
    2d08:	af 87       	std	Y+15, r26	; 0x0f
    2d0a:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	8f 5f       	subi	r24, 0xFF	; 255
    2d10:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d16:	af 85       	ldd	r26, Y+15	; 0x0f
    2d18:	b8 89       	ldd	r27, Y+16	; 0x10
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	a1 05       	cpc	r26, r1
    2d1e:	b1 05       	cpc	r27, r1
    2d20:	59 f6       	brne	.-106    	; 0x2cb8 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	81 50       	subi	r24, 0x01	; 1
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	11 c0       	rjmp	.+34     	; 0x2d4c <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	28 2f       	mov	r18, r24
    2d2e:	33 27       	eor	r19, r19
    2d30:	27 fd       	sbrc	r18, 7
    2d32:	30 95       	com	r19
    2d34:	ce 01       	movw	r24, r28
    2d36:	03 96       	adiw	r24, 0x03	; 3
    2d38:	fc 01       	movw	r30, r24
    2d3a:	e2 0f       	add	r30, r18
    2d3c:	f3 1f       	adc	r31, r19
    2d3e:	80 81       	ld	r24, Z
    2d40:	80 5d       	subi	r24, 0xD0	; 208
    2d42:	0e 94 03 15 	call	0x2a06	; 0x2a06 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	81 50       	subi	r24, 0x01	; 1
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	88 23       	and	r24, r24
    2d50:	64 f7       	brge	.-40     	; 0x2d2a <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2d54:	80 e3       	ldi	r24, 0x30	; 48
    2d56:	0e 94 03 15 	call	0x2a06	; 0x2a06 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2d5a:	60 96       	adiw	r28, 0x10	; 16
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	08 95       	ret

00002d70 <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <HCLCD_Vid8Bits_SetPosition+0x6>
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	41 f4       	brne	.+16     	; 0x2d94 <HCLCD_Vid8Bits_SetPosition+0x24>
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	80 31       	cpi	r24, 0x10	; 16
    2d88:	28 f4       	brcc	.+10     	; 0x2d94 <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	80 58       	subi	r24, 0x80	; 128
    2d8e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    2d92:	0a c0       	rjmp	.+20     	; 0x2da8 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	39 f4       	brne	.+14     	; 0x2da8 <HCLCD_Vid8Bits_SetPosition+0x38>
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	80 31       	cpi	r24, 0x10	; 16
    2d9e:	20 f4       	brcc	.+8      	; 0x2da8 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	80 54       	subi	r24, 0x40	; 64
    2da4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
    2dc0:	7c 83       	std	Y+4, r23	; 0x04
    2dc2:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc6:	88 30       	cpi	r24, 0x08	; 8
    2dc8:	f8 f4       	brcc	.+62     	; 0x2e08 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	08 96       	adiw	r24, 0x08	; 8
    2dd2:	88 0f       	add	r24, r24
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2de2:	19 82       	std	Y+1, r1	; 0x01
    2de4:	0e c0       	rjmp	.+28     	; 0x2e02 <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	28 2f       	mov	r18, r24
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	9c 81       	ldd	r25, Y+4	; 0x04
    2df0:	fc 01       	movw	r30, r24
    2df2:	e2 0f       	add	r30, r18
    2df4:	f3 1f       	adc	r31, r19
    2df6:	80 81       	ld	r24, Z
    2df8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	88 30       	cpi	r24, 0x08	; 8
    2e06:	78 f3       	brcs	.-34     	; 0x2de6 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	2e 97       	sbiw	r28, 0x0e	; 14
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a0 e0       	ldi	r26, 0x00	; 0
    2e36:	b0 e4       	ldi	r27, 0x40	; 64
    2e38:	8b 87       	std	Y+11, r24	; 0x0b
    2e3a:	9c 87       	std	Y+12, r25	; 0x0c
    2e3c:	ad 87       	std	Y+13, r26	; 0x0d
    2e3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	4a ef       	ldi	r20, 0xFA	; 250
    2e4e:	54 e4       	ldi	r21, 0x44	; 68
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	8f 83       	std	Y+7, r24	; 0x07
    2e5a:	98 87       	std	Y+8, r25	; 0x08
    2e5c:	a9 87       	std	Y+9, r26	; 0x09
    2e5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e60:	6f 81       	ldd	r22, Y+7	; 0x07
    2e62:	78 85       	ldd	r23, Y+8	; 0x08
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e8       	ldi	r20, 0x80	; 128
    2e6e:	5f e3       	ldi	r21, 0x3F	; 63
    2e70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e74:	88 23       	and	r24, r24
    2e76:	2c f4       	brge	.+10     	; 0x2e82 <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	3f c0       	rjmp	.+126    	; 0x2f00 <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    2e82:	6f 81       	ldd	r22, Y+7	; 0x07
    2e84:	78 85       	ldd	r23, Y+8	; 0x08
    2e86:	89 85       	ldd	r24, Y+9	; 0x09
    2e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	3f ef       	ldi	r19, 0xFF	; 255
    2e8e:	4f e7       	ldi	r20, 0x7F	; 127
    2e90:	57 e4       	ldi	r21, 0x47	; 71
    2e92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e96:	18 16       	cp	r1, r24
    2e98:	4c f5       	brge	.+82     	; 0x2eec <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e2       	ldi	r20, 0x20	; 32
    2ea8:	51 e4       	ldi	r21, 0x41	; 65
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	0f c0       	rjmp	.+30     	; 0x2ee2 <HCLCD_Vid8Bits_ClearScreen+0xcc>
    2ec4:	88 ec       	ldi	r24, 0xC8	; 200
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	9c 83       	std	Y+4, r25	; 0x04
    2eca:	8b 83       	std	Y+3, r24	; 0x03
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <HCLCD_Vid8Bits_ClearScreen+0xba>
    2ed4:	9c 83       	std	Y+4, r25	; 0x04
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	9e 83       	std	Y+6, r25	; 0x06
    2ee0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	69 f7       	brne	.-38     	; 0x2ec4 <HCLCD_Vid8Bits_ClearScreen+0xae>
    2eea:	14 c0       	rjmp	.+40     	; 0x2f14 <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eec:	6f 81       	ldd	r22, Y+7	; 0x07
    2eee:	78 85       	ldd	r23, Y+8	; 0x08
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9e 83       	std	Y+6, r25	; 0x06
    2efe:	8d 83       	std	Y+5, r24	; 0x05
    2f00:	8d 81       	ldd	r24, Y+5	; 0x05
    2f02:	9e 81       	ldd	r25, Y+6	; 0x06
    2f04:	9a 83       	std	Y+2, r25	; 0x02
    2f06:	89 83       	std	Y+1, r24	; 0x01
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <HCLCD_Vid8Bits_ClearScreen+0xf6>
    2f10:	9a 83       	std	Y+2, r25	; 0x02
    2f12:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2f14:	2e 96       	adiw	r28, 0x0e	; 14
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	60 97       	sbiw	r28, 0x10	; 16
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2f3c:	1f 86       	std	Y+15, r1	; 0x0f
    2f3e:	78 c0       	rjmp	.+240    	; 0x3030 <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2f40:	88 e1       	ldi	r24, 0x18	; 24
    2f42:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a6 e9       	ldi	r26, 0x96	; 150
    2f4c:	b3 e4       	ldi	r27, 0x43	; 67
    2f4e:	8b 87       	std	Y+11, r24	; 0x0b
    2f50:	9c 87       	std	Y+12, r25	; 0x0c
    2f52:	ad 87       	std	Y+13, r26	; 0x0d
    2f54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8f 83       	std	Y+7, r24	; 0x07
    2f70:	98 87       	std	Y+8, r25	; 0x08
    2f72:	a9 87       	std	Y+9, r26	; 0x09
    2f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    2fda:	88 ec       	ldi	r24, 0xC8	; 200
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9c 83       	std	Y+4, r25	; 0x04
    2fe0:	8b 83       	std	Y+3, r24	; 0x03
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    2fea:	9c 83       	std	Y+4, r25	; 0x04
    2fec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	9e 83       	std	Y+6, r25	; 0x06
    2ff6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    3000:	14 c0       	rjmp	.+40     	; 0x302a <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	6f 81       	ldd	r22, Y+7	; 0x07
    3004:	78 85       	ldd	r23, Y+8	; 0x08
    3006:	89 85       	ldd	r24, Y+9	; 0x09
    3008:	9a 85       	ldd	r25, Y+10	; 0x0a
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    3026:	9a 83       	std	Y+2, r25	; 0x02
    3028:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    302a:	8f 85       	ldd	r24, Y+15	; 0x0f
    302c:	8f 5f       	subi	r24, 0xFF	; 255
    302e:	8f 87       	std	Y+15, r24	; 0x0f
    3030:	9f 85       	ldd	r25, Y+15	; 0x0f
    3032:	88 89       	ldd	r24, Y+16	; 0x10
    3034:	98 17       	cp	r25, r24
    3036:	08 f4       	brcc	.+2      	; 0x303a <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    3038:	83 cf       	rjmp	.-250    	; 0x2f40 <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    303a:	60 96       	adiw	r28, 0x10	; 16
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	60 97       	sbiw	r28, 0x10	; 16
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3062:	1f 86       	std	Y+15, r1	; 0x0f
    3064:	78 c0       	rjmp	.+240    	; 0x3156 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3066:	8c e1       	ldi	r24, 0x1C	; 28
    3068:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a6 e9       	ldi	r26, 0x96	; 150
    3072:	b3 e4       	ldi	r27, 0x43	; 67
    3074:	8b 87       	std	Y+11, r24	; 0x0b
    3076:	9c 87       	std	Y+12, r25	; 0x0c
    3078:	ad 87       	std	Y+13, r26	; 0x0d
    307a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307c:	6b 85       	ldd	r22, Y+11	; 0x0b
    307e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3080:	8d 85       	ldd	r24, Y+13	; 0x0d
    3082:	9e 85       	ldd	r25, Y+14	; 0x0e
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	4a ef       	ldi	r20, 0xFA	; 250
    308a:	54 e4       	ldi	r21, 0x44	; 68
    308c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	8f 83       	std	Y+7, r24	; 0x07
    3096:	98 87       	std	Y+8, r25	; 0x08
    3098:	a9 87       	std	Y+9, r26	; 0x09
    309a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    309c:	6f 81       	ldd	r22, Y+7	; 0x07
    309e:	78 85       	ldd	r23, Y+8	; 0x08
    30a0:	89 85       	ldd	r24, Y+9	; 0x09
    30a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e8       	ldi	r20, 0x80	; 128
    30aa:	5f e3       	ldi	r21, 0x3F	; 63
    30ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b0:	88 23       	and	r24, r24
    30b2:	2c f4       	brge	.+10     	; 0x30be <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	9e 83       	std	Y+6, r25	; 0x06
    30ba:	8d 83       	std	Y+5, r24	; 0x05
    30bc:	3f c0       	rjmp	.+126    	; 0x313c <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    30be:	6f 81       	ldd	r22, Y+7	; 0x07
    30c0:	78 85       	ldd	r23, Y+8	; 0x08
    30c2:	89 85       	ldd	r24, Y+9	; 0x09
    30c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	3f ef       	ldi	r19, 0xFF	; 255
    30ca:	4f e7       	ldi	r20, 0x7F	; 127
    30cc:	57 e4       	ldi	r21, 0x47	; 71
    30ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d2:	18 16       	cp	r1, r24
    30d4:	4c f5       	brge	.+82     	; 0x3128 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30da:	8d 85       	ldd	r24, Y+13	; 0x0d
    30dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	40 e2       	ldi	r20, 0x20	; 32
    30e4:	51 e4       	ldi	r21, 0x41	; 65
    30e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	9e 83       	std	Y+6, r25	; 0x06
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    3100:	88 ec       	ldi	r24, 0xC8	; 200
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	9c 83       	std	Y+4, r25	; 0x04
    3106:	8b 83       	std	Y+3, r24	; 0x03
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	9c 81       	ldd	r25, Y+4	; 0x04
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    3110:	9c 83       	std	Y+4, r25	; 0x04
    3112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	9e 81       	ldd	r25, Y+6	; 0x06
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311e:	8d 81       	ldd	r24, Y+5	; 0x05
    3120:	9e 81       	ldd	r25, Y+6	; 0x06
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	69 f7       	brne	.-38     	; 0x3100 <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    3126:	14 c0       	rjmp	.+40     	; 0x3150 <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3128:	6f 81       	ldd	r22, Y+7	; 0x07
    312a:	78 85       	ldd	r23, Y+8	; 0x08
    312c:	89 85       	ldd	r24, Y+9	; 0x09
    312e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	9e 83       	std	Y+6, r25	; 0x06
    313a:	8d 83       	std	Y+5, r24	; 0x05
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	9a 83       	std	Y+2, r25	; 0x02
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	9a 81       	ldd	r25, Y+2	; 0x02
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3150:	8f 85       	ldd	r24, Y+15	; 0x0f
    3152:	8f 5f       	subi	r24, 0xFF	; 255
    3154:	8f 87       	std	Y+15, r24	; 0x0f
    3156:	9f 85       	ldd	r25, Y+15	; 0x0f
    3158:	88 89       	ldd	r24, Y+16	; 0x10
    315a:	98 17       	cp	r25, r24
    315c:	08 f4       	brcc	.+2      	; 0x3160 <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    315e:	83 cf       	rjmp	.-250    	; 0x3066 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3160:	60 96       	adiw	r28, 0x10	; 16
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	08 95       	ret

00003172 <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    3172:	df 93       	push	r29
    3174:	cf 93       	push	r28
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	60 97       	sbiw	r28, 0x10	; 16
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3188:	1f 86       	std	Y+15, r1	; 0x0f
    318a:	78 c0       	rjmp	.+240    	; 0x327c <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    318c:	80 e1       	ldi	r24, 0x10	; 16
    318e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	a6 e9       	ldi	r26, 0x96	; 150
    3198:	b3 e4       	ldi	r27, 0x43	; 67
    319a:	8b 87       	std	Y+11, r24	; 0x0b
    319c:	9c 87       	std	Y+12, r25	; 0x0c
    319e:	ad 87       	std	Y+13, r26	; 0x0d
    31a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	4a ef       	ldi	r20, 0xFA	; 250
    31b0:	54 e4       	ldi	r21, 0x44	; 68
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	8f 83       	std	Y+7, r24	; 0x07
    31bc:	98 87       	std	Y+8, r25	; 0x08
    31be:	a9 87       	std	Y+9, r26	; 0x09
    31c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31c2:	6f 81       	ldd	r22, Y+7	; 0x07
    31c4:	78 85       	ldd	r23, Y+8	; 0x08
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	2c f4       	brge	.+10     	; 0x31e4 <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9e 83       	std	Y+6, r25	; 0x06
    31e0:	8d 83       	std	Y+5, r24	; 0x05
    31e2:	3f c0       	rjmp	.+126    	; 0x3262 <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    31e4:	6f 81       	ldd	r22, Y+7	; 0x07
    31e6:	78 85       	ldd	r23, Y+8	; 0x08
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	3f ef       	ldi	r19, 0xFF	; 255
    31f0:	4f e7       	ldi	r20, 0x7F	; 127
    31f2:	57 e4       	ldi	r21, 0x47	; 71
    31f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f8:	18 16       	cp	r1, r24
    31fa:	4c f5       	brge	.+82     	; 0x324e <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3200:	8d 85       	ldd	r24, Y+13	; 0x0d
    3202:	9e 85       	ldd	r25, Y+14	; 0x0e
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    3226:	88 ec       	ldi	r24, 0xC8	; 200
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9c 83       	std	Y+4, r25	; 0x04
    322c:	8b 83       	std	Y+3, r24	; 0x03
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	9c 81       	ldd	r25, Y+4	; 0x04
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    3236:	9c 83       	std	Y+4, r25	; 0x04
    3238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	9e 81       	ldd	r25, Y+6	; 0x06
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	69 f7       	brne	.-38     	; 0x3226 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    324c:	14 c0       	rjmp	.+40     	; 0x3276 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324e:	6f 81       	ldd	r22, Y+7	; 0x07
    3250:	78 85       	ldd	r23, Y+8	; 0x08
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9e 83       	std	Y+6, r25	; 0x06
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    3272:	9a 83       	std	Y+2, r25	; 0x02
    3274:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3276:	8f 85       	ldd	r24, Y+15	; 0x0f
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	8f 87       	std	Y+15, r24	; 0x0f
    327c:	9f 85       	ldd	r25, Y+15	; 0x0f
    327e:	88 89       	ldd	r24, Y+16	; 0x10
    3280:	98 17       	cp	r25, r24
    3282:	08 f4       	brcc	.+2      	; 0x3286 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    3284:	83 cf       	rjmp	.-250    	; 0x318c <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    3286:	60 96       	adiw	r28, 0x10	; 16
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	60 97       	sbiw	r28, 0x10	; 16
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    32ae:	1f 86       	std	Y+15, r1	; 0x0f
    32b0:	78 c0       	rjmp	.+240    	; 0x33a2 <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    32b2:	84 e1       	ldi	r24, 0x14	; 20
    32b4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <HCLCD_Vid8Bits_SendCommand>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a6 e9       	ldi	r26, 0x96	; 150
    32be:	b3 e4       	ldi	r27, 0x43	; 67
    32c0:	8b 87       	std	Y+11, r24	; 0x0b
    32c2:	9c 87       	std	Y+12, r25	; 0x0c
    32c4:	ad 87       	std	Y+13, r26	; 0x0d
    32c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    32cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a ef       	ldi	r20, 0xFA	; 250
    32d6:	54 e4       	ldi	r21, 0x44	; 68
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	8f 83       	std	Y+7, r24	; 0x07
    32e2:	98 87       	std	Y+8, r25	; 0x08
    32e4:	a9 87       	std	Y+9, r26	; 0x09
    32e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ea:	78 85       	ldd	r23, Y+8	; 0x08
    32ec:	89 85       	ldd	r24, Y+9	; 0x09
    32ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	2c f4       	brge	.+10     	; 0x330a <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
    3308:	3f c0       	rjmp	.+126    	; 0x3388 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    330a:	6f 81       	ldd	r22, Y+7	; 0x07
    330c:	78 85       	ldd	r23, Y+8	; 0x08
    330e:	89 85       	ldd	r24, Y+9	; 0x09
    3310:	9a 85       	ldd	r25, Y+10	; 0x0a
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	4f e7       	ldi	r20, 0x7F	; 127
    3318:	57 e4       	ldi	r21, 0x47	; 71
    331a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331e:	18 16       	cp	r1, r24
    3320:	4c f5       	brge	.+82     	; 0x3374 <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3322:	6b 85       	ldd	r22, Y+11	; 0x0b
    3324:	7c 85       	ldd	r23, Y+12	; 0x0c
    3326:	8d 85       	ldd	r24, Y+13	; 0x0d
    3328:	9e 85       	ldd	r25, Y+14	; 0x0e
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e2       	ldi	r20, 0x20	; 32
    3330:	51 e4       	ldi	r21, 0x41	; 65
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9e 83       	std	Y+6, r25	; 0x06
    3348:	8d 83       	std	Y+5, r24	; 0x05
    334a:	0f c0       	rjmp	.+30     	; 0x336a <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    334c:	88 ec       	ldi	r24, 0xC8	; 200
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9c 83       	std	Y+4, r25	; 0x04
    3352:	8b 83       	std	Y+3, r24	; 0x03
    3354:	8b 81       	ldd	r24, Y+3	; 0x03
    3356:	9c 81       	ldd	r25, Y+4	; 0x04
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    335c:	9c 83       	std	Y+4, r25	; 0x04
    335e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3360:	8d 81       	ldd	r24, Y+5	; 0x05
    3362:	9e 81       	ldd	r25, Y+6	; 0x06
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	9e 83       	std	Y+6, r25	; 0x06
    3368:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336a:	8d 81       	ldd	r24, Y+5	; 0x05
    336c:	9e 81       	ldd	r25, Y+6	; 0x06
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	69 f7       	brne	.-38     	; 0x334c <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    3372:	14 c0       	rjmp	.+40     	; 0x339c <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3374:	6f 81       	ldd	r22, Y+7	; 0x07
    3376:	78 85       	ldd	r23, Y+8	; 0x08
    3378:	89 85       	ldd	r24, Y+9	; 0x09
    337a:	9a 85       	ldd	r25, Y+10	; 0x0a
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9e 83       	std	Y+6, r25	; 0x06
    3386:	8d 83       	std	Y+5, r24	; 0x05
    3388:	8d 81       	ldd	r24, Y+5	; 0x05
    338a:	9e 81       	ldd	r25, Y+6	; 0x06
    338c:	9a 83       	std	Y+2, r25	; 0x02
    338e:	89 83       	std	Y+1, r24	; 0x01
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	9a 81       	ldd	r25, Y+2	; 0x02
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    3398:	9a 83       	std	Y+2, r25	; 0x02
    339a:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    339c:	8f 85       	ldd	r24, Y+15	; 0x0f
    339e:	8f 5f       	subi	r24, 0xFF	; 255
    33a0:	8f 87       	std	Y+15, r24	; 0x0f
    33a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    33a4:	88 89       	ldd	r24, Y+16	; 0x10
    33a6:	98 17       	cp	r25, r24
    33a8:	08 f4       	brcc	.+2      	; 0x33ac <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    33aa:	83 cf       	rjmp	.-250    	; 0x32b2 <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    33ac:	60 96       	adiw	r28, 0x10	; 16
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret

000033be <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	2f 97       	sbiw	r28, 0x0f	; 15
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	62 e0       	ldi	r22, 0x02	; 2
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	62 e0       	ldi	r22, 0x02	; 2
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    33e8:	84 e0       	ldi	r24, 0x04	; 4
    33ea:	62 e0       	ldi	r22, 0x02	; 2
    33ec:	4f 85       	ldd	r20, Y+15	; 0x0f
    33ee:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	62 e0       	ldi	r22, 0x02	; 2
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	a0 e0       	ldi	r26, 0x00	; 0
    3402:	b0 e4       	ldi	r27, 0x40	; 64
    3404:	8b 87       	std	Y+11, r24	; 0x0b
    3406:	9c 87       	std	Y+12, r25	; 0x0c
    3408:	ad 87       	std	Y+13, r26	; 0x0d
    340a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340c:	6b 85       	ldd	r22, Y+11	; 0x0b
    340e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3410:	8d 85       	ldd	r24, Y+13	; 0x0d
    3412:	9e 85       	ldd	r25, Y+14	; 0x0e
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	4a ef       	ldi	r20, 0xFA	; 250
    341a:	54 e4       	ldi	r21, 0x44	; 68
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	8f 83       	std	Y+7, r24	; 0x07
    3426:	98 87       	std	Y+8, r25	; 0x08
    3428:	a9 87       	std	Y+9, r26	; 0x09
    342a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    342c:	6f 81       	ldd	r22, Y+7	; 0x07
    342e:	78 85       	ldd	r23, Y+8	; 0x08
    3430:	89 85       	ldd	r24, Y+9	; 0x09
    3432:	9a 85       	ldd	r25, Y+10	; 0x0a
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e8       	ldi	r20, 0x80	; 128
    343a:	5f e3       	ldi	r21, 0x3F	; 63
    343c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3440:	88 23       	and	r24, r24
    3442:	2c f4       	brge	.+10     	; 0x344e <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9e 83       	std	Y+6, r25	; 0x06
    344a:	8d 83       	std	Y+5, r24	; 0x05
    344c:	3f c0       	rjmp	.+126    	; 0x34cc <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    344e:	6f 81       	ldd	r22, Y+7	; 0x07
    3450:	78 85       	ldd	r23, Y+8	; 0x08
    3452:	89 85       	ldd	r24, Y+9	; 0x09
    3454:	9a 85       	ldd	r25, Y+10	; 0x0a
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	3f ef       	ldi	r19, 0xFF	; 255
    345a:	4f e7       	ldi	r20, 0x7F	; 127
    345c:	57 e4       	ldi	r21, 0x47	; 71
    345e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3462:	18 16       	cp	r1, r24
    3464:	4c f5       	brge	.+82     	; 0x34b8 <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3466:	6b 85       	ldd	r22, Y+11	; 0x0b
    3468:	7c 85       	ldd	r23, Y+12	; 0x0c
    346a:	8d 85       	ldd	r24, Y+13	; 0x0d
    346c:	9e 85       	ldd	r25, Y+14	; 0x0e
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e2       	ldi	r20, 0x20	; 32
    3474:	51 e4       	ldi	r21, 0x41	; 65
    3476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9e 83       	std	Y+6, r25	; 0x06
    348c:	8d 83       	std	Y+5, r24	; 0x05
    348e:	0f c0       	rjmp	.+30     	; 0x34ae <HCLCD_Vid4Bits_SendCommand+0xf0>
    3490:	88 ec       	ldi	r24, 0xC8	; 200
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	9c 83       	std	Y+4, r25	; 0x04
    3496:	8b 83       	std	Y+3, r24	; 0x03
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
    349a:	9c 81       	ldd	r25, Y+4	; 0x04
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <HCLCD_Vid4Bits_SendCommand+0xde>
    34a0:	9c 83       	std	Y+4, r25	; 0x04
    34a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	9e 83       	std	Y+6, r25	; 0x06
    34ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ae:	8d 81       	ldd	r24, Y+5	; 0x05
    34b0:	9e 81       	ldd	r25, Y+6	; 0x06
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	69 f7       	brne	.-38     	; 0x3490 <HCLCD_Vid4Bits_SendCommand+0xd2>
    34b6:	14 c0       	rjmp	.+40     	; 0x34e0 <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ba:	78 85       	ldd	r23, Y+8	; 0x08
    34bc:	89 85       	ldd	r24, Y+9	; 0x09
    34be:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9e 83       	std	Y+6, r25	; 0x06
    34ca:	8d 83       	std	Y+5, r24	; 0x05
    34cc:	8d 81       	ldd	r24, Y+5	; 0x05
    34ce:	9e 81       	ldd	r25, Y+6	; 0x06
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	9a 81       	ldd	r25, Y+2	; 0x02
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <HCLCD_Vid4Bits_SendCommand+0x11a>
    34dc:	9a 83       	std	Y+2, r25	; 0x02
    34de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    34e0:	82 e0       	ldi	r24, 0x02	; 2
    34e2:	62 e0       	ldi	r22, 0x02	; 2
    34e4:	40 e0       	ldi	r20, 0x00	; 0
    34e6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
}
    34ea:	2f 96       	adiw	r28, 0x0f	; 15
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	08 95       	ret

000034fc <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	e9 97       	sbiw	r28, 0x39	; 57
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3510:	87 e0       	ldi	r24, 0x07	; 7
    3512:	89 af       	std	Y+57, r24	; 0x39
    3514:	08 c0       	rjmp	.+16     	; 0x3526 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    3516:	89 ad       	ldd	r24, Y+57	; 0x39
    3518:	62 e0       	ldi	r22, 0x02	; 2
    351a:	41 e0       	ldi	r20, 0x01	; 1
    351c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3520:	89 ad       	ldd	r24, Y+57	; 0x39
    3522:	81 50       	subi	r24, 0x01	; 1
    3524:	89 af       	std	Y+57, r24	; 0x39
    3526:	89 ad       	ldd	r24, Y+57	; 0x39
    3528:	84 30       	cpi	r24, 0x04	; 4
    352a:	ac f7       	brge	.-22     	; 0x3516 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	62 e0       	ldi	r22, 0x02	; 2
    3530:	41 e0       	ldi	r20, 0x01	; 1
    3532:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	62 e0       	ldi	r22, 0x02	; 2
    353a:	41 e0       	ldi	r20, 0x01	; 1
    353c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    3540:	82 e0       	ldi	r24, 0x02	; 2
    3542:	62 e0       	ldi	r22, 0x02	; 2
    3544:	41 e0       	ldi	r20, 0x01	; 1
    3546:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MDIO_Error_State_SetPinDirection>
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	a0 ef       	ldi	r26, 0xF0	; 240
    3550:	b1 e4       	ldi	r27, 0x41	; 65
    3552:	8d ab       	std	Y+53, r24	; 0x35
    3554:	9e ab       	std	Y+54, r25	; 0x36
    3556:	af ab       	std	Y+55, r26	; 0x37
    3558:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    355a:	6d a9       	ldd	r22, Y+53	; 0x35
    355c:	7e a9       	ldd	r23, Y+54	; 0x36
    355e:	8f a9       	ldd	r24, Y+55	; 0x37
    3560:	98 ad       	ldd	r25, Y+56	; 0x38
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	4a ef       	ldi	r20, 0xFA	; 250
    3568:	54 e4       	ldi	r21, 0x44	; 68
    356a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	89 ab       	std	Y+49, r24	; 0x31
    3574:	9a ab       	std	Y+50, r25	; 0x32
    3576:	ab ab       	std	Y+51, r26	; 0x33
    3578:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    357a:	69 a9       	ldd	r22, Y+49	; 0x31
    357c:	7a a9       	ldd	r23, Y+50	; 0x32
    357e:	8b a9       	ldd	r24, Y+51	; 0x33
    3580:	9c a9       	ldd	r25, Y+52	; 0x34
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358e:	88 23       	and	r24, r24
    3590:	2c f4       	brge	.+10     	; 0x359c <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	98 ab       	std	Y+48, r25	; 0x30
    3598:	8f a7       	std	Y+47, r24	; 0x2f
    359a:	3f c0       	rjmp	.+126    	; 0x361a <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    359c:	69 a9       	ldd	r22, Y+49	; 0x31
    359e:	7a a9       	ldd	r23, Y+50	; 0x32
    35a0:	8b a9       	ldd	r24, Y+51	; 0x33
    35a2:	9c a9       	ldd	r25, Y+52	; 0x34
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	3f ef       	ldi	r19, 0xFF	; 255
    35a8:	4f e7       	ldi	r20, 0x7F	; 127
    35aa:	57 e4       	ldi	r21, 0x47	; 71
    35ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b0:	18 16       	cp	r1, r24
    35b2:	4c f5       	brge	.+82     	; 0x3606 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b4:	6d a9       	ldd	r22, Y+53	; 0x35
    35b6:	7e a9       	ldd	r23, Y+54	; 0x36
    35b8:	8f a9       	ldd	r24, Y+55	; 0x37
    35ba:	98 ad       	ldd	r25, Y+56	; 0x38
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e2       	ldi	r20, 0x20	; 32
    35c2:	51 e4       	ldi	r21, 0x41	; 65
    35c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	bc 01       	movw	r22, r24
    35ce:	cd 01       	movw	r24, r26
    35d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	98 ab       	std	Y+48, r25	; 0x30
    35da:	8f a7       	std	Y+47, r24	; 0x2f
    35dc:	0f c0       	rjmp	.+30     	; 0x35fc <HCLCD_Vid4Bits_Init+0x100>
    35de:	88 ec       	ldi	r24, 0xC8	; 200
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	9e a7       	std	Y+46, r25	; 0x2e
    35e4:	8d a7       	std	Y+45, r24	; 0x2d
    35e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    35e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	f1 f7       	brne	.-4      	; 0x35ea <HCLCD_Vid4Bits_Init+0xee>
    35ee:	9e a7       	std	Y+46, r25	; 0x2e
    35f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35f4:	98 a9       	ldd	r25, Y+48	; 0x30
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	98 ab       	std	Y+48, r25	; 0x30
    35fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	69 f7       	brne	.-38     	; 0x35de <HCLCD_Vid4Bits_Init+0xe2>
    3604:	14 c0       	rjmp	.+40     	; 0x362e <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3606:	69 a9       	ldd	r22, Y+49	; 0x31
    3608:	7a a9       	ldd	r23, Y+50	; 0x32
    360a:	8b a9       	ldd	r24, Y+51	; 0x33
    360c:	9c a9       	ldd	r25, Y+52	; 0x34
    360e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	98 ab       	std	Y+48, r25	; 0x30
    3618:	8f a7       	std	Y+47, r24	; 0x2f
    361a:	8f a5       	ldd	r24, Y+47	; 0x2f
    361c:	98 a9       	ldd	r25, Y+48	; 0x30
    361e:	9c a7       	std	Y+44, r25	; 0x2c
    3620:	8b a7       	std	Y+43, r24	; 0x2b
    3622:	8b a5       	ldd	r24, Y+43	; 0x2b
    3624:	9c a5       	ldd	r25, Y+44	; 0x2c
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <HCLCD_Vid4Bits_Init+0x12a>
    362a:	9c a7       	std	Y+44, r25	; 0x2c
    362c:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    362e:	82 e0       	ldi	r24, 0x02	; 2
    3630:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3634:	82 e0       	ldi	r24, 0x02	; 2
    3636:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    363a:	88 e2       	ldi	r24, 0x28	; 40
    363c:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a0 e8       	ldi	r26, 0x80	; 128
    3646:	bf e3       	ldi	r27, 0x3F	; 63
    3648:	8f a3       	std	Y+39, r24	; 0x27
    364a:	98 a7       	std	Y+40, r25	; 0x28
    364c:	a9 a7       	std	Y+41, r26	; 0x29
    364e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3650:	6f a1       	ldd	r22, Y+39	; 0x27
    3652:	78 a5       	ldd	r23, Y+40	; 0x28
    3654:	89 a5       	ldd	r24, Y+41	; 0x29
    3656:	9a a5       	ldd	r25, Y+42	; 0x2a
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	4a ef       	ldi	r20, 0xFA	; 250
    365e:	54 e4       	ldi	r21, 0x44	; 68
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	8b a3       	std	Y+35, r24	; 0x23
    366a:	9c a3       	std	Y+36, r25	; 0x24
    366c:	ad a3       	std	Y+37, r26	; 0x25
    366e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3670:	6b a1       	ldd	r22, Y+35	; 0x23
    3672:	7c a1       	ldd	r23, Y+36	; 0x24
    3674:	8d a1       	ldd	r24, Y+37	; 0x25
    3676:	9e a1       	ldd	r25, Y+38	; 0x26
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e8       	ldi	r20, 0x80	; 128
    367e:	5f e3       	ldi	r21, 0x3F	; 63
    3680:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3684:	88 23       	and	r24, r24
    3686:	2c f4       	brge	.+10     	; 0x3692 <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	9a a3       	std	Y+34, r25	; 0x22
    368e:	89 a3       	std	Y+33, r24	; 0x21
    3690:	3f c0       	rjmp	.+126    	; 0x3710 <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    3692:	6b a1       	ldd	r22, Y+35	; 0x23
    3694:	7c a1       	ldd	r23, Y+36	; 0x24
    3696:	8d a1       	ldd	r24, Y+37	; 0x25
    3698:	9e a1       	ldd	r25, Y+38	; 0x26
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	3f ef       	ldi	r19, 0xFF	; 255
    369e:	4f e7       	ldi	r20, 0x7F	; 127
    36a0:	57 e4       	ldi	r21, 0x47	; 71
    36a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36a6:	18 16       	cp	r1, r24
    36a8:	4c f5       	brge	.+82     	; 0x36fc <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36aa:	6f a1       	ldd	r22, Y+39	; 0x27
    36ac:	78 a5       	ldd	r23, Y+40	; 0x28
    36ae:	89 a5       	ldd	r24, Y+41	; 0x29
    36b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	40 e2       	ldi	r20, 0x20	; 32
    36b8:	51 e4       	ldi	r21, 0x41	; 65
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	bc 01       	movw	r22, r24
    36c4:	cd 01       	movw	r24, r26
    36c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	9a a3       	std	Y+34, r25	; 0x22
    36d0:	89 a3       	std	Y+33, r24	; 0x21
    36d2:	0f c0       	rjmp	.+30     	; 0x36f2 <HCLCD_Vid4Bits_Init+0x1f6>
    36d4:	88 ec       	ldi	r24, 0xC8	; 200
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	98 a3       	std	Y+32, r25	; 0x20
    36da:	8f 8f       	std	Y+31, r24	; 0x1f
    36dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36de:	98 a1       	ldd	r25, Y+32	; 0x20
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <HCLCD_Vid4Bits_Init+0x1e4>
    36e4:	98 a3       	std	Y+32, r25	; 0x20
    36e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e8:	89 a1       	ldd	r24, Y+33	; 0x21
    36ea:	9a a1       	ldd	r25, Y+34	; 0x22
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	9a a3       	std	Y+34, r25	; 0x22
    36f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f2:	89 a1       	ldd	r24, Y+33	; 0x21
    36f4:	9a a1       	ldd	r25, Y+34	; 0x22
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	69 f7       	brne	.-38     	; 0x36d4 <HCLCD_Vid4Bits_Init+0x1d8>
    36fa:	14 c0       	rjmp	.+40     	; 0x3724 <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fc:	6b a1       	ldd	r22, Y+35	; 0x23
    36fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3700:	8d a1       	ldd	r24, Y+37	; 0x25
    3702:	9e a1       	ldd	r25, Y+38	; 0x26
    3704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	9a a3       	std	Y+34, r25	; 0x22
    370e:	89 a3       	std	Y+33, r24	; 0x21
    3710:	89 a1       	ldd	r24, Y+33	; 0x21
    3712:	9a a1       	ldd	r25, Y+34	; 0x22
    3714:	9e 8f       	std	Y+30, r25	; 0x1e
    3716:	8d 8f       	std	Y+29, r24	; 0x1d
    3718:	8d 8d       	ldd	r24, Y+29	; 0x1d
    371a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <HCLCD_Vid4Bits_Init+0x220>
    3720:	9e 8f       	std	Y+30, r25	; 0x1e
    3722:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    372a:	8f e0       	ldi	r24, 0x0F	; 15
    372c:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	a0 e8       	ldi	r26, 0x80	; 128
    3736:	bf e3       	ldi	r27, 0x3F	; 63
    3738:	89 8f       	std	Y+25, r24	; 0x19
    373a:	9a 8f       	std	Y+26, r25	; 0x1a
    373c:	ab 8f       	std	Y+27, r26	; 0x1b
    373e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3740:	69 8d       	ldd	r22, Y+25	; 0x19
    3742:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3746:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	4a ef       	ldi	r20, 0xFA	; 250
    374e:	54 e4       	ldi	r21, 0x44	; 68
    3750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	8d 8b       	std	Y+21, r24	; 0x15
    375a:	9e 8b       	std	Y+22, r25	; 0x16
    375c:	af 8b       	std	Y+23, r26	; 0x17
    375e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3760:	6d 89       	ldd	r22, Y+21	; 0x15
    3762:	7e 89       	ldd	r23, Y+22	; 0x16
    3764:	8f 89       	ldd	r24, Y+23	; 0x17
    3766:	98 8d       	ldd	r25, Y+24	; 0x18
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	40 e8       	ldi	r20, 0x80	; 128
    376e:	5f e3       	ldi	r21, 0x3F	; 63
    3770:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3774:	88 23       	and	r24, r24
    3776:	2c f4       	brge	.+10     	; 0x3782 <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	9c 8b       	std	Y+20, r25	; 0x14
    377e:	8b 8b       	std	Y+19, r24	; 0x13
    3780:	3f c0       	rjmp	.+126    	; 0x3800 <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    3782:	6d 89       	ldd	r22, Y+21	; 0x15
    3784:	7e 89       	ldd	r23, Y+22	; 0x16
    3786:	8f 89       	ldd	r24, Y+23	; 0x17
    3788:	98 8d       	ldd	r25, Y+24	; 0x18
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	3f ef       	ldi	r19, 0xFF	; 255
    378e:	4f e7       	ldi	r20, 0x7F	; 127
    3790:	57 e4       	ldi	r21, 0x47	; 71
    3792:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3796:	18 16       	cp	r1, r24
    3798:	4c f5       	brge	.+82     	; 0x37ec <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379a:	69 8d       	ldd	r22, Y+25	; 0x19
    379c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    379e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	40 e2       	ldi	r20, 0x20	; 32
    37a8:	51 e4       	ldi	r21, 0x41	; 65
    37aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	bc 01       	movw	r22, r24
    37b4:	cd 01       	movw	r24, r26
    37b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	9c 8b       	std	Y+20, r25	; 0x14
    37c0:	8b 8b       	std	Y+19, r24	; 0x13
    37c2:	0f c0       	rjmp	.+30     	; 0x37e2 <HCLCD_Vid4Bits_Init+0x2e6>
    37c4:	88 ec       	ldi	r24, 0xC8	; 200
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	9a 8b       	std	Y+18, r25	; 0x12
    37ca:	89 8b       	std	Y+17, r24	; 0x11
    37cc:	89 89       	ldd	r24, Y+17	; 0x11
    37ce:	9a 89       	ldd	r25, Y+18	; 0x12
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	f1 f7       	brne	.-4      	; 0x37d0 <HCLCD_Vid4Bits_Init+0x2d4>
    37d4:	9a 8b       	std	Y+18, r25	; 0x12
    37d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d8:	8b 89       	ldd	r24, Y+19	; 0x13
    37da:	9c 89       	ldd	r25, Y+20	; 0x14
    37dc:	01 97       	sbiw	r24, 0x01	; 1
    37de:	9c 8b       	std	Y+20, r25	; 0x14
    37e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e2:	8b 89       	ldd	r24, Y+19	; 0x13
    37e4:	9c 89       	ldd	r25, Y+20	; 0x14
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	69 f7       	brne	.-38     	; 0x37c4 <HCLCD_Vid4Bits_Init+0x2c8>
    37ea:	14 c0       	rjmp	.+40     	; 0x3814 <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ec:	6d 89       	ldd	r22, Y+21	; 0x15
    37ee:	7e 89       	ldd	r23, Y+22	; 0x16
    37f0:	8f 89       	ldd	r24, Y+23	; 0x17
    37f2:	98 8d       	ldd	r25, Y+24	; 0x18
    37f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	9c 8b       	std	Y+20, r25	; 0x14
    37fe:	8b 8b       	std	Y+19, r24	; 0x13
    3800:	8b 89       	ldd	r24, Y+19	; 0x13
    3802:	9c 89       	ldd	r25, Y+20	; 0x14
    3804:	98 8b       	std	Y+16, r25	; 0x10
    3806:	8f 87       	std	Y+15, r24	; 0x0f
    3808:	8f 85       	ldd	r24, Y+15	; 0x0f
    380a:	98 89       	ldd	r25, Y+16	; 0x10
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	f1 f7       	brne	.-4      	; 0x380c <HCLCD_Vid4Bits_Init+0x310>
    3810:	98 8b       	std	Y+16, r25	; 0x10
    3812:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	a0 e0       	ldi	r26, 0x00	; 0
    3826:	b0 e4       	ldi	r27, 0x40	; 64
    3828:	8b 87       	std	Y+11, r24	; 0x0b
    382a:	9c 87       	std	Y+12, r25	; 0x0c
    382c:	ad 87       	std	Y+13, r26	; 0x0d
    382e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	4a ef       	ldi	r20, 0xFA	; 250
    383e:	54 e4       	ldi	r21, 0x44	; 68
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	8f 83       	std	Y+7, r24	; 0x07
    384a:	98 87       	std	Y+8, r25	; 0x08
    384c:	a9 87       	std	Y+9, r26	; 0x09
    384e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3850:	6f 81       	ldd	r22, Y+7	; 0x07
    3852:	78 85       	ldd	r23, Y+8	; 0x08
    3854:	89 85       	ldd	r24, Y+9	; 0x09
    3856:	9a 85       	ldd	r25, Y+10	; 0x0a
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e8       	ldi	r20, 0x80	; 128
    385e:	5f e3       	ldi	r21, 0x3F	; 63
    3860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3864:	88 23       	and	r24, r24
    3866:	2c f4       	brge	.+10     	; 0x3872 <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9e 83       	std	Y+6, r25	; 0x06
    386e:	8d 83       	std	Y+5, r24	; 0x05
    3870:	3f c0       	rjmp	.+126    	; 0x38f0 <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    3872:	6f 81       	ldd	r22, Y+7	; 0x07
    3874:	78 85       	ldd	r23, Y+8	; 0x08
    3876:	89 85       	ldd	r24, Y+9	; 0x09
    3878:	9a 85       	ldd	r25, Y+10	; 0x0a
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	3f ef       	ldi	r19, 0xFF	; 255
    387e:	4f e7       	ldi	r20, 0x7F	; 127
    3880:	57 e4       	ldi	r21, 0x47	; 71
    3882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3886:	18 16       	cp	r1, r24
    3888:	4c f5       	brge	.+82     	; 0x38dc <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388a:	6b 85       	ldd	r22, Y+11	; 0x0b
    388c:	7c 85       	ldd	r23, Y+12	; 0x0c
    388e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3890:	9e 85       	ldd	r25, Y+14	; 0x0e
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e2       	ldi	r20, 0x20	; 32
    3898:	51 e4       	ldi	r21, 0x41	; 65
    389a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	bc 01       	movw	r22, r24
    38a4:	cd 01       	movw	r24, r26
    38a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	9e 83       	std	Y+6, r25	; 0x06
    38b0:	8d 83       	std	Y+5, r24	; 0x05
    38b2:	0f c0       	rjmp	.+30     	; 0x38d2 <HCLCD_Vid4Bits_Init+0x3d6>
    38b4:	88 ec       	ldi	r24, 0xC8	; 200
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	9c 83       	std	Y+4, r25	; 0x04
    38ba:	8b 83       	std	Y+3, r24	; 0x03
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	9c 81       	ldd	r25, Y+4	; 0x04
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <HCLCD_Vid4Bits_Init+0x3c4>
    38c4:	9c 83       	std	Y+4, r25	; 0x04
    38c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ca:	9e 81       	ldd	r25, Y+6	; 0x06
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	9e 83       	std	Y+6, r25	; 0x06
    38d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d2:	8d 81       	ldd	r24, Y+5	; 0x05
    38d4:	9e 81       	ldd	r25, Y+6	; 0x06
    38d6:	00 97       	sbiw	r24, 0x00	; 0
    38d8:	69 f7       	brne	.-38     	; 0x38b4 <HCLCD_Vid4Bits_Init+0x3b8>
    38da:	14 c0       	rjmp	.+40     	; 0x3904 <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38dc:	6f 81       	ldd	r22, Y+7	; 0x07
    38de:	78 85       	ldd	r23, Y+8	; 0x08
    38e0:	89 85       	ldd	r24, Y+9	; 0x09
    38e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	9e 83       	std	Y+6, r25	; 0x06
    38ee:	8d 83       	std	Y+5, r24	; 0x05
    38f0:	8d 81       	ldd	r24, Y+5	; 0x05
    38f2:	9e 81       	ldd	r25, Y+6	; 0x06
    38f4:	9a 83       	std	Y+2, r25	; 0x02
    38f6:	89 83       	std	Y+1, r24	; 0x01
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <HCLCD_Vid4Bits_Init+0x400>
    3900:	9a 83       	std	Y+2, r25	; 0x02
    3902:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    390a:	86 e0       	ldi	r24, 0x06	; 6
    390c:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
}
    3910:	e9 96       	adiw	r28, 0x39	; 57
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	2f 97       	sbiw	r28, 0x0f	; 15
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	62 e0       	ldi	r22, 0x02	; 2
    393c:	41 e0       	ldi	r20, 0x01	; 1
    393e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	62 e0       	ldi	r22, 0x02	; 2
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    394c:	84 e0       	ldi	r24, 0x04	; 4
    394e:	62 e0       	ldi	r22, 0x02	; 2
    3950:	4f 85       	ldd	r20, Y+15	; 0x0f
    3952:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3956:	82 e0       	ldi	r24, 0x02	; 2
    3958:	62 e0       	ldi	r22, 0x02	; 2
    395a:	41 e0       	ldi	r20, 0x01	; 1
    395c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	a0 e0       	ldi	r26, 0x00	; 0
    3966:	b0 e4       	ldi	r27, 0x40	; 64
    3968:	8b 87       	std	Y+11, r24	; 0x0b
    396a:	9c 87       	std	Y+12, r25	; 0x0c
    396c:	ad 87       	std	Y+13, r26	; 0x0d
    396e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3970:	6b 85       	ldd	r22, Y+11	; 0x0b
    3972:	7c 85       	ldd	r23, Y+12	; 0x0c
    3974:	8d 85       	ldd	r24, Y+13	; 0x0d
    3976:	9e 85       	ldd	r25, Y+14	; 0x0e
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	4a ef       	ldi	r20, 0xFA	; 250
    397e:	54 e4       	ldi	r21, 0x44	; 68
    3980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	8f 83       	std	Y+7, r24	; 0x07
    398a:	98 87       	std	Y+8, r25	; 0x08
    398c:	a9 87       	std	Y+9, r26	; 0x09
    398e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3990:	6f 81       	ldd	r22, Y+7	; 0x07
    3992:	78 85       	ldd	r23, Y+8	; 0x08
    3994:	89 85       	ldd	r24, Y+9	; 0x09
    3996:	9a 85       	ldd	r25, Y+10	; 0x0a
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e8       	ldi	r20, 0x80	; 128
    399e:	5f e3       	ldi	r21, 0x3F	; 63
    39a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a4:	88 23       	and	r24, r24
    39a6:	2c f4       	brge	.+10     	; 0x39b2 <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	9e 83       	std	Y+6, r25	; 0x06
    39ae:	8d 83       	std	Y+5, r24	; 0x05
    39b0:	3f c0       	rjmp	.+126    	; 0x3a30 <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    39b2:	6f 81       	ldd	r22, Y+7	; 0x07
    39b4:	78 85       	ldd	r23, Y+8	; 0x08
    39b6:	89 85       	ldd	r24, Y+9	; 0x09
    39b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	3f ef       	ldi	r19, 0xFF	; 255
    39be:	4f e7       	ldi	r20, 0x7F	; 127
    39c0:	57 e4       	ldi	r21, 0x47	; 71
    39c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39c6:	18 16       	cp	r1, r24
    39c8:	4c f5       	brge	.+82     	; 0x3a1c <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    39cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e2       	ldi	r20, 0x20	; 32
    39d8:	51 e4       	ldi	r21, 0x41	; 65
    39da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	bc 01       	movw	r22, r24
    39e4:	cd 01       	movw	r24, r26
    39e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9e 83       	std	Y+6, r25	; 0x06
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	0f c0       	rjmp	.+30     	; 0x3a12 <HCLCD_VidWriteChar_4Bits+0xf0>
    39f4:	88 ec       	ldi	r24, 0xC8	; 200
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	9c 83       	std	Y+4, r25	; 0x04
    39fa:	8b 83       	std	Y+3, r24	; 0x03
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	f1 f7       	brne	.-4      	; 0x3a00 <HCLCD_VidWriteChar_4Bits+0xde>
    3a04:	9c 83       	std	Y+4, r25	; 0x04
    3a06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a08:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	9e 83       	std	Y+6, r25	; 0x06
    3a10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a12:	8d 81       	ldd	r24, Y+5	; 0x05
    3a14:	9e 81       	ldd	r25, Y+6	; 0x06
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	69 f7       	brne	.-38     	; 0x39f4 <HCLCD_VidWriteChar_4Bits+0xd2>
    3a1a:	14 c0       	rjmp	.+40     	; 0x3a44 <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1e:	78 85       	ldd	r23, Y+8	; 0x08
    3a20:	89 85       	ldd	r24, Y+9	; 0x09
    3a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <HCLCD_VidWriteChar_4Bits+0x11a>
    3a40:	9a 83       	std	Y+2, r25	; 0x02
    3a42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3a44:	82 e0       	ldi	r24, 0x02	; 2
    3a46:	62 e0       	ldi	r22, 0x02	; 2
    3a48:	40 e0       	ldi	r20, 0x00	; 0
    3a4a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <MDIO_Error_State_SetPinValue>
}
    3a4e:	2f 96       	adiw	r28, 0x0f	; 15
    3a50:	0f b6       	in	r0, 0x3f	; 63
    3a52:	f8 94       	cli
    3a54:	de bf       	out	0x3e, r29	; 62
    3a56:	0f be       	out	0x3f, r0	; 63
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	0f 92       	push	r0
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    3a6a:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	82 95       	swap	r24
    3a70:	8f 70       	andi	r24, 0x0F	; 15
    3a72:	0e 94 91 1c 	call	0x3922	; 0x3922 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	0e 94 91 1c 	call	0x3922	; 0x3922 <HCLCD_VidWriteChar_4Bits>
}
    3a7c:	0f 90       	pop	r0
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <HCLCD_Vid4Bits_DisplayString+0x6>
    3a8a:	0f 92       	push	r0
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	9b 83       	std	Y+3, r25	; 0x03
    3a92:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3a94:	19 82       	std	Y+1, r1	; 0x01
    3a96:	0e c0       	rjmp	.+28     	; 0x3ab4 <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	e2 0f       	add	r30, r18
    3aa6:	f3 1f       	adc	r31, r19
    3aa8:	80 81       	ld	r24, Z
    3aaa:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	8f 5f       	subi	r24, 0xFF	; 255
    3ab2:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	28 2f       	mov	r18, r24
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	8a 81       	ldd	r24, Y+2	; 0x02
    3abc:	9b 81       	ldd	r25, Y+3	; 0x03
    3abe:	fc 01       	movw	r30, r24
    3ac0:	e2 0f       	add	r30, r18
    3ac2:	f3 1f       	adc	r31, r19
    3ac4:	80 81       	ld	r24, Z
    3ac6:	88 23       	and	r24, r24
    3ac8:	39 f7       	brne	.-50     	; 0x3a98 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	cf 91       	pop	r28
    3ad2:	df 91       	pop	r29
    3ad4:	08 95       	ret

00003ad6 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	60 97       	sbiw	r28, 0x10	; 16
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	6d 87       	std	Y+13, r22	; 0x0d
    3af0:	7e 87       	std	Y+14, r23	; 0x0e
    3af2:	8f 87       	std	Y+15, r24	; 0x0f
    3af4:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3af6:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3afc:	af 85       	ldd	r26, Y+15	; 0x0f
    3afe:	b8 89       	ldd	r27, Y+16	; 0x10
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	a1 05       	cpc	r26, r1
    3b04:	b1 05       	cpc	r27, r1
    3b06:	09 f4       	brne	.+2      	; 0x3b0a <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3b08:	4f c0       	rjmp	.+158    	; 0x3ba8 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3b0a:	2d c0       	rjmp	.+90     	; 0x3b66 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0e:	08 2f       	mov	r16, r24
    3b10:	10 e0       	ldi	r17, 0x00	; 0
    3b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b16:	af 85       	ldd	r26, Y+15	; 0x0f
    3b18:	b8 89       	ldd	r27, Y+16	; 0x10
    3b1a:	2a e0       	ldi	r18, 0x0A	; 10
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	50 e0       	ldi	r21, 0x00	; 0
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	0e 94 30 23 	call	0x4660	; 0x4660 <__udivmodsi4>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	28 2f       	mov	r18, r24
    3b30:	ce 01       	movw	r24, r28
    3b32:	03 96       	adiw	r24, 0x03	; 3
    3b34:	fc 01       	movw	r30, r24
    3b36:	e0 0f       	add	r30, r16
    3b38:	f1 1f       	adc	r31, r17
    3b3a:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b40:	af 85       	ldd	r26, Y+15	; 0x0f
    3b42:	b8 89       	ldd	r27, Y+16	; 0x10
    3b44:	2a e0       	ldi	r18, 0x0A	; 10
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	0e 94 30 23 	call	0x4660	; 0x4660 <__udivmodsi4>
    3b54:	da 01       	movw	r26, r20
    3b56:	c9 01       	movw	r24, r18
    3b58:	8d 87       	std	Y+13, r24	; 0x0d
    3b5a:	9e 87       	std	Y+14, r25	; 0x0e
    3b5c:	af 87       	std	Y+15, r26	; 0x0f
    3b5e:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3b60:	8a 81       	ldd	r24, Y+2	; 0x02
    3b62:	8f 5f       	subi	r24, 0xFF	; 255
    3b64:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b6a:	af 85       	ldd	r26, Y+15	; 0x0f
    3b6c:	b8 89       	ldd	r27, Y+16	; 0x10
    3b6e:	00 97       	sbiw	r24, 0x00	; 0
    3b70:	a1 05       	cpc	r26, r1
    3b72:	b1 05       	cpc	r27, r1
    3b74:	59 f6       	brne	.-106    	; 0x3b0c <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3b76:	8a 81       	ldd	r24, Y+2	; 0x02
    3b78:	81 50       	subi	r24, 0x01	; 1
    3b7a:	89 83       	std	Y+1, r24	; 0x01
    3b7c:	11 c0       	rjmp	.+34     	; 0x3ba0 <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	28 2f       	mov	r18, r24
    3b82:	33 27       	eor	r19, r19
    3b84:	27 fd       	sbrc	r18, 7
    3b86:	30 95       	com	r19
    3b88:	ce 01       	movw	r24, r28
    3b8a:	03 96       	adiw	r24, 0x03	; 3
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	e2 0f       	add	r30, r18
    3b90:	f3 1f       	adc	r31, r19
    3b92:	80 81       	ld	r24, Z
    3b94:	80 5d       	subi	r24, 0xD0	; 208
    3b96:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	81 50       	subi	r24, 0x01	; 1
    3b9e:	89 83       	std	Y+1, r24	; 0x01
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	88 23       	and	r24, r24
    3ba4:	64 f7       	brge	.-40     	; 0x3b7e <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3ba6:	03 c0       	rjmp	.+6      	; 0x3bae <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3ba8:	80 e3       	ldi	r24, 0x30	; 48
    3baa:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3bae:	60 96       	adiw	r28, 0x10	; 16
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	1f 91       	pop	r17
    3bc0:	0f 91       	pop	r16
    3bc2:	08 95       	ret

00003bc4 <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <HCLCD_Vid4Bits_SetPosition+0x6>
    3bca:	cd b7       	in	r28, 0x3d	; 61
    3bcc:	de b7       	in	r29, 0x3e	; 62
    3bce:	89 83       	std	Y+1, r24	; 0x01
    3bd0:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	81 30       	cpi	r24, 0x01	; 1
    3bd6:	b9 f4       	brne	.+46     	; 0x3c06 <HCLCD_Vid4Bits_SetPosition+0x42>
    3bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bda:	80 31       	cpi	r24, 0x10	; 16
    3bdc:	a0 f4       	brcc	.+40     	; 0x3c06 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	88 2f       	mov	r24, r24
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	80 58       	subi	r24, 0x80	; 128
    3be6:	9f 4f       	sbci	r25, 0xFF	; 255
    3be8:	95 95       	asr	r25
    3bea:	87 95       	ror	r24
    3bec:	95 95       	asr	r25
    3bee:	87 95       	ror	r24
    3bf0:	95 95       	asr	r25
    3bf2:	87 95       	ror	r24
    3bf4:	95 95       	asr	r25
    3bf6:	87 95       	ror	r24
    3bf8:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfe:	80 58       	subi	r24, 0x80	; 128
    3c00:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    3c04:	19 c0       	rjmp	.+50     	; 0x3c38 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	82 30       	cpi	r24, 0x02	; 2
    3c0a:	b1 f4       	brne	.+44     	; 0x3c38 <HCLCD_Vid4Bits_SetPosition+0x74>
    3c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0e:	80 31       	cpi	r24, 0x10	; 16
    3c10:	98 f4       	brcc	.+38     	; 0x3c38 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	88 2f       	mov	r24, r24
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	80 54       	subi	r24, 0x40	; 64
    3c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1c:	95 95       	asr	r25
    3c1e:	87 95       	ror	r24
    3c20:	95 95       	asr	r25
    3c22:	87 95       	ror	r24
    3c24:	95 95       	asr	r25
    3c26:	87 95       	ror	r24
    3c28:	95 95       	asr	r25
    3c2a:	87 95       	ror	r24
    3c2c:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	80 54       	subi	r24, 0x40	; 64
    3c34:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	cf 91       	pop	r28
    3c3e:	df 91       	pop	r29
    3c40:	08 95       	ret

00003c42 <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3c42:	df 93       	push	r29
    3c44:	cf 93       	push	r28
    3c46:	00 d0       	rcall	.+0      	; 0x3c48 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3c48:	00 d0       	rcall	.+0      	; 0x3c4a <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
    3c4e:	8a 83       	std	Y+2, r24	; 0x02
    3c50:	7c 83       	std	Y+4, r23	; 0x04
    3c52:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	88 30       	cpi	r24, 0x08	; 8
    3c58:	98 f5       	brcc	.+102    	; 0x3cc0 <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	88 2f       	mov	r24, r24
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	08 96       	adiw	r24, 0x08	; 8
    3c62:	88 0f       	add	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	88 0f       	add	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	88 0f       	add	r24, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	95 95       	asr	r25
    3c70:	87 95       	ror	r24
    3c72:	95 95       	asr	r25
    3c74:	87 95       	ror	r24
    3c76:	95 95       	asr	r25
    3c78:	87 95       	ror	r24
    3c7a:	95 95       	asr	r25
    3c7c:	87 95       	ror	r24
    3c7e:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3c82:	8a 81       	ldd	r24, Y+2	; 0x02
    3c84:	88 2f       	mov	r24, r24
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	08 96       	adiw	r24, 0x08	; 8
    3c8a:	88 0f       	add	r24, r24
    3c8c:	99 1f       	adc	r25, r25
    3c8e:	88 0f       	add	r24, r24
    3c90:	99 1f       	adc	r25, r25
    3c92:	88 0f       	add	r24, r24
    3c94:	99 1f       	adc	r25, r25
    3c96:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3c9a:	19 82       	std	Y+1, r1	; 0x01
    3c9c:	0e c0       	rjmp	.+28     	; 0x3cba <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	28 2f       	mov	r18, r24
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca8:	fc 01       	movw	r30, r24
    3caa:	e2 0f       	add	r30, r18
    3cac:	f3 1f       	adc	r31, r19
    3cae:	80 81       	ld	r24, Z
    3cb0:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01
    3cb6:	8f 5f       	subi	r24, 0xFF	; 255
    3cb8:	89 83       	std	Y+1, r24	; 0x01
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	88 30       	cpi	r24, 0x08	; 8
    3cbe:	78 f3       	brcs	.-34     	; 0x3c9e <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	2e 97       	sbiw	r28, 0x0e	; 14
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	a0 e0       	ldi	r26, 0x00	; 0
    3cf4:	b0 e4       	ldi	r27, 0x40	; 64
    3cf6:	8b 87       	std	Y+11, r24	; 0x0b
    3cf8:	9c 87       	std	Y+12, r25	; 0x0c
    3cfa:	ad 87       	std	Y+13, r26	; 0x0d
    3cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	4a ef       	ldi	r20, 0xFA	; 250
    3d0c:	54 e4       	ldi	r21, 0x44	; 68
    3d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	8f 83       	std	Y+7, r24	; 0x07
    3d18:	98 87       	std	Y+8, r25	; 0x08
    3d1a:	a9 87       	std	Y+9, r26	; 0x09
    3d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d20:	78 85       	ldd	r23, Y+8	; 0x08
    3d22:	89 85       	ldd	r24, Y+9	; 0x09
    3d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 e8       	ldi	r20, 0x80	; 128
    3d2c:	5f e3       	ldi	r21, 0x3F	; 63
    3d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d32:	88 23       	and	r24, r24
    3d34:	2c f4       	brge	.+10     	; 0x3d40 <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	9e 83       	std	Y+6, r25	; 0x06
    3d3c:	8d 83       	std	Y+5, r24	; 0x05
    3d3e:	3f c0       	rjmp	.+126    	; 0x3dbe <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3d40:	6f 81       	ldd	r22, Y+7	; 0x07
    3d42:	78 85       	ldd	r23, Y+8	; 0x08
    3d44:	89 85       	ldd	r24, Y+9	; 0x09
    3d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	3f ef       	ldi	r19, 0xFF	; 255
    3d4c:	4f e7       	ldi	r20, 0x7F	; 127
    3d4e:	57 e4       	ldi	r21, 0x47	; 71
    3d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d54:	18 16       	cp	r1, r24
    3d56:	4c f5       	brge	.+82     	; 0x3daa <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	40 e2       	ldi	r20, 0x20	; 32
    3d66:	51 e4       	ldi	r21, 0x41	; 65
    3d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	bc 01       	movw	r22, r24
    3d72:	cd 01       	movw	r24, r26
    3d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9e 83       	std	Y+6, r25	; 0x06
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
    3d80:	0f c0       	rjmp	.+30     	; 0x3da0 <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3d82:	88 ec       	ldi	r24, 0xC8	; 200
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	9c 83       	std	Y+4, r25	; 0x04
    3d88:	8b 83       	std	Y+3, r24	; 0x03
    3d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	f1 f7       	brne	.-4      	; 0x3d8e <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3d92:	9c 83       	std	Y+4, r25	; 0x04
    3d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d96:	8d 81       	ldd	r24, Y+5	; 0x05
    3d98:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	9e 83       	std	Y+6, r25	; 0x06
    3d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da0:	8d 81       	ldd	r24, Y+5	; 0x05
    3da2:	9e 81       	ldd	r25, Y+6	; 0x06
    3da4:	00 97       	sbiw	r24, 0x00	; 0
    3da6:	69 f7       	brne	.-38     	; 0x3d82 <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3da8:	14 c0       	rjmp	.+40     	; 0x3dd2 <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3daa:	6f 81       	ldd	r22, Y+7	; 0x07
    3dac:	78 85       	ldd	r23, Y+8	; 0x08
    3dae:	89 85       	ldd	r24, Y+9	; 0x09
    3db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	9e 83       	std	Y+6, r25	; 0x06
    3dbc:	8d 83       	std	Y+5, r24	; 0x05
    3dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc2:	9a 83       	std	Y+2, r25	; 0x02
    3dc4:	89 83       	std	Y+1, r24	; 0x01
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dca:	01 97       	sbiw	r24, 0x01	; 1
    3dcc:	f1 f7       	brne	.-4      	; 0x3dca <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3dce:	9a 83       	std	Y+2, r25	; 0x02
    3dd0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3dd2:	2e 96       	adiw	r28, 0x0e	; 14
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret

00003de4 <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3de4:	df 93       	push	r29
    3de6:	cf 93       	push	r28
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
    3dec:	60 97       	sbiw	r28, 0x10	; 16
    3dee:	0f b6       	in	r0, 0x3f	; 63
    3df0:	f8 94       	cli
    3df2:	de bf       	out	0x3e, r29	; 62
    3df4:	0f be       	out	0x3f, r0	; 63
    3df6:	cd bf       	out	0x3d, r28	; 61
    3df8:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3dfa:	1f 86       	std	Y+15, r1	; 0x0f
    3dfc:	7b c0       	rjmp	.+246    	; 0x3ef4 <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3e04:	88 e1       	ldi	r24, 0x18	; 24
    3e06:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	a6 e9       	ldi	r26, 0x96	; 150
    3e10:	b3 e4       	ldi	r27, 0x43	; 67
    3e12:	8b 87       	std	Y+11, r24	; 0x0b
    3e14:	9c 87       	std	Y+12, r25	; 0x0c
    3e16:	ad 87       	std	Y+13, r26	; 0x0d
    3e18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	4a ef       	ldi	r20, 0xFA	; 250
    3e28:	54 e4       	ldi	r21, 0x44	; 68
    3e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	8f 83       	std	Y+7, r24	; 0x07
    3e34:	98 87       	std	Y+8, r25	; 0x08
    3e36:	a9 87       	std	Y+9, r26	; 0x09
    3e38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e3c:	78 85       	ldd	r23, Y+8	; 0x08
    3e3e:	89 85       	ldd	r24, Y+9	; 0x09
    3e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	40 e8       	ldi	r20, 0x80	; 128
    3e48:	5f e3       	ldi	r21, 0x3F	; 63
    3e4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e4e:	88 23       	and	r24, r24
    3e50:	2c f4       	brge	.+10     	; 0x3e5c <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	9e 83       	std	Y+6, r25	; 0x06
    3e58:	8d 83       	std	Y+5, r24	; 0x05
    3e5a:	3f c0       	rjmp	.+126    	; 0x3eda <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    3e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5e:	78 85       	ldd	r23, Y+8	; 0x08
    3e60:	89 85       	ldd	r24, Y+9	; 0x09
    3e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	3f ef       	ldi	r19, 0xFF	; 255
    3e68:	4f e7       	ldi	r20, 0x7F	; 127
    3e6a:	57 e4       	ldi	r21, 0x47	; 71
    3e6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e70:	18 16       	cp	r1, r24
    3e72:	4c f5       	brge	.+82     	; 0x3ec6 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	40 e2       	ldi	r20, 0x20	; 32
    3e82:	51 e4       	ldi	r21, 0x41	; 65
    3e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e88:	dc 01       	movw	r26, r24
    3e8a:	cb 01       	movw	r24, r22
    3e8c:	bc 01       	movw	r22, r24
    3e8e:	cd 01       	movw	r24, r26
    3e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	9e 83       	std	Y+6, r25	; 0x06
    3e9a:	8d 83       	std	Y+5, r24	; 0x05
    3e9c:	0f c0       	rjmp	.+30     	; 0x3ebc <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3e9e:	88 ec       	ldi	r24, 0xC8	; 200
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	9c 83       	std	Y+4, r25	; 0x04
    3ea4:	8b 83       	std	Y+3, r24	; 0x03
    3ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eaa:	01 97       	sbiw	r24, 0x01	; 1
    3eac:	f1 f7       	brne	.-4      	; 0x3eaa <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3eae:	9c 83       	std	Y+4, r25	; 0x04
    3eb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	9e 83       	std	Y+6, r25	; 0x06
    3eba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec0:	00 97       	sbiw	r24, 0x00	; 0
    3ec2:	69 f7       	brne	.-38     	; 0x3e9e <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    3ec4:	14 c0       	rjmp	.+40     	; 0x3eee <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec8:	78 85       	ldd	r23, Y+8	; 0x08
    3eca:	89 85       	ldd	r24, Y+9	; 0x09
    3ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	9e 83       	std	Y+6, r25	; 0x06
    3ed8:	8d 83       	std	Y+5, r24	; 0x05
    3eda:	8d 81       	ldd	r24, Y+5	; 0x05
    3edc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ede:	9a 83       	std	Y+2, r25	; 0x02
    3ee0:	89 83       	std	Y+1, r24	; 0x01
    3ee2:	89 81       	ldd	r24, Y+1	; 0x01
    3ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	f1 f7       	brne	.-4      	; 0x3ee6 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    3eea:	9a 83       	std	Y+2, r25	; 0x02
    3eec:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ef0:	8f 5f       	subi	r24, 0xFF	; 255
    3ef2:	8f 87       	std	Y+15, r24	; 0x0f
    3ef4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ef6:	88 89       	ldd	r24, Y+16	; 0x10
    3ef8:	98 17       	cp	r25, r24
    3efa:	08 f4       	brcc	.+2      	; 0x3efe <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    3efc:	80 cf       	rjmp	.-256    	; 0x3dfe <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3efe:	60 96       	adiw	r28, 0x10	; 16
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	08 95       	ret

00003f10 <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3f10:	df 93       	push	r29
    3f12:	cf 93       	push	r28
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
    3f18:	60 97       	sbiw	r28, 0x10	; 16
    3f1a:	0f b6       	in	r0, 0x3f	; 63
    3f1c:	f8 94       	cli
    3f1e:	de bf       	out	0x3e, r29	; 62
    3f20:	0f be       	out	0x3f, r0	; 63
    3f22:	cd bf       	out	0x3d, r28	; 61
    3f24:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3f26:	1f 86       	std	Y+15, r1	; 0x0f
    3f28:	7b c0       	rjmp	.+246    	; 0x4020 <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3f30:	8c e1       	ldi	r24, 0x1C	; 28
    3f32:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	a6 e9       	ldi	r26, 0x96	; 150
    3f3c:	b3 e4       	ldi	r27, 0x43	; 67
    3f3e:	8b 87       	std	Y+11, r24	; 0x0b
    3f40:	9c 87       	std	Y+12, r25	; 0x0c
    3f42:	ad 87       	std	Y+13, r26	; 0x0d
    3f44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	4a ef       	ldi	r20, 0xFA	; 250
    3f54:	54 e4       	ldi	r21, 0x44	; 68
    3f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	8f 83       	std	Y+7, r24	; 0x07
    3f60:	98 87       	std	Y+8, r25	; 0x08
    3f62:	a9 87       	std	Y+9, r26	; 0x09
    3f64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f66:	6f 81       	ldd	r22, Y+7	; 0x07
    3f68:	78 85       	ldd	r23, Y+8	; 0x08
    3f6a:	89 85       	ldd	r24, Y+9	; 0x09
    3f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e8       	ldi	r20, 0x80	; 128
    3f74:	5f e3       	ldi	r21, 0x3F	; 63
    3f76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f7a:	88 23       	and	r24, r24
    3f7c:	2c f4       	brge	.+10     	; 0x3f88 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	9e 83       	std	Y+6, r25	; 0x06
    3f84:	8d 83       	std	Y+5, r24	; 0x05
    3f86:	3f c0       	rjmp	.+126    	; 0x4006 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    3f88:	6f 81       	ldd	r22, Y+7	; 0x07
    3f8a:	78 85       	ldd	r23, Y+8	; 0x08
    3f8c:	89 85       	ldd	r24, Y+9	; 0x09
    3f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	3f ef       	ldi	r19, 0xFF	; 255
    3f94:	4f e7       	ldi	r20, 0x7F	; 127
    3f96:	57 e4       	ldi	r21, 0x47	; 71
    3f98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f9c:	18 16       	cp	r1, r24
    3f9e:	4c f5       	brge	.+82     	; 0x3ff2 <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	40 e2       	ldi	r20, 0x20	; 32
    3fae:	51 e4       	ldi	r21, 0x41	; 65
    3fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	bc 01       	movw	r22, r24
    3fba:	cd 01       	movw	r24, r26
    3fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
    3fc8:	0f c0       	rjmp	.+30     	; 0x3fe8 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    3fca:	88 ec       	ldi	r24, 0xC8	; 200
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	9c 83       	std	Y+4, r25	; 0x04
    3fd0:	8b 83       	std	Y+3, r24	; 0x03
    3fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    3fda:	9c 83       	std	Y+4, r25	; 0x04
    3fdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fde:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	9e 83       	std	Y+6, r25	; 0x06
    3fe6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fea:	9e 81       	ldd	r25, Y+6	; 0x06
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	69 f7       	brne	.-38     	; 0x3fca <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    3ff0:	14 c0       	rjmp	.+40     	; 0x401a <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff4:	78 85       	ldd	r23, Y+8	; 0x08
    3ff6:	89 85       	ldd	r24, Y+9	; 0x09
    3ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	9e 83       	std	Y+6, r25	; 0x06
    4004:	8d 83       	std	Y+5, r24	; 0x05
    4006:	8d 81       	ldd	r24, Y+5	; 0x05
    4008:	9e 81       	ldd	r25, Y+6	; 0x06
    400a:	9a 83       	std	Y+2, r25	; 0x02
    400c:	89 83       	std	Y+1, r24	; 0x01
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	9a 81       	ldd	r25, Y+2	; 0x02
    4012:	01 97       	sbiw	r24, 0x01	; 1
    4014:	f1 f7       	brne	.-4      	; 0x4012 <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    4016:	9a 83       	std	Y+2, r25	; 0x02
    4018:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    401a:	8f 85       	ldd	r24, Y+15	; 0x0f
    401c:	8f 5f       	subi	r24, 0xFF	; 255
    401e:	8f 87       	std	Y+15, r24	; 0x0f
    4020:	9f 85       	ldd	r25, Y+15	; 0x0f
    4022:	88 89       	ldd	r24, Y+16	; 0x10
    4024:	98 17       	cp	r25, r24
    4026:	08 f4       	brcc	.+2      	; 0x402a <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    4028:	80 cf       	rjmp	.-256    	; 0x3f2a <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    402a:	60 96       	adiw	r28, 0x10	; 16
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	cd bf       	out	0x3d, r28	; 61
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	08 95       	ret

0000403c <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
    4044:	60 97       	sbiw	r28, 0x10	; 16
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4052:	1f 86       	std	Y+15, r1	; 0x0f
    4054:	7b c0       	rjmp	.+246    	; 0x414c <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    405c:	80 e1       	ldi	r24, 0x10	; 16
    405e:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	a6 e9       	ldi	r26, 0x96	; 150
    4068:	b3 e4       	ldi	r27, 0x43	; 67
    406a:	8b 87       	std	Y+11, r24	; 0x0b
    406c:	9c 87       	std	Y+12, r25	; 0x0c
    406e:	ad 87       	std	Y+13, r26	; 0x0d
    4070:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4072:	6b 85       	ldd	r22, Y+11	; 0x0b
    4074:	7c 85       	ldd	r23, Y+12	; 0x0c
    4076:	8d 85       	ldd	r24, Y+13	; 0x0d
    4078:	9e 85       	ldd	r25, Y+14	; 0x0e
    407a:	20 e0       	ldi	r18, 0x00	; 0
    407c:	30 e0       	ldi	r19, 0x00	; 0
    407e:	4a ef       	ldi	r20, 0xFA	; 250
    4080:	54 e4       	ldi	r21, 0x44	; 68
    4082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	8f 83       	std	Y+7, r24	; 0x07
    408c:	98 87       	std	Y+8, r25	; 0x08
    408e:	a9 87       	std	Y+9, r26	; 0x09
    4090:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4092:	6f 81       	ldd	r22, Y+7	; 0x07
    4094:	78 85       	ldd	r23, Y+8	; 0x08
    4096:	89 85       	ldd	r24, Y+9	; 0x09
    4098:	9a 85       	ldd	r25, Y+10	; 0x0a
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e8       	ldi	r20, 0x80	; 128
    40a0:	5f e3       	ldi	r21, 0x3F	; 63
    40a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a6:	88 23       	and	r24, r24
    40a8:	2c f4       	brge	.+10     	; 0x40b4 <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	9e 83       	std	Y+6, r25	; 0x06
    40b0:	8d 83       	std	Y+5, r24	; 0x05
    40b2:	3f c0       	rjmp	.+126    	; 0x4132 <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    40b4:	6f 81       	ldd	r22, Y+7	; 0x07
    40b6:	78 85       	ldd	r23, Y+8	; 0x08
    40b8:	89 85       	ldd	r24, Y+9	; 0x09
    40ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	3f ef       	ldi	r19, 0xFF	; 255
    40c0:	4f e7       	ldi	r20, 0x7F	; 127
    40c2:	57 e4       	ldi	r21, 0x47	; 71
    40c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40c8:	18 16       	cp	r1, r24
    40ca:	4c f5       	brge	.+82     	; 0x411e <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    40d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	40 e2       	ldi	r20, 0x20	; 32
    40da:	51 e4       	ldi	r21, 0x41	; 65
    40dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	bc 01       	movw	r22, r24
    40e6:	cd 01       	movw	r24, r26
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	9e 83       	std	Y+6, r25	; 0x06
    40f2:	8d 83       	std	Y+5, r24	; 0x05
    40f4:	0f c0       	rjmp	.+30     	; 0x4114 <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    40f6:	88 ec       	ldi	r24, 0xC8	; 200
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	9c 83       	std	Y+4, r25	; 0x04
    40fc:	8b 83       	std	Y+3, r24	; 0x03
    40fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4100:	9c 81       	ldd	r25, Y+4	; 0x04
    4102:	01 97       	sbiw	r24, 0x01	; 1
    4104:	f1 f7       	brne	.-4      	; 0x4102 <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    4106:	9c 83       	std	Y+4, r25	; 0x04
    4108:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    410a:	8d 81       	ldd	r24, Y+5	; 0x05
    410c:	9e 81       	ldd	r25, Y+6	; 0x06
    410e:	01 97       	sbiw	r24, 0x01	; 1
    4110:	9e 83       	std	Y+6, r25	; 0x06
    4112:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4114:	8d 81       	ldd	r24, Y+5	; 0x05
    4116:	9e 81       	ldd	r25, Y+6	; 0x06
    4118:	00 97       	sbiw	r24, 0x00	; 0
    411a:	69 f7       	brne	.-38     	; 0x40f6 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    411c:	14 c0       	rjmp	.+40     	; 0x4146 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    411e:	6f 81       	ldd	r22, Y+7	; 0x07
    4120:	78 85       	ldd	r23, Y+8	; 0x08
    4122:	89 85       	ldd	r24, Y+9	; 0x09
    4124:	9a 85       	ldd	r25, Y+10	; 0x0a
    4126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	9e 83       	std	Y+6, r25	; 0x06
    4130:	8d 83       	std	Y+5, r24	; 0x05
    4132:	8d 81       	ldd	r24, Y+5	; 0x05
    4134:	9e 81       	ldd	r25, Y+6	; 0x06
    4136:	9a 83       	std	Y+2, r25	; 0x02
    4138:	89 83       	std	Y+1, r24	; 0x01
    413a:	89 81       	ldd	r24, Y+1	; 0x01
    413c:	9a 81       	ldd	r25, Y+2	; 0x02
    413e:	01 97       	sbiw	r24, 0x01	; 1
    4140:	f1 f7       	brne	.-4      	; 0x413e <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    4142:	9a 83       	std	Y+2, r25	; 0x02
    4144:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4146:	8f 85       	ldd	r24, Y+15	; 0x0f
    4148:	8f 5f       	subi	r24, 0xFF	; 255
    414a:	8f 87       	std	Y+15, r24	; 0x0f
    414c:	9f 85       	ldd	r25, Y+15	; 0x0f
    414e:	88 89       	ldd	r24, Y+16	; 0x10
    4150:	98 17       	cp	r25, r24
    4152:	08 f4       	brcc	.+2      	; 0x4156 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    4154:	80 cf       	rjmp	.-256    	; 0x4056 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    4156:	60 96       	adiw	r28, 0x10	; 16
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	f8 94       	cli
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	cd bf       	out	0x3d, r28	; 61
    4162:	cf 91       	pop	r28
    4164:	df 91       	pop	r29
    4166:	08 95       	ret

00004168 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    4168:	df 93       	push	r29
    416a:	cf 93       	push	r28
    416c:	cd b7       	in	r28, 0x3d	; 61
    416e:	de b7       	in	r29, 0x3e	; 62
    4170:	60 97       	sbiw	r28, 0x10	; 16
    4172:	0f b6       	in	r0, 0x3f	; 63
    4174:	f8 94       	cli
    4176:	de bf       	out	0x3e, r29	; 62
    4178:	0f be       	out	0x3f, r0	; 63
    417a:	cd bf       	out	0x3d, r28	; 61
    417c:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    417e:	1f 86       	std	Y+15, r1	; 0x0f
    4180:	7b c0       	rjmp	.+246    	; 0x4278 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    4188:	84 e1       	ldi	r24, 0x14	; 20
    418a:	0e 94 df 19 	call	0x33be	; 0x33be <HCLCD_Vid4Bits_SendCommand>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	a6 e9       	ldi	r26, 0x96	; 150
    4194:	b3 e4       	ldi	r27, 0x43	; 67
    4196:	8b 87       	std	Y+11, r24	; 0x0b
    4198:	9c 87       	std	Y+12, r25	; 0x0c
    419a:	ad 87       	std	Y+13, r26	; 0x0d
    419c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419e:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	4a ef       	ldi	r20, 0xFA	; 250
    41ac:	54 e4       	ldi	r21, 0x44	; 68
    41ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	8f 83       	std	Y+7, r24	; 0x07
    41b8:	98 87       	std	Y+8, r25	; 0x08
    41ba:	a9 87       	std	Y+9, r26	; 0x09
    41bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41be:	6f 81       	ldd	r22, Y+7	; 0x07
    41c0:	78 85       	ldd	r23, Y+8	; 0x08
    41c2:	89 85       	ldd	r24, Y+9	; 0x09
    41c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e8       	ldi	r20, 0x80	; 128
    41cc:	5f e3       	ldi	r21, 0x3F	; 63
    41ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41d2:	88 23       	and	r24, r24
    41d4:	2c f4       	brge	.+10     	; 0x41e0 <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	9e 83       	std	Y+6, r25	; 0x06
    41dc:	8d 83       	std	Y+5, r24	; 0x05
    41de:	3f c0       	rjmp	.+126    	; 0x425e <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    41e0:	6f 81       	ldd	r22, Y+7	; 0x07
    41e2:	78 85       	ldd	r23, Y+8	; 0x08
    41e4:	89 85       	ldd	r24, Y+9	; 0x09
    41e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	3f ef       	ldi	r19, 0xFF	; 255
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	57 e4       	ldi	r21, 0x47	; 71
    41f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41f4:	18 16       	cp	r1, r24
    41f6:	4c f5       	brge	.+82     	; 0x424a <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e2       	ldi	r20, 0x20	; 32
    4206:	51 e4       	ldi	r21, 0x41	; 65
    4208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	9e 83       	std	Y+6, r25	; 0x06
    421e:	8d 83       	std	Y+5, r24	; 0x05
    4220:	0f c0       	rjmp	.+30     	; 0x4240 <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    4222:	88 ec       	ldi	r24, 0xC8	; 200
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	9c 83       	std	Y+4, r25	; 0x04
    4228:	8b 83       	std	Y+3, r24	; 0x03
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	9c 81       	ldd	r25, Y+4	; 0x04
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    4232:	9c 83       	std	Y+4, r25	; 0x04
    4234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4236:	8d 81       	ldd	r24, Y+5	; 0x05
    4238:	9e 81       	ldd	r25, Y+6	; 0x06
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	9e 83       	std	Y+6, r25	; 0x06
    423e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4240:	8d 81       	ldd	r24, Y+5	; 0x05
    4242:	9e 81       	ldd	r25, Y+6	; 0x06
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	69 f7       	brne	.-38     	; 0x4222 <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    4248:	14 c0       	rjmp	.+40     	; 0x4272 <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	6f 81       	ldd	r22, Y+7	; 0x07
    424c:	78 85       	ldd	r23, Y+8	; 0x08
    424e:	89 85       	ldd	r24, Y+9	; 0x09
    4250:	9a 85       	ldd	r25, Y+10	; 0x0a
    4252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	9e 83       	std	Y+6, r25	; 0x06
    425c:	8d 83       	std	Y+5, r24	; 0x05
    425e:	8d 81       	ldd	r24, Y+5	; 0x05
    4260:	9e 81       	ldd	r25, Y+6	; 0x06
    4262:	9a 83       	std	Y+2, r25	; 0x02
    4264:	89 83       	std	Y+1, r24	; 0x01
    4266:	89 81       	ldd	r24, Y+1	; 0x01
    4268:	9a 81       	ldd	r25, Y+2	; 0x02
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    426e:	9a 83       	std	Y+2, r25	; 0x02
    4270:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4272:	8f 85       	ldd	r24, Y+15	; 0x0f
    4274:	8f 5f       	subi	r24, 0xFF	; 255
    4276:	8f 87       	std	Y+15, r24	; 0x0f
    4278:	9f 85       	ldd	r25, Y+15	; 0x0f
    427a:	88 89       	ldd	r24, Y+16	; 0x10
    427c:	98 17       	cp	r25, r24
    427e:	08 f4       	brcc	.+2      	; 0x4282 <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    4280:	80 cf       	rjmp	.-256    	; 0x4182 <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    4282:	60 96       	adiw	r28, 0x10	; 16
    4284:	0f b6       	in	r0, 0x3f	; 63
    4286:	f8 94       	cli
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	0f be       	out	0x3f, r0	; 63
    428c:	cd bf       	out	0x3d, r28	; 61
    428e:	cf 91       	pop	r28
    4290:	df 91       	pop	r29
    4292:	08 95       	ret

00004294 <main>:
void App_TIMER1_OVF_ISR(void);
void App_TIMER1_ICF_ISR(void);


int main(void)
{
    4294:	af 92       	push	r10
    4296:	bf 92       	push	r11
    4298:	cf 92       	push	r12
    429a:	df 92       	push	r13
    429c:	ef 92       	push	r14
    429e:	ff 92       	push	r15
    42a0:	0f 93       	push	r16
    42a2:	1f 93       	push	r17
    42a4:	df 93       	push	r29
    42a6:	cf 93       	push	r28
    42a8:	cd b7       	in	r28, 0x3d	; 61
    42aa:	de b7       	in	r29, 0x3e	; 62
    42ac:	64 97       	sbiw	r28, 0x14	; 20
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	f8 94       	cli
    42b2:	de bf       	out	0x3e, r29	; 62
    42b4:	0f be       	out	0x3f, r0	; 63
    42b6:	cd bf       	out	0x3d, r28	; 61
	/*Generate PWM on this OC0-->Pin PB3*/
	HLED_VidInit(&Y_LED4);
    42b8:	8b e8       	ldi	r24, 0x8B	; 139
    42ba:	91 e0       	ldi	r25, 0x01	; 1
    42bc:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <HLED_VidInit>
	/*LCD Initialization*/
	HCLCD_Vid4Bits_Init();
    42c0:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <HCLCD_Vid4Bits_Init>
	/*Send Welcome message*/
	HCLCD_Vid4Bits_DisplayString((u8*)"Welcome....");
    42c4:	80 e6       	ldi	r24, 0x60	; 96
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <HCLCD_Vid4Bits_DisplayString>
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	aa e7       	ldi	r26, 0x7A	; 122
    42d2:	b4 e4       	ldi	r27, 0x44	; 68
    42d4:	8b 87       	std	Y+11, r24	; 0x0b
    42d6:	9c 87       	std	Y+12, r25	; 0x0c
    42d8:	ad 87       	std	Y+13, r26	; 0x0d
    42da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    42de:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	4a ef       	ldi	r20, 0xFA	; 250
    42ea:	54 e4       	ldi	r21, 0x44	; 68
    42ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	8f 83       	std	Y+7, r24	; 0x07
    42f6:	98 87       	std	Y+8, r25	; 0x08
    42f8:	a9 87       	std	Y+9, r26	; 0x09
    42fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42fc:	6f 81       	ldd	r22, Y+7	; 0x07
    42fe:	78 85       	ldd	r23, Y+8	; 0x08
    4300:	89 85       	ldd	r24, Y+9	; 0x09
    4302:	9a 85       	ldd	r25, Y+10	; 0x0a
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e8       	ldi	r20, 0x80	; 128
    430a:	5f e3       	ldi	r21, 0x3F	; 63
    430c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4310:	88 23       	and	r24, r24
    4312:	2c f4       	brge	.+10     	; 0x431e <main+0x8a>
		__ticks = 1;
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	9e 83       	std	Y+6, r25	; 0x06
    431a:	8d 83       	std	Y+5, r24	; 0x05
    431c:	3f c0       	rjmp	.+126    	; 0x439c <main+0x108>
	else if (__tmp > 65535)
    431e:	6f 81       	ldd	r22, Y+7	; 0x07
    4320:	78 85       	ldd	r23, Y+8	; 0x08
    4322:	89 85       	ldd	r24, Y+9	; 0x09
    4324:	9a 85       	ldd	r25, Y+10	; 0x0a
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	3f ef       	ldi	r19, 0xFF	; 255
    432a:	4f e7       	ldi	r20, 0x7F	; 127
    432c:	57 e4       	ldi	r21, 0x47	; 71
    432e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4332:	18 16       	cp	r1, r24
    4334:	4c f5       	brge	.+82     	; 0x4388 <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4336:	6b 85       	ldd	r22, Y+11	; 0x0b
    4338:	7c 85       	ldd	r23, Y+12	; 0x0c
    433a:	8d 85       	ldd	r24, Y+13	; 0x0d
    433c:	9e 85       	ldd	r25, Y+14	; 0x0e
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e2       	ldi	r20, 0x20	; 32
    4344:	51 e4       	ldi	r21, 0x41	; 65
    4346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434a:	dc 01       	movw	r26, r24
    434c:	cb 01       	movw	r24, r22
    434e:	bc 01       	movw	r22, r24
    4350:	cd 01       	movw	r24, r26
    4352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	9e 83       	std	Y+6, r25	; 0x06
    435c:	8d 83       	std	Y+5, r24	; 0x05
    435e:	0f c0       	rjmp	.+30     	; 0x437e <main+0xea>
    4360:	88 ec       	ldi	r24, 0xC8	; 200
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	9c 83       	std	Y+4, r25	; 0x04
    4366:	8b 83       	std	Y+3, r24	; 0x03
    4368:	8b 81       	ldd	r24, Y+3	; 0x03
    436a:	9c 81       	ldd	r25, Y+4	; 0x04
    436c:	01 97       	sbiw	r24, 0x01	; 1
    436e:	f1 f7       	brne	.-4      	; 0x436c <main+0xd8>
    4370:	9c 83       	std	Y+4, r25	; 0x04
    4372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4374:	8d 81       	ldd	r24, Y+5	; 0x05
    4376:	9e 81       	ldd	r25, Y+6	; 0x06
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	9e 83       	std	Y+6, r25	; 0x06
    437c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    437e:	8d 81       	ldd	r24, Y+5	; 0x05
    4380:	9e 81       	ldd	r25, Y+6	; 0x06
    4382:	00 97       	sbiw	r24, 0x00	; 0
    4384:	69 f7       	brne	.-38     	; 0x4360 <main+0xcc>
    4386:	14 c0       	rjmp	.+40     	; 0x43b0 <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4388:	6f 81       	ldd	r22, Y+7	; 0x07
    438a:	78 85       	ldd	r23, Y+8	; 0x08
    438c:	89 85       	ldd	r24, Y+9	; 0x09
    438e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	9e 83       	std	Y+6, r25	; 0x06
    439a:	8d 83       	std	Y+5, r24	; 0x05
    439c:	8d 81       	ldd	r24, Y+5	; 0x05
    439e:	9e 81       	ldd	r25, Y+6	; 0x06
    43a0:	9a 83       	std	Y+2, r25	; 0x02
    43a2:	89 83       	std	Y+1, r24	; 0x01
    43a4:	89 81       	ldd	r24, Y+1	; 0x01
    43a6:	9a 81       	ldd	r25, Y+2	; 0x02
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	f1 f7       	brne	.-4      	; 0x43a8 <main+0x114>
    43ac:	9a 83       	std	Y+2, r25	; 0x02
    43ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    43b0:	0e 94 67 1e 	call	0x3cce	; 0x3cce <HCLCD_Vid4Bits_ClearScreen>
	 * T_on depend on the  the value of OCR
	 * if you need D = 75% --> T_on = T*D = 4.08 * 0.75 = 3.06 ms -->Note OCR = 192 ticks    if you in NON_Inverting mode
	 * V_out = D * V_in
	 * */
	/*Set CTC Value-->DutyCycle=75%*/
	MTIMER0_VidSetCTCValue(191);
    43b4:	8f eb       	ldi	r24, 0xBF	; 191
    43b6:	0e 94 56 07 	call	0xeac	; 0xeac <MTIMER0_VidSetCTCValue>

	/*Timer0 Initialization in Phase Correct PWM */
	MTIMER0_VidInit();
    43ba:	0e 94 17 07 	call	0xe2e	; 0xe2e <MTIMER0_VidInit>
	/*Timer1 Initialization-->-->Set timer1 in Input Capture Mode
	 * F_cpu = 8MHz, NO_Prescaler --> F_timer = 8MHz -->T_tick = 0.125 micro second-->one_OFV = 0.125 *65536 = 8192 micro second = 8.192 ms
	 * TIMER1 Sense Control----> Rising Edge*/
	MTIMER1_VidInit();
    43be:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <MTIMER1_VidInit>
	/*Set EXTI Call Back*/
	MTIMER1_VidICF_SetCallBack(&App_TIMER1_ICF_ISR);
    43c2:	82 eb       	ldi	r24, 0xB2	; 178
    43c4:	92 e2       	ldi	r25, 0x22	; 34
    43c6:	0e 94 87 08 	call	0x110e	; 0x110e <MTIMER1_VidICF_SetCallBack>
	MTIMER1_VidOVF_SetCallBack(&App_TIMER1_OVF_ISR);
    43ca:	84 e2       	ldi	r24, 0x24	; 36
    43cc:	93 e2       	ldi	r25, 0x23	; 35
    43ce:	0e 94 75 08 	call	0x10ea	; 0x10ea <MTIMER1_VidOVF_SetCallBack>

	/*Enable To GIE*/
	MGIE_VidEnable();
    43d2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <MGIE_VidEnable>
	u32 Freq = 0;
    43d6:	19 8a       	std	Y+17, r1	; 0x11
    43d8:	1a 8a       	std	Y+18, r1	; 0x12
    43da:	1b 8a       	std	Y+19, r1	; 0x13
    43dc:	1c 8a       	std	Y+20, r1	; 0x14
	u16 DutyCycle = 0;
    43de:	18 8a       	std	Y+16, r1	; 0x10
    43e0:	1f 86       	std	Y+15, r1	; 0x0f

	while(1)
	{
		if(Flag==3)
    43e2:	80 91 9f 01 	lds	r24, 0x019F
    43e6:	83 30       	cpi	r24, 0x03	; 3
    43e8:	e1 f7       	brne	.-8      	; 0x43e2 <main+0x14e>
		{
			/*Frequency in HZ*/
			Freq=(1000000/((T3-T1)*0.125));  //T3-T1=32651  * 0.125 = 4081.375 micro second  f= 2.45 *10^-4 MHz ---*10^6-->245 HZ
    43ea:	20 91 a9 01 	lds	r18, 0x01A9
    43ee:	30 91 aa 01 	lds	r19, 0x01AA
    43f2:	40 91 ab 01 	lds	r20, 0x01AB
    43f6:	50 91 ac 01 	lds	r21, 0x01AC
    43fa:	80 91 a1 01 	lds	r24, 0x01A1
    43fe:	90 91 a2 01 	lds	r25, 0x01A2
    4402:	a0 91 a3 01 	lds	r26, 0x01A3
    4406:	b0 91 a4 01 	lds	r27, 0x01A4
    440a:	59 01       	movw	r10, r18
    440c:	6a 01       	movw	r12, r20
    440e:	a8 1a       	sub	r10, r24
    4410:	b9 0a       	sbc	r11, r25
    4412:	ca 0a       	sbc	r12, r26
    4414:	db 0a       	sbc	r13, r27
    4416:	d6 01       	movw	r26, r12
    4418:	c5 01       	movw	r24, r10
    441a:	bc 01       	movw	r22, r24
    441c:	cd 01       	movw	r24, r26
    441e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4422:	dc 01       	movw	r26, r24
    4424:	cb 01       	movw	r24, r22
    4426:	bc 01       	movw	r22, r24
    4428:	cd 01       	movw	r24, r26
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	40 e0       	ldi	r20, 0x00	; 0
    4430:	5e e3       	ldi	r21, 0x3E	; 62
    4432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	9c 01       	movw	r18, r24
    443c:	ad 01       	movw	r20, r26
    443e:	60 e0       	ldi	r22, 0x00	; 0
    4440:	74 e2       	ldi	r23, 0x24	; 36
    4442:	84 e7       	ldi	r24, 0x74	; 116
    4444:	99 e4       	ldi	r25, 0x49	; 73
    4446:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    444a:	dc 01       	movw	r26, r24
    444c:	cb 01       	movw	r24, r22
    444e:	bc 01       	movw	r22, r24
    4450:	cd 01       	movw	r24, r26
    4452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	89 8b       	std	Y+17, r24	; 0x11
    445c:	9a 8b       	std	Y+18, r25	; 0x12
    445e:	ab 8b       	std	Y+19, r26	; 0x13
    4460:	bc 8b       	std	Y+20, r27	; 0x14
			DutyCycle=((f32)(T2-T1)/(T3-T1)*100);
    4462:	20 91 a5 01 	lds	r18, 0x01A5
    4466:	30 91 a6 01 	lds	r19, 0x01A6
    446a:	40 91 a7 01 	lds	r20, 0x01A7
    446e:	50 91 a8 01 	lds	r21, 0x01A8
    4472:	80 91 a1 01 	lds	r24, 0x01A1
    4476:	90 91 a2 01 	lds	r25, 0x01A2
    447a:	a0 91 a3 01 	lds	r26, 0x01A3
    447e:	b0 91 a4 01 	lds	r27, 0x01A4
    4482:	69 01       	movw	r12, r18
    4484:	7a 01       	movw	r14, r20
    4486:	c8 1a       	sub	r12, r24
    4488:	d9 0a       	sbc	r13, r25
    448a:	ea 0a       	sbc	r14, r26
    448c:	fb 0a       	sbc	r15, r27
    448e:	d7 01       	movw	r26, r14
    4490:	c6 01       	movw	r24, r12
    4492:	bc 01       	movw	r22, r24
    4494:	cd 01       	movw	r24, r26
    4496:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    449a:	7b 01       	movw	r14, r22
    449c:	8c 01       	movw	r16, r24
    449e:	20 91 a9 01 	lds	r18, 0x01A9
    44a2:	30 91 aa 01 	lds	r19, 0x01AA
    44a6:	40 91 ab 01 	lds	r20, 0x01AB
    44aa:	50 91 ac 01 	lds	r21, 0x01AC
    44ae:	80 91 a1 01 	lds	r24, 0x01A1
    44b2:	90 91 a2 01 	lds	r25, 0x01A2
    44b6:	a0 91 a3 01 	lds	r26, 0x01A3
    44ba:	b0 91 a4 01 	lds	r27, 0x01A4
    44be:	59 01       	movw	r10, r18
    44c0:	6a 01       	movw	r12, r20
    44c2:	a8 1a       	sub	r10, r24
    44c4:	b9 0a       	sbc	r11, r25
    44c6:	ca 0a       	sbc	r12, r26
    44c8:	db 0a       	sbc	r13, r27
    44ca:	d6 01       	movw	r26, r12
    44cc:	c5 01       	movw	r24, r10
    44ce:	bc 01       	movw	r22, r24
    44d0:	cd 01       	movw	r24, r26
    44d2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    44d6:	9b 01       	movw	r18, r22
    44d8:	ac 01       	movw	r20, r24
    44da:	c8 01       	movw	r24, r16
    44dc:	b7 01       	movw	r22, r14
    44de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44e2:	dc 01       	movw	r26, r24
    44e4:	cb 01       	movw	r24, r22
    44e6:	bc 01       	movw	r22, r24
    44e8:	cd 01       	movw	r24, r26
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	48 ec       	ldi	r20, 0xC8	; 200
    44f0:	52 e4       	ldi	r21, 0x42	; 66
    44f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	bc 01       	movw	r22, r24
    44fc:	cd 01       	movw	r24, r26
    44fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	98 8b       	std	Y+16, r25	; 0x10
    4508:	8f 87       	std	Y+15, r24	; 0x0f
			HCLCD_Vid4Bits_SetPosition(1,0);
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	60 e0       	ldi	r22, 0x00	; 0
    450e:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <HCLCD_Vid4Bits_SetPosition>
			HCLCD_Vid4Bits_DisplayString((u8*) "DutyCycle=");
    4512:	8c e6       	ldi	r24, 0x6C	; 108
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <HCLCD_Vid4Bits_DisplayString>
		    HCLCD_Vid4Bits_DisplayNumber(DutyCycle);
    451a:	8f 85       	ldd	r24, Y+15	; 0x0f
    451c:	98 89       	ldd	r25, Y+16	; 0x10
    451e:	cc 01       	movw	r24, r24
    4520:	a0 e0       	ldi	r26, 0x00	; 0
    4522:	b0 e0       	ldi	r27, 0x00	; 0
    4524:	bc 01       	movw	r22, r24
    4526:	cd 01       	movw	r24, r26
    4528:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <HCLCD_Vid4Bits_DisplayNumber>
			HCLCD_Vid4Bits_DisplayString((u8*)"%");
    452c:	87 e7       	ldi	r24, 0x77	; 119
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_SetPosition(2,0);
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	60 e0       	ldi	r22, 0x00	; 0
    4538:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <HCLCD_Vid4Bits_SetPosition>
			HCLCD_Vid4Bits_DisplayString((u8*)"Freq=");
    453c:	89 e7       	ldi	r24, 0x79	; 121
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_DisplayNumber(Freq);
    4544:	89 89       	ldd	r24, Y+17	; 0x11
    4546:	9a 89       	ldd	r25, Y+18	; 0x12
    4548:	ab 89       	ldd	r26, Y+19	; 0x13
    454a:	bc 89       	ldd	r27, Y+20	; 0x14
    454c:	bc 01       	movw	r22, r24
    454e:	cd 01       	movw	r24, r26
    4550:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <HCLCD_Vid4Bits_DisplayNumber>
			HCLCD_Vid4Bits_DisplayString((u8*)" Hz");
    4554:	8f e7       	ldi	r24, 0x7F	; 127
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <HCLCD_Vid4Bits_DisplayString>
			//HCLCD_Vid4Bits_DisplayNumber(T1);
			//HCLCD_Vid4Bits_DisplayString((u8*)",");
			//HCLCD_Vid4Bits_DisplayNumber(T3);

			Flag = 4 ;
    455c:	84 e0       	ldi	r24, 0x04	; 4
    455e:	80 93 9f 01 	sts	0x019F, r24
    4562:	3f cf       	rjmp	.-386    	; 0x43e2 <main+0x14e>

00004564 <App_TIMER1_ICF_ISR>:
	}
	return 0 ;

}
void App_TIMER1_ICF_ISR(void)
{
    4564:	df 93       	push	r29
    4566:	cf 93       	push	r28
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
	if(Flag==0)
    456c:	80 91 9f 01 	lds	r24, 0x019F
    4570:	88 23       	and	r24, r24
    4572:	09 f5       	brne	.+66     	; 0x45b6 <App_TIMER1_ICF_ISR+0x52>
	{
		T1= MTIMER1_u16GetICR1Value()+Count*65536;
    4574:	0e 94 4b 08 	call	0x1096	; 0x1096 <MTIMER1_u16GetICR1Value>
    4578:	9c 01       	movw	r18, r24
    457a:	40 e0       	ldi	r20, 0x00	; 0
    457c:	50 e0       	ldi	r21, 0x00	; 0
    457e:	80 91 a0 01 	lds	r24, 0x01A0
    4582:	88 2f       	mov	r24, r24
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	a0 e0       	ldi	r26, 0x00	; 0
    4588:	b0 e0       	ldi	r27, 0x00	; 0
    458a:	dc 01       	movw	r26, r24
    458c:	99 27       	eor	r25, r25
    458e:	88 27       	eor	r24, r24
    4590:	82 0f       	add	r24, r18
    4592:	93 1f       	adc	r25, r19
    4594:	a4 1f       	adc	r26, r20
    4596:	b5 1f       	adc	r27, r21
    4598:	80 93 a1 01 	sts	0x01A1, r24
    459c:	90 93 a2 01 	sts	0x01A2, r25
    45a0:	a0 93 a3 01 	sts	0x01A3, r26
    45a4:	b0 93 a4 01 	sts	0x01A4, r27
		MTIMER1_VidSenseControl(MTIMER1_ICU_FALLING_EDGE);
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	0e 94 56 08 	call	0x10ac	; 0x10ac <MTIMER1_VidSenseControl>
		Flag=1;
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	80 93 9f 01 	sts	0x019F, r24
    45b4:	46 c0       	rjmp	.+140    	; 0x4642 <App_TIMER1_ICF_ISR+0xde>
	}
	else if(Flag==1)
    45b6:	80 91 9f 01 	lds	r24, 0x019F
    45ba:	81 30       	cpi	r24, 0x01	; 1
    45bc:	09 f5       	brne	.+66     	; 0x4600 <App_TIMER1_ICF_ISR+0x9c>
	{
		T2=	 MTIMER1_u16GetICR1Value()+Count*65536;
    45be:	0e 94 4b 08 	call	0x1096	; 0x1096 <MTIMER1_u16GetICR1Value>
    45c2:	9c 01       	movw	r18, r24
    45c4:	40 e0       	ldi	r20, 0x00	; 0
    45c6:	50 e0       	ldi	r21, 0x00	; 0
    45c8:	80 91 a0 01 	lds	r24, 0x01A0
    45cc:	88 2f       	mov	r24, r24
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	a0 e0       	ldi	r26, 0x00	; 0
    45d2:	b0 e0       	ldi	r27, 0x00	; 0
    45d4:	dc 01       	movw	r26, r24
    45d6:	99 27       	eor	r25, r25
    45d8:	88 27       	eor	r24, r24
    45da:	82 0f       	add	r24, r18
    45dc:	93 1f       	adc	r25, r19
    45de:	a4 1f       	adc	r26, r20
    45e0:	b5 1f       	adc	r27, r21
    45e2:	80 93 a5 01 	sts	0x01A5, r24
    45e6:	90 93 a6 01 	sts	0x01A6, r25
    45ea:	a0 93 a7 01 	sts	0x01A7, r26
    45ee:	b0 93 a8 01 	sts	0x01A8, r27
		MTIMER1_VidSenseControl(MTIMER1_ICU_RISING_EDGE);
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	0e 94 56 08 	call	0x10ac	; 0x10ac <MTIMER1_VidSenseControl>
		Flag=2;
    45f8:	82 e0       	ldi	r24, 0x02	; 2
    45fa:	80 93 9f 01 	sts	0x019F, r24
    45fe:	21 c0       	rjmp	.+66     	; 0x4642 <App_TIMER1_ICF_ISR+0xde>
	}
	else if(Flag==2)
    4600:	80 91 9f 01 	lds	r24, 0x019F
    4604:	82 30       	cpi	r24, 0x02	; 2
    4606:	e9 f4       	brne	.+58     	; 0x4642 <App_TIMER1_ICF_ISR+0xde>
	{
		T3= MTIMER1_u16GetICR1Value()+Count*65536;
    4608:	0e 94 4b 08 	call	0x1096	; 0x1096 <MTIMER1_u16GetICR1Value>
    460c:	9c 01       	movw	r18, r24
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	50 e0       	ldi	r21, 0x00	; 0
    4612:	80 91 a0 01 	lds	r24, 0x01A0
    4616:	88 2f       	mov	r24, r24
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	a0 e0       	ldi	r26, 0x00	; 0
    461c:	b0 e0       	ldi	r27, 0x00	; 0
    461e:	dc 01       	movw	r26, r24
    4620:	99 27       	eor	r25, r25
    4622:	88 27       	eor	r24, r24
    4624:	82 0f       	add	r24, r18
    4626:	93 1f       	adc	r25, r19
    4628:	a4 1f       	adc	r26, r20
    462a:	b5 1f       	adc	r27, r21
    462c:	80 93 a9 01 	sts	0x01A9, r24
    4630:	90 93 aa 01 	sts	0x01AA, r25
    4634:	a0 93 ab 01 	sts	0x01AB, r26
    4638:	b0 93 ac 01 	sts	0x01AC, r27
		Flag=3;
    463c:	83 e0       	ldi	r24, 0x03	; 3
    463e:	80 93 9f 01 	sts	0x019F, r24
	}
}
    4642:	cf 91       	pop	r28
    4644:	df 91       	pop	r29
    4646:	08 95       	ret

00004648 <App_TIMER1_OVF_ISR>:

void App_TIMER1_OVF_ISR(void)
{
    4648:	df 93       	push	r29
    464a:	cf 93       	push	r28
    464c:	cd b7       	in	r28, 0x3d	; 61
    464e:	de b7       	in	r29, 0x3e	; 62
	Count++ ;
    4650:	80 91 a0 01 	lds	r24, 0x01A0
    4654:	8f 5f       	subi	r24, 0xFF	; 255
    4656:	80 93 a0 01 	sts	0x01A0, r24
}
    465a:	cf 91       	pop	r28
    465c:	df 91       	pop	r29
    465e:	08 95       	ret

00004660 <__udivmodsi4>:
    4660:	a1 e2       	ldi	r26, 0x21	; 33
    4662:	1a 2e       	mov	r1, r26
    4664:	aa 1b       	sub	r26, r26
    4666:	bb 1b       	sub	r27, r27
    4668:	fd 01       	movw	r30, r26
    466a:	0d c0       	rjmp	.+26     	; 0x4686 <__udivmodsi4_ep>

0000466c <__udivmodsi4_loop>:
    466c:	aa 1f       	adc	r26, r26
    466e:	bb 1f       	adc	r27, r27
    4670:	ee 1f       	adc	r30, r30
    4672:	ff 1f       	adc	r31, r31
    4674:	a2 17       	cp	r26, r18
    4676:	b3 07       	cpc	r27, r19
    4678:	e4 07       	cpc	r30, r20
    467a:	f5 07       	cpc	r31, r21
    467c:	20 f0       	brcs	.+8      	; 0x4686 <__udivmodsi4_ep>
    467e:	a2 1b       	sub	r26, r18
    4680:	b3 0b       	sbc	r27, r19
    4682:	e4 0b       	sbc	r30, r20
    4684:	f5 0b       	sbc	r31, r21

00004686 <__udivmodsi4_ep>:
    4686:	66 1f       	adc	r22, r22
    4688:	77 1f       	adc	r23, r23
    468a:	88 1f       	adc	r24, r24
    468c:	99 1f       	adc	r25, r25
    468e:	1a 94       	dec	r1
    4690:	69 f7       	brne	.-38     	; 0x466c <__udivmodsi4_loop>
    4692:	60 95       	com	r22
    4694:	70 95       	com	r23
    4696:	80 95       	com	r24
    4698:	90 95       	com	r25
    469a:	9b 01       	movw	r18, r22
    469c:	ac 01       	movw	r20, r24
    469e:	bd 01       	movw	r22, r26
    46a0:	cf 01       	movw	r24, r30
    46a2:	08 95       	ret

000046a4 <__prologue_saves__>:
    46a4:	2f 92       	push	r2
    46a6:	3f 92       	push	r3
    46a8:	4f 92       	push	r4
    46aa:	5f 92       	push	r5
    46ac:	6f 92       	push	r6
    46ae:	7f 92       	push	r7
    46b0:	8f 92       	push	r8
    46b2:	9f 92       	push	r9
    46b4:	af 92       	push	r10
    46b6:	bf 92       	push	r11
    46b8:	cf 92       	push	r12
    46ba:	df 92       	push	r13
    46bc:	ef 92       	push	r14
    46be:	ff 92       	push	r15
    46c0:	0f 93       	push	r16
    46c2:	1f 93       	push	r17
    46c4:	cf 93       	push	r28
    46c6:	df 93       	push	r29
    46c8:	cd b7       	in	r28, 0x3d	; 61
    46ca:	de b7       	in	r29, 0x3e	; 62
    46cc:	ca 1b       	sub	r28, r26
    46ce:	db 0b       	sbc	r29, r27
    46d0:	0f b6       	in	r0, 0x3f	; 63
    46d2:	f8 94       	cli
    46d4:	de bf       	out	0x3e, r29	; 62
    46d6:	0f be       	out	0x3f, r0	; 63
    46d8:	cd bf       	out	0x3d, r28	; 61
    46da:	09 94       	ijmp

000046dc <__epilogue_restores__>:
    46dc:	2a 88       	ldd	r2, Y+18	; 0x12
    46de:	39 88       	ldd	r3, Y+17	; 0x11
    46e0:	48 88       	ldd	r4, Y+16	; 0x10
    46e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    46e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    46e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    46e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    46ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    46ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    46ee:	b9 84       	ldd	r11, Y+9	; 0x09
    46f0:	c8 84       	ldd	r12, Y+8	; 0x08
    46f2:	df 80       	ldd	r13, Y+7	; 0x07
    46f4:	ee 80       	ldd	r14, Y+6	; 0x06
    46f6:	fd 80       	ldd	r15, Y+5	; 0x05
    46f8:	0c 81       	ldd	r16, Y+4	; 0x04
    46fa:	1b 81       	ldd	r17, Y+3	; 0x03
    46fc:	aa 81       	ldd	r26, Y+2	; 0x02
    46fe:	b9 81       	ldd	r27, Y+1	; 0x01
    4700:	ce 0f       	add	r28, r30
    4702:	d1 1d       	adc	r29, r1
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	ed 01       	movw	r28, r26
    4710:	08 95       	ret

00004712 <_exit>:
    4712:	f8 94       	cli

00004714 <__stop_program>:
    4714:	ff cf       	rjmp	.-2      	; 0x4714 <__stop_program>
