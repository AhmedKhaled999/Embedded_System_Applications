
12-ICU_By_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  000046ca  0000475e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800196  00800196  00004894  2**0
                  ALLOC
  3 .stab         0000498c  00000000  00000000  00004894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c7e  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ae9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d63b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fb98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001004e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000109bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_9>
      28:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__vector_10>
      2c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 21 	call	0x421e	; 0x421e <main>
      8a:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 23 	jmp	0x4658	; 0x4658 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 23 	jmp	0x4658	; 0x4658 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 23 	jmp	0x4668	; 0x4668 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 58 23 	jmp	0x46b0	; 0x46b0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 34 23 	jmp	0x4668	; 0x4668 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 57       	subi	r30, 0x7D	; 125
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MTIMER0_VidInit>:

void (*TIMER1_CallBack)(void);

/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 7f       	andi	r24, 0xF8	; 248
     e42:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	83 60       	ori	r24, 0x03	; 3
     e50:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7e       	andi	r24, 0xEF	; 239
     e88:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     e9c:	e2 e5       	ldi	r30, 0x52	; 82
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	80 83       	st	Z, r24
}
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     eb8:	ec e5       	ldi	r30, 0x5C	; 92
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	80 83       	st	Z, r24
}
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <MTIMER0_VidOVF_SetCallBack+0x6>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	90 93 a6 01 	sts	0x01A6, r25
     ede:	80 93 a5 01 	sts	0x01A5, r24
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <MTIMER0_VidCTC_SetCallBack+0x6>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	90 93 a6 01 	sts	0x01A6, r25
     f02:	80 93 a5 01 	sts	0x01A5, r24
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     f3a:	e0 91 a5 01 	lds	r30, 0x01A5
     f3e:	f0 91 a6 01 	lds	r31, 0x01A6
     f42:	09 95       	icall
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	ff 91       	pop	r31
     f4a:	ef 91       	pop	r30
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	ef 93       	push	r30
     f8a:	ff 93       	push	r31
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     f94:	e0 91 a5 01 	lds	r30, 0x01A5
     f98:	f0 91 a6 01 	lds	r31, 0x01A6
     f9c:	09 95       	icall
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     fcc:	ae e4       	ldi	r26, 0x4E	; 78
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ee e4       	ldi	r30, 0x4E	; 78
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 7f       	andi	r24, 0xF8	; 248
     fd8:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     fda:	ae e4       	ldi	r26, 0x4E	; 78
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ee e4       	ldi	r30, 0x4E	; 78
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	8c 93       	st	X, r24
	/*Mode Select*/
#if TIMER1_SET_MODE == TIMER1_NORMAL_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     fe8:	ae e4       	ldi	r26, 0x4E	; 78
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ee e4       	ldi	r30, 0x4E	; 78
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8f 7e       	andi	r24, 0xEF	; 239
     ff4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     ff6:	ae e4       	ldi	r26, 0x4E	; 78
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ee e4       	ldi	r30, 0x4E	; 78
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	87 7f       	andi	r24, 0xF7	; 247
    1002:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8d 7f       	andi	r24, 0xFD	; 253
    1010:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
    1012:	af e4       	ldi	r26, 0x4F	; 79
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8e 7f       	andi	r24, 0xFE	; 254
    101e:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
    1020:	a9 e5       	ldi	r26, 0x59	; 89
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e9 e5       	ldi	r30, 0x59	; 89
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	84 60       	ori	r24, 0x04	; 4
    102e:	11 96       	adiw	r26, 0x01	; 1
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <MTIMER1_VidSetPreload+0x6>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
    1048:	ec e4       	ldi	r30, 0x4C	; 76
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	80 83       	st	Z, r24
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1066:	ec e4       	ldi	r30, 0x4C	; 76
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <MTIMER1_VidOVF_SetCallBack+0x6>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	90 93 a8 01 	sts	0x01A8, r25
    108a:	80 93 a7 01 	sts	0x01A7, r24
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <MTIMER1_VidICF_SetCallBack+0x6>
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	90 93 a8 01 	sts	0x01A8, r25
    10ae:	80 93 a7 01 	sts	0x01A7, r24
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    10e6:	e0 91 a7 01 	lds	r30, 0x01A7
    10ea:	f0 91 a8 01 	lds	r31, 0x01A8
    10ee:	09 95       	icall
}
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	ff 91       	pop	r31
    10f6:	ef 91       	pop	r30
    10f8:	bf 91       	pop	r27
    10fa:	af 91       	pop	r26
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	7f 91       	pop	r23
    1102:	6f 91       	pop	r22
    1104:	5f 91       	pop	r21
    1106:	4f 91       	pop	r20
    1108:	3f 91       	pop	r19
    110a:	2f 91       	pop	r18
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	2f 93       	push	r18
    1122:	3f 93       	push	r19
    1124:	4f 93       	push	r20
    1126:	5f 93       	push	r21
    1128:	6f 93       	push	r22
    112a:	7f 93       	push	r23
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
    1134:	ef 93       	push	r30
    1136:	ff 93       	push	r31
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    1140:	e0 91 a7 01 	lds	r30, 0x01A7
    1144:	f0 91 a8 01 	lds	r31, 0x01A8
    1148:	09 95       	icall
}
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1178:	af e5       	ldi	r26, 0x5F	; 95
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ef e5       	ldi	r30, 0x5F	; 95
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 68       	ori	r24, 0x80	; 128
    1184:	8c 93       	st	X, r24
}
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1194:	af e5       	ldi	r26, 0x5F	; 95
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e5       	ldi	r30, 0x5F	; 95
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 77       	andi	r24, 0x7F	; 127
    11a0:	8c 93       	st	X, r24
}
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    11b0:	a5 e5       	ldi	r26, 0x55	; 85
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e5 e5       	ldi	r30, 0x55	; 85
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	81 60       	ori	r24, 0x01	; 1
    11bc:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    11be:	a5 e5       	ldi	r26, 0x55	; 85
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e5       	ldi	r30, 0x55	; 85
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    11cc:	ab e5       	ldi	r26, 0x5B	; 91
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	eb e5       	ldi	r30, 0x5B	; 91
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	80 64       	ori	r24, 0x40	; 64
    11d8:	8c 93       	st	X, r24
}
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    11e8:	a5 e5       	ldi	r26, 0x55	; 85
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e5 e5       	ldi	r30, 0x55	; 85
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    11f6:	a5 e5       	ldi	r26, 0x55	; 85
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e5       	ldi	r30, 0x55	; 85
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	88 60       	ori	r24, 0x08	; 8
    1202:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    1204:	ab e5       	ldi	r26, 0x5B	; 91
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	eb e5       	ldi	r30, 0x5B	; 91
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 68       	ori	r24, 0x80	; 128
    1210:	8c 93       	st	X, r24
}
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    1220:	a4 e5       	ldi	r26, 0x54	; 84
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e4 e5       	ldi	r30, 0x54	; 84
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	80 64       	ori	r24, 0x40	; 64
    122c:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    122e:	ab e5       	ldi	r26, 0x5B	; 91
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e5       	ldi	r30, 0x5B	; 91
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 62       	ori	r24, 0x20	; 32
    123a:	8c 93       	st	X, r24
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <MEXTI_VidSenseControl+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <MEXTI_VidSenseControl+0x8>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3c 83       	std	Y+4, r19	; 0x04
    125a:	2b 83       	std	Y+3, r18	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	91 05       	cpc	r25, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <MEXTI_VidSenseControl+0x26>
    1266:	54 c0       	rjmp	.+168    	; 0x1310 <MEXTI_VidSenseControl+0xce>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <MEXTI_VidSenseControl+0x32>
    1272:	96 c0       	rjmp	.+300    	; 0x13a0 <MEXTI_VidSenseControl+0x15e>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	09 f0       	breq	.+2      	; 0x127e <MEXTI_VidSenseControl+0x3c>
    127c:	a6 c0       	rjmp	.+332    	; 0x13ca <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	88 23       	and	r24, r24
    1282:	79 f4       	brne	.+30     	; 0x12a2 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    1284:	a5 e5       	ldi	r26, 0x55	; 85
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e5 e5       	ldi	r30, 0x55	; 85
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8e 7f       	andi	r24, 0xFE	; 254
    1290:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1292:	a5 e5       	ldi	r26, 0x55	; 85
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e5       	ldi	r30, 0x55	; 85
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	8c 93       	st	X, r24
    12a0:	94 c0       	rjmp	.+296    	; 0x13ca <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	79 f4       	brne	.+30     	; 0x12c6 <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    12a8:	a5 e5       	ldi	r26, 0x55	; 85
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e5 e5       	ldi	r30, 0x55	; 85
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	81 60       	ori	r24, 0x01	; 1
    12b4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    12b6:	a5 e5       	ldi	r26, 0x55	; 85
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e5 e5       	ldi	r30, 0x55	; 85
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8d 7f       	andi	r24, 0xFD	; 253
    12c2:	8c 93       	st	X, r24
    12c4:	82 c0       	rjmp	.+260    	; 0x13ca <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	79 f4       	brne	.+30     	; 0x12ea <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    12cc:	a5 e5       	ldi	r26, 0x55	; 85
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e5       	ldi	r30, 0x55	; 85
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
    12d8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    12da:	a5 e5       	ldi	r26, 0x55	; 85
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e5 e5       	ldi	r30, 0x55	; 85
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	82 60       	ori	r24, 0x02	; 2
    12e6:	8c 93       	st	X, r24
    12e8:	70 c0       	rjmp	.+224    	; 0x13ca <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <MEXTI_VidSenseControl+0xb0>
    12f0:	6c c0       	rjmp	.+216    	; 0x13ca <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    12f2:	a5 e5       	ldi	r26, 0x55	; 85
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e5       	ldi	r30, 0x55	; 85
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	81 60       	ori	r24, 0x01	; 1
    12fe:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1300:	a5 e5       	ldi	r26, 0x55	; 85
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e5       	ldi	r30, 0x55	; 85
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	82 60       	ori	r24, 0x02	; 2
    130c:	8c 93       	st	X, r24
    130e:	5d c0       	rjmp	.+186    	; 0x13ca <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 23       	and	r24, r24
    1314:	79 f4       	brne	.+30     	; 0x1334 <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    1316:	a5 e5       	ldi	r26, 0x55	; 85
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e5 e5       	ldi	r30, 0x55	; 85
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8b 7f       	andi	r24, 0xFB	; 251
    1322:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1324:	a5 e5       	ldi	r26, 0x55	; 85
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e5 e5       	ldi	r30, 0x55	; 85
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	87 7f       	andi	r24, 0xF7	; 247
    1330:	8c 93       	st	X, r24
    1332:	4b c0       	rjmp	.+150    	; 0x13ca <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	79 f4       	brne	.+30     	; 0x1358 <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    133a:	a5 e5       	ldi	r26, 0x55	; 85
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e5       	ldi	r30, 0x55	; 85
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	84 60       	ori	r24, 0x04	; 4
    1346:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1348:	a5 e5       	ldi	r26, 0x55	; 85
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e5       	ldi	r30, 0x55	; 85
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	87 7f       	andi	r24, 0xF7	; 247
    1354:	8c 93       	st	X, r24
    1356:	39 c0       	rjmp	.+114    	; 0x13ca <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	79 f4       	brne	.+30     	; 0x137c <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    135e:	a5 e5       	ldi	r26, 0x55	; 85
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e5       	ldi	r30, 0x55	; 85
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8b 7f       	andi	r24, 0xFB	; 251
    136a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    136c:	a5 e5       	ldi	r26, 0x55	; 85
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e5 e5       	ldi	r30, 0x55	; 85
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	88 60       	ori	r24, 0x08	; 8
    1378:	8c 93       	st	X, r24
    137a:	27 c0       	rjmp	.+78     	; 0x13ca <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	21 f5       	brne	.+72     	; 0x13ca <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    1382:	a5 e5       	ldi	r26, 0x55	; 85
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e5       	ldi	r30, 0x55	; 85
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	84 60       	ori	r24, 0x04	; 4
    138e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1390:	a5 e5       	ldi	r26, 0x55	; 85
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e5 e5       	ldi	r30, 0x55	; 85
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	88 60       	ori	r24, 0x08	; 8
    139c:	8c 93       	st	X, r24
    139e:	15 c0       	rjmp	.+42     	; 0x13ca <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	82 30       	cpi	r24, 0x02	; 2
    13a4:	41 f4       	brne	.+16     	; 0x13b6 <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    13a6:	a4 e5       	ldi	r26, 0x54	; 84
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e4 e5       	ldi	r30, 0x54	; 84
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8f 7b       	andi	r24, 0xBF	; 191
    13b2:	8c 93       	st	X, r24
    13b4:	0a c0       	rjmp	.+20     	; 0x13ca <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	39 f4       	brne	.+14     	; 0x13ca <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    13bc:	a4 e5       	ldi	r26, 0x54	; 84
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e4 e5       	ldi	r30, 0x54	; 84
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	80 64       	ori	r24, 0x40	; 64
    13c8:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <MEXTI0_Set_CallBackFunction+0x6>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	90 93 aa 01 	sts	0x01AA, r25
    13ee:	80 93 a9 01 	sts	0x01A9, r24
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	4f 93       	push	r20
    140c:	5f 93       	push	r21
    140e:	6f 93       	push	r22
    1410:	7f 93       	push	r23
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	af 93       	push	r26
    1418:	bf 93       	push	r27
    141a:	ef 93       	push	r30
    141c:	ff 93       	push	r31
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    1426:	e0 91 a9 01 	lds	r30, 0x01A9
    142a:	f0 91 aa 01 	lds	r31, 0x01AA
    142e:	09 95       	icall
}
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	ff 91       	pop	r31
    1436:	ef 91       	pop	r30
    1438:	bf 91       	pop	r27
    143a:	af 91       	pop	r26
    143c:	9f 91       	pop	r25
    143e:	8f 91       	pop	r24
    1440:	7f 91       	pop	r23
    1442:	6f 91       	pop	r22
    1444:	5f 91       	pop	r21
    1446:	4f 91       	pop	r20
    1448:	3f 91       	pop	r19
    144a:	2f 91       	pop	r18
    144c:	0f 90       	pop	r0
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	0f 90       	pop	r0
    1452:	1f 90       	pop	r1
    1454:	18 95       	reti

00001456 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <MDIO_Error_State_SetPinDirection+0x6>
    145c:	00 d0       	rcall	.+0      	; 0x145e <MDIO_Error_State_SetPinDirection+0x8>
    145e:	00 d0       	rcall	.+0      	; 0x1460 <MDIO_Error_State_SetPinDirection+0xa>
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	6b 83       	std	Y+3, r22	; 0x03
    1468:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	08 f0       	brcs	.+2      	; 0x1476 <MDIO_Error_State_SetPinDirection+0x20>
    1474:	e8 c0       	rjmp	.+464    	; 0x1646 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3e 83       	std	Y+6, r19	; 0x06
    147e:	2d 83       	std	Y+5, r18	; 0x05
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <MDIO_Error_State_SetPinDirection+0x36>
    148a:	48 c0       	rjmp	.+144    	; 0x151c <MDIO_Error_State_SetPinDirection+0xc6>
    148c:	2d 81       	ldd	r18, Y+5	; 0x05
    148e:	3e 81       	ldd	r19, Y+6	; 0x06
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	2c f4       	brge	.+10     	; 0x14a0 <MDIO_Error_State_SetPinDirection+0x4a>
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	71 f0       	breq	.+28     	; 0x14ba <MDIO_Error_State_SetPinDirection+0x64>
    149e:	d1 c0       	rjmp	.+418    	; 0x1642 <MDIO_Error_State_SetPinDirection+0x1ec>
    14a0:	2d 81       	ldd	r18, Y+5	; 0x05
    14a2:	3e 81       	ldd	r19, Y+6	; 0x06
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <MDIO_Error_State_SetPinDirection+0x56>
    14aa:	69 c0       	rjmp	.+210    	; 0x157e <MDIO_Error_State_SetPinDirection+0x128>
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <MDIO_Error_State_SetPinDirection+0x62>
    14b6:	94 c0       	rjmp	.+296    	; 0x15e0 <MDIO_Error_State_SetPinDirection+0x18a>
    14b8:	c4 c0       	rjmp	.+392    	; 0x1642 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	a1 f4       	brne	.+40     	; 0x14e8 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    14c0:	aa e3       	ldi	r26, 0x3A	; 58
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	ea e3       	ldi	r30, 0x3A	; 58
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <MDIO_Error_State_SetPinDirection+0x88>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <MDIO_Error_State_SetPinDirection+0x84>
    14e2:	84 2b       	or	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	b0 c0       	rjmp	.+352    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	88 23       	and	r24, r24
    14ec:	a9 f4       	brne	.+42     	; 0x1518 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    14ee:	aa e3       	ldi	r26, 0x3A	; 58
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ea e3       	ldi	r30, 0x3A	; 58
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <MDIO_Error_State_SetPinDirection+0xb6>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <MDIO_Error_State_SetPinDirection+0xb2>
    1510:	80 95       	com	r24
    1512:	84 23       	and	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	98 c0       	rjmp	.+304    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1518:	19 82       	std	Y+1, r1	; 0x01
    151a:	96 c0       	rjmp	.+300    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	a1 f4       	brne	.+40     	; 0x154a <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    1522:	a7 e3       	ldi	r26, 0x37	; 55
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e3       	ldi	r30, 0x37	; 55
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <MDIO_Error_State_SetPinDirection+0xea>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <MDIO_Error_State_SetPinDirection+0xe6>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	7f c0       	rjmp	.+254    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	88 23       	and	r24, r24
    154e:	a9 f4       	brne	.+42     	; 0x157a <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1550:	a7 e3       	ldi	r26, 0x37	; 55
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <MDIO_Error_State_SetPinDirection+0x118>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <MDIO_Error_State_SetPinDirection+0x114>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	67 c0       	rjmp	.+206    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    157a:	19 82       	std	Y+1, r1	; 0x01
    157c:	65 c0       	rjmp	.+202    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	a1 f4       	brne	.+40     	; 0x15ac <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1584:	a4 e3       	ldi	r26, 0x34	; 52
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e4 e3       	ldi	r30, 0x34	; 52
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <MDIO_Error_State_SetPinDirection+0x14c>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <MDIO_Error_State_SetPinDirection+0x148>
    15a6:	84 2b       	or	r24, r20
    15a8:	8c 93       	st	X, r24
    15aa:	4e c0       	rjmp	.+156    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	88 23       	and	r24, r24
    15b0:	a9 f4       	brne	.+42     	; 0x15dc <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    15b2:	a4 e3       	ldi	r26, 0x34	; 52
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e4 e3       	ldi	r30, 0x34	; 52
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <MDIO_Error_State_SetPinDirection+0x17a>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <MDIO_Error_State_SetPinDirection+0x176>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	36 c0       	rjmp	.+108    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    15dc:	19 82       	std	Y+1, r1	; 0x01
    15de:	34 c0       	rjmp	.+104    	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	a1 f4       	brne	.+40     	; 0x160e <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    15e6:	a1 e3       	ldi	r26, 0x31	; 49
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e1 e3       	ldi	r30, 0x31	; 49
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <MDIO_Error_State_SetPinDirection+0x1ae>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <MDIO_Error_State_SetPinDirection+0x1aa>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	1d c0       	rjmp	.+58     	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	88 23       	and	r24, r24
    1612:	a9 f4       	brne	.+42     	; 0x163e <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    1614:	a1 e3       	ldi	r26, 0x31	; 49
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e1 e3       	ldi	r30, 0x31	; 49
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <MDIO_Error_State_SetPinDirection+0x1dc>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <MDIO_Error_State_SetPinDirection+0x1d8>
    1636:	80 95       	com	r24
    1638:	84 23       	and	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    163e:	19 82       	std	Y+1, r1	; 0x01
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    1642:	19 82       	std	Y+1, r1	; 0x01
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1646:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    1648:	89 81       	ldd	r24, Y+1	; 0x01

}
    164a:	26 96       	adiw	r28, 0x06	; 6
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <MDIO_Error_State_SetPortDirection+0x6>
    1662:	00 d0       	rcall	.+0      	; 0x1664 <MDIO_Error_State_SetPortDirection+0x8>
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	8a 83       	std	Y+2, r24	; 0x02
    166c:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	8f 3f       	cpi	r24, 0xFF	; 255
    1676:	19 f0       	breq	.+6      	; 0x167e <MDIO_Error_State_SetPortDirection+0x22>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	88 23       	and	r24, r24
    167c:	a9 f5       	brne	.+106    	; 0x16e8 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	3d 83       	std	Y+5, r19	; 0x05
    1686:	2c 83       	std	Y+4, r18	; 0x04
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	9d 81       	ldd	r25, Y+5	; 0x05
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	91 05       	cpc	r25, r1
    1690:	d1 f0       	breq	.+52     	; 0x16c6 <MDIO_Error_State_SetPortDirection+0x6a>
    1692:	2c 81       	ldd	r18, Y+4	; 0x04
    1694:	3d 81       	ldd	r19, Y+5	; 0x05
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	2c f4       	brge	.+10     	; 0x16a6 <MDIO_Error_State_SetPortDirection+0x4a>
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	61 f0       	breq	.+24     	; 0x16bc <MDIO_Error_State_SetPortDirection+0x60>
    16a4:	1f c0       	rjmp	.+62     	; 0x16e4 <MDIO_Error_State_SetPortDirection+0x88>
    16a6:	2c 81       	ldd	r18, Y+4	; 0x04
    16a8:	3d 81       	ldd	r19, Y+5	; 0x05
    16aa:	22 30       	cpi	r18, 0x02	; 2
    16ac:	31 05       	cpc	r19, r1
    16ae:	81 f0       	breq	.+32     	; 0x16d0 <MDIO_Error_State_SetPortDirection+0x74>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	91 05       	cpc	r25, r1
    16b8:	81 f0       	breq	.+32     	; 0x16da <MDIO_Error_State_SetPortDirection+0x7e>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    16bc:	ea e3       	ldi	r30, 0x3A	; 58
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	80 83       	st	Z, r24
    16c4:	12 c0       	rjmp	.+36     	; 0x16ea <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    16c6:	e7 e3       	ldi	r30, 0x37	; 55
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	80 83       	st	Z, r24
    16ce:	0d c0       	rjmp	.+26     	; 0x16ea <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    16d0:	e4 e3       	ldi	r30, 0x34	; 52
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	80 83       	st	Z, r24
    16d8:	08 c0       	rjmp	.+16     	; 0x16ea <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    16da:	e1 e3       	ldi	r30, 0x31	; 49
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	80 83       	st	Z, r24
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    16e4:	19 82       	std	Y+1, r1	; 0x01
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    16e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <MDIO_Error_State_SetPinValue+0x6>
    1702:	00 d0       	rcall	.+0      	; 0x1704 <MDIO_Error_State_SetPinValue+0x8>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <MDIO_Error_State_SetPinValue+0xa>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	8a 83       	std	Y+2, r24	; 0x02
    170c:	6b 83       	std	Y+3, r22	; 0x03
    170e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	88 30       	cpi	r24, 0x08	; 8
    1718:	08 f0       	brcs	.+2      	; 0x171c <MDIO_Error_State_SetPinValue+0x20>
    171a:	e8 c0       	rjmp	.+464    	; 0x18ec <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3e 83       	std	Y+6, r19	; 0x06
    1724:	2d 83       	std	Y+5, r18	; 0x05
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <MDIO_Error_State_SetPinValue+0x36>
    1730:	48 c0       	rjmp	.+144    	; 0x17c2 <MDIO_Error_State_SetPinValue+0xc6>
    1732:	2d 81       	ldd	r18, Y+5	; 0x05
    1734:	3e 81       	ldd	r19, Y+6	; 0x06
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	2c f4       	brge	.+10     	; 0x1746 <MDIO_Error_State_SetPinValue+0x4a>
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	71 f0       	breq	.+28     	; 0x1760 <MDIO_Error_State_SetPinValue+0x64>
    1744:	d1 c0       	rjmp	.+418    	; 0x18e8 <MDIO_Error_State_SetPinValue+0x1ec>
    1746:	2d 81       	ldd	r18, Y+5	; 0x05
    1748:	3e 81       	ldd	r19, Y+6	; 0x06
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <MDIO_Error_State_SetPinValue+0x56>
    1750:	69 c0       	rjmp	.+210    	; 0x1824 <MDIO_Error_State_SetPinValue+0x128>
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <MDIO_Error_State_SetPinValue+0x62>
    175c:	94 c0       	rjmp	.+296    	; 0x1886 <MDIO_Error_State_SetPinValue+0x18a>
    175e:	c4 c0       	rjmp	.+392    	; 0x18e8 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	a1 f4       	brne	.+40     	; 0x178e <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    1766:	ab e3       	ldi	r26, 0x3B	; 59
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	eb e3       	ldi	r30, 0x3B	; 59
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <MDIO_Error_State_SetPinValue+0x88>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <MDIO_Error_State_SetPinValue+0x84>
    1788:	84 2b       	or	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	b0 c0       	rjmp	.+352    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	88 23       	and	r24, r24
    1792:	a9 f4       	brne	.+42     	; 0x17be <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1794:	ab e3       	ldi	r26, 0x3B	; 59
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	eb e3       	ldi	r30, 0x3B	; 59
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <MDIO_Error_State_SetPinValue+0xb6>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <MDIO_Error_State_SetPinValue+0xb2>
    17b6:	80 95       	com	r24
    17b8:	84 23       	and	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	98 c0       	rjmp	.+304    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    17be:	19 82       	std	Y+1, r1	; 0x01
    17c0:	96 c0       	rjmp	.+300    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	a1 f4       	brne	.+40     	; 0x17f0 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    17c8:	a8 e3       	ldi	r26, 0x38	; 56
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e8 e3       	ldi	r30, 0x38	; 56
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <MDIO_Error_State_SetPinValue+0xea>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <MDIO_Error_State_SetPinValue+0xe6>
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	7f c0       	rjmp	.+254    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	88 23       	and	r24, r24
    17f4:	a9 f4       	brne	.+42     	; 0x1820 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    17f6:	a8 e3       	ldi	r26, 0x38	; 56
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e8 e3       	ldi	r30, 0x38	; 56
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <MDIO_Error_State_SetPinValue+0x118>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <MDIO_Error_State_SetPinValue+0x114>
    1818:	80 95       	com	r24
    181a:	84 23       	and	r24, r20
    181c:	8c 93       	st	X, r24
    181e:	67 c0       	rjmp	.+206    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	65 c0       	rjmp	.+202    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	a1 f4       	brne	.+40     	; 0x1852 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    182a:	a5 e3       	ldi	r26, 0x35	; 53
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e5 e3       	ldi	r30, 0x35	; 53
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <MDIO_Error_State_SetPinValue+0x14c>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <MDIO_Error_State_SetPinValue+0x148>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	4e c0       	rjmp	.+156    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	88 23       	and	r24, r24
    1856:	a9 f4       	brne	.+42     	; 0x1882 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    1858:	a5 e3       	ldi	r26, 0x35	; 53
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 e3       	ldi	r30, 0x35	; 53
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <MDIO_Error_State_SetPinValue+0x17a>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <MDIO_Error_State_SetPinValue+0x176>
    187a:	80 95       	com	r24
    187c:	84 23       	and	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	36 c0       	rjmp	.+108    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1882:	19 82       	std	Y+1, r1	; 0x01
    1884:	34 c0       	rjmp	.+104    	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	a1 f4       	brne	.+40     	; 0x18b4 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    188c:	a2 e3       	ldi	r26, 0x32	; 50
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e2 e3       	ldi	r30, 0x32	; 50
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <MDIO_Error_State_SetPinValue+0x1ae>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <MDIO_Error_State_SetPinValue+0x1aa>
    18ae:	84 2b       	or	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	1d c0       	rjmp	.+58     	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	88 23       	and	r24, r24
    18b8:	a9 f4       	brne	.+42     	; 0x18e4 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    18ba:	a2 e3       	ldi	r26, 0x32	; 50
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e2 e3       	ldi	r30, 0x32	; 50
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <MDIO_Error_State_SetPinValue+0x1dc>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <MDIO_Error_State_SetPinValue+0x1d8>
    18dc:	80 95       	com	r24
    18de:	84 23       	and	r24, r20
    18e0:	8c 93       	st	X, r24
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    18e4:	19 82       	std	Y+1, r1	; 0x01
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    18e8:	19 82       	std	Y+1, r1	; 0x01
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    18ec:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    18ee:	89 81       	ldd	r24, Y+1	; 0x01

}
    18f0:	26 96       	adiw	r28, 0x06	; 6
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <MDIO_Error_State_SetPortValue+0x6>
    1908:	00 d0       	rcall	.+0      	; 0x190a <MDIO_Error_State_SetPortValue+0x8>
    190a:	0f 92       	push	r0
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	8a 83       	std	Y+2, r24	; 0x02
    1912:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	3d 83       	std	Y+5, r19	; 0x05
    1920:	2c 83       	std	Y+4, r18	; 0x04
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	d1 f0       	breq	.+52     	; 0x1960 <MDIO_Error_State_SetPortValue+0x5e>
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <MDIO_Error_State_SetPortValue+0x3e>
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	9d 81       	ldd	r25, Y+5	; 0x05
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <MDIO_Error_State_SetPortValue+0x54>
    193e:	1f c0       	rjmp	.+62     	; 0x197e <MDIO_Error_State_SetPortValue+0x7c>
    1940:	2c 81       	ldd	r18, Y+4	; 0x04
    1942:	3d 81       	ldd	r19, Y+5	; 0x05
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	81 f0       	breq	.+32     	; 0x196a <MDIO_Error_State_SetPortValue+0x68>
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <MDIO_Error_State_SetPortValue+0x72>
    1954:	14 c0       	rjmp	.+40     	; 0x197e <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1956:	eb e3       	ldi	r30, 0x3B	; 59
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	80 83       	st	Z, r24
    195e:	10 c0       	rjmp	.+32     	; 0x1980 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    1960:	e8 e3       	ldi	r30, 0x38	; 56
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	80 83       	st	Z, r24
    1968:	0b c0       	rjmp	.+22     	; 0x1980 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    196a:	e5 e3       	ldi	r30, 0x35	; 53
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	80 83       	st	Z, r24
    1972:	06 c0       	rjmp	.+12     	; 0x1980 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1974:	e2 e3       	ldi	r30, 0x32	; 50
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	80 83       	st	Z, r24
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    197e:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	27 97       	sbiw	r28, 0x07	; 7
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	8a 83       	std	Y+2, r24	; 0x02
    19a8:	6b 83       	std	Y+3, r22	; 0x03
    19aa:	5d 83       	std	Y+5, r21	; 0x05
    19ac:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <MDIO_Error_State_GetPinValue+0x28>
    19b8:	79 c0       	rjmp	.+242    	; 0x1aac <MDIO_Error_State_GetPinValue+0x11a>
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	9d 81       	ldd	r25, Y+5	; 0x05
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	91 05       	cpc	r25, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <MDIO_Error_State_GetPinValue+0x34>
    19c4:	73 c0       	rjmp	.+230    	; 0x1aac <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3f 83       	std	Y+7, r19	; 0x07
    19ce:	2e 83       	std	Y+6, r18	; 0x06
    19d0:	4e 81       	ldd	r20, Y+6	; 0x06
    19d2:	5f 81       	ldd	r21, Y+7	; 0x07
    19d4:	41 30       	cpi	r20, 0x01	; 1
    19d6:	51 05       	cpc	r21, r1
    19d8:	59 f1       	breq	.+86     	; 0x1a30 <MDIO_Error_State_GetPinValue+0x9e>
    19da:	8e 81       	ldd	r24, Y+6	; 0x06
    19dc:	9f 81       	ldd	r25, Y+7	; 0x07
    19de:	82 30       	cpi	r24, 0x02	; 2
    19e0:	91 05       	cpc	r25, r1
    19e2:	34 f4       	brge	.+12     	; 0x19f0 <MDIO_Error_State_GetPinValue+0x5e>
    19e4:	2e 81       	ldd	r18, Y+6	; 0x06
    19e6:	3f 81       	ldd	r19, Y+7	; 0x07
    19e8:	21 15       	cp	r18, r1
    19ea:	31 05       	cpc	r19, r1
    19ec:	69 f0       	breq	.+26     	; 0x1a08 <MDIO_Error_State_GetPinValue+0x76>
    19ee:	5c c0       	rjmp	.+184    	; 0x1aa8 <MDIO_Error_State_GetPinValue+0x116>
    19f0:	4e 81       	ldd	r20, Y+6	; 0x06
    19f2:	5f 81       	ldd	r21, Y+7	; 0x07
    19f4:	42 30       	cpi	r20, 0x02	; 2
    19f6:	51 05       	cpc	r21, r1
    19f8:	79 f1       	breq	.+94     	; 0x1a58 <MDIO_Error_State_GetPinValue+0xc6>
    19fa:	8e 81       	ldd	r24, Y+6	; 0x06
    19fc:	9f 81       	ldd	r25, Y+7	; 0x07
    19fe:	83 30       	cpi	r24, 0x03	; 3
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <MDIO_Error_State_GetPinValue+0x74>
    1a04:	3d c0       	rjmp	.+122    	; 0x1a80 <MDIO_Error_State_GetPinValue+0xee>
    1a06:	50 c0       	rjmp	.+160    	; 0x1aa8 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    1a08:	e9 e3       	ldi	r30, 0x39	; 57
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	a9 01       	movw	r20, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <MDIO_Error_State_GetPinValue+0x8e>
    1a1c:	55 95       	asr	r21
    1a1e:	47 95       	ror	r20
    1a20:	8a 95       	dec	r24
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <MDIO_Error_State_GetPinValue+0x8a>
    1a24:	ca 01       	movw	r24, r20
    1a26:	81 70       	andi	r24, 0x01	; 1
    1a28:	ec 81       	ldd	r30, Y+4	; 0x04
    1a2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a2c:	80 83       	st	Z, r24
    1a2e:	3f c0       	rjmp	.+126    	; 0x1aae <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1a30:	e6 e3       	ldi	r30, 0x36	; 54
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a9 01       	movw	r20, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <MDIO_Error_State_GetPinValue+0xb6>
    1a44:	55 95       	asr	r21
    1a46:	47 95       	ror	r20
    1a48:	8a 95       	dec	r24
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <MDIO_Error_State_GetPinValue+0xb2>
    1a4c:	ca 01       	movw	r24, r20
    1a4e:	81 70       	andi	r24, 0x01	; 1
    1a50:	ec 81       	ldd	r30, Y+4	; 0x04
    1a52:	fd 81       	ldd	r31, Y+5	; 0x05
    1a54:	80 83       	st	Z, r24
    1a56:	2b c0       	rjmp	.+86     	; 0x1aae <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1a58:	e3 e3       	ldi	r30, 0x33	; 51
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a9 01       	movw	r20, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <MDIO_Error_State_GetPinValue+0xde>
    1a6c:	55 95       	asr	r21
    1a6e:	47 95       	ror	r20
    1a70:	8a 95       	dec	r24
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <MDIO_Error_State_GetPinValue+0xda>
    1a74:	ca 01       	movw	r24, r20
    1a76:	81 70       	andi	r24, 0x01	; 1
    1a78:	ec 81       	ldd	r30, Y+4	; 0x04
    1a7a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a7c:	80 83       	st	Z, r24
    1a7e:	17 c0       	rjmp	.+46     	; 0x1aae <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1a80:	e0 e3       	ldi	r30, 0x30	; 48
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a9 01       	movw	r20, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <MDIO_Error_State_GetPinValue+0x106>
    1a94:	55 95       	asr	r21
    1a96:	47 95       	ror	r20
    1a98:	8a 95       	dec	r24
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <MDIO_Error_State_GetPinValue+0x102>
    1a9c:	ca 01       	movw	r24, r20
    1a9e:	81 70       	andi	r24, 0x01	; 1
    1aa0:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa2:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa4:	80 83       	st	Z, r24
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1aa8:	19 82       	std	Y+1, r1	; 0x01
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1aac:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ab0:	27 96       	adiw	r28, 0x07	; 7
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <MDIO_Error_State_SetNippleValue+0x6>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <MDIO_Error_State_SetNippleValue+0x8>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <MDIO_Error_State_SetNippleValue+0xa>
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
    1ad2:	6b 83       	std	Y+3, r22	; 0x03
    1ad4:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	85 30       	cpi	r24, 0x05	; 5
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <MDIO_Error_State_SetNippleValue+0x20>
    1ae0:	c9 c0       	rjmp	.+402    	; 0x1c74 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	3e 83       	std	Y+6, r19	; 0x06
    1aea:	2d 83       	std	Y+5, r18	; 0x05
    1aec:	6d 81       	ldd	r22, Y+5	; 0x05
    1aee:	7e 81       	ldd	r23, Y+6	; 0x06
    1af0:	61 30       	cpi	r22, 0x01	; 1
    1af2:	71 05       	cpc	r23, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <MDIO_Error_State_SetNippleValue+0x36>
    1af6:	41 c0       	rjmp	.+130    	; 0x1b7a <MDIO_Error_State_SetNippleValue+0xb8>
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	91 05       	cpc	r25, r1
    1b00:	34 f4       	brge	.+12     	; 0x1b0e <MDIO_Error_State_SetNippleValue+0x4c>
    1b02:	2d 81       	ldd	r18, Y+5	; 0x05
    1b04:	3e 81       	ldd	r19, Y+6	; 0x06
    1b06:	21 15       	cp	r18, r1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	71 f0       	breq	.+28     	; 0x1b28 <MDIO_Error_State_SetNippleValue+0x66>
    1b0c:	b1 c0       	rjmp	.+354    	; 0x1c70 <MDIO_Error_State_SetNippleValue+0x1ae>
    1b0e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b10:	7e 81       	ldd	r23, Y+6	; 0x06
    1b12:	62 30       	cpi	r22, 0x02	; 2
    1b14:	71 05       	cpc	r23, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <MDIO_Error_State_SetNippleValue+0x58>
    1b18:	59 c0       	rjmp	.+178    	; 0x1bcc <MDIO_Error_State_SetNippleValue+0x10a>
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	91 05       	cpc	r25, r1
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <MDIO_Error_State_SetNippleValue+0x64>
    1b24:	7c c0       	rjmp	.+248    	; 0x1c1e <MDIO_Error_State_SetNippleValue+0x15c>
    1b26:	a4 c0       	rjmp	.+328    	; 0x1c70 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1b28:	ab e3       	ldi	r26, 0x3B	; 59
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	eb e3       	ldi	r30, 0x3B	; 59
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8f e0       	ldi	r24, 0x0F	; 15
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <MDIO_Error_State_SetNippleValue+0x82>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	2a 95       	dec	r18
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <MDIO_Error_State_SetNippleValue+0x7e>
    1b48:	80 95       	com	r24
    1b4a:	84 23       	and	r24, r20
    1b4c:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1b4e:	ab e3       	ldi	r26, 0x3B	; 59
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	eb e3       	ldi	r30, 0x3B	; 59
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	b9 01       	movw	r22, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <MDIO_Error_State_SetNippleValue+0xac>
    1b6a:	66 0f       	add	r22, r22
    1b6c:	77 1f       	adc	r23, r23
    1b6e:	8a 95       	dec	r24
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <MDIO_Error_State_SetNippleValue+0xa8>
    1b72:	cb 01       	movw	r24, r22
    1b74:	84 2b       	or	r24, r20
    1b76:	8c 93       	st	X, r24
    1b78:	7e c0       	rjmp	.+252    	; 0x1c76 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1b7a:	a8 e3       	ldi	r26, 0x38	; 56
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e8 e3       	ldi	r30, 0x38	; 56
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	8f e0       	ldi	r24, 0x0F	; 15
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <MDIO_Error_State_SetNippleValue+0xd4>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	2a 95       	dec	r18
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <MDIO_Error_State_SetNippleValue+0xd0>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1ba0:	a8 e3       	ldi	r26, 0x38	; 56
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e8 e3       	ldi	r30, 0x38	; 56
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	b9 01       	movw	r22, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <MDIO_Error_State_SetNippleValue+0xfe>
    1bbc:	66 0f       	add	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	8a 95       	dec	r24
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <MDIO_Error_State_SetNippleValue+0xfa>
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	55 c0       	rjmp	.+170    	; 0x1c76 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1bcc:	a5 e3       	ldi	r26, 0x35	; 53
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e5 e3       	ldi	r30, 0x35	; 53
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	8f e0       	ldi	r24, 0x0F	; 15
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <MDIO_Error_State_SetNippleValue+0x126>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	2a 95       	dec	r18
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <MDIO_Error_State_SetNippleValue+0x122>
    1bec:	80 95       	com	r24
    1bee:	84 23       	and	r24, r20
    1bf0:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1bf2:	a5 e3       	ldi	r26, 0x35	; 53
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e5 e3       	ldi	r30, 0x35	; 53
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	b9 01       	movw	r22, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <MDIO_Error_State_SetNippleValue+0x150>
    1c0e:	66 0f       	add	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	8a 95       	dec	r24
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <MDIO_Error_State_SetNippleValue+0x14c>
    1c16:	cb 01       	movw	r24, r22
    1c18:	84 2b       	or	r24, r20
    1c1a:	8c 93       	st	X, r24
    1c1c:	2c c0       	rjmp	.+88     	; 0x1c76 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1c1e:	a2 e3       	ldi	r26, 0x32	; 50
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e2 e3       	ldi	r30, 0x32	; 50
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	48 2f       	mov	r20, r24
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	8f e0       	ldi	r24, 0x0F	; 15
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <MDIO_Error_State_SetNippleValue+0x178>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	2a 95       	dec	r18
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <MDIO_Error_State_SetNippleValue+0x174>
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1c44:	a2 e3       	ldi	r26, 0x32	; 50
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e2 e3       	ldi	r30, 0x32	; 50
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	b9 01       	movw	r22, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <MDIO_Error_State_SetNippleValue+0x1a2>
    1c60:	66 0f       	add	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	8a 95       	dec	r24
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <MDIO_Error_State_SetNippleValue+0x19e>
    1c68:	cb 01       	movw	r24, r22
    1c6a:	84 2b       	or	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1c70:	19 82       	std	Y+1, r1	; 0x01
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1c74:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c78:	26 96       	adiw	r28, 0x06	; 6
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <MDIO_VidActivePullUP+0x6>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ca6:	41 e0       	ldi	r20, 0x01	; 1
    1ca8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>

}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <HSWITCH_VidInit_PullUP+0x6>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc8:	81 81       	ldd	r24, Z+1	; 0x01
    1cca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cce:	90 81       	ld	r25, Z
    1cd0:	69 2f       	mov	r22, r25
    1cd2:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <MDIO_VidActivePullUP>
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <HSWITCH_u8SwitchState+0x6>
    1ce6:	0f 92       	push	r0
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	9b 83       	std	Y+3, r25	; 0x03
    1cee:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1cf4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf8:	81 81       	ldd	r24, Z+1	; 0x01
    1cfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1cfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1cfe:	90 81       	ld	r25, Z
    1d00:	69 2f       	mov	r22, r25
    1d02:	9e 01       	movw	r18, r28
    1d04:	2f 5f       	subi	r18, 0xFF	; 255
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	a9 01       	movw	r20, r18
    1d0a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <HSEVEN_SEGMENT_VidInit+0x6>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2e:	80 81       	ld	r24, Z
    1d30:	6f ef       	ldi	r22, 0xFF	; 255
    1d32:	0e 94 2e 0b 	call	0x165c	; 0x165c <MDIO_Error_State_SetPortDirection>
}
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <HSEVEN_SEGMENT_VidOff+0x6>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	81 81       	ldd	r24, Z+1	; 0x01
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	31 f4       	brne	.+12     	; 0x1d68 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1d5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d60:	80 81       	ld	r24, Z
    1d62:	6b 81       	ldd	r22, Y+3	; 0x03
    1d64:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1d68:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6c:	81 81       	ldd	r24, Z+1	; 0x01
    1d6e:	88 23       	and	r24, r24
    1d70:	51 f4       	brne	.+20     	; 0x1d86 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1d72:	e9 81       	ldd	r30, Y+1	; 0x01
    1d74:	fa 81       	ldd	r31, Y+2	; 0x02
    1d76:	20 81       	ld	r18, Z
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	90 95       	com	r25
    1d7e:	82 2f       	mov	r24, r18
    1d80:	69 2f       	mov	r22, r25
    1d82:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
	}
}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	27 97       	sbiw	r28, 0x07	; 7
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	81 81       	ldd	r24, Z+1	; 0x01
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1db6:	9b c0       	rjmp	.+310    	; 0x1eee <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	3f 83       	std	Y+7, r19	; 0x07
    1dc0:	2e 83       	std	Y+6, r18	; 0x06
    1dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc6:	84 30       	cpi	r24, 0x04	; 4
    1dc8:	91 05       	cpc	r25, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1dcc:	5f c0       	rjmp	.+190    	; 0x1e8c <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1dce:	2e 81       	ldd	r18, Y+6	; 0x06
    1dd0:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd2:	25 30       	cpi	r18, 0x05	; 5
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	dc f4       	brge	.+54     	; 0x1e0e <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dda:	9f 81       	ldd	r25, Y+7	; 0x07
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    1de4:	2e 81       	ldd	r18, Y+6	; 0x06
    1de6:	3f 81       	ldd	r19, Y+7	; 0x07
    1de8:	22 30       	cpi	r18, 0x02	; 2
    1dea:	31 05       	cpc	r19, r1
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1dee:	8e 81       	ldd	r24, Y+6	; 0x06
    1df0:	9f 81       	ldd	r25, Y+7	; 0x07
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	79 f1       	breq	.+94     	; 0x1e54 <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    1df6:	74 c0       	rjmp	.+232    	; 0x1ee0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1df8:	2e 81       	ldd	r18, Y+6	; 0x06
    1dfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1dfc:	22 30       	cpi	r18, 0x02	; 2
    1dfe:	31 05       	cpc	r19, r1
    1e00:	b9 f1       	breq	.+110    	; 0x1e70 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    1e02:	8e 81       	ldd	r24, Y+6	; 0x06
    1e04:	9f 81       	ldd	r25, Y+7	; 0x07
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	91 05       	cpc	r25, r1
    1e0a:	c9 f1       	breq	.+114    	; 0x1e7e <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1e0c:	69 c0       	rjmp	.+210    	; 0x1ee0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1e0e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e10:	3f 81       	ldd	r19, Y+7	; 0x07
    1e12:	27 30       	cpi	r18, 0x07	; 7
    1e14:	31 05       	cpc	r19, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1e18:	4e c0       	rjmp	.+156    	; 0x1eb6 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1e:	88 30       	cpi	r24, 0x08	; 8
    1e20:	91 05       	cpc	r25, r1
    1e22:	5c f4       	brge	.+22     	; 0x1e3a <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1e24:	2e 81       	ldd	r18, Y+6	; 0x06
    1e26:	3f 81       	ldd	r19, Y+7	; 0x07
    1e28:	25 30       	cpi	r18, 0x05	; 5
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	b1 f1       	breq	.+108    	; 0x1e9a <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e30:	9f 81       	ldd	r25, Y+7	; 0x07
    1e32:	86 30       	cpi	r24, 0x06	; 6
    1e34:	91 05       	cpc	r25, r1
    1e36:	c1 f1       	breq	.+112    	; 0x1ea8 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1e38:	53 c0       	rjmp	.+166    	; 0x1ee0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1e3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e3e:	28 30       	cpi	r18, 0x08	; 8
    1e40:	31 05       	cpc	r19, r1
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1e46:	8e 81       	ldd	r24, Y+6	; 0x06
    1e48:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4a:	89 30       	cpi	r24, 0x09	; 9
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1e50:	40 c0       	rjmp	.+128    	; 0x1ed2 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1e52:	46 c0       	rjmp	.+140    	; 0x1ee0 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	80 81       	ld	r24, Z
    1e5a:	6f e3       	ldi	r22, 0x3F	; 63
    1e5c:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1e60:	e6 c0       	rjmp	.+460    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1e62:	e9 81       	ldd	r30, Y+1	; 0x01
    1e64:	fa 81       	ldd	r31, Y+2	; 0x02
    1e66:	80 81       	ld	r24, Z
    1e68:	66 e0       	ldi	r22, 0x06	; 6
    1e6a:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1e6e:	df c0       	rjmp	.+446    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1e70:	e9 81       	ldd	r30, Y+1	; 0x01
    1e72:	fa 81       	ldd	r31, Y+2	; 0x02
    1e74:	80 81       	ld	r24, Z
    1e76:	6b e5       	ldi	r22, 0x5B	; 91
    1e78:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1e7c:	d8 c0       	rjmp	.+432    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    1e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e80:	fa 81       	ldd	r31, Y+2	; 0x02
    1e82:	80 81       	ld	r24, Z
    1e84:	6f e4       	ldi	r22, 0x4F	; 79
    1e86:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1e8a:	d1 c0       	rjmp	.+418    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	80 81       	ld	r24, Z
    1e92:	66 e6       	ldi	r22, 0x66	; 102
    1e94:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1e98:	ca c0       	rjmp	.+404    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	80 81       	ld	r24, Z
    1ea0:	6d e6       	ldi	r22, 0x6D	; 109
    1ea2:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1ea6:	c3 c0       	rjmp	.+390    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1eac:	80 81       	ld	r24, Z
    1eae:	6d e7       	ldi	r22, 0x7D	; 125
    1eb0:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1eb4:	bc c0       	rjmp	.+376    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	80 81       	ld	r24, Z
    1ebc:	67 e0       	ldi	r22, 0x07	; 7
    1ebe:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1ec2:	b5 c0       	rjmp	.+362    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    1ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec8:	80 81       	ld	r24, Z
    1eca:	6f e7       	ldi	r22, 0x7F	; 127
    1ecc:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1ed0:	ae c0       	rjmp	.+348    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	80 81       	ld	r24, Z
    1ed8:	6f e6       	ldi	r22, 0x6F	; 111
    1eda:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1ede:	a7 c0       	rjmp	.+334    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    1ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee4:	80 81       	ld	r24, Z
    1ee6:	69 e7       	ldi	r22, 0x79	; 121
    1ee8:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1eec:	a0 c0       	rjmp	.+320    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    1eee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef2:	81 81       	ldd	r24, Z+1	; 0x01
    1ef4:	88 23       	and	r24, r24
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    1ef8:	9a c0       	rjmp	.+308    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	3d 83       	std	Y+5, r19	; 0x05
    1f02:	2c 83       	std	Y+4, r18	; 0x04
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	9d 81       	ldd	r25, Y+5	; 0x05
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    1f0e:	5f c0       	rjmp	.+190    	; 0x1fce <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    1f10:	2c 81       	ldd	r18, Y+4	; 0x04
    1f12:	3d 81       	ldd	r19, Y+5	; 0x05
    1f14:	25 30       	cpi	r18, 0x05	; 5
    1f16:	31 05       	cpc	r19, r1
    1f18:	dc f4       	brge	.+54     	; 0x1f50 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	91 05       	cpc	r25, r1
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    1f24:	3f c0       	rjmp	.+126    	; 0x1fa4 <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    1f26:	2c 81       	ldd	r18, Y+4	; 0x04
    1f28:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2a:	22 30       	cpi	r18, 0x02	; 2
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	79 f1       	breq	.+94     	; 0x1f96 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1f38:	74 c0       	rjmp	.+232    	; 0x2022 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	b9 f1       	breq	.+110    	; 0x1fb2 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	83 30       	cpi	r24, 0x03	; 3
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	c9 f1       	breq	.+114    	; 0x1fc0 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    1f4e:	69 c0       	rjmp	.+210    	; 0x2022 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1f50:	2c 81       	ldd	r18, Y+4	; 0x04
    1f52:	3d 81       	ldd	r19, Y+5	; 0x05
    1f54:	27 30       	cpi	r18, 0x07	; 7
    1f56:	31 05       	cpc	r19, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    1f5a:	4e c0       	rjmp	.+156    	; 0x1ff8 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	88 30       	cpi	r24, 0x08	; 8
    1f62:	91 05       	cpc	r25, r1
    1f64:	5c f4       	brge	.+22     	; 0x1f7c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    1f66:	2c 81       	ldd	r18, Y+4	; 0x04
    1f68:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6a:	25 30       	cpi	r18, 0x05	; 5
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	b1 f1       	breq	.+108    	; 0x1fdc <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	86 30       	cpi	r24, 0x06	; 6
    1f76:	91 05       	cpc	r25, r1
    1f78:	c1 f1       	breq	.+112    	; 0x1fea <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    1f7a:	53 c0       	rjmp	.+166    	; 0x2022 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1f7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f80:	28 30       	cpi	r18, 0x08	; 8
    1f82:	31 05       	cpc	r19, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    1f86:	3f c0       	rjmp	.+126    	; 0x2006 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8c:	89 30       	cpi	r24, 0x09	; 9
    1f8e:	91 05       	cpc	r25, r1
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    1f92:	40 c0       	rjmp	.+128    	; 0x2014 <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    1f94:	46 c0       	rjmp	.+140    	; 0x2022 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    1f96:	e9 81       	ldd	r30, Y+1	; 0x01
    1f98:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9a:	80 81       	ld	r24, Z
    1f9c:	60 ec       	ldi	r22, 0xC0	; 192
    1f9e:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1fa2:	45 c0       	rjmp	.+138    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	80 81       	ld	r24, Z
    1faa:	69 ef       	ldi	r22, 0xF9	; 249
    1fac:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1fb0:	3e c0       	rjmp	.+124    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	80 81       	ld	r24, Z
    1fb8:	64 ea       	ldi	r22, 0xA4	; 164
    1fba:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1fbe:	37 c0       	rjmp	.+110    	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    1fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc4:	80 81       	ld	r24, Z
    1fc6:	60 eb       	ldi	r22, 0xB0	; 176
    1fc8:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1fcc:	30 c0       	rjmp	.+96     	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    1fce:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd2:	80 81       	ld	r24, Z
    1fd4:	69 e9       	ldi	r22, 0x99	; 153
    1fd6:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1fda:	29 c0       	rjmp	.+82     	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    1fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fde:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe0:	80 81       	ld	r24, Z
    1fe2:	62 e9       	ldi	r22, 0x92	; 146
    1fe4:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1fe8:	22 c0       	rjmp	.+68     	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    1fea:	e9 81       	ldd	r30, Y+1	; 0x01
    1fec:	fa 81       	ldd	r31, Y+2	; 0x02
    1fee:	80 81       	ld	r24, Z
    1ff0:	62 e8       	ldi	r22, 0x82	; 130
    1ff2:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    1ff6:	1b c0       	rjmp	.+54     	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    1ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffc:	80 81       	ld	r24, Z
    1ffe:	68 ef       	ldi	r22, 0xF8	; 248
    2000:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    2006:	e9 81       	ldd	r30, Y+1	; 0x01
    2008:	fa 81       	ldd	r31, Y+2	; 0x02
    200a:	80 81       	ld	r24, Z
    200c:	60 e8       	ldi	r22, 0x80	; 128
    200e:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    2012:	0d c0       	rjmp	.+26     	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    2014:	e9 81       	ldd	r30, Y+1	; 0x01
    2016:	fa 81       	ldd	r31, Y+2	; 0x02
    2018:	80 81       	ld	r24, Z
    201a:	60 e9       	ldi	r22, 0x90	; 144
    201c:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
    2020:	06 c0       	rjmp	.+12     	; 0x202e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    2022:	e9 81       	ldd	r30, Y+1	; 0x01
    2024:	fa 81       	ldd	r31, Y+2	; 0x02
    2026:	80 81       	ld	r24, Z
    2028:	66 e8       	ldi	r22, 0x86	; 134
    202a:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
	}
}
}
    202e:	27 96       	adiw	r28, 0x07	; 7
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <HLED_VidInit+0x6>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    204e:	e9 81       	ldd	r30, Y+1	; 0x01
    2050:	fa 81       	ldd	r31, Y+2	; 0x02
    2052:	81 81       	ldd	r24, Z+1	; 0x01
    2054:	e9 81       	ldd	r30, Y+1	; 0x01
    2056:	fa 81       	ldd	r31, Y+2	; 0x02
    2058:	90 81       	ld	r25, Z
    205a:	69 2f       	mov	r22, r25
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
}
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <HLED_VidLed_On+0x6>
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    207a:	e9 81       	ldd	r30, Y+1	; 0x01
    207c:	fa 81       	ldd	r31, Y+2	; 0x02
    207e:	81 81       	ldd	r24, Z+1	; 0x01
    2080:	e9 81       	ldd	r30, Y+1	; 0x01
    2082:	fa 81       	ldd	r31, Y+2	; 0x02
    2084:	90 81       	ld	r25, Z
    2086:	69 2f       	mov	r22, r25
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <HLED_VidLed_Off+0x6>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    20a6:	e9 81       	ldd	r30, Y+1	; 0x01
    20a8:	fa 81       	ldd	r31, Y+2	; 0x02
    20aa:	81 81       	ldd	r24, Z+1	; 0x01
    20ac:	e9 81       	ldd	r30, Y+1	; 0x01
    20ae:	fa 81       	ldd	r31, Y+2	; 0x02
    20b0:	90 81       	ld	r25, Z
    20b2:	69 2f       	mov	r22, r25
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
}
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <HLED_VidLed_Toggle+0x6>
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    20d2:	80 91 96 01 	lds	r24, 0x0196
    20d6:	88 23       	and	r24, r24
    20d8:	71 f4       	brne	.+28     	; 0x20f6 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    20da:	e9 81       	ldd	r30, Y+1	; 0x01
    20dc:	fa 81       	ldd	r31, Y+2	; 0x02
    20de:	81 81       	ldd	r24, Z+1	; 0x01
    20e0:	e9 81       	ldd	r30, Y+1	; 0x01
    20e2:	fa 81       	ldd	r31, Y+2	; 0x02
    20e4:	90 81       	ld	r25, Z
    20e6:	69 2f       	mov	r22, r25
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
		Flag=1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	80 93 96 01 	sts	0x0196, r24
    20f4:	0c c0       	rjmp	.+24     	; 0x210e <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    20f6:	e9 81       	ldd	r30, Y+1	; 0x01
    20f8:	fa 81       	ldd	r31, Y+2	; 0x02
    20fa:	81 81       	ldd	r24, Z+1	; 0x01
    20fc:	e9 81       	ldd	r30, Y+1	; 0x01
    20fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2100:	90 81       	ld	r25, Z
    2102:	69 2f       	mov	r22, r25
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
		Flag=0;
    210a:	10 92 96 01 	sts	0x0196, r1
	}
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	62 e0       	ldi	r22, 0x02	; 2
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	62 e0       	ldi	r22, 0x02	; 2
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	62 e0       	ldi	r22, 0x02	; 2
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	62 e0       	ldi	r22, 0x02	; 2
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    2148:	84 e0       	ldi	r24, 0x04	; 4
    214a:	62 e0       	ldi	r22, 0x02	; 2
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    2152:	85 e0       	ldi	r24, 0x05	; 5
    2154:	62 e0       	ldi	r22, 0x02	; 2
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    215c:	86 e0       	ldi	r24, 0x06	; 6
    215e:	62 e0       	ldi	r22, 0x02	; 2
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    2166:	87 e0       	ldi	r24, 0x07	; 7
    2168:	62 e0       	ldi	r22, 0x02	; 2
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	62 e0       	ldi	r22, 0x02	; 2
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	62 e0       	ldi	r22, 0x02	; 2
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	62 e0       	ldi	r22, 0x02	; 2
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	62 e0       	ldi	r22, 0x02	; 2
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    2198:	84 e0       	ldi	r24, 0x04	; 4
    219a:	62 e0       	ldi	r22, 0x02	; 2
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    21a2:	85 e0       	ldi	r24, 0x05	; 5
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    21ac:	86 e0       	ldi	r24, 0x06	; 6
    21ae:	62 e0       	ldi	r22, 0x02	; 2
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    21b6:	87 e0       	ldi	r24, 0x07	; 7
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>

}
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	62 97       	sbiw	r28, 0x12	; 18
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    21da:	8f ef       	ldi	r24, 0xFF	; 255
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    21de:	84 e0       	ldi	r24, 0x04	; 4
    21e0:	88 8b       	std	Y+16, r24	; 0x10
    21e2:	b5 c0       	rjmp	.+362    	; 0x234e <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    21e4:	88 89       	ldd	r24, Y+16	; 0x10
    21e6:	62 e0       	ldi	r22, 0x02	; 2
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    21ee:	19 8a       	std	Y+17, r1	; 0x11
    21f0:	a2 c0       	rjmp	.+324    	; 0x2336 <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    21f2:	9e 01       	movw	r18, r28
    21f4:	2e 5e       	subi	r18, 0xEE	; 238
    21f6:	3f 4f       	sbci	r19, 0xFF	; 255
    21f8:	89 89       	ldd	r24, Y+17	; 0x11
    21fa:	62 e0       	ldi	r22, 0x02	; 2
    21fc:	a9 01       	movw	r20, r18
    21fe:	0e 94 c9 0c 	call	0x1992	; 0x1992 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    2202:	8a 89       	ldd	r24, Y+18	; 0x12
    2204:	88 23       	and	r24, r24
    2206:	09 f0       	breq	.+2      	; 0x220a <HKPD_U8GetKeyPressed+0x44>
    2208:	93 c0       	rjmp	.+294    	; 0x2330 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    220a:	88 89       	ldd	r24, Y+16	; 0x10
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	ac 01       	movw	r20, r24
    2212:	44 50       	subi	r20, 0x04	; 4
    2214:	50 40       	sbci	r21, 0x00	; 0
    2216:	89 89       	ldd	r24, Y+17	; 0x11
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	ca 01       	movw	r24, r20
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	fc 01       	movw	r30, r24
    222c:	eb 57       	subi	r30, 0x7B	; 123
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	80 81       	ld	r24, Z
    2232:	8f 87       	std	Y+15, r24	; 0x0f
    2234:	08 c0       	rjmp	.+16     	; 0x2246 <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2236:	9e 01       	movw	r18, r28
    2238:	2e 5e       	subi	r18, 0xEE	; 238
    223a:	3f 4f       	sbci	r19, 0xFF	; 255
    223c:	89 89       	ldd	r24, Y+17	; 0x11
    223e:	62 e0       	ldi	r22, 0x02	; 2
    2240:	a9 01       	movw	r20, r18
    2242:	0e 94 c9 0c 	call	0x1992	; 0x1992 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    2246:	8a 89       	ldd	r24, Y+18	; 0x12
    2248:	88 23       	and	r24, r24
    224a:	a9 f3       	breq	.-22     	; 0x2236 <HKPD_U8GetKeyPressed+0x70>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a0 e2       	ldi	r26, 0x20	; 32
    2252:	b1 e4       	ldi	r27, 0x41	; 65
    2254:	8b 87       	std	Y+11, r24	; 0x0b
    2256:	9c 87       	std	Y+12, r25	; 0x0c
    2258:	ad 87       	std	Y+13, r26	; 0x0d
    225a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225c:	6b 85       	ldd	r22, Y+11	; 0x0b
    225e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2260:	8d 85       	ldd	r24, Y+13	; 0x0d
    2262:	9e 85       	ldd	r25, Y+14	; 0x0e
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a ef       	ldi	r20, 0xFA	; 250
    226a:	54 e4       	ldi	r21, 0x44	; 68
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8f 83       	std	Y+7, r24	; 0x07
    2276:	98 87       	std	Y+8, r25	; 0x08
    2278:	a9 87       	std	Y+9, r26	; 0x09
    227a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227c:	6f 81       	ldd	r22, Y+7	; 0x07
    227e:	78 85       	ldd	r23, Y+8	; 0x08
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2290:	88 23       	and	r24, r24
    2292:	2c f4       	brge	.+10     	; 0x229e <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	3f c0       	rjmp	.+126    	; 0x231c <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	4c f5       	brge	.+82     	; 0x2308 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    22bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <HKPD_U8GetKeyPressed+0x138>
    22e0:	88 ec       	ldi	r24, 0xC8	; 200
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9c 83       	std	Y+4, r25	; 0x04
    22e6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <HKPD_U8GetKeyPressed+0x126>
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	69 f7       	brne	.-38     	; 0x22e0 <HKPD_U8GetKeyPressed+0x11a>
    2306:	14 c0       	rjmp	.+40     	; 0x2330 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <HKPD_U8GetKeyPressed+0x162>
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2330:	89 89       	ldd	r24, Y+17	; 0x11
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	89 8b       	std	Y+17, r24	; 0x11
    2336:	89 89       	ldd	r24, Y+17	; 0x11
    2338:	84 30       	cpi	r24, 0x04	; 4
    233a:	08 f4       	brcc	.+2      	; 0x233e <HKPD_U8GetKeyPressed+0x178>
    233c:	5a cf       	rjmp	.-332    	; 0x21f2 <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    233e:	88 89       	ldd	r24, Y+16	; 0x10
    2340:	62 e0       	ldi	r22, 0x02	; 2
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2348:	88 89       	ldd	r24, Y+16	; 0x10
    234a:	8f 5f       	subi	r24, 0xFF	; 255
    234c:	88 8b       	std	Y+16, r24	; 0x10
    234e:	88 89       	ldd	r24, Y+16	; 0x10
    2350:	88 30       	cpi	r24, 0x08	; 8
    2352:	08 f4       	brcc	.+2      	; 0x2356 <HKPD_U8GetKeyPressed+0x190>
    2354:	47 cf       	rjmp	.-370    	; 0x21e4 <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    2356:	8f 85       	ldd	r24, Y+15	; 0x0f
    2358:	8f 3f       	cpi	r24, 0xFF	; 255
    235a:	09 f4       	brne	.+2      	; 0x235e <HKPD_U8GetKeyPressed+0x198>
    235c:	40 cf       	rjmp	.-384    	; 0x21de <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    235e:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    2360:	62 96       	adiw	r28, 0x12	; 18
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	6d 97       	sbiw	r28, 0x1d	; 29
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	62 e0       	ldi	r22, 0x02	; 2
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	62 e0       	ldi	r22, 0x02	; 2
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23a0:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	62 e0       	ldi	r22, 0x02	; 2
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e0       	ldi	r26, 0x00	; 0
    23b4:	b0 e4       	ldi	r27, 0x40	; 64
    23b6:	89 8f       	std	Y+25, r24	; 0x19
    23b8:	9a 8f       	std	Y+26, r25	; 0x1a
    23ba:	ab 8f       	std	Y+27, r26	; 0x1b
    23bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	69 8d       	ldd	r22, Y+25	; 0x19
    23c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a ef       	ldi	r20, 0xFA	; 250
    23cc:	54 e4       	ldi	r21, 0x44	; 68
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8d 8b       	std	Y+21, r24	; 0x15
    23d8:	9e 8b       	std	Y+22, r25	; 0x16
    23da:	af 8b       	std	Y+23, r26	; 0x17
    23dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23de:	6d 89       	ldd	r22, Y+21	; 0x15
    23e0:	7e 89       	ldd	r23, Y+22	; 0x16
    23e2:	8f 89       	ldd	r24, Y+23	; 0x17
    23e4:	98 8d       	ldd	r25, Y+24	; 0x18
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    2400:	6d 89       	ldd	r22, Y+21	; 0x15
    2402:	7e 89       	ldd	r23, Y+22	; 0x16
    2404:	8f 89       	ldd	r24, Y+23	; 0x17
    2406:	98 8d       	ldd	r25, Y+24	; 0x18
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	69 8d       	ldd	r22, Y+25	; 0x19
    241a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <HCLCD_Vid8Bits_SendCommand+0xee>
    2442:	88 ec       	ldi	r24, 0xC8	; 200
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9a 8b       	std	Y+18, r25	; 0x12
    2448:	89 8b       	std	Y+17, r24	; 0x11
    244a:	89 89       	ldd	r24, Y+17	; 0x11
    244c:	9a 89       	ldd	r25, Y+18	; 0x12
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <HCLCD_Vid8Bits_SendCommand+0xdc>
    2452:	9a 8b       	std	Y+18, r25	; 0x12
    2454:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	8b 89       	ldd	r24, Y+19	; 0x13
    2458:	9c 89       	ldd	r25, Y+20	; 0x14
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	9c 8b       	std	Y+20, r25	; 0x14
    245e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	69 f7       	brne	.-38     	; 0x2442 <HCLCD_Vid8Bits_SendCommand+0xd0>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9c 8b       	std	Y+20, r25	; 0x14
    247c:	8b 8b       	std	Y+19, r24	; 0x13
    247e:	8b 89       	ldd	r24, Y+19	; 0x13
    2480:	9c 89       	ldd	r25, Y+20	; 0x14
    2482:	98 8b       	std	Y+16, r25	; 0x10
    2484:	8f 87       	std	Y+15, r24	; 0x0f
    2486:	8f 85       	ldd	r24, Y+15	; 0x0f
    2488:	98 89       	ldd	r25, Y+16	; 0x10
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <HCLCD_Vid8Bits_SendCommand+0x118>
    248e:	98 8b       	std	Y+16, r25	; 0x10
    2490:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	62 e0       	ldi	r22, 0x02	; 2
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e0       	ldi	r26, 0x00	; 0
    24a2:	b0 e4       	ldi	r27, 0x40	; 64
    24a4:	8b 87       	std	Y+11, r24	; 0x0b
    24a6:	9c 87       	std	Y+12, r25	; 0x0c
    24a8:	ad 87       	std	Y+13, r26	; 0x0d
    24aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a ef       	ldi	r20, 0xFA	; 250
    24ba:	54 e4       	ldi	r21, 0x44	; 68
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	8f 83       	std	Y+7, r24	; 0x07
    24c6:	98 87       	std	Y+8, r25	; 0x08
    24c8:	a9 87       	std	Y+9, r26	; 0x09
    24ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	2c f4       	brge	.+10     	; 0x24ee <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	3f c0       	rjmp	.+126    	; 0x256c <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	4c f5       	brge	.+82     	; 0x2558 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	6b 85       	ldd	r22, Y+11	; 0x0b
    2508:	7c 85       	ldd	r23, Y+12	; 0x0c
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	9e 85       	ldd	r25, Y+14	; 0x0e
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e2       	ldi	r20, 0x20	; 32
    2514:	51 e4       	ldi	r21, 0x41	; 65
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	0f c0       	rjmp	.+30     	; 0x254e <HCLCD_Vid8Bits_SendCommand+0x1dc>
    2530:	88 ec       	ldi	r24, 0xC8	; 200
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <HCLCD_Vid8Bits_SendCommand+0x1ca>
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	69 f7       	brne	.-38     	; 0x2530 <HCLCD_Vid8Bits_SendCommand+0x1be>
    2556:	14 c0       	rjmp	.+40     	; 0x2580 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <HCLCD_Vid8Bits_SendCommand+0x206>
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	62 e0       	ldi	r22, 0x02	; 2
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
}
    258a:	6d 96       	adiw	r28, 0x1d	; 29
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	e8 97       	sbiw	r28, 0x38	; 56
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	6f ef       	ldi	r22, 0xFF	; 255
    25b4:	0e 94 2e 0b 	call	0x165c	; 0x165c <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	62 e0       	ldi	r22, 0x02	; 2
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	62 e0       	ldi	r22, 0x02	; 2
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    25cc:	82 e0       	ldi	r24, 0x02	; 2
    25ce:	62 e0       	ldi	r22, 0x02	; 2
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 ef       	ldi	r26, 0xF0	; 240
    25dc:	b1 e4       	ldi	r27, 0x41	; 65
    25de:	8d ab       	std	Y+53, r24	; 0x35
    25e0:	9e ab       	std	Y+54, r25	; 0x36
    25e2:	af ab       	std	Y+55, r26	; 0x37
    25e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	6d a9       	ldd	r22, Y+53	; 0x35
    25e8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ea:	8f a9       	ldd	r24, Y+55	; 0x37
    25ec:	98 ad       	ldd	r25, Y+56	; 0x38
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a ef       	ldi	r20, 0xFA	; 250
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	89 ab       	std	Y+49, r24	; 0x31
    2600:	9a ab       	std	Y+50, r25	; 0x32
    2602:	ab ab       	std	Y+51, r26	; 0x33
    2604:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2606:	69 a9       	ldd	r22, Y+49	; 0x31
    2608:	7a a9       	ldd	r23, Y+50	; 0x32
    260a:	8b a9       	ldd	r24, Y+51	; 0x33
    260c:	9c a9       	ldd	r25, Y+52	; 0x34
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	98 ab       	std	Y+48, r25	; 0x30
    2624:	8f a7       	std	Y+47, r24	; 0x2f
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    2628:	69 a9       	ldd	r22, Y+49	; 0x31
    262a:	7a a9       	ldd	r23, Y+50	; 0x32
    262c:	8b a9       	ldd	r24, Y+51	; 0x33
    262e:	9c a9       	ldd	r25, Y+52	; 0x34
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	6d a9       	ldd	r22, Y+53	; 0x35
    2642:	7e a9       	ldd	r23, Y+54	; 0x36
    2644:	8f a9       	ldd	r24, Y+55	; 0x37
    2646:	98 ad       	ldd	r25, Y+56	; 0x38
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	98 ab       	std	Y+48, r25	; 0x30
    2666:	8f a7       	std	Y+47, r24	; 0x2f
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <HCLCD_Vid8Bits_Init+0xec>
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9e a7       	std	Y+46, r25	; 0x2e
    2670:	8d a7       	std	Y+45, r24	; 0x2d
    2672:	8d a5       	ldd	r24, Y+45	; 0x2d
    2674:	9e a5       	ldd	r25, Y+46	; 0x2e
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <HCLCD_Vid8Bits_Init+0xda>
    267a:	9e a7       	std	Y+46, r25	; 0x2e
    267c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2680:	98 a9       	ldd	r25, Y+48	; 0x30
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	98 ab       	std	Y+48, r25	; 0x30
    2686:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8f a5       	ldd	r24, Y+47	; 0x2f
    268a:	98 a9       	ldd	r25, Y+48	; 0x30
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <HCLCD_Vid8Bits_Init+0xce>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	69 a9       	ldd	r22, Y+49	; 0x31
    2694:	7a a9       	ldd	r23, Y+50	; 0x32
    2696:	8b a9       	ldd	r24, Y+51	; 0x33
    2698:	9c a9       	ldd	r25, Y+52	; 0x34
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	98 ab       	std	Y+48, r25	; 0x30
    26a4:	8f a7       	std	Y+47, r24	; 0x2f
    26a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a8:	98 a9       	ldd	r25, Y+48	; 0x30
    26aa:	9c a7       	std	Y+44, r25	; 0x2c
    26ac:	8b a7       	std	Y+43, r24	; 0x2b
    26ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <HCLCD_Vid8Bits_Init+0x116>
    26b6:	9c a7       	std	Y+44, r25	; 0x2c
    26b8:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    26ba:	88 e2       	ldi	r24, 0x28	; 40
    26bc:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e8       	ldi	r26, 0x80	; 128
    26c6:	bf e3       	ldi	r27, 0x3F	; 63
    26c8:	8f a3       	std	Y+39, r24	; 0x27
    26ca:	98 a7       	std	Y+40, r25	; 0x28
    26cc:	a9 a7       	std	Y+41, r26	; 0x29
    26ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d0:	6f a1       	ldd	r22, Y+39	; 0x27
    26d2:	78 a5       	ldd	r23, Y+40	; 0x28
    26d4:	89 a5       	ldd	r24, Y+41	; 0x29
    26d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a ef       	ldi	r20, 0xFA	; 250
    26de:	54 e4       	ldi	r21, 0x44	; 68
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8b a3       	std	Y+35, r24	; 0x23
    26ea:	9c a3       	std	Y+36, r25	; 0x24
    26ec:	ad a3       	std	Y+37, r26	; 0x25
    26ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26f0:	6b a1       	ldd	r22, Y+35	; 0x23
    26f2:	7c a1       	ldd	r23, Y+36	; 0x24
    26f4:	8d a1       	ldd	r24, Y+37	; 0x25
    26f6:	9e a1       	ldd	r25, Y+38	; 0x26
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	2c f4       	brge	.+10     	; 0x2712 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9a a3       	std	Y+34, r25	; 0x22
    270e:	89 a3       	std	Y+33, r24	; 0x21
    2710:	3f c0       	rjmp	.+126    	; 0x2790 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	4c f5       	brge	.+82     	; 0x277c <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	6f a1       	ldd	r22, Y+39	; 0x27
    272c:	78 a5       	ldd	r23, Y+40	; 0x28
    272e:	89 a5       	ldd	r24, Y+41	; 0x29
    2730:	9a a5       	ldd	r25, Y+42	; 0x2a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9a a3       	std	Y+34, r25	; 0x22
    2750:	89 a3       	std	Y+33, r24	; 0x21
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <HCLCD_Vid8Bits_Init+0x1d6>
    2754:	88 ec       	ldi	r24, 0xC8	; 200
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	98 a3       	std	Y+32, r25	; 0x20
    275a:	8f 8f       	std	Y+31, r24	; 0x1f
    275c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    275e:	98 a1       	ldd	r25, Y+32	; 0x20
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <HCLCD_Vid8Bits_Init+0x1c4>
    2764:	98 a3       	std	Y+32, r25	; 0x20
    2766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2768:	89 a1       	ldd	r24, Y+33	; 0x21
    276a:	9a a1       	ldd	r25, Y+34	; 0x22
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	9a a3       	std	Y+34, r25	; 0x22
    2770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	89 a1       	ldd	r24, Y+33	; 0x21
    2774:	9a a1       	ldd	r25, Y+34	; 0x22
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	69 f7       	brne	.-38     	; 0x2754 <HCLCD_Vid8Bits_Init+0x1b8>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	6b a1       	ldd	r22, Y+35	; 0x23
    277e:	7c a1       	ldd	r23, Y+36	; 0x24
    2780:	8d a1       	ldd	r24, Y+37	; 0x25
    2782:	9e a1       	ldd	r25, Y+38	; 0x26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9a a3       	std	Y+34, r25	; 0x22
    278e:	89 a3       	std	Y+33, r24	; 0x21
    2790:	89 a1       	ldd	r24, Y+33	; 0x21
    2792:	9a a1       	ldd	r25, Y+34	; 0x22
    2794:	9e 8f       	std	Y+30, r25	; 0x1e
    2796:	8d 8f       	std	Y+29, r24	; 0x1d
    2798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <HCLCD_Vid8Bits_Init+0x200>
    27a0:	9e 8f       	std	Y+30, r25	; 0x1e
    27a2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    27a4:	8f e0       	ldi	r24, 0x0F	; 15
    27a6:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e8       	ldi	r26, 0x80	; 128
    27b0:	bf e3       	ldi	r27, 0x3F	; 63
    27b2:	89 8f       	std	Y+25, r24	; 0x19
    27b4:	9a 8f       	std	Y+26, r25	; 0x1a
    27b6:	ab 8f       	std	Y+27, r26	; 0x1b
    27b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	69 8d       	ldd	r22, Y+25	; 0x19
    27bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a ef       	ldi	r20, 0xFA	; 250
    27c8:	54 e4       	ldi	r21, 0x44	; 68
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8d 8b       	std	Y+21, r24	; 0x15
    27d4:	9e 8b       	std	Y+22, r25	; 0x16
    27d6:	af 8b       	std	Y+23, r26	; 0x17
    27d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	2c f4       	brge	.+10     	; 0x27fc <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
    27fa:	3f c0       	rjmp	.+126    	; 0x287a <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    27fc:	6d 89       	ldd	r22, Y+21	; 0x15
    27fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2800:	8f 89       	ldd	r24, Y+23	; 0x17
    2802:	98 8d       	ldd	r25, Y+24	; 0x18
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	3f ef       	ldi	r19, 0xFF	; 255
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	57 e4       	ldi	r21, 0x47	; 71
    280c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2810:	18 16       	cp	r1, r24
    2812:	4c f5       	brge	.+82     	; 0x2866 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2814:	69 8d       	ldd	r22, Y+25	; 0x19
    2816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
    283c:	0f c0       	rjmp	.+30     	; 0x285c <HCLCD_Vid8Bits_Init+0x2c0>
    283e:	88 ec       	ldi	r24, 0xC8	; 200
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9a 8b       	std	Y+18, r25	; 0x12
    2844:	89 8b       	std	Y+17, r24	; 0x11
    2846:	89 89       	ldd	r24, Y+17	; 0x11
    2848:	9a 89       	ldd	r25, Y+18	; 0x12
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <HCLCD_Vid8Bits_Init+0x2ae>
    284e:	9a 8b       	std	Y+18, r25	; 0x12
    2850:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	8b 89       	ldd	r24, Y+19	; 0x13
    2854:	9c 89       	ldd	r25, Y+20	; 0x14
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9c 8b       	std	Y+20, r25	; 0x14
    285a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	8b 89       	ldd	r24, Y+19	; 0x13
    285e:	9c 89       	ldd	r25, Y+20	; 0x14
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	69 f7       	brne	.-38     	; 0x283e <HCLCD_Vid8Bits_Init+0x2a2>
    2864:	14 c0       	rjmp	.+40     	; 0x288e <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9c 8b       	std	Y+20, r25	; 0x14
    2878:	8b 8b       	std	Y+19, r24	; 0x13
    287a:	8b 89       	ldd	r24, Y+19	; 0x13
    287c:	9c 89       	ldd	r25, Y+20	; 0x14
    287e:	98 8b       	std	Y+16, r25	; 0x10
    2880:	8f 87       	std	Y+15, r24	; 0x0f
    2882:	8f 85       	ldd	r24, Y+15	; 0x0f
    2884:	98 89       	ldd	r25, Y+16	; 0x10
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <HCLCD_Vid8Bits_Init+0x2ea>
    288a:	98 8b       	std	Y+16, r25	; 0x10
    288c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	a0 e0       	ldi	r26, 0x00	; 0
    289a:	b0 e4       	ldi	r27, 0x40	; 64
    289c:	8b 87       	std	Y+11, r24	; 0x0b
    289e:	9c 87       	std	Y+12, r25	; 0x0c
    28a0:	ad 87       	std	Y+13, r26	; 0x0d
    28a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	4a ef       	ldi	r20, 0xFA	; 250
    28b2:	54 e4       	ldi	r21, 0x44	; 68
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	8f 83       	std	Y+7, r24	; 0x07
    28be:	98 87       	std	Y+8, r25	; 0x08
    28c0:	a9 87       	std	Y+9, r26	; 0x09
    28c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c4:	6f 81       	ldd	r22, Y+7	; 0x07
    28c6:	78 85       	ldd	r23, Y+8	; 0x08
    28c8:	89 85       	ldd	r24, Y+9	; 0x09
    28ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e8       	ldi	r20, 0x80	; 128
    28d2:	5f e3       	ldi	r21, 0x3F	; 63
    28d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28d8:	88 23       	and	r24, r24
    28da:	2c f4       	brge	.+10     	; 0x28e6 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	3f c0       	rjmp	.+126    	; 0x2964 <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    28e6:	6f 81       	ldd	r22, Y+7	; 0x07
    28e8:	78 85       	ldd	r23, Y+8	; 0x08
    28ea:	89 85       	ldd	r24, Y+9	; 0x09
    28ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	3f ef       	ldi	r19, 0xFF	; 255
    28f2:	4f e7       	ldi	r20, 0x7F	; 127
    28f4:	57 e4       	ldi	r21, 0x47	; 71
    28f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28fa:	18 16       	cp	r1, r24
    28fc:	4c f5       	brge	.+82     	; 0x2950 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2900:	7c 85       	ldd	r23, Y+12	; 0x0c
    2902:	8d 85       	ldd	r24, Y+13	; 0x0d
    2904:	9e 85       	ldd	r25, Y+14	; 0x0e
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e2       	ldi	r20, 0x20	; 32
    290c:	51 e4       	ldi	r21, 0x41	; 65
    290e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	bc 01       	movw	r22, r24
    2918:	cd 01       	movw	r24, r26
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	9e 83       	std	Y+6, r25	; 0x06
    2924:	8d 83       	std	Y+5, r24	; 0x05
    2926:	0f c0       	rjmp	.+30     	; 0x2946 <HCLCD_Vid8Bits_Init+0x3aa>
    2928:	88 ec       	ldi	r24, 0xC8	; 200
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	9c 83       	std	Y+4, r25	; 0x04
    292e:	8b 83       	std	Y+3, r24	; 0x03
    2930:	8b 81       	ldd	r24, Y+3	; 0x03
    2932:	9c 81       	ldd	r25, Y+4	; 0x04
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <HCLCD_Vid8Bits_Init+0x398>
    2938:	9c 83       	std	Y+4, r25	; 0x04
    293a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293c:	8d 81       	ldd	r24, Y+5	; 0x05
    293e:	9e 81       	ldd	r25, Y+6	; 0x06
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	69 f7       	brne	.-38     	; 0x2928 <HCLCD_Vid8Bits_Init+0x38c>
    294e:	14 c0       	rjmp	.+40     	; 0x2978 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	9a 83       	std	Y+2, r25	; 0x02
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <HCLCD_Vid8Bits_Init+0x3d4>
    2974:	9a 83       	std	Y+2, r25	; 0x02
    2976:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2978:	86 e0       	ldi	r24, 0x06	; 6
    297a:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
}
    297e:	e8 96       	adiw	r28, 0x38	; 56
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	6d 97       	sbiw	r28, 0x1d	; 29
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	62 e0       	ldi	r22, 0x02	; 2
    29aa:	41 e0       	ldi	r20, 0x01	; 1
    29ac:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	62 e0       	ldi	r22, 0x02	; 2
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    29be:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    29c2:	82 e0       	ldi	r24, 0x02	; 2
    29c4:	62 e0       	ldi	r22, 0x02	; 2
    29c6:	41 e0       	ldi	r20, 0x01	; 1
    29c8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	a0 e0       	ldi	r26, 0x00	; 0
    29d2:	b0 e4       	ldi	r27, 0x40	; 64
    29d4:	89 8f       	std	Y+25, r24	; 0x19
    29d6:	9a 8f       	std	Y+26, r25	; 0x1a
    29d8:	ab 8f       	std	Y+27, r26	; 0x1b
    29da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	69 8d       	ldd	r22, Y+25	; 0x19
    29de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4a ef       	ldi	r20, 0xFA	; 250
    29ea:	54 e4       	ldi	r21, 0x44	; 68
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8d 8b       	std	Y+21, r24	; 0x15
    29f6:	9e 8b       	std	Y+22, r25	; 0x16
    29f8:	af 8b       	std	Y+23, r26	; 0x17
    29fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29fc:	6d 89       	ldd	r22, Y+21	; 0x15
    29fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2a00:	8f 89       	ldd	r24, Y+23	; 0x17
    2a02:	98 8d       	ldd	r25, Y+24	; 0x18
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9c 8b       	std	Y+20, r25	; 0x14
    2a1a:	8b 8b       	std	Y+19, r24	; 0x13
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a20:	7e 89       	ldd	r23, Y+22	; 0x16
    2a22:	8f 89       	ldd	r24, Y+23	; 0x17
    2a24:	98 8d       	ldd	r25, Y+24	; 0x18
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	4c f5       	brge	.+82     	; 0x2a88 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	69 8d       	ldd	r22, Y+25	; 0x19
    2a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9c 8b       	std	Y+20, r25	; 0x14
    2a5c:	8b 8b       	std	Y+19, r24	; 0x13
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2a60:	88 ec       	ldi	r24, 0xC8	; 200
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9a 8b       	std	Y+18, r25	; 0x12
    2a66:	89 8b       	std	Y+17, r24	; 0x11
    2a68:	89 89       	ldd	r24, Y+17	; 0x11
    2a6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2a70:	9a 8b       	std	Y+18, r25	; 0x12
    2a72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	8b 89       	ldd	r24, Y+19	; 0x13
    2a76:	9c 89       	ldd	r25, Y+20	; 0x14
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9c 8b       	std	Y+20, r25	; 0x14
    2a7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a80:	9c 89       	ldd	r25, Y+20	; 0x14
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2a86:	14 c0       	rjmp	.+40     	; 0x2ab0 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9c 8b       	std	Y+20, r25	; 0x14
    2a9a:	8b 8b       	std	Y+19, r24	; 0x13
    2a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa0:	98 8b       	std	Y+16, r25	; 0x10
    2aa2:	8f 87       	std	Y+15, r24	; 0x0f
    2aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aa6:	98 89       	ldd	r25, Y+16	; 0x10
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2aac:	98 8b       	std	Y+16, r25	; 0x10
    2aae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2ab0:	82 e0       	ldi	r24, 0x02	; 2
    2ab2:	62 e0       	ldi	r22, 0x02	; 2
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e0       	ldi	r26, 0x00	; 0
    2ac0:	b0 e4       	ldi	r27, 0x40	; 64
    2ac2:	8b 87       	std	Y+11, r24	; 0x0b
    2ac4:	9c 87       	std	Y+12, r25	; 0x0c
    2ac6:	ad 87       	std	Y+13, r26	; 0x0d
    2ac8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2acc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	4a ef       	ldi	r20, 0xFA	; 250
    2ad8:	54 e4       	ldi	r21, 0x44	; 68
    2ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8f 83       	std	Y+7, r24	; 0x07
    2ae4:	98 87       	std	Y+8, r25	; 0x08
    2ae6:	a9 87       	std	Y+9, r26	; 0x09
    2ae8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aea:	6f 81       	ldd	r22, Y+7	; 0x07
    2aec:	78 85       	ldd	r23, Y+8	; 0x08
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	2c f4       	brge	.+10     	; 0x2b0c <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	3f c0       	rjmp	.+126    	; 0x2b8a <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0e:	78 85       	ldd	r23, Y+8	; 0x08
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	3f ef       	ldi	r19, 0xFF	; 255
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	57 e4       	ldi	r21, 0x47	; 71
    2b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b20:	18 16       	cp	r1, r24
    2b22:	4c f5       	brge	.+82     	; 0x2b76 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e2       	ldi	r20, 0x20	; 32
    2b32:	51 e4       	ldi	r21, 0x41	; 65
    2b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	0f c0       	rjmp	.+30     	; 0x2b6c <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2b4e:	88 ec       	ldi	r24, 0xC8	; 200
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2b5e:	9c 83       	std	Y+4, r25	; 0x04
    2b60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b62:	8d 81       	ldd	r24, Y+5	; 0x05
    2b64:	9e 81       	ldd	r25, Y+6	; 0x06
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	9e 83       	std	Y+6, r25	; 0x06
    2b6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	69 f7       	brne	.-38     	; 0x2b4e <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2b74:	14 c0       	rjmp	.+40     	; 0x2b9e <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9e 83       	std	Y+6, r25	; 0x06
    2b88:	8d 83       	std	Y+5, r24	; 0x05
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	62 e0       	ldi	r22, 0x02	; 2
    2ba2:	41 e0       	ldi	r20, 0x01	; 1
    2ba4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
}
    2ba8:	6d 96       	adiw	r28, 0x1d	; 29
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <HCLCD_Vid8Bits_DisplayString+0x6>
    2bc0:	0f 92       	push	r0
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	9b 83       	std	Y+3, r25	; 0x03
    2bc8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2bca:	19 82       	std	Y+1, r1	; 0x01
    2bcc:	0e c0       	rjmp	.+28     	; 0x2bea <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd8:	fc 01       	movw	r30, r24
    2bda:	e2 0f       	add	r30, r18
    2bdc:	f3 1f       	adc	r31, r19
    2bde:	80 81       	ld	r24, Z
    2be0:	0e 94 c8 14 	call	0x2990	; 0x2990 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	8f 5f       	subi	r24, 0xFF	; 255
    2be8:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e2 0f       	add	r30, r18
    2bf8:	f3 1f       	adc	r31, r19
    2bfa:	80 81       	ld	r24, Z
    2bfc:	88 23       	and	r24, r24
    2bfe:	39 f7       	brne	.-50     	; 0x2bce <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	60 97       	sbiw	r28, 0x10	; 16
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	6d 87       	std	Y+13, r22	; 0x0d
    2c26:	7e 87       	std	Y+14, r23	; 0x0e
    2c28:	8f 87       	std	Y+15, r24	; 0x0f
    2c2a:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2c2c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	af 85       	ldd	r26, Y+15	; 0x0f
    2c34:	b8 89       	ldd	r27, Y+16	; 0x10
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	a1 05       	cpc	r26, r1
    2c3a:	b1 05       	cpc	r27, r1
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2c3e:	4f c0       	rjmp	.+158    	; 0x2cde <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2c40:	2d c0       	rjmp	.+90     	; 0x2c9c <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	08 2f       	mov	r16, r24
    2c46:	10 e0       	ldi	r17, 0x00	; 0
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	af 85       	ldd	r26, Y+15	; 0x0f
    2c4e:	b8 89       	ldd	r27, Y+16	; 0x10
    2c50:	2a e0       	ldi	r18, 0x0A	; 10
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	bc 01       	movw	r22, r24
    2c5a:	cd 01       	movw	r24, r26
    2c5c:	0e 94 0a 23 	call	0x4614	; 0x4614 <__udivmodsi4>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	28 2f       	mov	r18, r24
    2c66:	ce 01       	movw	r24, r28
    2c68:	03 96       	adiw	r24, 0x03	; 3
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	e0 0f       	add	r30, r16
    2c6e:	f1 1f       	adc	r31, r17
    2c70:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c76:	af 85       	ldd	r26, Y+15	; 0x0f
    2c78:	b8 89       	ldd	r27, Y+16	; 0x10
    2c7a:	2a e0       	ldi	r18, 0x0A	; 10
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 0a 23 	call	0x4614	; 0x4614 <__udivmodsi4>
    2c8a:	da 01       	movw	r26, r20
    2c8c:	c9 01       	movw	r24, r18
    2c8e:	8d 87       	std	Y+13, r24	; 0x0d
    2c90:	9e 87       	std	Y+14, r25	; 0x0e
    2c92:	af 87       	std	Y+15, r26	; 0x0f
    2c94:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	8f 5f       	subi	r24, 0xFF	; 255
    2c9a:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca0:	af 85       	ldd	r26, Y+15	; 0x0f
    2ca2:	b8 89       	ldd	r27, Y+16	; 0x10
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	a1 05       	cpc	r26, r1
    2ca8:	b1 05       	cpc	r27, r1
    2caa:	59 f6       	brne	.-106    	; 0x2c42 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	81 50       	subi	r24, 0x01	; 1
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	11 c0       	rjmp	.+34     	; 0x2cd6 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	33 27       	eor	r19, r19
    2cba:	27 fd       	sbrc	r18, 7
    2cbc:	30 95       	com	r19
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	03 96       	adiw	r24, 0x03	; 3
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	e2 0f       	add	r30, r18
    2cc6:	f3 1f       	adc	r31, r19
    2cc8:	80 81       	ld	r24, Z
    2cca:	80 5d       	subi	r24, 0xD0	; 208
    2ccc:	0e 94 c8 14 	call	0x2990	; 0x2990 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	81 50       	subi	r24, 0x01	; 1
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	88 23       	and	r24, r24
    2cda:	64 f7       	brge	.-40     	; 0x2cb4 <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2cdc:	03 c0       	rjmp	.+6      	; 0x2ce4 <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2cde:	80 e3       	ldi	r24, 0x30	; 48
    2ce0:	0e 94 c8 14 	call	0x2990	; 0x2990 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2ce4:	60 96       	adiw	r28, 0x10	; 16
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
    2cf8:	08 95       	ret

00002cfa <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <HCLCD_Vid8Bits_SetPosition+0x6>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	81 30       	cpi	r24, 0x01	; 1
    2d0c:	41 f4       	brne	.+16     	; 0x2d1e <HCLCD_Vid8Bits_SetPosition+0x24>
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	80 31       	cpi	r24, 0x10	; 16
    2d12:	28 f4       	brcc	.+10     	; 0x2d1e <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	80 58       	subi	r24, 0x80	; 128
    2d18:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    2d1c:	0a c0       	rjmp	.+20     	; 0x2d32 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	39 f4       	brne	.+14     	; 0x2d32 <HCLCD_Vid8Bits_SetPosition+0x38>
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	80 31       	cpi	r24, 0x10	; 16
    2d28:	20 f4       	brcc	.+8      	; 0x2d32 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	80 54       	subi	r24, 0x40	; 64
    2d2e:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	8a 83       	std	Y+2, r24	; 0x02
    2d4a:	7c 83       	std	Y+4, r23	; 0x04
    2d4c:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	88 30       	cpi	r24, 0x08	; 8
    2d52:	f8 f4       	brcc	.+62     	; 0x2d92 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	88 2f       	mov	r24, r24
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	08 96       	adiw	r24, 0x08	; 8
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2d6c:	19 82       	std	Y+1, r1	; 0x01
    2d6e:	0e c0       	rjmp	.+28     	; 0x2d8c <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e2 0f       	add	r30, r18
    2d7e:	f3 1f       	adc	r31, r19
    2d80:	80 81       	ld	r24, Z
    2d82:	0e 94 c8 14 	call	0x2990	; 0x2990 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	88 30       	cpi	r24, 0x08	; 8
    2d90:	78 f3       	brcs	.-34     	; 0x2d70 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	08 95       	ret

00002da0 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	2e 97       	sbiw	r28, 0x0e	; 14
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	a0 e0       	ldi	r26, 0x00	; 0
    2dc0:	b0 e4       	ldi	r27, 0x40	; 64
    2dc2:	8b 87       	std	Y+11, r24	; 0x0b
    2dc4:	9c 87       	std	Y+12, r25	; 0x0c
    2dc6:	ad 87       	std	Y+13, r26	; 0x0d
    2dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a ef       	ldi	r20, 0xFA	; 250
    2dd8:	54 e4       	ldi	r21, 0x44	; 68
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	8f 83       	std	Y+7, r24	; 0x07
    2de4:	98 87       	std	Y+8, r25	; 0x08
    2de6:	a9 87       	std	Y+9, r26	; 0x09
    2de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dea:	6f 81       	ldd	r22, Y+7	; 0x07
    2dec:	78 85       	ldd	r23, Y+8	; 0x08
    2dee:	89 85       	ldd	r24, Y+9	; 0x09
    2df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	2c f4       	brge	.+10     	; 0x2e0c <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9e 83       	std	Y+6, r25	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
    2e0a:	3f c0       	rjmp	.+126    	; 0x2e8a <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
    2e18:	4f e7       	ldi	r20, 0x7F	; 127
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	4c f5       	brge	.+82     	; 0x2e76 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e2       	ldi	r20, 0x20	; 32
    2e32:	51 e4       	ldi	r21, 0x41	; 65
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9e 83       	std	Y+6, r25	; 0x06
    2e4a:	8d 83       	std	Y+5, r24	; 0x05
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <HCLCD_Vid8Bits_ClearScreen+0xcc>
    2e4e:	88 ec       	ldi	r24, 0xC8	; 200
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	9c 83       	std	Y+4, r25	; 0x04
    2e54:	8b 83       	std	Y+3, r24	; 0x03
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <HCLCD_Vid8Bits_ClearScreen+0xba>
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	69 f7       	brne	.-38     	; 0x2e4e <HCLCD_Vid8Bits_ClearScreen+0xae>
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e76:	6f 81       	ldd	r22, Y+7	; 0x07
    2e78:	78 85       	ldd	r23, Y+8	; 0x08
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    2e9a:	9a 83       	std	Y+2, r25	; 0x02
    2e9c:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2e9e:	2e 96       	adiw	r28, 0x0e	; 14
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	60 97       	sbiw	r28, 0x10	; 16
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2ec6:	1f 86       	std	Y+15, r1	; 0x0f
    2ec8:	78 c0       	rjmp	.+240    	; 0x2fba <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2eca:	88 e1       	ldi	r24, 0x18	; 24
    2ecc:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a6 e9       	ldi	r26, 0x96	; 150
    2ed6:	b3 e4       	ldi	r27, 0x43	; 67
    2ed8:	8b 87       	std	Y+11, r24	; 0x0b
    2eda:	9c 87       	std	Y+12, r25	; 0x0c
    2edc:	ad 87       	std	Y+13, r26	; 0x0d
    2ede:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4a ef       	ldi	r20, 0xFA	; 250
    2eee:	54 e4       	ldi	r21, 0x44	; 68
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8f 83       	std	Y+7, r24	; 0x07
    2efa:	98 87       	std	Y+8, r25	; 0x08
    2efc:	a9 87       	std	Y+9, r26	; 0x09
    2efe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f00:	6f 81       	ldd	r22, Y+7	; 0x07
    2f02:	78 85       	ldd	r23, Y+8	; 0x08
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	2c f4       	brge	.+10     	; 0x2f22 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
    2f20:	3f c0       	rjmp	.+126    	; 0x2fa0 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    2f22:	6f 81       	ldd	r22, Y+7	; 0x07
    2f24:	78 85       	ldd	r23, Y+8	; 0x08
    2f26:	89 85       	ldd	r24, Y+9	; 0x09
    2f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	3f ef       	ldi	r19, 0xFF	; 255
    2f2e:	4f e7       	ldi	r20, 0x7F	; 127
    2f30:	57 e4       	ldi	r21, 0x47	; 71
    2f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	4c f5       	brge	.+82     	; 0x2f8c <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9e 83       	std	Y+6, r25	; 0x06
    2f60:	8d 83       	std	Y+5, r24	; 0x05
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    2f64:	88 ec       	ldi	r24, 0xC8	; 200
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	9c 83       	std	Y+4, r25	; 0x04
    2f6a:	8b 83       	std	Y+3, r24	; 0x03
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    2f74:	9c 83       	std	Y+4, r25	; 0x04
    2f76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f78:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	9e 83       	std	Y+6, r25	; 0x06
    2f80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    2f8a:	14 c0       	rjmp	.+40     	; 0x2fb4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8e:	78 85       	ldd	r23, Y+8	; 0x08
    2f90:	89 85       	ldd	r24, Y+9	; 0x09
    2f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb6:	8f 5f       	subi	r24, 0xFF	; 255
    2fb8:	8f 87       	std	Y+15, r24	; 0x0f
    2fba:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fbc:	88 89       	ldd	r24, Y+16	; 0x10
    2fbe:	98 17       	cp	r25, r24
    2fc0:	08 f4       	brcc	.+2      	; 0x2fc4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    2fc2:	83 cf       	rjmp	.-250    	; 0x2eca <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    2fc4:	60 96       	adiw	r28, 0x10	; 16
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	60 97       	sbiw	r28, 0x10	; 16
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2fec:	1f 86       	std	Y+15, r1	; 0x0f
    2fee:	78 c0       	rjmp	.+240    	; 0x30e0 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    2ff0:	8c e1       	ldi	r24, 0x1C	; 28
    2ff2:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	a6 e9       	ldi	r26, 0x96	; 150
    2ffc:	b3 e4       	ldi	r27, 0x43	; 67
    2ffe:	8b 87       	std	Y+11, r24	; 0x0b
    3000:	9c 87       	std	Y+12, r25	; 0x0c
    3002:	ad 87       	std	Y+13, r26	; 0x0d
    3004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3006:	6b 85       	ldd	r22, Y+11	; 0x0b
    3008:	7c 85       	ldd	r23, Y+12	; 0x0c
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a ef       	ldi	r20, 0xFA	; 250
    3014:	54 e4       	ldi	r21, 0x44	; 68
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	8f 83       	std	Y+7, r24	; 0x07
    3020:	98 87       	std	Y+8, r25	; 0x08
    3022:	a9 87       	std	Y+9, r26	; 0x09
    3024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3026:	6f 81       	ldd	r22, Y+7	; 0x07
    3028:	78 85       	ldd	r23, Y+8	; 0x08
    302a:	89 85       	ldd	r24, Y+9	; 0x09
    302c:	9a 85       	ldd	r25, Y+10	; 0x0a
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	2c f4       	brge	.+10     	; 0x3048 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	3f c0       	rjmp	.+126    	; 0x30c6 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    3048:	6f 81       	ldd	r22, Y+7	; 0x07
    304a:	78 85       	ldd	r23, Y+8	; 0x08
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	3f ef       	ldi	r19, 0xFF	; 255
    3054:	4f e7       	ldi	r20, 0x7F	; 127
    3056:	57 e4       	ldi	r21, 0x47	; 71
    3058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    305c:	18 16       	cp	r1, r24
    305e:	4c f5       	brge	.+82     	; 0x30b2 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3060:	6b 85       	ldd	r22, Y+11	; 0x0b
    3062:	7c 85       	ldd	r23, Y+12	; 0x0c
    3064:	8d 85       	ldd	r24, Y+13	; 0x0d
    3066:	9e 85       	ldd	r25, Y+14	; 0x0e
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	0f c0       	rjmp	.+30     	; 0x30a8 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    308a:	88 ec       	ldi	r24, 0xC8	; 200
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9c 83       	std	Y+4, r25	; 0x04
    3090:	8b 83       	std	Y+3, r24	; 0x03
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    309a:	9c 83       	std	Y+4, r25	; 0x04
    309c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	69 f7       	brne	.-38     	; 0x308a <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    30b0:	14 c0       	rjmp	.+40     	; 0x30da <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	6f 81       	ldd	r22, Y+7	; 0x07
    30b4:	78 85       	ldd	r23, Y+8	; 0x08
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	8d 81       	ldd	r24, Y+5	; 0x05
    30c8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    30da:	8f 85       	ldd	r24, Y+15	; 0x0f
    30dc:	8f 5f       	subi	r24, 0xFF	; 255
    30de:	8f 87       	std	Y+15, r24	; 0x0f
    30e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    30e2:	88 89       	ldd	r24, Y+16	; 0x10
    30e4:	98 17       	cp	r25, r24
    30e6:	08 f4       	brcc	.+2      	; 0x30ea <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    30e8:	83 cf       	rjmp	.-250    	; 0x2ff0 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    30ea:	60 96       	adiw	r28, 0x10	; 16
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	60 97       	sbiw	r28, 0x10	; 16
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	f8 94       	cli
    310a:	de bf       	out	0x3e, r29	; 62
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	cd bf       	out	0x3d, r28	; 61
    3110:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3112:	1f 86       	std	Y+15, r1	; 0x0f
    3114:	78 c0       	rjmp	.+240    	; 0x3206 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3116:	80 e1       	ldi	r24, 0x10	; 16
    3118:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a6 e9       	ldi	r26, 0x96	; 150
    3122:	b3 e4       	ldi	r27, 0x43	; 67
    3124:	8b 87       	std	Y+11, r24	; 0x0b
    3126:	9c 87       	std	Y+12, r25	; 0x0c
    3128:	ad 87       	std	Y+13, r26	; 0x0d
    312a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312c:	6b 85       	ldd	r22, Y+11	; 0x0b
    312e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3130:	8d 85       	ldd	r24, Y+13	; 0x0d
    3132:	9e 85       	ldd	r25, Y+14	; 0x0e
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a ef       	ldi	r20, 0xFA	; 250
    313a:	54 e4       	ldi	r21, 0x44	; 68
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	8f 83       	std	Y+7, r24	; 0x07
    3146:	98 87       	std	Y+8, r25	; 0x08
    3148:	a9 87       	std	Y+9, r26	; 0x09
    314a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    314c:	6f 81       	ldd	r22, Y+7	; 0x07
    314e:	78 85       	ldd	r23, Y+8	; 0x08
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	2c f4       	brge	.+10     	; 0x316e <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9e 83       	std	Y+6, r25	; 0x06
    316a:	8d 83       	std	Y+5, r24	; 0x05
    316c:	3f c0       	rjmp	.+126    	; 0x31ec <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    316e:	6f 81       	ldd	r22, Y+7	; 0x07
    3170:	78 85       	ldd	r23, Y+8	; 0x08
    3172:	89 85       	ldd	r24, Y+9	; 0x09
    3174:	9a 85       	ldd	r25, Y+10	; 0x0a
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	3f ef       	ldi	r19, 0xFF	; 255
    317a:	4f e7       	ldi	r20, 0x7F	; 127
    317c:	57 e4       	ldi	r21, 0x47	; 71
    317e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3182:	18 16       	cp	r1, r24
    3184:	4c f5       	brge	.+82     	; 0x31d8 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	6b 85       	ldd	r22, Y+11	; 0x0b
    3188:	7c 85       	ldd	r23, Y+12	; 0x0c
    318a:	8d 85       	ldd	r24, Y+13	; 0x0d
    318c:	9e 85       	ldd	r25, Y+14	; 0x0e
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e2       	ldi	r20, 0x20	; 32
    3194:	51 e4       	ldi	r21, 0x41	; 65
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	9e 83       	std	Y+6, r25	; 0x06
    31ac:	8d 83       	std	Y+5, r24	; 0x05
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    31b0:	88 ec       	ldi	r24, 0xC8	; 200
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9c 83       	std	Y+4, r25	; 0x04
    31b6:	8b 83       	std	Y+3, r24	; 0x03
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	9c 81       	ldd	r25, Y+4	; 0x04
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    31c0:	9c 83       	std	Y+4, r25	; 0x04
    31c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	9e 81       	ldd	r25, Y+6	; 0x06
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	69 f7       	brne	.-38     	; 0x31b0 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    31d6:	14 c0       	rjmp	.+40     	; 0x3200 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d8:	6f 81       	ldd	r22, Y+7	; 0x07
    31da:	78 85       	ldd	r23, Y+8	; 0x08
    31dc:	89 85       	ldd	r24, Y+9	; 0x09
    31de:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	9e 83       	std	Y+6, r25	; 0x06
    31ea:	8d 83       	std	Y+5, r24	; 0x05
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    31fc:	9a 83       	std	Y+2, r25	; 0x02
    31fe:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3200:	8f 85       	ldd	r24, Y+15	; 0x0f
    3202:	8f 5f       	subi	r24, 0xFF	; 255
    3204:	8f 87       	std	Y+15, r24	; 0x0f
    3206:	9f 85       	ldd	r25, Y+15	; 0x0f
    3208:	88 89       	ldd	r24, Y+16	; 0x10
    320a:	98 17       	cp	r25, r24
    320c:	08 f4       	brcc	.+2      	; 0x3210 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    320e:	83 cf       	rjmp	.-250    	; 0x3116 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    3210:	60 96       	adiw	r28, 0x10	; 16
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	60 97       	sbiw	r28, 0x10	; 16
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3238:	1f 86       	std	Y+15, r1	; 0x0f
    323a:	78 c0       	rjmp	.+240    	; 0x332c <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    323c:	84 e1       	ldi	r24, 0x14	; 20
    323e:	0e 94 b9 11 	call	0x2372	; 0x2372 <HCLCD_Vid8Bits_SendCommand>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a6 e9       	ldi	r26, 0x96	; 150
    3248:	b3 e4       	ldi	r27, 0x43	; 67
    324a:	8b 87       	std	Y+11, r24	; 0x0b
    324c:	9c 87       	std	Y+12, r25	; 0x0c
    324e:	ad 87       	std	Y+13, r26	; 0x0d
    3250:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	6b 85       	ldd	r22, Y+11	; 0x0b
    3254:	7c 85       	ldd	r23, Y+12	; 0x0c
    3256:	8d 85       	ldd	r24, Y+13	; 0x0d
    3258:	9e 85       	ldd	r25, Y+14	; 0x0e
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a ef       	ldi	r20, 0xFA	; 250
    3260:	54 e4       	ldi	r21, 0x44	; 68
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8f 83       	std	Y+7, r24	; 0x07
    326c:	98 87       	std	Y+8, r25	; 0x08
    326e:	a9 87       	std	Y+9, r26	; 0x09
    3270:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3272:	6f 81       	ldd	r22, Y+7	; 0x07
    3274:	78 85       	ldd	r23, Y+8	; 0x08
    3276:	89 85       	ldd	r24, Y+9	; 0x09
    3278:	9a 85       	ldd	r25, Y+10	; 0x0a
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9e 83       	std	Y+6, r25	; 0x06
    3290:	8d 83       	std	Y+5, r24	; 0x05
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    3294:	6f 81       	ldd	r22, Y+7	; 0x07
    3296:	78 85       	ldd	r23, Y+8	; 0x08
    3298:	89 85       	ldd	r24, Y+9	; 0x09
    329a:	9a 85       	ldd	r25, Y+10	; 0x0a
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9e 83       	std	Y+6, r25	; 0x06
    32d2:	8d 83       	std	Y+5, r24	; 0x05
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    32d6:	88 ec       	ldi	r24, 0xC8	; 200
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	9c 83       	std	Y+4, r25	; 0x04
    32dc:	8b 83       	std	Y+3, r24	; 0x03
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	9c 81       	ldd	r25, Y+4	; 0x04
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    32e6:	9c 83       	std	Y+4, r25	; 0x04
    32e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	8d 81       	ldd	r24, Y+5	; 0x05
    32f6:	9e 81       	ldd	r25, Y+6	; 0x06
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    32fc:	14 c0       	rjmp	.+40     	; 0x3326 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3300:	78 85       	ldd	r23, Y+8	; 0x08
    3302:	89 85       	ldd	r24, Y+9	; 0x09
    3304:	9a 85       	ldd	r25, Y+10	; 0x0a
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	8d 83       	std	Y+5, r24	; 0x05
    3312:	8d 81       	ldd	r24, Y+5	; 0x05
    3314:	9e 81       	ldd	r25, Y+6	; 0x06
    3316:	9a 83       	std	Y+2, r25	; 0x02
    3318:	89 83       	std	Y+1, r24	; 0x01
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	9a 81       	ldd	r25, Y+2	; 0x02
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    3322:	9a 83       	std	Y+2, r25	; 0x02
    3324:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3326:	8f 85       	ldd	r24, Y+15	; 0x0f
    3328:	8f 5f       	subi	r24, 0xFF	; 255
    332a:	8f 87       	std	Y+15, r24	; 0x0f
    332c:	9f 85       	ldd	r25, Y+15	; 0x0f
    332e:	88 89       	ldd	r24, Y+16	; 0x10
    3330:	98 17       	cp	r25, r24
    3332:	08 f4       	brcc	.+2      	; 0x3336 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    3334:	83 cf       	rjmp	.-250    	; 0x323c <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3336:	60 96       	adiw	r28, 0x10	; 16
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	08 95       	ret

00003348 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	2f 97       	sbiw	r28, 0x0f	; 15
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	62 e0       	ldi	r22, 0x02	; 2
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	62 e0       	ldi	r22, 0x02	; 2
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    3372:	84 e0       	ldi	r24, 0x04	; 4
    3374:	62 e0       	ldi	r22, 0x02	; 2
    3376:	4f 85       	ldd	r20, Y+15	; 0x0f
    3378:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    337c:	82 e0       	ldi	r24, 0x02	; 2
    337e:	62 e0       	ldi	r22, 0x02	; 2
    3380:	41 e0       	ldi	r20, 0x01	; 1
    3382:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a0 e0       	ldi	r26, 0x00	; 0
    338c:	b0 e4       	ldi	r27, 0x40	; 64
    338e:	8b 87       	std	Y+11, r24	; 0x0b
    3390:	9c 87       	std	Y+12, r25	; 0x0c
    3392:	ad 87       	std	Y+13, r26	; 0x0d
    3394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	6b 85       	ldd	r22, Y+11	; 0x0b
    3398:	7c 85       	ldd	r23, Y+12	; 0x0c
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	9e 85       	ldd	r25, Y+14	; 0x0e
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a ef       	ldi	r20, 0xFA	; 250
    33a4:	54 e4       	ldi	r21, 0x44	; 68
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8f 83       	std	Y+7, r24	; 0x07
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	a9 87       	std	Y+9, r26	; 0x09
    33b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b6:	6f 81       	ldd	r22, Y+7	; 0x07
    33b8:	78 85       	ldd	r23, Y+8	; 0x08
    33ba:	89 85       	ldd	r24, Y+9	; 0x09
    33bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    33d8:	6f 81       	ldd	r22, Y+7	; 0x07
    33da:	78 85       	ldd	r23, Y+8	; 0x08
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <HCLCD_Vid4Bits_SendCommand+0xf0>
    341a:	88 ec       	ldi	r24, 0xC8	; 200
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <HCLCD_Vid4Bits_SendCommand+0xde>
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <HCLCD_Vid4Bits_SendCommand+0xd2>
    3440:	14 c0       	rjmp	.+40     	; 0x346a <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <HCLCD_Vid4Bits_SendCommand+0x11a>
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    346a:	82 e0       	ldi	r24, 0x02	; 2
    346c:	62 e0       	ldi	r22, 0x02	; 2
    346e:	40 e0       	ldi	r20, 0x00	; 0
    3470:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
}
    3474:	2f 96       	adiw	r28, 0x0f	; 15
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	e9 97       	sbiw	r28, 0x39	; 57
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    349a:	87 e0       	ldi	r24, 0x07	; 7
    349c:	89 af       	std	Y+57, r24	; 0x39
    349e:	08 c0       	rjmp	.+16     	; 0x34b0 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    34a0:	89 ad       	ldd	r24, Y+57	; 0x39
    34a2:	62 e0       	ldi	r22, 0x02	; 2
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    34aa:	89 ad       	ldd	r24, Y+57	; 0x39
    34ac:	81 50       	subi	r24, 0x01	; 1
    34ae:	89 af       	std	Y+57, r24	; 0x39
    34b0:	89 ad       	ldd	r24, Y+57	; 0x39
    34b2:	84 30       	cpi	r24, 0x04	; 4
    34b4:	ac f7       	brge	.-22     	; 0x34a0 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	62 e0       	ldi	r22, 0x02	; 2
    34ba:	41 e0       	ldi	r20, 0x01	; 1
    34bc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	62 e0       	ldi	r22, 0x02	; 2
    34c4:	41 e0       	ldi	r20, 0x01	; 1
    34c6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    34ca:	82 e0       	ldi	r24, 0x02	; 2
    34cc:	62 e0       	ldi	r22, 0x02	; 2
    34ce:	41 e0       	ldi	r20, 0x01	; 1
    34d0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	a0 ef       	ldi	r26, 0xF0	; 240
    34da:	b1 e4       	ldi	r27, 0x41	; 65
    34dc:	8d ab       	std	Y+53, r24	; 0x35
    34de:	9e ab       	std	Y+54, r25	; 0x36
    34e0:	af ab       	std	Y+55, r26	; 0x37
    34e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e4:	6d a9       	ldd	r22, Y+53	; 0x35
    34e6:	7e a9       	ldd	r23, Y+54	; 0x36
    34e8:	8f a9       	ldd	r24, Y+55	; 0x37
    34ea:	98 ad       	ldd	r25, Y+56	; 0x38
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	4a ef       	ldi	r20, 0xFA	; 250
    34f2:	54 e4       	ldi	r21, 0x44	; 68
    34f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	89 ab       	std	Y+49, r24	; 0x31
    34fe:	9a ab       	std	Y+50, r25	; 0x32
    3500:	ab ab       	std	Y+51, r26	; 0x33
    3502:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3504:	69 a9       	ldd	r22, Y+49	; 0x31
    3506:	7a a9       	ldd	r23, Y+50	; 0x32
    3508:	8b a9       	ldd	r24, Y+51	; 0x33
    350a:	9c a9       	ldd	r25, Y+52	; 0x34
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e8       	ldi	r20, 0x80	; 128
    3512:	5f e3       	ldi	r21, 0x3F	; 63
    3514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3518:	88 23       	and	r24, r24
    351a:	2c f4       	brge	.+10     	; 0x3526 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	98 ab       	std	Y+48, r25	; 0x30
    3522:	8f a7       	std	Y+47, r24	; 0x2f
    3524:	3f c0       	rjmp	.+126    	; 0x35a4 <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    3526:	69 a9       	ldd	r22, Y+49	; 0x31
    3528:	7a a9       	ldd	r23, Y+50	; 0x32
    352a:	8b a9       	ldd	r24, Y+51	; 0x33
    352c:	9c a9       	ldd	r25, Y+52	; 0x34
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	3f ef       	ldi	r19, 0xFF	; 255
    3532:	4f e7       	ldi	r20, 0x7F	; 127
    3534:	57 e4       	ldi	r21, 0x47	; 71
    3536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    353a:	18 16       	cp	r1, r24
    353c:	4c f5       	brge	.+82     	; 0x3590 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    353e:	6d a9       	ldd	r22, Y+53	; 0x35
    3540:	7e a9       	ldd	r23, Y+54	; 0x36
    3542:	8f a9       	ldd	r24, Y+55	; 0x37
    3544:	98 ad       	ldd	r25, Y+56	; 0x38
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e2       	ldi	r20, 0x20	; 32
    354c:	51 e4       	ldi	r21, 0x41	; 65
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	bc 01       	movw	r22, r24
    3558:	cd 01       	movw	r24, r26
    355a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	98 ab       	std	Y+48, r25	; 0x30
    3564:	8f a7       	std	Y+47, r24	; 0x2f
    3566:	0f c0       	rjmp	.+30     	; 0x3586 <HCLCD_Vid4Bits_Init+0x100>
    3568:	88 ec       	ldi	r24, 0xC8	; 200
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	9e a7       	std	Y+46, r25	; 0x2e
    356e:	8d a7       	std	Y+45, r24	; 0x2d
    3570:	8d a5       	ldd	r24, Y+45	; 0x2d
    3572:	9e a5       	ldd	r25, Y+46	; 0x2e
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <HCLCD_Vid4Bits_Init+0xee>
    3578:	9e a7       	std	Y+46, r25	; 0x2e
    357a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357c:	8f a5       	ldd	r24, Y+47	; 0x2f
    357e:	98 a9       	ldd	r25, Y+48	; 0x30
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	98 ab       	std	Y+48, r25	; 0x30
    3584:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3586:	8f a5       	ldd	r24, Y+47	; 0x2f
    3588:	98 a9       	ldd	r25, Y+48	; 0x30
    358a:	00 97       	sbiw	r24, 0x00	; 0
    358c:	69 f7       	brne	.-38     	; 0x3568 <HCLCD_Vid4Bits_Init+0xe2>
    358e:	14 c0       	rjmp	.+40     	; 0x35b8 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3590:	69 a9       	ldd	r22, Y+49	; 0x31
    3592:	7a a9       	ldd	r23, Y+50	; 0x32
    3594:	8b a9       	ldd	r24, Y+51	; 0x33
    3596:	9c a9       	ldd	r25, Y+52	; 0x34
    3598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	98 ab       	std	Y+48, r25	; 0x30
    35a2:	8f a7       	std	Y+47, r24	; 0x2f
    35a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35a6:	98 a9       	ldd	r25, Y+48	; 0x30
    35a8:	9c a7       	std	Y+44, r25	; 0x2c
    35aa:	8b a7       	std	Y+43, r24	; 0x2b
    35ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    35ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <HCLCD_Vid4Bits_Init+0x12a>
    35b4:	9c a7       	std	Y+44, r25	; 0x2c
    35b6:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    35b8:	82 e0       	ldi	r24, 0x02	; 2
    35ba:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    35be:	82 e0       	ldi	r24, 0x02	; 2
    35c0:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    35c4:	88 e2       	ldi	r24, 0x28	; 40
    35c6:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	a0 e8       	ldi	r26, 0x80	; 128
    35d0:	bf e3       	ldi	r27, 0x3F	; 63
    35d2:	8f a3       	std	Y+39, r24	; 0x27
    35d4:	98 a7       	std	Y+40, r25	; 0x28
    35d6:	a9 a7       	std	Y+41, r26	; 0x29
    35d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35da:	6f a1       	ldd	r22, Y+39	; 0x27
    35dc:	78 a5       	ldd	r23, Y+40	; 0x28
    35de:	89 a5       	ldd	r24, Y+41	; 0x29
    35e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	4a ef       	ldi	r20, 0xFA	; 250
    35e8:	54 e4       	ldi	r21, 0x44	; 68
    35ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	8b a3       	std	Y+35, r24	; 0x23
    35f4:	9c a3       	std	Y+36, r25	; 0x24
    35f6:	ad a3       	std	Y+37, r26	; 0x25
    35f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35fa:	6b a1       	ldd	r22, Y+35	; 0x23
    35fc:	7c a1       	ldd	r23, Y+36	; 0x24
    35fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3600:	9e a1       	ldd	r25, Y+38	; 0x26
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e8       	ldi	r20, 0x80	; 128
    3608:	5f e3       	ldi	r21, 0x3F	; 63
    360a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    360e:	88 23       	and	r24, r24
    3610:	2c f4       	brge	.+10     	; 0x361c <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	9a a3       	std	Y+34, r25	; 0x22
    3618:	89 a3       	std	Y+33, r24	; 0x21
    361a:	3f c0       	rjmp	.+126    	; 0x369a <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    361c:	6b a1       	ldd	r22, Y+35	; 0x23
    361e:	7c a1       	ldd	r23, Y+36	; 0x24
    3620:	8d a1       	ldd	r24, Y+37	; 0x25
    3622:	9e a1       	ldd	r25, Y+38	; 0x26
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	3f ef       	ldi	r19, 0xFF	; 255
    3628:	4f e7       	ldi	r20, 0x7F	; 127
    362a:	57 e4       	ldi	r21, 0x47	; 71
    362c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3630:	18 16       	cp	r1, r24
    3632:	4c f5       	brge	.+82     	; 0x3686 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3634:	6f a1       	ldd	r22, Y+39	; 0x27
    3636:	78 a5       	ldd	r23, Y+40	; 0x28
    3638:	89 a5       	ldd	r24, Y+41	; 0x29
    363a:	9a a5       	ldd	r25, Y+42	; 0x2a
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e2       	ldi	r20, 0x20	; 32
    3642:	51 e4       	ldi	r21, 0x41	; 65
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	bc 01       	movw	r22, r24
    364e:	cd 01       	movw	r24, r26
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9a a3       	std	Y+34, r25	; 0x22
    365a:	89 a3       	std	Y+33, r24	; 0x21
    365c:	0f c0       	rjmp	.+30     	; 0x367c <HCLCD_Vid4Bits_Init+0x1f6>
    365e:	88 ec       	ldi	r24, 0xC8	; 200
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	98 a3       	std	Y+32, r25	; 0x20
    3664:	8f 8f       	std	Y+31, r24	; 0x1f
    3666:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3668:	98 a1       	ldd	r25, Y+32	; 0x20
    366a:	01 97       	sbiw	r24, 0x01	; 1
    366c:	f1 f7       	brne	.-4      	; 0x366a <HCLCD_Vid4Bits_Init+0x1e4>
    366e:	98 a3       	std	Y+32, r25	; 0x20
    3670:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3672:	89 a1       	ldd	r24, Y+33	; 0x21
    3674:	9a a1       	ldd	r25, Y+34	; 0x22
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	9a a3       	std	Y+34, r25	; 0x22
    367a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367c:	89 a1       	ldd	r24, Y+33	; 0x21
    367e:	9a a1       	ldd	r25, Y+34	; 0x22
    3680:	00 97       	sbiw	r24, 0x00	; 0
    3682:	69 f7       	brne	.-38     	; 0x365e <HCLCD_Vid4Bits_Init+0x1d8>
    3684:	14 c0       	rjmp	.+40     	; 0x36ae <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3686:	6b a1       	ldd	r22, Y+35	; 0x23
    3688:	7c a1       	ldd	r23, Y+36	; 0x24
    368a:	8d a1       	ldd	r24, Y+37	; 0x25
    368c:	9e a1       	ldd	r25, Y+38	; 0x26
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9a a3       	std	Y+34, r25	; 0x22
    3698:	89 a3       	std	Y+33, r24	; 0x21
    369a:	89 a1       	ldd	r24, Y+33	; 0x21
    369c:	9a a1       	ldd	r25, Y+34	; 0x22
    369e:	9e 8f       	std	Y+30, r25	; 0x1e
    36a0:	8d 8f       	std	Y+29, r24	; 0x1d
    36a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <HCLCD_Vid4Bits_Init+0x220>
    36aa:	9e 8f       	std	Y+30, r25	; 0x1e
    36ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    36b4:	8f e0       	ldi	r24, 0x0F	; 15
    36b6:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	a0 e8       	ldi	r26, 0x80	; 128
    36c0:	bf e3       	ldi	r27, 0x3F	; 63
    36c2:	89 8f       	std	Y+25, r24	; 0x19
    36c4:	9a 8f       	std	Y+26, r25	; 0x1a
    36c6:	ab 8f       	std	Y+27, r26	; 0x1b
    36c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ca:	69 8d       	ldd	r22, Y+25	; 0x19
    36cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	4a ef       	ldi	r20, 0xFA	; 250
    36d8:	54 e4       	ldi	r21, 0x44	; 68
    36da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	8d 8b       	std	Y+21, r24	; 0x15
    36e4:	9e 8b       	std	Y+22, r25	; 0x16
    36e6:	af 8b       	std	Y+23, r26	; 0x17
    36e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36ea:	6d 89       	ldd	r22, Y+21	; 0x15
    36ec:	7e 89       	ldd	r23, Y+22	; 0x16
    36ee:	8f 89       	ldd	r24, Y+23	; 0x17
    36f0:	98 8d       	ldd	r25, Y+24	; 0x18
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e8       	ldi	r20, 0x80	; 128
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36fe:	88 23       	and	r24, r24
    3700:	2c f4       	brge	.+10     	; 0x370c <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	9c 8b       	std	Y+20, r25	; 0x14
    3708:	8b 8b       	std	Y+19, r24	; 0x13
    370a:	3f c0       	rjmp	.+126    	; 0x378a <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    370c:	6d 89       	ldd	r22, Y+21	; 0x15
    370e:	7e 89       	ldd	r23, Y+22	; 0x16
    3710:	8f 89       	ldd	r24, Y+23	; 0x17
    3712:	98 8d       	ldd	r25, Y+24	; 0x18
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	4c f5       	brge	.+82     	; 0x3776 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3724:	69 8d       	ldd	r22, Y+25	; 0x19
    3726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    372a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e2       	ldi	r20, 0x20	; 32
    3732:	51 e4       	ldi	r21, 0x41	; 65
    3734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	9c 8b       	std	Y+20, r25	; 0x14
    374a:	8b 8b       	std	Y+19, r24	; 0x13
    374c:	0f c0       	rjmp	.+30     	; 0x376c <HCLCD_Vid4Bits_Init+0x2e6>
    374e:	88 ec       	ldi	r24, 0xC8	; 200
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	9a 8b       	std	Y+18, r25	; 0x12
    3754:	89 8b       	std	Y+17, r24	; 0x11
    3756:	89 89       	ldd	r24, Y+17	; 0x11
    3758:	9a 89       	ldd	r25, Y+18	; 0x12
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <HCLCD_Vid4Bits_Init+0x2d4>
    375e:	9a 8b       	std	Y+18, r25	; 0x12
    3760:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3762:	8b 89       	ldd	r24, Y+19	; 0x13
    3764:	9c 89       	ldd	r25, Y+20	; 0x14
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	9c 8b       	std	Y+20, r25	; 0x14
    376a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376c:	8b 89       	ldd	r24, Y+19	; 0x13
    376e:	9c 89       	ldd	r25, Y+20	; 0x14
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	69 f7       	brne	.-38     	; 0x374e <HCLCD_Vid4Bits_Init+0x2c8>
    3774:	14 c0       	rjmp	.+40     	; 0x379e <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3776:	6d 89       	ldd	r22, Y+21	; 0x15
    3778:	7e 89       	ldd	r23, Y+22	; 0x16
    377a:	8f 89       	ldd	r24, Y+23	; 0x17
    377c:	98 8d       	ldd	r25, Y+24	; 0x18
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	9c 8b       	std	Y+20, r25	; 0x14
    3788:	8b 8b       	std	Y+19, r24	; 0x13
    378a:	8b 89       	ldd	r24, Y+19	; 0x13
    378c:	9c 89       	ldd	r25, Y+20	; 0x14
    378e:	98 8b       	std	Y+16, r25	; 0x10
    3790:	8f 87       	std	Y+15, r24	; 0x0f
    3792:	8f 85       	ldd	r24, Y+15	; 0x0f
    3794:	98 89       	ldd	r25, Y+16	; 0x10
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <HCLCD_Vid4Bits_Init+0x310>
    379a:	98 8b       	std	Y+16, r25	; 0x10
    379c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	a0 e0       	ldi	r26, 0x00	; 0
    37b0:	b0 e4       	ldi	r27, 0x40	; 64
    37b2:	8b 87       	std	Y+11, r24	; 0x0b
    37b4:	9c 87       	std	Y+12, r25	; 0x0c
    37b6:	ad 87       	std	Y+13, r26	; 0x0d
    37b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    37bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    37be:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a ef       	ldi	r20, 0xFA	; 250
    37c8:	54 e4       	ldi	r21, 0x44	; 68
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	8f 83       	std	Y+7, r24	; 0x07
    37d4:	98 87       	std	Y+8, r25	; 0x08
    37d6:	a9 87       	std	Y+9, r26	; 0x09
    37d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37da:	6f 81       	ldd	r22, Y+7	; 0x07
    37dc:	78 85       	ldd	r23, Y+8	; 0x08
    37de:	89 85       	ldd	r24, Y+9	; 0x09
    37e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	2c f4       	brge	.+10     	; 0x37fc <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	9e 83       	std	Y+6, r25	; 0x06
    37f8:	8d 83       	std	Y+5, r24	; 0x05
    37fa:	3f c0       	rjmp	.+126    	; 0x387a <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    37fc:	6f 81       	ldd	r22, Y+7	; 0x07
    37fe:	78 85       	ldd	r23, Y+8	; 0x08
    3800:	89 85       	ldd	r24, Y+9	; 0x09
    3802:	9a 85       	ldd	r25, Y+10	; 0x0a
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	4f e7       	ldi	r20, 0x7F	; 127
    380a:	57 e4       	ldi	r21, 0x47	; 71
    380c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3810:	18 16       	cp	r1, r24
    3812:	4c f5       	brge	.+82     	; 0x3866 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3814:	6b 85       	ldd	r22, Y+11	; 0x0b
    3816:	7c 85       	ldd	r23, Y+12	; 0x0c
    3818:	8d 85       	ldd	r24, Y+13	; 0x0d
    381a:	9e 85       	ldd	r25, Y+14	; 0x0e
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e2       	ldi	r20, 0x20	; 32
    3822:	51 e4       	ldi	r21, 0x41	; 65
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	9e 83       	std	Y+6, r25	; 0x06
    383a:	8d 83       	std	Y+5, r24	; 0x05
    383c:	0f c0       	rjmp	.+30     	; 0x385c <HCLCD_Vid4Bits_Init+0x3d6>
    383e:	88 ec       	ldi	r24, 0xC8	; 200
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9c 83       	std	Y+4, r25	; 0x04
    3844:	8b 83       	std	Y+3, r24	; 0x03
    3846:	8b 81       	ldd	r24, Y+3	; 0x03
    3848:	9c 81       	ldd	r25, Y+4	; 0x04
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <HCLCD_Vid4Bits_Init+0x3c4>
    384e:	9c 83       	std	Y+4, r25	; 0x04
    3850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3852:	8d 81       	ldd	r24, Y+5	; 0x05
    3854:	9e 81       	ldd	r25, Y+6	; 0x06
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	9e 83       	std	Y+6, r25	; 0x06
    385a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385c:	8d 81       	ldd	r24, Y+5	; 0x05
    385e:	9e 81       	ldd	r25, Y+6	; 0x06
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	69 f7       	brne	.-38     	; 0x383e <HCLCD_Vid4Bits_Init+0x3b8>
    3864:	14 c0       	rjmp	.+40     	; 0x388e <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	6f 81       	ldd	r22, Y+7	; 0x07
    3868:	78 85       	ldd	r23, Y+8	; 0x08
    386a:	89 85       	ldd	r24, Y+9	; 0x09
    386c:	9a 85       	ldd	r25, Y+10	; 0x0a
    386e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	9e 83       	std	Y+6, r25	; 0x06
    3878:	8d 83       	std	Y+5, r24	; 0x05
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	9e 81       	ldd	r25, Y+6	; 0x06
    387e:	9a 83       	std	Y+2, r25	; 0x02
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	9a 81       	ldd	r25, Y+2	; 0x02
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <HCLCD_Vid4Bits_Init+0x400>
    388a:	9a 83       	std	Y+2, r25	; 0x02
    388c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    3894:	86 e0       	ldi	r24, 0x06	; 6
    3896:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
}
    389a:	e9 96       	adiw	r28, 0x39	; 57
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	f8 94       	cli
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	cf 91       	pop	r28
    38a8:	df 91       	pop	r29
    38aa:	08 95       	ret

000038ac <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    38ac:	df 93       	push	r29
    38ae:	cf 93       	push	r28
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	2f 97       	sbiw	r28, 0x0f	; 15
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	62 e0       	ldi	r22, 0x02	; 2
    38c6:	41 e0       	ldi	r20, 0x01	; 1
    38c8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	62 e0       	ldi	r22, 0x02	; 2
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    38d6:	84 e0       	ldi	r24, 0x04	; 4
    38d8:	62 e0       	ldi	r22, 0x02	; 2
    38da:	4f 85       	ldd	r20, Y+15	; 0x0f
    38dc:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    38e0:	82 e0       	ldi	r24, 0x02	; 2
    38e2:	62 e0       	ldi	r22, 0x02	; 2
    38e4:	41 e0       	ldi	r20, 0x01	; 1
    38e6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	a0 e0       	ldi	r26, 0x00	; 0
    38f0:	b0 e4       	ldi	r27, 0x40	; 64
    38f2:	8b 87       	std	Y+11, r24	; 0x0b
    38f4:	9c 87       	std	Y+12, r25	; 0x0c
    38f6:	ad 87       	std	Y+13, r26	; 0x0d
    38f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3900:	9e 85       	ldd	r25, Y+14	; 0x0e
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	4a ef       	ldi	r20, 0xFA	; 250
    3908:	54 e4       	ldi	r21, 0x44	; 68
    390a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	8f 83       	std	Y+7, r24	; 0x07
    3914:	98 87       	std	Y+8, r25	; 0x08
    3916:	a9 87       	std	Y+9, r26	; 0x09
    3918:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    391a:	6f 81       	ldd	r22, Y+7	; 0x07
    391c:	78 85       	ldd	r23, Y+8	; 0x08
    391e:	89 85       	ldd	r24, Y+9	; 0x09
    3920:	9a 85       	ldd	r25, Y+10	; 0x0a
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e8       	ldi	r20, 0x80	; 128
    3928:	5f e3       	ldi	r21, 0x3F	; 63
    392a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    392e:	88 23       	and	r24, r24
    3930:	2c f4       	brge	.+10     	; 0x393c <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	9e 83       	std	Y+6, r25	; 0x06
    3938:	8d 83       	std	Y+5, r24	; 0x05
    393a:	3f c0       	rjmp	.+126    	; 0x39ba <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    393c:	6f 81       	ldd	r22, Y+7	; 0x07
    393e:	78 85       	ldd	r23, Y+8	; 0x08
    3940:	89 85       	ldd	r24, Y+9	; 0x09
    3942:	9a 85       	ldd	r25, Y+10	; 0x0a
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	3f ef       	ldi	r19, 0xFF	; 255
    3948:	4f e7       	ldi	r20, 0x7F	; 127
    394a:	57 e4       	ldi	r21, 0x47	; 71
    394c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3950:	18 16       	cp	r1, r24
    3952:	4c f5       	brge	.+82     	; 0x39a6 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3954:	6b 85       	ldd	r22, Y+11	; 0x0b
    3956:	7c 85       	ldd	r23, Y+12	; 0x0c
    3958:	8d 85       	ldd	r24, Y+13	; 0x0d
    395a:	9e 85       	ldd	r25, Y+14	; 0x0e
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	40 e2       	ldi	r20, 0x20	; 32
    3962:	51 e4       	ldi	r21, 0x41	; 65
    3964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	bc 01       	movw	r22, r24
    396e:	cd 01       	movw	r24, r26
    3970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	9e 83       	std	Y+6, r25	; 0x06
    397a:	8d 83       	std	Y+5, r24	; 0x05
    397c:	0f c0       	rjmp	.+30     	; 0x399c <HCLCD_VidWriteChar_4Bits+0xf0>
    397e:	88 ec       	ldi	r24, 0xC8	; 200
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	9c 83       	std	Y+4, r25	; 0x04
    3984:	8b 83       	std	Y+3, r24	; 0x03
    3986:	8b 81       	ldd	r24, Y+3	; 0x03
    3988:	9c 81       	ldd	r25, Y+4	; 0x04
    398a:	01 97       	sbiw	r24, 0x01	; 1
    398c:	f1 f7       	brne	.-4      	; 0x398a <HCLCD_VidWriteChar_4Bits+0xde>
    398e:	9c 83       	std	Y+4, r25	; 0x04
    3990:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3992:	8d 81       	ldd	r24, Y+5	; 0x05
    3994:	9e 81       	ldd	r25, Y+6	; 0x06
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	9e 83       	std	Y+6, r25	; 0x06
    399a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399c:	8d 81       	ldd	r24, Y+5	; 0x05
    399e:	9e 81       	ldd	r25, Y+6	; 0x06
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	69 f7       	brne	.-38     	; 0x397e <HCLCD_VidWriteChar_4Bits+0xd2>
    39a4:	14 c0       	rjmp	.+40     	; 0x39ce <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a6:	6f 81       	ldd	r22, Y+7	; 0x07
    39a8:	78 85       	ldd	r23, Y+8	; 0x08
    39aa:	89 85       	ldd	r24, Y+9	; 0x09
    39ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	9e 83       	std	Y+6, r25	; 0x06
    39b8:	8d 83       	std	Y+5, r24	; 0x05
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	9e 81       	ldd	r25, Y+6	; 0x06
    39be:	9a 83       	std	Y+2, r25	; 0x02
    39c0:	89 83       	std	Y+1, r24	; 0x01
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	9a 81       	ldd	r25, Y+2	; 0x02
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	f1 f7       	brne	.-4      	; 0x39c6 <HCLCD_VidWriteChar_4Bits+0x11a>
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    39ce:	82 e0       	ldi	r24, 0x02	; 2
    39d0:	62 e0       	ldi	r22, 0x02	; 2
    39d2:	40 e0       	ldi	r20, 0x00	; 0
    39d4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_Error_State_SetPinValue>
}
    39d8:	2f 96       	adiw	r28, 0x0f	; 15
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	cf 91       	pop	r28
    39e6:	df 91       	pop	r29
    39e8:	08 95       	ret

000039ea <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    39ea:	df 93       	push	r29
    39ec:	cf 93       	push	r28
    39ee:	0f 92       	push	r0
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	82 95       	swap	r24
    39fa:	8f 70       	andi	r24, 0x0F	; 15
    39fc:	0e 94 56 1c 	call	0x38ac	; 0x38ac <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	0e 94 56 1c 	call	0x38ac	; 0x38ac <HCLCD_VidWriteChar_4Bits>
}
    3a06:	0f 90       	pop	r0
    3a08:	cf 91       	pop	r28
    3a0a:	df 91       	pop	r29
    3a0c:	08 95       	ret

00003a0e <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <HCLCD_Vid4Bits_DisplayString+0x6>
    3a14:	0f 92       	push	r0
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	9b 83       	std	Y+3, r25	; 0x03
    3a1c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3a1e:	19 82       	std	Y+1, r1	; 0x01
    3a20:	0e c0       	rjmp	.+28     	; 0x3a3e <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	28 2f       	mov	r18, r24
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	e2 0f       	add	r30, r18
    3a30:	f3 1f       	adc	r31, r19
    3a32:	80 81       	ld	r24, Z
    3a34:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	8f 5f       	subi	r24, 0xFF	; 255
    3a3c:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	28 2f       	mov	r18, r24
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	9b 81       	ldd	r25, Y+3	; 0x03
    3a48:	fc 01       	movw	r30, r24
    3a4a:	e2 0f       	add	r30, r18
    3a4c:	f3 1f       	adc	r31, r19
    3a4e:	80 81       	ld	r24, Z
    3a50:	88 23       	and	r24, r24
    3a52:	39 f7       	brne	.-50     	; 0x3a22 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3a60:	0f 93       	push	r16
    3a62:	1f 93       	push	r17
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	60 97       	sbiw	r28, 0x10	; 16
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	f8 94       	cli
    3a72:	de bf       	out	0x3e, r29	; 62
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	cd bf       	out	0x3d, r28	; 61
    3a78:	6d 87       	std	Y+13, r22	; 0x0d
    3a7a:	7e 87       	std	Y+14, r23	; 0x0e
    3a7c:	8f 87       	std	Y+15, r24	; 0x0f
    3a7e:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3a80:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a86:	af 85       	ldd	r26, Y+15	; 0x0f
    3a88:	b8 89       	ldd	r27, Y+16	; 0x10
    3a8a:	00 97       	sbiw	r24, 0x00	; 0
    3a8c:	a1 05       	cpc	r26, r1
    3a8e:	b1 05       	cpc	r27, r1
    3a90:	09 f4       	brne	.+2      	; 0x3a94 <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3a92:	4f c0       	rjmp	.+158    	; 0x3b32 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3a94:	2d c0       	rjmp	.+90     	; 0x3af0 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3a96:	8a 81       	ldd	r24, Y+2	; 0x02
    3a98:	08 2f       	mov	r16, r24
    3a9a:	10 e0       	ldi	r17, 0x00	; 0
    3a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa0:	af 85       	ldd	r26, Y+15	; 0x0f
    3aa2:	b8 89       	ldd	r27, Y+16	; 0x10
    3aa4:	2a e0       	ldi	r18, 0x0A	; 10
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	40 e0       	ldi	r20, 0x00	; 0
    3aaa:	50 e0       	ldi	r21, 0x00	; 0
    3aac:	bc 01       	movw	r22, r24
    3aae:	cd 01       	movw	r24, r26
    3ab0:	0e 94 0a 23 	call	0x4614	; 0x4614 <__udivmodsi4>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	28 2f       	mov	r18, r24
    3aba:	ce 01       	movw	r24, r28
    3abc:	03 96       	adiw	r24, 0x03	; 3
    3abe:	fc 01       	movw	r30, r24
    3ac0:	e0 0f       	add	r30, r16
    3ac2:	f1 1f       	adc	r31, r17
    3ac4:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aca:	af 85       	ldd	r26, Y+15	; 0x0f
    3acc:	b8 89       	ldd	r27, Y+16	; 0x10
    3ace:	2a e0       	ldi	r18, 0x0A	; 10
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e0       	ldi	r20, 0x00	; 0
    3ad4:	50 e0       	ldi	r21, 0x00	; 0
    3ad6:	bc 01       	movw	r22, r24
    3ad8:	cd 01       	movw	r24, r26
    3ada:	0e 94 0a 23 	call	0x4614	; 0x4614 <__udivmodsi4>
    3ade:	da 01       	movw	r26, r20
    3ae0:	c9 01       	movw	r24, r18
    3ae2:	8d 87       	std	Y+13, r24	; 0x0d
    3ae4:	9e 87       	std	Y+14, r25	; 0x0e
    3ae6:	af 87       	std	Y+15, r26	; 0x0f
    3ae8:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3aea:	8a 81       	ldd	r24, Y+2	; 0x02
    3aec:	8f 5f       	subi	r24, 0xFF	; 255
    3aee:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3af4:	af 85       	ldd	r26, Y+15	; 0x0f
    3af6:	b8 89       	ldd	r27, Y+16	; 0x10
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	a1 05       	cpc	r26, r1
    3afc:	b1 05       	cpc	r27, r1
    3afe:	59 f6       	brne	.-106    	; 0x3a96 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3b00:	8a 81       	ldd	r24, Y+2	; 0x02
    3b02:	81 50       	subi	r24, 0x01	; 1
    3b04:	89 83       	std	Y+1, r24	; 0x01
    3b06:	11 c0       	rjmp	.+34     	; 0x3b2a <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	33 27       	eor	r19, r19
    3b0e:	27 fd       	sbrc	r18, 7
    3b10:	30 95       	com	r19
    3b12:	ce 01       	movw	r24, r28
    3b14:	03 96       	adiw	r24, 0x03	; 3
    3b16:	fc 01       	movw	r30, r24
    3b18:	e2 0f       	add	r30, r18
    3b1a:	f3 1f       	adc	r31, r19
    3b1c:	80 81       	ld	r24, Z
    3b1e:	80 5d       	subi	r24, 0xD0	; 208
    3b20:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	81 50       	subi	r24, 0x01	; 1
    3b28:	89 83       	std	Y+1, r24	; 0x01
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	88 23       	and	r24, r24
    3b2e:	64 f7       	brge	.-40     	; 0x3b08 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3b30:	03 c0       	rjmp	.+6      	; 0x3b38 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3b32:	80 e3       	ldi	r24, 0x30	; 48
    3b34:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3b38:	60 96       	adiw	r28, 0x10	; 16
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	cd bf       	out	0x3d, r28	; 61
    3b44:	cf 91       	pop	r28
    3b46:	df 91       	pop	r29
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	08 95       	ret

00003b4e <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	00 d0       	rcall	.+0      	; 0x3b54 <HCLCD_Vid4Bits_SetPosition+0x6>
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	89 83       	std	Y+1, r24	; 0x01
    3b5a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	81 30       	cpi	r24, 0x01	; 1
    3b60:	b9 f4       	brne	.+46     	; 0x3b90 <HCLCD_Vid4Bits_SetPosition+0x42>
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	80 31       	cpi	r24, 0x10	; 16
    3b66:	a0 f4       	brcc	.+40     	; 0x3b90 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	88 2f       	mov	r24, r24
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	80 58       	subi	r24, 0x80	; 128
    3b70:	9f 4f       	sbci	r25, 0xFF	; 255
    3b72:	95 95       	asr	r25
    3b74:	87 95       	ror	r24
    3b76:	95 95       	asr	r25
    3b78:	87 95       	ror	r24
    3b7a:	95 95       	asr	r25
    3b7c:	87 95       	ror	r24
    3b7e:	95 95       	asr	r25
    3b80:	87 95       	ror	r24
    3b82:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3b86:	8a 81       	ldd	r24, Y+2	; 0x02
    3b88:	80 58       	subi	r24, 0x80	; 128
    3b8a:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    3b8e:	19 c0       	rjmp	.+50     	; 0x3bc2 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	82 30       	cpi	r24, 0x02	; 2
    3b94:	b1 f4       	brne	.+44     	; 0x3bc2 <HCLCD_Vid4Bits_SetPosition+0x74>
    3b96:	8a 81       	ldd	r24, Y+2	; 0x02
    3b98:	80 31       	cpi	r24, 0x10	; 16
    3b9a:	98 f4       	brcc	.+38     	; 0x3bc2 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	88 2f       	mov	r24, r24
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	80 54       	subi	r24, 0x40	; 64
    3ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba6:	95 95       	asr	r25
    3ba8:	87 95       	ror	r24
    3baa:	95 95       	asr	r25
    3bac:	87 95       	ror	r24
    3bae:	95 95       	asr	r25
    3bb0:	87 95       	ror	r24
    3bb2:	95 95       	asr	r25
    3bb4:	87 95       	ror	r24
    3bb6:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3bba:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbc:	80 54       	subi	r24, 0x40	; 64
    3bbe:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	cf 91       	pop	r28
    3bc8:	df 91       	pop	r29
    3bca:	08 95       	ret

00003bcc <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3bcc:	df 93       	push	r29
    3bce:	cf 93       	push	r28
    3bd0:	00 d0       	rcall	.+0      	; 0x3bd2 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3bd2:	00 d0       	rcall	.+0      	; 0x3bd4 <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	8a 83       	std	Y+2, r24	; 0x02
    3bda:	7c 83       	std	Y+4, r23	; 0x04
    3bdc:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	88 30       	cpi	r24, 0x08	; 8
    3be2:	98 f5       	brcc	.+102    	; 0x3c4a <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3be4:	8a 81       	ldd	r24, Y+2	; 0x02
    3be6:	88 2f       	mov	r24, r24
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	08 96       	adiw	r24, 0x08	; 8
    3bec:	88 0f       	add	r24, r24
    3bee:	99 1f       	adc	r25, r25
    3bf0:	88 0f       	add	r24, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	95 95       	asr	r25
    3bfa:	87 95       	ror	r24
    3bfc:	95 95       	asr	r25
    3bfe:	87 95       	ror	r24
    3c00:	95 95       	asr	r25
    3c02:	87 95       	ror	r24
    3c04:	95 95       	asr	r25
    3c06:	87 95       	ror	r24
    3c08:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0e:	88 2f       	mov	r24, r24
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	08 96       	adiw	r24, 0x08	; 8
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	88 0f       	add	r24, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	88 0f       	add	r24, r24
    3c1e:	99 1f       	adc	r25, r25
    3c20:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3c24:	19 82       	std	Y+1, r1	; 0x01
    3c26:	0e c0       	rjmp	.+28     	; 0x3c44 <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	28 2f       	mov	r18, r24
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c30:	9c 81       	ldd	r25, Y+4	; 0x04
    3c32:	fc 01       	movw	r30, r24
    3c34:	e2 0f       	add	r30, r18
    3c36:	f3 1f       	adc	r31, r19
    3c38:	80 81       	ld	r24, Z
    3c3a:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	8f 5f       	subi	r24, 0xFF	; 255
    3c42:	89 83       	std	Y+1, r24	; 0x01
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	88 30       	cpi	r24, 0x08	; 8
    3c48:	78 f3       	brcs	.-34     	; 0x3c28 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	08 95       	ret

00003c58 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	2e 97       	sbiw	r28, 0x0e	; 14
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	a0 e0       	ldi	r26, 0x00	; 0
    3c7e:	b0 e4       	ldi	r27, 0x40	; 64
    3c80:	8b 87       	std	Y+11, r24	; 0x0b
    3c82:	9c 87       	std	Y+12, r25	; 0x0c
    3c84:	ad 87       	std	Y+13, r26	; 0x0d
    3c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	4a ef       	ldi	r20, 0xFA	; 250
    3c96:	54 e4       	ldi	r21, 0x44	; 68
    3c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	8f 83       	std	Y+7, r24	; 0x07
    3ca2:	98 87       	std	Y+8, r25	; 0x08
    3ca4:	a9 87       	std	Y+9, r26	; 0x09
    3ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    3caa:	78 85       	ldd	r23, Y+8	; 0x08
    3cac:	89 85       	ldd	r24, Y+9	; 0x09
    3cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e8       	ldi	r20, 0x80	; 128
    3cb6:	5f e3       	ldi	r21, 0x3F	; 63
    3cb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cbc:	88 23       	and	r24, r24
    3cbe:	2c f4       	brge	.+10     	; 0x3cca <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	9e 83       	std	Y+6, r25	; 0x06
    3cc6:	8d 83       	std	Y+5, r24	; 0x05
    3cc8:	3f c0       	rjmp	.+126    	; 0x3d48 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3cca:	6f 81       	ldd	r22, Y+7	; 0x07
    3ccc:	78 85       	ldd	r23, Y+8	; 0x08
    3cce:	89 85       	ldd	r24, Y+9	; 0x09
    3cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	3f ef       	ldi	r19, 0xFF	; 255
    3cd6:	4f e7       	ldi	r20, 0x7F	; 127
    3cd8:	57 e4       	ldi	r21, 0x47	; 71
    3cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cde:	18 16       	cp	r1, r24
    3ce0:	4c f5       	brge	.+82     	; 0x3d34 <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e2       	ldi	r20, 0x20	; 32
    3cf0:	51 e4       	ldi	r21, 0x41	; 65
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	9e 83       	std	Y+6, r25	; 0x06
    3d08:	8d 83       	std	Y+5, r24	; 0x05
    3d0a:	0f c0       	rjmp	.+30     	; 0x3d2a <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3d0c:	88 ec       	ldi	r24, 0xC8	; 200
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	9c 83       	std	Y+4, r25	; 0x04
    3d12:	8b 83       	std	Y+3, r24	; 0x03
    3d14:	8b 81       	ldd	r24, Y+3	; 0x03
    3d16:	9c 81       	ldd	r25, Y+4	; 0x04
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	f1 f7       	brne	.-4      	; 0x3d18 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3d1c:	9c 83       	std	Y+4, r25	; 0x04
    3d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d20:	8d 81       	ldd	r24, Y+5	; 0x05
    3d22:	9e 81       	ldd	r25, Y+6	; 0x06
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	9e 83       	std	Y+6, r25	; 0x06
    3d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	69 f7       	brne	.-38     	; 0x3d0c <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3d32:	14 c0       	rjmp	.+40     	; 0x3d5c <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d34:	6f 81       	ldd	r22, Y+7	; 0x07
    3d36:	78 85       	ldd	r23, Y+8	; 0x08
    3d38:	89 85       	ldd	r24, Y+9	; 0x09
    3d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9e 83       	std	Y+6, r25	; 0x06
    3d46:	8d 83       	std	Y+5, r24	; 0x05
    3d48:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4c:	9a 83       	std	Y+2, r25	; 0x02
    3d4e:	89 83       	std	Y+1, r24	; 0x01
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	9a 81       	ldd	r25, Y+2	; 0x02
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3d5c:	2e 96       	adiw	r28, 0x0e	; 14
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	f8 94       	cli
    3d62:	de bf       	out	0x3e, r29	; 62
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	cd bf       	out	0x3d, r28	; 61
    3d68:	cf 91       	pop	r28
    3d6a:	df 91       	pop	r29
    3d6c:	08 95       	ret

00003d6e <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3d6e:	df 93       	push	r29
    3d70:	cf 93       	push	r28
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
    3d76:	60 97       	sbiw	r28, 0x10	; 16
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	f8 94       	cli
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	cd bf       	out	0x3d, r28	; 61
    3d82:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3d84:	1f 86       	std	Y+15, r1	; 0x0f
    3d86:	7b c0       	rjmp	.+246    	; 0x3e7e <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3d8e:	88 e1       	ldi	r24, 0x18	; 24
    3d90:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	a6 e9       	ldi	r26, 0x96	; 150
    3d9a:	b3 e4       	ldi	r27, 0x43	; 67
    3d9c:	8b 87       	std	Y+11, r24	; 0x0b
    3d9e:	9c 87       	std	Y+12, r25	; 0x0c
    3da0:	ad 87       	std	Y+13, r26	; 0x0d
    3da2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	4a ef       	ldi	r20, 0xFA	; 250
    3db2:	54 e4       	ldi	r21, 0x44	; 68
    3db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	8f 83       	std	Y+7, r24	; 0x07
    3dbe:	98 87       	std	Y+8, r25	; 0x08
    3dc0:	a9 87       	std	Y+9, r26	; 0x09
    3dc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc6:	78 85       	ldd	r23, Y+8	; 0x08
    3dc8:	89 85       	ldd	r24, Y+9	; 0x09
    3dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	40 e8       	ldi	r20, 0x80	; 128
    3dd2:	5f e3       	ldi	r21, 0x3F	; 63
    3dd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dd8:	88 23       	and	r24, r24
    3dda:	2c f4       	brge	.+10     	; 0x3de6 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	9e 83       	std	Y+6, r25	; 0x06
    3de2:	8d 83       	std	Y+5, r24	; 0x05
    3de4:	3f c0       	rjmp	.+126    	; 0x3e64 <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    3de6:	6f 81       	ldd	r22, Y+7	; 0x07
    3de8:	78 85       	ldd	r23, Y+8	; 0x08
    3dea:	89 85       	ldd	r24, Y+9	; 0x09
    3dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	3f ef       	ldi	r19, 0xFF	; 255
    3df2:	4f e7       	ldi	r20, 0x7F	; 127
    3df4:	57 e4       	ldi	r21, 0x47	; 71
    3df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dfa:	18 16       	cp	r1, r24
    3dfc:	4c f5       	brge	.+82     	; 0x3e50 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e2       	ldi	r20, 0x20	; 32
    3e0c:	51 e4       	ldi	r21, 0x41	; 65
    3e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	bc 01       	movw	r22, r24
    3e18:	cd 01       	movw	r24, r26
    3e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	9e 83       	std	Y+6, r25	; 0x06
    3e24:	8d 83       	std	Y+5, r24	; 0x05
    3e26:	0f c0       	rjmp	.+30     	; 0x3e46 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3e28:	88 ec       	ldi	r24, 0xC8	; 200
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	9c 83       	std	Y+4, r25	; 0x04
    3e2e:	8b 83       	std	Y+3, r24	; 0x03
    3e30:	8b 81       	ldd	r24, Y+3	; 0x03
    3e32:	9c 81       	ldd	r25, Y+4	; 0x04
    3e34:	01 97       	sbiw	r24, 0x01	; 1
    3e36:	f1 f7       	brne	.-4      	; 0x3e34 <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3e38:	9c 83       	std	Y+4, r25	; 0x04
    3e3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	9e 83       	std	Y+6, r25	; 0x06
    3e44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e46:	8d 81       	ldd	r24, Y+5	; 0x05
    3e48:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4a:	00 97       	sbiw	r24, 0x00	; 0
    3e4c:	69 f7       	brne	.-38     	; 0x3e28 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    3e4e:	14 c0       	rjmp	.+40     	; 0x3e78 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e50:	6f 81       	ldd	r22, Y+7	; 0x07
    3e52:	78 85       	ldd	r23, Y+8	; 0x08
    3e54:	89 85       	ldd	r24, Y+9	; 0x09
    3e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	9e 83       	std	Y+6, r25	; 0x06
    3e62:	8d 83       	std	Y+5, r24	; 0x05
    3e64:	8d 81       	ldd	r24, Y+5	; 0x05
    3e66:	9e 81       	ldd	r25, Y+6	; 0x06
    3e68:	9a 83       	std	Y+2, r25	; 0x02
    3e6a:	89 83       	std	Y+1, r24	; 0x01
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    3e74:	9a 83       	std	Y+2, r25	; 0x02
    3e76:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e7a:	8f 5f       	subi	r24, 0xFF	; 255
    3e7c:	8f 87       	std	Y+15, r24	; 0x0f
    3e7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e80:	88 89       	ldd	r24, Y+16	; 0x10
    3e82:	98 17       	cp	r25, r24
    3e84:	08 f4       	brcc	.+2      	; 0x3e88 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    3e86:	80 cf       	rjmp	.-256    	; 0x3d88 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3e88:	60 96       	adiw	r28, 0x10	; 16
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	de bf       	out	0x3e, r29	; 62
    3e90:	0f be       	out	0x3f, r0	; 63
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	cf 91       	pop	r28
    3e96:	df 91       	pop	r29
    3e98:	08 95       	ret

00003e9a <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	60 97       	sbiw	r28, 0x10	; 16
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3eb0:	1f 86       	std	Y+15, r1	; 0x0f
    3eb2:	7b c0       	rjmp	.+246    	; 0x3faa <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3eba:	8c e1       	ldi	r24, 0x1C	; 28
    3ebc:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	a6 e9       	ldi	r26, 0x96	; 150
    3ec6:	b3 e4       	ldi	r27, 0x43	; 67
    3ec8:	8b 87       	std	Y+11, r24	; 0x0b
    3eca:	9c 87       	std	Y+12, r25	; 0x0c
    3ecc:	ad 87       	std	Y+13, r26	; 0x0d
    3ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	4a ef       	ldi	r20, 0xFA	; 250
    3ede:	54 e4       	ldi	r21, 0x44	; 68
    3ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	8f 83       	std	Y+7, r24	; 0x07
    3eea:	98 87       	std	Y+8, r25	; 0x08
    3eec:	a9 87       	std	Y+9, r26	; 0x09
    3eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef2:	78 85       	ldd	r23, Y+8	; 0x08
    3ef4:	89 85       	ldd	r24, Y+9	; 0x09
    3ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	40 e8       	ldi	r20, 0x80	; 128
    3efe:	5f e3       	ldi	r21, 0x3F	; 63
    3f00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f04:	88 23       	and	r24, r24
    3f06:	2c f4       	brge	.+10     	; 0x3f12 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	9e 83       	std	Y+6, r25	; 0x06
    3f0e:	8d 83       	std	Y+5, r24	; 0x05
    3f10:	3f c0       	rjmp	.+126    	; 0x3f90 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    3f12:	6f 81       	ldd	r22, Y+7	; 0x07
    3f14:	78 85       	ldd	r23, Y+8	; 0x08
    3f16:	89 85       	ldd	r24, Y+9	; 0x09
    3f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	3f ef       	ldi	r19, 0xFF	; 255
    3f1e:	4f e7       	ldi	r20, 0x7F	; 127
    3f20:	57 e4       	ldi	r21, 0x47	; 71
    3f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f26:	18 16       	cp	r1, r24
    3f28:	4c f5       	brge	.+82     	; 0x3f7c <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	40 e2       	ldi	r20, 0x20	; 32
    3f38:	51 e4       	ldi	r21, 0x41	; 65
    3f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	bc 01       	movw	r22, r24
    3f44:	cd 01       	movw	r24, r26
    3f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	9e 83       	std	Y+6, r25	; 0x06
    3f50:	8d 83       	std	Y+5, r24	; 0x05
    3f52:	0f c0       	rjmp	.+30     	; 0x3f72 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    3f54:	88 ec       	ldi	r24, 0xC8	; 200
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	9c 83       	std	Y+4, r25	; 0x04
    3f5a:	8b 83       	std	Y+3, r24	; 0x03
    3f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	f1 f7       	brne	.-4      	; 0x3f60 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    3f64:	9c 83       	std	Y+4, r25	; 0x04
    3f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f68:	8d 81       	ldd	r24, Y+5	; 0x05
    3f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	9e 83       	std	Y+6, r25	; 0x06
    3f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
    3f74:	9e 81       	ldd	r25, Y+6	; 0x06
    3f76:	00 97       	sbiw	r24, 0x00	; 0
    3f78:	69 f7       	brne	.-38     	; 0x3f54 <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    3f7a:	14 c0       	rjmp	.+40     	; 0x3fa4 <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f7e:	78 85       	ldd	r23, Y+8	; 0x08
    3f80:	89 85       	ldd	r24, Y+9	; 0x09
    3f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	9e 83       	std	Y+6, r25	; 0x06
    3f8e:	8d 83       	std	Y+5, r24	; 0x05
    3f90:	8d 81       	ldd	r24, Y+5	; 0x05
    3f92:	9e 81       	ldd	r25, Y+6	; 0x06
    3f94:	9a 83       	std	Y+2, r25	; 0x02
    3f96:	89 83       	std	Y+1, r24	; 0x01
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    3fa0:	9a 83       	std	Y+2, r25	; 0x02
    3fa2:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3fa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fa6:	8f 5f       	subi	r24, 0xFF	; 255
    3fa8:	8f 87       	std	Y+15, r24	; 0x0f
    3faa:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fac:	88 89       	ldd	r24, Y+16	; 0x10
    3fae:	98 17       	cp	r25, r24
    3fb0:	08 f4       	brcc	.+2      	; 0x3fb4 <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    3fb2:	80 cf       	rjmp	.-256    	; 0x3eb4 <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    3fb4:	60 96       	adiw	r28, 0x10	; 16
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	cd bf       	out	0x3d, r28	; 61
    3fc0:	cf 91       	pop	r28
    3fc2:	df 91       	pop	r29
    3fc4:	08 95       	ret

00003fc6 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    3fc6:	df 93       	push	r29
    3fc8:	cf 93       	push	r28
    3fca:	cd b7       	in	r28, 0x3d	; 61
    3fcc:	de b7       	in	r29, 0x3e	; 62
    3fce:	60 97       	sbiw	r28, 0x10	; 16
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	f8 94       	cli
    3fd4:	de bf       	out	0x3e, r29	; 62
    3fd6:	0f be       	out	0x3f, r0	; 63
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3fdc:	1f 86       	std	Y+15, r1	; 0x0f
    3fde:	7b c0       	rjmp	.+246    	; 0x40d6 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3fe6:	80 e1       	ldi	r24, 0x10	; 16
    3fe8:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	a6 e9       	ldi	r26, 0x96	; 150
    3ff2:	b3 e4       	ldi	r27, 0x43	; 67
    3ff4:	8b 87       	std	Y+11, r24	; 0x0b
    3ff6:	9c 87       	std	Y+12, r25	; 0x0c
    3ff8:	ad 87       	std	Y+13, r26	; 0x0d
    3ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4000:	8d 85       	ldd	r24, Y+13	; 0x0d
    4002:	9e 85       	ldd	r25, Y+14	; 0x0e
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	4a ef       	ldi	r20, 0xFA	; 250
    400a:	54 e4       	ldi	r21, 0x44	; 68
    400c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	8f 83       	std	Y+7, r24	; 0x07
    4016:	98 87       	std	Y+8, r25	; 0x08
    4018:	a9 87       	std	Y+9, r26	; 0x09
    401a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    401c:	6f 81       	ldd	r22, Y+7	; 0x07
    401e:	78 85       	ldd	r23, Y+8	; 0x08
    4020:	89 85       	ldd	r24, Y+9	; 0x09
    4022:	9a 85       	ldd	r25, Y+10	; 0x0a
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4030:	88 23       	and	r24, r24
    4032:	2c f4       	brge	.+10     	; 0x403e <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	8d 83       	std	Y+5, r24	; 0x05
    403c:	3f c0       	rjmp	.+126    	; 0x40bc <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    403e:	6f 81       	ldd	r22, Y+7	; 0x07
    4040:	78 85       	ldd	r23, Y+8	; 0x08
    4042:	89 85       	ldd	r24, Y+9	; 0x09
    4044:	9a 85       	ldd	r25, Y+10	; 0x0a
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	3f ef       	ldi	r19, 0xFF	; 255
    404a:	4f e7       	ldi	r20, 0x7F	; 127
    404c:	57 e4       	ldi	r21, 0x47	; 71
    404e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4052:	18 16       	cp	r1, r24
    4054:	4c f5       	brge	.+82     	; 0x40a8 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4056:	6b 85       	ldd	r22, Y+11	; 0x0b
    4058:	7c 85       	ldd	r23, Y+12	; 0x0c
    405a:	8d 85       	ldd	r24, Y+13	; 0x0d
    405c:	9e 85       	ldd	r25, Y+14	; 0x0e
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e2       	ldi	r20, 0x20	; 32
    4064:	51 e4       	ldi	r21, 0x41	; 65
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	bc 01       	movw	r22, r24
    4070:	cd 01       	movw	r24, r26
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	9e 83       	std	Y+6, r25	; 0x06
    407c:	8d 83       	std	Y+5, r24	; 0x05
    407e:	0f c0       	rjmp	.+30     	; 0x409e <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    4080:	88 ec       	ldi	r24, 0xC8	; 200
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	9c 83       	std	Y+4, r25	; 0x04
    4086:	8b 83       	std	Y+3, r24	; 0x03
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
    408a:	9c 81       	ldd	r25, Y+4	; 0x04
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	f1 f7       	brne	.-4      	; 0x408c <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    4090:	9c 83       	std	Y+4, r25	; 0x04
    4092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4094:	8d 81       	ldd	r24, Y+5	; 0x05
    4096:	9e 81       	ldd	r25, Y+6	; 0x06
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	9e 83       	std	Y+6, r25	; 0x06
    409c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409e:	8d 81       	ldd	r24, Y+5	; 0x05
    40a0:	9e 81       	ldd	r25, Y+6	; 0x06
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	69 f7       	brne	.-38     	; 0x4080 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    40a6:	14 c0       	rjmp	.+40     	; 0x40d0 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a8:	6f 81       	ldd	r22, Y+7	; 0x07
    40aa:	78 85       	ldd	r23, Y+8	; 0x08
    40ac:	89 85       	ldd	r24, Y+9	; 0x09
    40ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	9e 83       	std	Y+6, r25	; 0x06
    40ba:	8d 83       	std	Y+5, r24	; 0x05
    40bc:	8d 81       	ldd	r24, Y+5	; 0x05
    40be:	9e 81       	ldd	r25, Y+6	; 0x06
    40c0:	9a 83       	std	Y+2, r25	; 0x02
    40c2:	89 83       	std	Y+1, r24	; 0x01
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	9a 81       	ldd	r25, Y+2	; 0x02
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	f1 f7       	brne	.-4      	; 0x40c8 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    40cc:	9a 83       	std	Y+2, r25	; 0x02
    40ce:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    40d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    40d2:	8f 5f       	subi	r24, 0xFF	; 255
    40d4:	8f 87       	std	Y+15, r24	; 0x0f
    40d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    40d8:	88 89       	ldd	r24, Y+16	; 0x10
    40da:	98 17       	cp	r25, r24
    40dc:	08 f4       	brcc	.+2      	; 0x40e0 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    40de:	80 cf       	rjmp	.-256    	; 0x3fe0 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    40e0:	60 96       	adiw	r28, 0x10	; 16
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	60 97       	sbiw	r28, 0x10	; 16
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	f8 94       	cli
    4100:	de bf       	out	0x3e, r29	; 62
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	cd bf       	out	0x3d, r28	; 61
    4106:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4108:	1f 86       	std	Y+15, r1	; 0x0f
    410a:	7b c0       	rjmp	.+246    	; 0x4202 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    4112:	84 e1       	ldi	r24, 0x14	; 20
    4114:	0e 94 a4 19 	call	0x3348	; 0x3348 <HCLCD_Vid4Bits_SendCommand>
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	a6 e9       	ldi	r26, 0x96	; 150
    411e:	b3 e4       	ldi	r27, 0x43	; 67
    4120:	8b 87       	std	Y+11, r24	; 0x0b
    4122:	9c 87       	std	Y+12, r25	; 0x0c
    4124:	ad 87       	std	Y+13, r26	; 0x0d
    4126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4128:	6b 85       	ldd	r22, Y+11	; 0x0b
    412a:	7c 85       	ldd	r23, Y+12	; 0x0c
    412c:	8d 85       	ldd	r24, Y+13	; 0x0d
    412e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	4a ef       	ldi	r20, 0xFA	; 250
    4136:	54 e4       	ldi	r21, 0x44	; 68
    4138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	8f 83       	std	Y+7, r24	; 0x07
    4142:	98 87       	std	Y+8, r25	; 0x08
    4144:	a9 87       	std	Y+9, r26	; 0x09
    4146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4148:	6f 81       	ldd	r22, Y+7	; 0x07
    414a:	78 85       	ldd	r23, Y+8	; 0x08
    414c:	89 85       	ldd	r24, Y+9	; 0x09
    414e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e8       	ldi	r20, 0x80	; 128
    4156:	5f e3       	ldi	r21, 0x3F	; 63
    4158:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    415c:	88 23       	and	r24, r24
    415e:	2c f4       	brge	.+10     	; 0x416a <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	9e 83       	std	Y+6, r25	; 0x06
    4166:	8d 83       	std	Y+5, r24	; 0x05
    4168:	3f c0       	rjmp	.+126    	; 0x41e8 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    416a:	6f 81       	ldd	r22, Y+7	; 0x07
    416c:	78 85       	ldd	r23, Y+8	; 0x08
    416e:	89 85       	ldd	r24, Y+9	; 0x09
    4170:	9a 85       	ldd	r25, Y+10	; 0x0a
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	3f ef       	ldi	r19, 0xFF	; 255
    4176:	4f e7       	ldi	r20, 0x7F	; 127
    4178:	57 e4       	ldi	r21, 0x47	; 71
    417a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    417e:	18 16       	cp	r1, r24
    4180:	4c f5       	brge	.+82     	; 0x41d4 <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4182:	6b 85       	ldd	r22, Y+11	; 0x0b
    4184:	7c 85       	ldd	r23, Y+12	; 0x0c
    4186:	8d 85       	ldd	r24, Y+13	; 0x0d
    4188:	9e 85       	ldd	r25, Y+14	; 0x0e
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e2       	ldi	r20, 0x20	; 32
    4190:	51 e4       	ldi	r21, 0x41	; 65
    4192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	9e 83       	std	Y+6, r25	; 0x06
    41a8:	8d 83       	std	Y+5, r24	; 0x05
    41aa:	0f c0       	rjmp	.+30     	; 0x41ca <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    41ac:	88 ec       	ldi	r24, 0xC8	; 200
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	9c 83       	std	Y+4, r25	; 0x04
    41b2:	8b 83       	std	Y+3, r24	; 0x03
    41b4:	8b 81       	ldd	r24, Y+3	; 0x03
    41b6:	9c 81       	ldd	r25, Y+4	; 0x04
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	f1 f7       	brne	.-4      	; 0x41b8 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    41bc:	9c 83       	std	Y+4, r25	; 0x04
    41be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c0:	8d 81       	ldd	r24, Y+5	; 0x05
    41c2:	9e 81       	ldd	r25, Y+6	; 0x06
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	9e 83       	std	Y+6, r25	; 0x06
    41c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ca:	8d 81       	ldd	r24, Y+5	; 0x05
    41cc:	9e 81       	ldd	r25, Y+6	; 0x06
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	69 f7       	brne	.-38     	; 0x41ac <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    41d2:	14 c0       	rjmp	.+40     	; 0x41fc <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d4:	6f 81       	ldd	r22, Y+7	; 0x07
    41d6:	78 85       	ldd	r23, Y+8	; 0x08
    41d8:	89 85       	ldd	r24, Y+9	; 0x09
    41da:	9a 85       	ldd	r25, Y+10	; 0x0a
    41dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	9e 83       	std	Y+6, r25	; 0x06
    41e6:	8d 83       	std	Y+5, r24	; 0x05
    41e8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ea:	9e 81       	ldd	r25, Y+6	; 0x06
    41ec:	9a 83       	std	Y+2, r25	; 0x02
    41ee:	89 83       	std	Y+1, r24	; 0x01
    41f0:	89 81       	ldd	r24, Y+1	; 0x01
    41f2:	9a 81       	ldd	r25, Y+2	; 0x02
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    41f8:	9a 83       	std	Y+2, r25	; 0x02
    41fa:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    41fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41fe:	8f 5f       	subi	r24, 0xFF	; 255
    4200:	8f 87       	std	Y+15, r24	; 0x0f
    4202:	9f 85       	ldd	r25, Y+15	; 0x0f
    4204:	88 89       	ldd	r24, Y+16	; 0x10
    4206:	98 17       	cp	r25, r24
    4208:	08 f4       	brcc	.+2      	; 0x420c <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    420a:	80 cf       	rjmp	.-256    	; 0x410c <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    420c:	60 96       	adiw	r28, 0x10	; 16
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	de bf       	out	0x3e, r29	; 62
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	08 95       	ret

0000421e <main>:
void App_TIMER1_OVF_ISR(void);
void App_EXTI0_ISR(void);


int main(void)
{
    421e:	af 92       	push	r10
    4220:	bf 92       	push	r11
    4222:	cf 92       	push	r12
    4224:	df 92       	push	r13
    4226:	ef 92       	push	r14
    4228:	ff 92       	push	r15
    422a:	0f 93       	push	r16
    422c:	1f 93       	push	r17
    422e:	df 93       	push	r29
    4230:	cf 93       	push	r28
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    4236:	64 97       	sbiw	r28, 0x14	; 20
    4238:	0f b6       	in	r0, 0x3f	; 63
    423a:	f8 94       	cli
    423c:	de bf       	out	0x3e, r29	; 62
    423e:	0f be       	out	0x3f, r0	; 63
    4240:	cd bf       	out	0x3d, r28	; 61
	/*For EXTI0 to read PWM by Software*/
	MDIO_Error_State_SetPinDirection(PIN2,MDIO_PORTD,PIN_INPUT);
    4242:	82 e0       	ldi	r24, 0x02	; 2
    4244:	63 e0       	ldi	r22, 0x03	; 3
    4246:	40 e0       	ldi	r20, 0x00	; 0
    4248:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MDIO_Error_State_SetPinDirection>
	/*Generate PWM on this OC0-->Pin PB3*/
	HLED_VidInit(&Y_LED4);
    424c:	83 e8       	ldi	r24, 0x83	; 131
    424e:	91 e0       	ldi	r25, 0x01	; 1
    4250:	0e 94 20 10 	call	0x2040	; 0x2040 <HLED_VidInit>
	/*LCD Initialization*/
	HCLCD_Vid4Bits_Init();
    4254:	0e 94 43 1a 	call	0x3486	; 0x3486 <HCLCD_Vid4Bits_Init>
	/*Send Welcome message*/
	HCLCD_Vid4Bits_DisplayString((u8*)"Welcome....");
    4258:	80 e6       	ldi	r24, 0x60	; 96
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <HCLCD_Vid4Bits_DisplayString>
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	aa e7       	ldi	r26, 0x7A	; 122
    4266:	b4 e4       	ldi	r27, 0x44	; 68
    4268:	8b 87       	std	Y+11, r24	; 0x0b
    426a:	9c 87       	std	Y+12, r25	; 0x0c
    426c:	ad 87       	std	Y+13, r26	; 0x0d
    426e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4270:	6b 85       	ldd	r22, Y+11	; 0x0b
    4272:	7c 85       	ldd	r23, Y+12	; 0x0c
    4274:	8d 85       	ldd	r24, Y+13	; 0x0d
    4276:	9e 85       	ldd	r25, Y+14	; 0x0e
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	4a ef       	ldi	r20, 0xFA	; 250
    427e:	54 e4       	ldi	r21, 0x44	; 68
    4280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	8f 83       	std	Y+7, r24	; 0x07
    428a:	98 87       	std	Y+8, r25	; 0x08
    428c:	a9 87       	std	Y+9, r26	; 0x09
    428e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4290:	6f 81       	ldd	r22, Y+7	; 0x07
    4292:	78 85       	ldd	r23, Y+8	; 0x08
    4294:	89 85       	ldd	r24, Y+9	; 0x09
    4296:	9a 85       	ldd	r25, Y+10	; 0x0a
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e8       	ldi	r20, 0x80	; 128
    429e:	5f e3       	ldi	r21, 0x3F	; 63
    42a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a4:	88 23       	and	r24, r24
    42a6:	2c f4       	brge	.+10     	; 0x42b2 <main+0x94>
		__ticks = 1;
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	9e 83       	std	Y+6, r25	; 0x06
    42ae:	8d 83       	std	Y+5, r24	; 0x05
    42b0:	3f c0       	rjmp	.+126    	; 0x4330 <main+0x112>
	else if (__tmp > 65535)
    42b2:	6f 81       	ldd	r22, Y+7	; 0x07
    42b4:	78 85       	ldd	r23, Y+8	; 0x08
    42b6:	89 85       	ldd	r24, Y+9	; 0x09
    42b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	3f ef       	ldi	r19, 0xFF	; 255
    42be:	4f e7       	ldi	r20, 0x7F	; 127
    42c0:	57 e4       	ldi	r21, 0x47	; 71
    42c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42c6:	18 16       	cp	r1, r24
    42c8:	4c f5       	brge	.+82     	; 0x431c <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    42cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    42d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	40 e2       	ldi	r20, 0x20	; 32
    42d8:	51 e4       	ldi	r21, 0x41	; 65
    42da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	bc 01       	movw	r22, r24
    42e4:	cd 01       	movw	r24, r26
    42e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	9e 83       	std	Y+6, r25	; 0x06
    42f0:	8d 83       	std	Y+5, r24	; 0x05
    42f2:	0f c0       	rjmp	.+30     	; 0x4312 <main+0xf4>
    42f4:	88 ec       	ldi	r24, 0xC8	; 200
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	9c 83       	std	Y+4, r25	; 0x04
    42fa:	8b 83       	std	Y+3, r24	; 0x03
    42fc:	8b 81       	ldd	r24, Y+3	; 0x03
    42fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4300:	01 97       	sbiw	r24, 0x01	; 1
    4302:	f1 f7       	brne	.-4      	; 0x4300 <main+0xe2>
    4304:	9c 83       	std	Y+4, r25	; 0x04
    4306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4308:	8d 81       	ldd	r24, Y+5	; 0x05
    430a:	9e 81       	ldd	r25, Y+6	; 0x06
    430c:	01 97       	sbiw	r24, 0x01	; 1
    430e:	9e 83       	std	Y+6, r25	; 0x06
    4310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4312:	8d 81       	ldd	r24, Y+5	; 0x05
    4314:	9e 81       	ldd	r25, Y+6	; 0x06
    4316:	00 97       	sbiw	r24, 0x00	; 0
    4318:	69 f7       	brne	.-38     	; 0x42f4 <main+0xd6>
    431a:	14 c0       	rjmp	.+40     	; 0x4344 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    431c:	6f 81       	ldd	r22, Y+7	; 0x07
    431e:	78 85       	ldd	r23, Y+8	; 0x08
    4320:	89 85       	ldd	r24, Y+9	; 0x09
    4322:	9a 85       	ldd	r25, Y+10	; 0x0a
    4324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	9e 83       	std	Y+6, r25	; 0x06
    432e:	8d 83       	std	Y+5, r24	; 0x05
    4330:	8d 81       	ldd	r24, Y+5	; 0x05
    4332:	9e 81       	ldd	r25, Y+6	; 0x06
    4334:	9a 83       	std	Y+2, r25	; 0x02
    4336:	89 83       	std	Y+1, r24	; 0x01
    4338:	89 81       	ldd	r24, Y+1	; 0x01
    433a:	9a 81       	ldd	r25, Y+2	; 0x02
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	f1 f7       	brne	.-4      	; 0x433c <main+0x11e>
    4340:	9a 83       	std	Y+2, r25	; 0x02
    4342:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    4344:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <HCLCD_Vid4Bits_ClearScreen>
	 * T_on depend on the  the value of OCR
	 * if you need D = 75% --> T_on = T*D = 4.08 * 0.75 = 3.06 ms -->Note OCR = 192 ticks    if you in NON_Inverting mode
	 * V_out = D * V_in
	 * */
	/*Set CTC Value-->DutyCycle=75%*/
	MTIMER0_VidSetCTCValue(191);
    4348:	8f eb       	ldi	r24, 0xBF	; 191
    434a:	0e 94 56 07 	call	0xeac	; 0xeac <MTIMER0_VidSetCTCValue>

	/*Timer0 Initialization in Phase Correct PWM */
	MTIMER0_VidInit();
    434e:	0e 94 17 07 	call	0xe2e	; 0xe2e <MTIMER0_VidInit>
	/*Timer1 Initialization-->MODE(0)-->Set timer1 in Normal Mode
	 * F_cpu = 8MHz, NO_Prescaler --> F_timer = 8MHz -->T_tick = 0.125 micro second-->one_OFV = 0.125 *65536 = 8192 micro second = 8.192 ms */
	MTIMER1_VidInit();
    4352:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <MTIMER1_VidInit>
	/*Set EXTI Call Back*/
	MEXTI0_Set_CallBackFunction(&App_EXTI0_ISR);
    4356:	8a e8       	ldi	r24, 0x8A	; 138
    4358:	92 e2       	ldi	r25, 0x22	; 34
    435a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <MEXTI0_Set_CallBackFunction>
	MTIMER1_VidOVF_SetCallBack(&App_TIMER1_OVF_ISR);
    435e:	8e ef       	ldi	r24, 0xFE	; 254
    4360:	92 e2       	ldi	r25, 0x22	; 34
    4362:	0e 94 3a 08 	call	0x1074	; 0x1074 <MTIMER1_VidOVF_SetCallBack>
	/*Set EXTI0 in rising edge*/
	MEXTI0_VidInit();
    4366:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <MEXTI0_VidInit>
	/*Enable To GIE*/
	MGIE_VidEnable();
    436a:	0e 94 b8 08 	call	0x1170	; 0x1170 <MGIE_VidEnable>
	u32 Freq = 0;
    436e:	19 8a       	std	Y+17, r1	; 0x11
    4370:	1a 8a       	std	Y+18, r1	; 0x12
    4372:	1b 8a       	std	Y+19, r1	; 0x13
    4374:	1c 8a       	std	Y+20, r1	; 0x14
	u16 DutyCycle = 0;
    4376:	18 8a       	std	Y+16, r1	; 0x10
    4378:	1f 86       	std	Y+15, r1	; 0x0f

	while(1)
	{
		if(Flag==3)
    437a:	80 91 97 01 	lds	r24, 0x0197
    437e:	83 30       	cpi	r24, 0x03	; 3
    4380:	e1 f7       	brne	.-8      	; 0x437a <main+0x15c>
		{
			/*Frequency in HZ*/
			Freq=(1000000/((T3-T1)*0.125));
    4382:	20 91 a1 01 	lds	r18, 0x01A1
    4386:	30 91 a2 01 	lds	r19, 0x01A2
    438a:	40 91 a3 01 	lds	r20, 0x01A3
    438e:	50 91 a4 01 	lds	r21, 0x01A4
    4392:	80 91 99 01 	lds	r24, 0x0199
    4396:	90 91 9a 01 	lds	r25, 0x019A
    439a:	a0 91 9b 01 	lds	r26, 0x019B
    439e:	b0 91 9c 01 	lds	r27, 0x019C
    43a2:	59 01       	movw	r10, r18
    43a4:	6a 01       	movw	r12, r20
    43a6:	a8 1a       	sub	r10, r24
    43a8:	b9 0a       	sbc	r11, r25
    43aa:	ca 0a       	sbc	r12, r26
    43ac:	db 0a       	sbc	r13, r27
    43ae:	d6 01       	movw	r26, r12
    43b0:	c5 01       	movw	r24, r10
    43b2:	bc 01       	movw	r22, r24
    43b4:	cd 01       	movw	r24, r26
    43b6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	bc 01       	movw	r22, r24
    43c0:	cd 01       	movw	r24, r26
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	40 e0       	ldi	r20, 0x00	; 0
    43c8:	5e e3       	ldi	r21, 0x3E	; 62
    43ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	9c 01       	movw	r18, r24
    43d4:	ad 01       	movw	r20, r26
    43d6:	60 e0       	ldi	r22, 0x00	; 0
    43d8:	74 e2       	ldi	r23, 0x24	; 36
    43da:	84 e7       	ldi	r24, 0x74	; 116
    43dc:	99 e4       	ldi	r25, 0x49	; 73
    43de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	bc 01       	movw	r22, r24
    43e8:	cd 01       	movw	r24, r26
    43ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ee:	dc 01       	movw	r26, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	89 8b       	std	Y+17, r24	; 0x11
    43f4:	9a 8b       	std	Y+18, r25	; 0x12
    43f6:	ab 8b       	std	Y+19, r26	; 0x13
    43f8:	bc 8b       	std	Y+20, r27	; 0x14
			DutyCycle=((f32)(T2-T1)/(T3-T1)*100);
    43fa:	20 91 9d 01 	lds	r18, 0x019D
    43fe:	30 91 9e 01 	lds	r19, 0x019E
    4402:	40 91 9f 01 	lds	r20, 0x019F
    4406:	50 91 a0 01 	lds	r21, 0x01A0
    440a:	80 91 99 01 	lds	r24, 0x0199
    440e:	90 91 9a 01 	lds	r25, 0x019A
    4412:	a0 91 9b 01 	lds	r26, 0x019B
    4416:	b0 91 9c 01 	lds	r27, 0x019C
    441a:	69 01       	movw	r12, r18
    441c:	7a 01       	movw	r14, r20
    441e:	c8 1a       	sub	r12, r24
    4420:	d9 0a       	sbc	r13, r25
    4422:	ea 0a       	sbc	r14, r26
    4424:	fb 0a       	sbc	r15, r27
    4426:	d7 01       	movw	r26, r14
    4428:	c6 01       	movw	r24, r12
    442a:	bc 01       	movw	r22, r24
    442c:	cd 01       	movw	r24, r26
    442e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4432:	7b 01       	movw	r14, r22
    4434:	8c 01       	movw	r16, r24
    4436:	20 91 a1 01 	lds	r18, 0x01A1
    443a:	30 91 a2 01 	lds	r19, 0x01A2
    443e:	40 91 a3 01 	lds	r20, 0x01A3
    4442:	50 91 a4 01 	lds	r21, 0x01A4
    4446:	80 91 99 01 	lds	r24, 0x0199
    444a:	90 91 9a 01 	lds	r25, 0x019A
    444e:	a0 91 9b 01 	lds	r26, 0x019B
    4452:	b0 91 9c 01 	lds	r27, 0x019C
    4456:	59 01       	movw	r10, r18
    4458:	6a 01       	movw	r12, r20
    445a:	a8 1a       	sub	r10, r24
    445c:	b9 0a       	sbc	r11, r25
    445e:	ca 0a       	sbc	r12, r26
    4460:	db 0a       	sbc	r13, r27
    4462:	d6 01       	movw	r26, r12
    4464:	c5 01       	movw	r24, r10
    4466:	bc 01       	movw	r22, r24
    4468:	cd 01       	movw	r24, r26
    446a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    446e:	9b 01       	movw	r18, r22
    4470:	ac 01       	movw	r20, r24
    4472:	c8 01       	movw	r24, r16
    4474:	b7 01       	movw	r22, r14
    4476:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	bc 01       	movw	r22, r24
    4480:	cd 01       	movw	r24, r26
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	48 ec       	ldi	r20, 0xC8	; 200
    4488:	52 e4       	ldi	r21, 0x42	; 66
    448a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448e:	dc 01       	movw	r26, r24
    4490:	cb 01       	movw	r24, r22
    4492:	bc 01       	movw	r22, r24
    4494:	cd 01       	movw	r24, r26
    4496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	98 8b       	std	Y+16, r25	; 0x10
    44a0:	8f 87       	std	Y+15, r24	; 0x0f
			HCLCD_Vid4Bits_SetPosition(1,0);
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	60 e0       	ldi	r22, 0x00	; 0
    44a6:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <HCLCD_Vid4Bits_SetPosition>
			HCLCD_Vid4Bits_DisplayString((u8*) "DutyCycle=");
    44aa:	8c e6       	ldi	r24, 0x6C	; 108
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <HCLCD_Vid4Bits_DisplayString>
		    HCLCD_Vid4Bits_DisplayNumber(DutyCycle);
    44b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b4:	98 89       	ldd	r25, Y+16	; 0x10
    44b6:	cc 01       	movw	r24, r24
    44b8:	a0 e0       	ldi	r26, 0x00	; 0
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	bc 01       	movw	r22, r24
    44be:	cd 01       	movw	r24, r26
    44c0:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <HCLCD_Vid4Bits_DisplayNumber>
			HCLCD_Vid4Bits_DisplayString((u8*)"%");
    44c4:	87 e7       	ldi	r24, 0x77	; 119
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_SetPosition(2,0);
    44cc:	82 e0       	ldi	r24, 0x02	; 2
    44ce:	60 e0       	ldi	r22, 0x00	; 0
    44d0:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <HCLCD_Vid4Bits_SetPosition>
			//HCLCD_Vid4Bits_DisplayString((u8*)"Freq=");
			//HCLCD_Vid4Bits_DisplayNumber(Freq);
			//HCLCD_Vid4Bits_DisplayString((u8*)" Hz");
			HCLCD_Vid4Bits_DisplayNumber(T1);
    44d4:	80 91 99 01 	lds	r24, 0x0199
    44d8:	90 91 9a 01 	lds	r25, 0x019A
    44dc:	a0 91 9b 01 	lds	r26, 0x019B
    44e0:	b0 91 9c 01 	lds	r27, 0x019C
    44e4:	bc 01       	movw	r22, r24
    44e6:	cd 01       	movw	r24, r26
    44e8:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <HCLCD_Vid4Bits_DisplayNumber>
			HCLCD_Vid4Bits_DisplayString((u8*)",");
    44ec:	89 e7       	ldi	r24, 0x79	; 121
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_DisplayNumber(T3);
    44f4:	80 91 a1 01 	lds	r24, 0x01A1
    44f8:	90 91 a2 01 	lds	r25, 0x01A2
    44fc:	a0 91 a3 01 	lds	r26, 0x01A3
    4500:	b0 91 a4 01 	lds	r27, 0x01A4
    4504:	bc 01       	movw	r22, r24
    4506:	cd 01       	movw	r24, r26
    4508:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <HCLCD_Vid4Bits_DisplayNumber>

			Flag = 4 ;
    450c:	84 e0       	ldi	r24, 0x04	; 4
    450e:	80 93 97 01 	sts	0x0197, r24
    4512:	33 cf       	rjmp	.-410    	; 0x437a <main+0x15c>

00004514 <App_EXTI0_ISR>:
	}
	return 0 ;

}
void App_EXTI0_ISR(void)
{
    4514:	df 93       	push	r29
    4516:	cf 93       	push	r28
    4518:	cd b7       	in	r28, 0x3d	; 61
    451a:	de b7       	in	r29, 0x3e	; 62
	if(Flag==0)
    451c:	80 91 97 01 	lds	r24, 0x0197
    4520:	88 23       	and	r24, r24
    4522:	11 f5       	brne	.+68     	; 0x4568 <App_EXTI0_ISR+0x54>
	{
		T1=	MTIMER1_u16GetTCNT1Value()+Count*65536;
    4524:	0e 94 2f 08 	call	0x105e	; 0x105e <MTIMER1_u16GetTCNT1Value>
    4528:	9c 01       	movw	r18, r24
    452a:	40 e0       	ldi	r20, 0x00	; 0
    452c:	50 e0       	ldi	r21, 0x00	; 0
    452e:	80 91 98 01 	lds	r24, 0x0198
    4532:	88 2f       	mov	r24, r24
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	a0 e0       	ldi	r26, 0x00	; 0
    4538:	b0 e0       	ldi	r27, 0x00	; 0
    453a:	dc 01       	movw	r26, r24
    453c:	99 27       	eor	r25, r25
    453e:	88 27       	eor	r24, r24
    4540:	82 0f       	add	r24, r18
    4542:	93 1f       	adc	r25, r19
    4544:	a4 1f       	adc	r26, r20
    4546:	b5 1f       	adc	r27, r21
    4548:	80 93 99 01 	sts	0x0199, r24
    454c:	90 93 9a 01 	sts	0x019A, r25
    4550:	a0 93 9b 01 	sts	0x019B, r26
    4554:	b0 93 9c 01 	sts	0x019C, r27
		MEXTI_VidSenseControl(EXTI0,MEXTI_FALLING_EDGE);
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	62 e0       	ldi	r22, 0x02	; 2
    455c:	0e 94 21 09 	call	0x1242	; 0x1242 <MEXTI_VidSenseControl>
		Flag=1;
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	80 93 97 01 	sts	0x0197, r24
    4566:	47 c0       	rjmp	.+142    	; 0x45f6 <App_EXTI0_ISR+0xe2>
	}
	else if(Flag==1)
    4568:	80 91 97 01 	lds	r24, 0x0197
    456c:	81 30       	cpi	r24, 0x01	; 1
    456e:	11 f5       	brne	.+68     	; 0x45b4 <App_EXTI0_ISR+0xa0>
	{
		T2=	MTIMER1_u16GetTCNT1Value()+Count*65536;
    4570:	0e 94 2f 08 	call	0x105e	; 0x105e <MTIMER1_u16GetTCNT1Value>
    4574:	9c 01       	movw	r18, r24
    4576:	40 e0       	ldi	r20, 0x00	; 0
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	80 91 98 01 	lds	r24, 0x0198
    457e:	88 2f       	mov	r24, r24
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	a0 e0       	ldi	r26, 0x00	; 0
    4584:	b0 e0       	ldi	r27, 0x00	; 0
    4586:	dc 01       	movw	r26, r24
    4588:	99 27       	eor	r25, r25
    458a:	88 27       	eor	r24, r24
    458c:	82 0f       	add	r24, r18
    458e:	93 1f       	adc	r25, r19
    4590:	a4 1f       	adc	r26, r20
    4592:	b5 1f       	adc	r27, r21
    4594:	80 93 9d 01 	sts	0x019D, r24
    4598:	90 93 9e 01 	sts	0x019E, r25
    459c:	a0 93 9f 01 	sts	0x019F, r26
    45a0:	b0 93 a0 01 	sts	0x01A0, r27
		MEXTI_VidSenseControl(EXTI0,MEXTI_RISING_EDGE);
    45a4:	80 e0       	ldi	r24, 0x00	; 0
    45a6:	63 e0       	ldi	r22, 0x03	; 3
    45a8:	0e 94 21 09 	call	0x1242	; 0x1242 <MEXTI_VidSenseControl>
		Flag=2;
    45ac:	82 e0       	ldi	r24, 0x02	; 2
    45ae:	80 93 97 01 	sts	0x0197, r24
    45b2:	21 c0       	rjmp	.+66     	; 0x45f6 <App_EXTI0_ISR+0xe2>
	}
	else if(Flag==2)
    45b4:	80 91 97 01 	lds	r24, 0x0197
    45b8:	82 30       	cpi	r24, 0x02	; 2
    45ba:	e9 f4       	brne	.+58     	; 0x45f6 <App_EXTI0_ISR+0xe2>
	{
		T3=	MTIMER1_u16GetTCNT1Value()+Count*65536;
    45bc:	0e 94 2f 08 	call	0x105e	; 0x105e <MTIMER1_u16GetTCNT1Value>
    45c0:	9c 01       	movw	r18, r24
    45c2:	40 e0       	ldi	r20, 0x00	; 0
    45c4:	50 e0       	ldi	r21, 0x00	; 0
    45c6:	80 91 98 01 	lds	r24, 0x0198
    45ca:	88 2f       	mov	r24, r24
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	a0 e0       	ldi	r26, 0x00	; 0
    45d0:	b0 e0       	ldi	r27, 0x00	; 0
    45d2:	dc 01       	movw	r26, r24
    45d4:	99 27       	eor	r25, r25
    45d6:	88 27       	eor	r24, r24
    45d8:	82 0f       	add	r24, r18
    45da:	93 1f       	adc	r25, r19
    45dc:	a4 1f       	adc	r26, r20
    45de:	b5 1f       	adc	r27, r21
    45e0:	80 93 a1 01 	sts	0x01A1, r24
    45e4:	90 93 a2 01 	sts	0x01A2, r25
    45e8:	a0 93 a3 01 	sts	0x01A3, r26
    45ec:	b0 93 a4 01 	sts	0x01A4, r27
		Flag=3;
    45f0:	83 e0       	ldi	r24, 0x03	; 3
    45f2:	80 93 97 01 	sts	0x0197, r24
	}
}
    45f6:	cf 91       	pop	r28
    45f8:	df 91       	pop	r29
    45fa:	08 95       	ret

000045fc <App_TIMER1_OVF_ISR>:

void App_TIMER1_OVF_ISR(void)
{
    45fc:	df 93       	push	r29
    45fe:	cf 93       	push	r28
    4600:	cd b7       	in	r28, 0x3d	; 61
    4602:	de b7       	in	r29, 0x3e	; 62
	Count++ ;
    4604:	80 91 98 01 	lds	r24, 0x0198
    4608:	8f 5f       	subi	r24, 0xFF	; 255
    460a:	80 93 98 01 	sts	0x0198, r24
}
    460e:	cf 91       	pop	r28
    4610:	df 91       	pop	r29
    4612:	08 95       	ret

00004614 <__udivmodsi4>:
    4614:	a1 e2       	ldi	r26, 0x21	; 33
    4616:	1a 2e       	mov	r1, r26
    4618:	aa 1b       	sub	r26, r26
    461a:	bb 1b       	sub	r27, r27
    461c:	fd 01       	movw	r30, r26
    461e:	0d c0       	rjmp	.+26     	; 0x463a <__udivmodsi4_ep>

00004620 <__udivmodsi4_loop>:
    4620:	aa 1f       	adc	r26, r26
    4622:	bb 1f       	adc	r27, r27
    4624:	ee 1f       	adc	r30, r30
    4626:	ff 1f       	adc	r31, r31
    4628:	a2 17       	cp	r26, r18
    462a:	b3 07       	cpc	r27, r19
    462c:	e4 07       	cpc	r30, r20
    462e:	f5 07       	cpc	r31, r21
    4630:	20 f0       	brcs	.+8      	; 0x463a <__udivmodsi4_ep>
    4632:	a2 1b       	sub	r26, r18
    4634:	b3 0b       	sbc	r27, r19
    4636:	e4 0b       	sbc	r30, r20
    4638:	f5 0b       	sbc	r31, r21

0000463a <__udivmodsi4_ep>:
    463a:	66 1f       	adc	r22, r22
    463c:	77 1f       	adc	r23, r23
    463e:	88 1f       	adc	r24, r24
    4640:	99 1f       	adc	r25, r25
    4642:	1a 94       	dec	r1
    4644:	69 f7       	brne	.-38     	; 0x4620 <__udivmodsi4_loop>
    4646:	60 95       	com	r22
    4648:	70 95       	com	r23
    464a:	80 95       	com	r24
    464c:	90 95       	com	r25
    464e:	9b 01       	movw	r18, r22
    4650:	ac 01       	movw	r20, r24
    4652:	bd 01       	movw	r22, r26
    4654:	cf 01       	movw	r24, r30
    4656:	08 95       	ret

00004658 <__prologue_saves__>:
    4658:	2f 92       	push	r2
    465a:	3f 92       	push	r3
    465c:	4f 92       	push	r4
    465e:	5f 92       	push	r5
    4660:	6f 92       	push	r6
    4662:	7f 92       	push	r7
    4664:	8f 92       	push	r8
    4666:	9f 92       	push	r9
    4668:	af 92       	push	r10
    466a:	bf 92       	push	r11
    466c:	cf 92       	push	r12
    466e:	df 92       	push	r13
    4670:	ef 92       	push	r14
    4672:	ff 92       	push	r15
    4674:	0f 93       	push	r16
    4676:	1f 93       	push	r17
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
    4680:	ca 1b       	sub	r28, r26
    4682:	db 0b       	sbc	r29, r27
    4684:	0f b6       	in	r0, 0x3f	; 63
    4686:	f8 94       	cli
    4688:	de bf       	out	0x3e, r29	; 62
    468a:	0f be       	out	0x3f, r0	; 63
    468c:	cd bf       	out	0x3d, r28	; 61
    468e:	09 94       	ijmp

00004690 <__epilogue_restores__>:
    4690:	2a 88       	ldd	r2, Y+18	; 0x12
    4692:	39 88       	ldd	r3, Y+17	; 0x11
    4694:	48 88       	ldd	r4, Y+16	; 0x10
    4696:	5f 84       	ldd	r5, Y+15	; 0x0f
    4698:	6e 84       	ldd	r6, Y+14	; 0x0e
    469a:	7d 84       	ldd	r7, Y+13	; 0x0d
    469c:	8c 84       	ldd	r8, Y+12	; 0x0c
    469e:	9b 84       	ldd	r9, Y+11	; 0x0b
    46a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    46a2:	b9 84       	ldd	r11, Y+9	; 0x09
    46a4:	c8 84       	ldd	r12, Y+8	; 0x08
    46a6:	df 80       	ldd	r13, Y+7	; 0x07
    46a8:	ee 80       	ldd	r14, Y+6	; 0x06
    46aa:	fd 80       	ldd	r15, Y+5	; 0x05
    46ac:	0c 81       	ldd	r16, Y+4	; 0x04
    46ae:	1b 81       	ldd	r17, Y+3	; 0x03
    46b0:	aa 81       	ldd	r26, Y+2	; 0x02
    46b2:	b9 81       	ldd	r27, Y+1	; 0x01
    46b4:	ce 0f       	add	r28, r30
    46b6:	d1 1d       	adc	r29, r1
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    46c2:	ed 01       	movw	r28, r26
    46c4:	08 95       	ret

000046c6 <_exit>:
    46c6:	f8 94       	cli

000046c8 <__stop_program>:
    46c8:	ff cf       	rjmp	.-2      	; 0x46c8 <__stop_program>
