
TEST_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000048ca  0000495e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800084  00800084  00004982  2**0
                  ALLOC
  3 .stab         000057cc  00000000  00000000  00004984  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002032  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c182  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e07b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ef66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fd14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fe74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010101  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000108cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_9>
      28:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_10>
      2c:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 56 22 	call	0x44ac	; 0x44ac <main>
      8a:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 24 	jmp	0x4858	; 0x4858 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 24 	jmp	0x4890	; 0x4890 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 24 	jmp	0x4858	; 0x4858 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 24 	jmp	0x4890	; 0x4890 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MWDT_VidEnable>:
#include"MWDT_Private.h"

#define F_CPU  8000000UL
#include<util\delay.h>
void MWDT_VidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,3);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MWDT_VidDisable>:
void MWDT_VidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	 *************************************************************************************/
	/*******************************************Not Accepted*******************************
		                 WDTCR = 0b00011000;
			             WDTCR = 0b11110111;
    *************************************************************************************/
	 WDTCR =0b00011000; // in one instruction 1 cycle
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24

     WDTCR = 0x00;     	// must be all bits in this Register assigned with zeros
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
		WDTCR = 0b00011000;   //in one instruction 1 cycle
		WDTCR = 0x00;         //must be all bits in this Register assigned with zeros
	 ************************************************************************************/


}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MWDT_VidWDT_Sleep>:
void MWDT_VidWDT_Sleep(u8 Copy_u8SleepValue)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	WDTCR&=0xF8;
     b8a:	a1 e4       	ldi	r26, 0x41	; 65
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e1 e4       	ldi	r30, 0x41	; 65
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	88 7f       	andi	r24, 0xF8	; 248
     b96:	8c 93       	st	X, r24
	WDTCR|=Copy_u8SleepValue;
     b98:	a1 e4       	ldi	r26, 0x41	; 65
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e1 e4       	ldi	r30, 0x41	; 65
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	90 81       	ld	r25, Z
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24
}
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <MUSART_VidInit>:

//#include<util\delay.h>

/*USART Initialization*/
void MUSART_VidInit(void)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Copy_UCSRC = 0;
     bba:	19 82       	std	Y+1, r1	; 0x01
	/*1- Select USART Mode*/
#if USART_SET_MODE == USART_ASYNCHRONOUS_MODE
	CLR_BIT(LOC_u8Copy_UCSRC,6);
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	8f 7b       	andi	r24, 0xBF	; 191
     bc0:	89 83       	std	Y+1, r24	; 0x01
#else
#error "USART Mode Is not valid..."
#endif
	/*2- Select Parity Mode*/
#if USART_SET_PARITY_MODE == USART_DISABLED_PARITY
	CLR_BIT(LOC_u8Copy_UCSRC,4);
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	8f 7e       	andi	r24, 0xEF	; 239
     bc6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LOC_u8Copy_UCSRC,5);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	8f 7d       	andi	r24, 0xDF	; 223
     bcc:	89 83       	std	Y+1, r24	; 0x01
#else
#error "USART Parity Mode Is not valid..."
#endif
	/*3- Select USART Stop Bit Number */
#if USART_SET_STOP_BIT == USART_STOP_ONE_BIT
	CLR_BIT(LOC_u8Copy_UCSRC,3);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	87 7f       	andi	r24, 0xF7	; 247
     bd2:	89 83       	std	Y+1, r24	; 0x01
#elif  USART_SET_CHR_SIZE == USART_CHR_SIZE_7
	CLR_BIT(LOC_u8Copy_UCSRC,1);
	SET_BIT(LOC_u8Copy_UCSRC,2);
	CLR_BIT(UCSRB,2);
#elif  USART_SET_CHR_SIZE == USART_CHR_SIZE_8
	SET_BIT(LOC_u8Copy_UCSRC,1);
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LOC_u8Copy_UCSRC,2);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	84 60       	ori	r24, 0x04	; 4
     bde:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB , 2);
     be0:	aa e2       	ldi	r26, 0x2A	; 42
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ea e2       	ldi	r30, 0x2A	; 42
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8b 7f       	andi	r24, 0xFB	; 251
     bec:	8c 93       	st	X, r24
#else
#error "USART CHR Size Is not valid..."
#endif
	/*Set LOC_u8Copy_UCSRC value in UCSRC Register
	 * and Select UCSRC Register */
	SET_BIT(LOC_u8Copy_UCSRC,7);
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	80 68       	ori	r24, 0x80	; 128
     bf2:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = LOC_u8Copy_UCSRC;
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	80 83       	st	Z, r24
	/*Set BaudRate -->9600*/
	UBRRL = 103;
     bfc:	e9 e2       	ldi	r30, 0x29	; 41
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	87 e6       	ldi	r24, 0x67	; 103
     c02:	80 83       	st	Z, r24
	/*Enable To TX and RX*/
	SET_BIT(UCSRB,4);
     c04:	aa e2       	ldi	r26, 0x2A	; 42
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	8c 93       	st	X, r24
	SET_BIT(UCSRB,3);
     c12:	aa e2       	ldi	r26, 0x2A	; 42
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ea e2       	ldi	r30, 0x2A	; 42
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 60       	ori	r24, 0x08	; 8
     c1e:	8c 93       	st	X, r24
}
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <MUSART_VidSendChar>:

/*USART Send Data*/
void MUSART_VidSendChar(u8 Copy_u8Data)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until Register Empty Flag is set*/
	while(GET_BIT(UCSRA,5)==0);
     c34:	eb e2       	ldi	r30, 0x2B	; 43
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	82 95       	swap	r24
     c3c:	86 95       	lsr	r24
     c3e:	87 70       	andi	r24, 0x07	; 7
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	a1 f3       	breq	.-24     	; 0xc34 <MUSART_VidSendChar+0xc>
	/**/
	UDR=Copy_u8Data;
     c4c:	ec e2       	ldi	r30, 0x2C	; 44
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	80 83       	st	Z, r24
}
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <MUSART_VidReceiveData>:
/*USART Receive Data*/
u8 MUSART_VidReceiveData(void)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
	/*Wait until Receive Complete Flag  is set*/
	while(GET_BIT(UCSRA,7)==0);
     c64:	eb e2       	ldi	r30, 0x2B	; 43
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	88 23       	and	r24, r24
     c6c:	dc f7       	brge	.-10     	; 0xc64 <MUSART_VidReceiveData+0x8>
	return UDR;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
}
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <MUSART_VidSendString>:

/*USART Send String*/
void MUSART_VidSendString(u8 *Copy_u8Data)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <MUSART_VidSendString+0x6>
     c80:	0f 92       	push	r0
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8CharCount= 0;
     c8a:	19 82       	std	Y+1, r1	; 0x01
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <MUSART_VidSendString+0x30>
	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
	{
		MUSART_VidSendChar(Copy_u8Data[LOC_u8CharCount]);
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	9b 81       	ldd	r25, Y+3	; 0x03
     c98:	fc 01       	movw	r30, r24
     c9a:	e2 0f       	add	r30, r18
     c9c:	f3 1f       	adc	r31, r19
     c9e:	80 81       	ld	r24, Z
     ca0:	0e 94 14 06 	call	0xc28	; 0xc28 <MUSART_VidSendChar>
		/*Wait few ms to make anther node receive data */
		//_delay_ms(100);
		LOC_u8CharCount++;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	89 83       	std	Y+1, r24	; 0x01

/*USART Send String*/
void MUSART_VidSendString(u8 *Copy_u8Data)
{
	u8 LOC_u8CharCount= 0;
	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	fc 01       	movw	r30, r24
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	39 f7       	brne	.-50     	; 0xc8e <MUSART_VidSendString+0x14>
		MUSART_VidSendChar(Copy_u8Data[LOC_u8CharCount]);
		/*Wait few ms to make anther node receive data */
		//_delay_ms(100);
		LOC_u8CharCount++;
	}
	MUSART_VidSendChar('\0');
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 14 06 	call	0xc28	; 0xc28 <MUSART_VidSendChar>

}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <MUSART_VidReceiveString>:

/*USART Receive String*/
void MUSART_VidReceiveString(u8 *Copy_u8Data)
{
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <MUSART_VidReceiveString+0xa>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9b 83       	std	Y+3, r25	; 0x03
     ce4:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8CharCount= 0;
     ce6:	19 82       	std	Y+1, r1	; 0x01
	Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	9b 81       	ldd	r25, Y+3	; 0x03
     cf2:	8c 01       	movw	r16, r24
     cf4:	02 0f       	add	r16, r18
     cf6:	13 1f       	adc	r17, r19
     cf8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <MUSART_VidReceiveData>
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <MUSART_VidReceiveString+0x4e>

	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
	{
		LOC_u8CharCount++;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	9b 81       	ldd	r25, Y+3	; 0x03
     d12:	8c 01       	movw	r16, r24
     d14:	02 0f       	add	r16, r18
     d16:	13 1f       	adc	r17, r19
     d18:	0e 94 2e 06 	call	0xc5c	; 0xc5c <MUSART_VidReceiveData>
     d1c:	f8 01       	movw	r30, r16
     d1e:	80 83       	st	Z, r24
void MUSART_VidReceiveString(u8 *Copy_u8Data)
{
	u8 LOC_u8CharCount= 0;
	Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();

	while(Copy_u8Data[LOC_u8CharCount]!=NULL)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	31 f7       	brne	.-52     	; 0xd02 <MUSART_VidReceiveString+0x30>
	{
		LOC_u8CharCount++;
		Copy_u8Data[LOC_u8CharCount]=MUSART_VidReceiveData();
	}
	Copy_u8Data[LOC_u8CharCount] = '\0';
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	fc 01       	movw	r30, r24
     d42:	e2 0f       	add	r30, r18
     d44:	f3 1f       	adc	r31, r19
     d46:	10 82       	st	Z, r1
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	08 95       	ret

00000d58 <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     d60:	a3 e5       	ldi	r26, 0x53	; 83
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e3 e5       	ldi	r30, 0x53	; 83
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	88 7f       	andi	r24, 0xF8	; 248
     d6c:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     d6e:	a3 e5       	ldi	r26, 0x53	; 83
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e3 e5       	ldi	r30, 0x53	; 83
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	83 60       	ori	r24, 0x03	; 3
     d7a:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     d7c:	a3 e5       	ldi	r26, 0x53	; 83
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e3 e5       	ldi	r30, 0x53	; 83
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     d8a:	a3 e5       	ldi	r26, 0x53	; 83
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e3 e5       	ldi	r30, 0x53	; 83
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	87 7f       	andi	r24, 0xF7	; 247
     d96:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     d98:	a3 e5       	ldi	r26, 0x53	; 83
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e3 e5       	ldi	r30, 0x53	; 83
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	80 62       	ori	r24, 0x20	; 32
     da4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     da6:	a3 e5       	ldi	r26, 0x53	; 83
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e3 e5       	ldi	r30, 0x53	; 83
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 7e       	andi	r24, 0xEF	; 239
     db2:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     dc6:	e2 e5       	ldi	r30, 0x52	; 82
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	80 83       	st	Z, r24
}
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	0f 92       	push	r0
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     de2:	ec e5       	ldi	r30, 0x5C	; 92
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	80 83       	st	Z, r24
}
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <MTIMER0_VidOVF_SetCallBack+0x6>
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	90 93 86 00 	sts	0x0086, r25
     e08:	80 93 85 00 	sts	0x0085, r24
}
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <MTIMER0_VidCTC_SetCallBack+0x6>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	90 93 86 00 	sts	0x0086, r25
     e2c:	80 93 85 00 	sts	0x0085, r24
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     e64:	e0 91 85 00 	lds	r30, 0x0085
     e68:	f0 91 86 00 	lds	r31, 0x0086
     e6c:	09 95       	icall
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     ebe:	e0 91 85 00 	lds	r30, 0x0085
     ec2:	f0 91 86 00 	lds	r31, 0x0086
     ec6:	09 95       	icall
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     ef6:	ae e4       	ldi	r26, 0x4E	; 78
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ee e4       	ldi	r30, 0x4E	; 78
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	88 7f       	andi	r24, 0xF8	; 248
     f02:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     f04:	ae e4       	ldi	r26, 0x4E	; 78
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ee e4       	ldi	r30, 0x4E	; 78
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	81 60       	ori	r24, 0x01	; 1
     f10:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);

#elif TIMER1_SET_MODE == TIMER1_ICU_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     f12:	ae e4       	ldi	r26, 0x4E	; 78
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ee e4       	ldi	r30, 0x4E	; 78
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 7e       	andi	r24, 0xEF	; 239
     f1e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     f20:	ae e4       	ldi	r26, 0x4E	; 78
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	ee e4       	ldi	r30, 0x4E	; 78
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     f2e:	af e4       	ldi	r26, 0x4F	; 79
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ef e4       	ldi	r30, 0x4F	; 79
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8d 7f       	andi	r24, 0xFD	; 253
     f3a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
     f3c:	af e4       	ldi	r26, 0x4F	; 79
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	ef e4       	ldi	r30, 0x4F	; 79
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
     f4a:	a9 e5       	ldi	r26, 0x59	; 89
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e9 e5       	ldi	r30, 0x59	; 89
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
     f58:	a9 e5       	ldi	r26, 0x59	; 89
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e9 e5       	ldi	r30, 0x59	; 89
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	8c 93       	st	X, r24
	/*ICU Edge Select-->Rising edge*/
#if TIMER1_ICU_EDGE_SELECT == TIMER1_ICU_RISING_EDGE
	SET_BIT(TCCR1B,6);
     f66:	ae e4       	ldi	r26, 0x4E	; 78
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ee e4       	ldi	r30, 0x4E	; 78
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	80 64       	ori	r24, 0x40	; 64
     f72:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <MTIMER1_VidSetPreload+0x6>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
     f88:	ec e4       	ldi	r30, 0x4C	; 76
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
     fa6:	ec e4       	ldi	r30, 0x4C	; 76
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
     fbc:	e6 e4       	ldi	r30, 0x46	; 70
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	88 23       	and	r24, r24
     fda:	41 f4       	brne	.+16     	; 0xfec <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
     fdc:	ae e4       	ldi	r26, 0x4E	; 78
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ee e4       	ldi	r30, 0x4E	; 78
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	8c 93       	st	X, r24
     fea:	0a c0       	rjmp	.+20     	; 0x1000 <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	39 f4       	brne	.+14     	; 0x1000 <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
     ff2:	ae e4       	ldi	r26, 0x4E	; 78
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	ee e4       	ldi	r30, 0x4E	; 78
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <MTIMER1_VidOVF_SetCallBack+0x6>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	90 93 88 00 	sts	0x0088, r25
    101e:	80 93 87 00 	sts	0x0087, r24
}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <MTIMER1_VidICF_SetCallBack+0x6>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	90 93 8a 00 	sts	0x008A, r25
    1042:	80 93 89 00 	sts	0x0089, r24
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    107a:	e0 91 87 00 	lds	r30, 0x0087
    107e:	f0 91 88 00 	lds	r31, 0x0088
    1082:	09 95       	icall
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
    10d4:	e0 91 89 00 	lds	r30, 0x0089
    10d8:	f0 91 8a 00 	lds	r31, 0x008A
    10dc:	09 95       	icall
}
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <MSPI_VidMaster_Init>:
#include"MSPI_Private.h"
#include"MSPI_Config.h"

/*SPI Master Initialization*/
void MSPI_VidMaster_Init(void)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Ordered*/
#if MSPI_SET_DATA_ORDERED==MSPI_DATA_ORDERED_LSB
	SET_BIT(SPCR,5);
    110c:	ad e2       	ldi	r26, 0x2D	; 45
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ed e2       	ldi	r30, 0x2D	; 45
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 62       	ori	r24, 0x20	; 32
    1118:	8c 93       	st	X, r24
#else
#error"SPI Data Ordered option is not valid..."
#endif
	/*Set Clock Polarity*/
#if MSPI_SET_CLOCK_POLARITY==MSPI_CPOL_LEADING_RISING
	CLR_BIT(SPCR,3);
    111a:	ad e2       	ldi	r26, 0x2D	; 45
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ed e2       	ldi	r30, 0x2D	; 45
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	8c 93       	st	X, r24
#endif
	/*Set Clock Phase*/
#if MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SAMPLE
	CLR_BIT(SPCR,2);
#elif MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SETUP
	SET_BIT(SPCR,2);
    1128:	ad e2       	ldi	r26, 0x2D	; 45
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ed e2       	ldi	r30, 0x2D	; 45
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
#else
#error"SPI Data Clock Phase option is not valid..."
#endif
	/*Set Double SPI Speed Bit*/
#if MSPI_SET_DOUBLE_SPEED==MSPI_NO_DOUBLE_SPEED
	CLR_BIT(SPSR,0);
    1136:	ae e2       	ldi	r26, 0x2E	; 46
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ee e2       	ldi	r30, 0x2E	; 46
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8e 7f       	andi	r24, 0xFE	; 254
    1142:	8c 93       	st	X, r24
#endif
	/*Set SPI Interrupt Enable*/
#if MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_ENABLE
	SET_BIT(SPCR,7);
#elif MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR,7);
    1144:	ad e2       	ldi	r26, 0x2D	; 45
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ed e2       	ldi	r30, 0x2D	; 45
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8f 77       	andi	r24, 0x7F	; 127
    1150:	8c 93       	st	X, r24
#else
#error"SPI Interrupt Enable option is not valid..."
#endif
	/*set SPI Clock Rate Select*/
	SPCR&=MSPI_BIT_MASKING;
    1152:	ad e2       	ldi	r26, 0x2D	; 45
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ed e2       	ldi	r30, 0x2D	; 45
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8c 7f       	andi	r24, 0xFC	; 252
    115e:	8c 93       	st	X, r24
	SPCR|=MSPI_SET_CLOCK_RATE;
    1160:	ad e2       	ldi	r26, 0x2D	; 45
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ed e2       	ldi	r30, 0x2D	; 45
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8c 93       	st	X, r24
	/*Set Master Mode*/
	SET_BIT(SPCR,4);
    116c:	ad e2       	ldi	r26, 0x2D	; 45
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ed e2       	ldi	r30, 0x2D	; 45
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	80 61       	ori	r24, 0x10	; 16
    1178:	8c 93       	st	X, r24
	/*SPI Enable*/
	SET_BIT(SPCR,6);
    117a:	ad e2       	ldi	r26, 0x2D	; 45
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	ed e2       	ldi	r30, 0x2D	; 45
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 64       	ori	r24, 0x40	; 64
    1186:	8c 93       	st	X, r24
}
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <MSPI_VidSlave_Init>:
/*SPI Slave Initialization*/
void MSPI_VidSlave_Init(void)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Ordered*/
#if MSPI_SET_DATA_ORDERED==MSPI_DATA_ORDERED_LSB
	SET_BIT(SPCR,5);
    1196:	ad e2       	ldi	r26, 0x2D	; 45
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ed e2       	ldi	r30, 0x2D	; 45
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 62       	ori	r24, 0x20	; 32
    11a2:	8c 93       	st	X, r24
#else
#error"SPI Data Ordered option is not valid..."
#endif
	/*Set Clock Polarity*/
#if MSPI_SET_CLOCK_POLARITY==MSPI_CPOL_LEADING_RISING
	CLR_BIT(SPCR,3);
    11a4:	ad e2       	ldi	r26, 0x2D	; 45
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ed e2       	ldi	r30, 0x2D	; 45
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	87 7f       	andi	r24, 0xF7	; 247
    11b0:	8c 93       	st	X, r24
#endif
	/*Set Clock Phase*/
#if MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SAMPLE
	CLR_BIT(SPCR,2);
#elif MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SETUP
	SET_BIT(SPCR,2);
    11b2:	ad e2       	ldi	r26, 0x2D	; 45
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ed e2       	ldi	r30, 0x2D	; 45
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	84 60       	ori	r24, 0x04	; 4
    11be:	8c 93       	st	X, r24
#endif
	/*Set SPI Interrupt Enable*/
#if MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_ENABLE
	SET_BIT(SPCR,7);
#elif MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR,7);
    11c0:	ad e2       	ldi	r26, 0x2D	; 45
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ed e2       	ldi	r30, 0x2D	; 45
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 77       	andi	r24, 0x7F	; 127
    11cc:	8c 93       	st	X, r24
#else
#error"SPI Interrupt Enable option is not valid..."
#endif

	/*Set Slave Mode*/
	CLR_BIT(SPCR,4);
    11ce:	ad e2       	ldi	r26, 0x2D	; 45
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ed e2       	ldi	r30, 0x2D	; 45
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7e       	andi	r24, 0xEF	; 239
    11da:	8c 93       	st	X, r24
	/*SPI Enable*/
	SET_BIT(SPCR,6);
    11dc:	ad e2       	ldi	r26, 0x2D	; 45
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ed e2       	ldi	r30, 0x2D	; 45
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 64       	ori	r24, 0x40	; 64
    11e8:	8c 93       	st	X, r24
}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <MSPI_u8Send_Receive_Char>:
/*SPI Send and Receive Char*/
u8 MSPI_u8Send_Receive_Char(u8 Copy_u8Char)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	89 83       	std	Y+1, r24	; 0x01
	/*Send Char*/
	SPDR=Copy_u8Char;
    11fc:	ef e2       	ldi	r30, 0x2F	; 47
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	80 83       	st	Z, r24
	/*wait on SPI Interrupt Flag is set to one*/
	while(GET_BIT(SPSR,7)==0);
    1204:	ee e2       	ldi	r30, 0x2E	; 46
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	88 23       	and	r24, r24
    120c:	dc f7       	brge	.-10     	; 0x1204 <MSPI_u8Send_Receive_Char+0x14>
	return SPDR;
    120e:	ef e2       	ldi	r30, 0x2F	; 47
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
}
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <MSPI_u8Send_Char>:

void MSPI_u8Send_Char(u8 Copy_u8Char)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
	/*Send Char*/
	SPDR=Copy_u8Char; //send data by SPI
    1228:	ef e2       	ldi	r30, 0x2F	; 47
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	80 83       	st	Z, r24
	/*wait on SPI Interrupt Flag is set to one*/
	while(GET_BIT(SPSR,7)==0);//wait until SPI interrupt flag=1 (data is sent correctly)
    1230:	ee e2       	ldi	r30, 0x2E	; 46
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	88 23       	and	r24, r24
    1238:	dc f7       	brge	.-10     	; 0x1230 <MSPI_u8Send_Char+0x14>
}
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <MSPI_Receive_Char>:

u8 MSPI_Receive_Char(void)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62

	/*wait on SPI Interrupt Flag is set to one*/
	while(GET_BIT(SPSR,7)==0);//wait until SPI interrupt flag=1(data is receive correctly)
    124a:	ee e2       	ldi	r30, 0x2E	; 46
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	88 23       	and	r24, r24
    1252:	dc f7       	brge	.-10     	; 0x124a <MSPI_Receive_Char+0x8>
	return SPDR;//return the received byte from SPI data register
    1254:	ef e2       	ldi	r30, 0x2F	; 47
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <MSPI_u8Send_String>:

void MSPI_u8Send_String(const u8 *Str)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <MSPI_u8Send_String+0x6>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9b 83       	std	Y+3, r25	; 0x03
    126e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1270:	19 82       	std	Y+1, r1	; 0x01
    1272:	0e c0       	rjmp	.+28     	; 0x1290 <MSPI_u8Send_String+0x30>
	while(Str[i] != '\0')
	{
		MSPI_u8Send_Char(Str[i]);
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	fc 01       	movw	r30, r24
    1280:	e2 0f       	add	r30, r18
    1282:	f3 1f       	adc	r31, r19
    1284:	80 81       	ld	r24, Z
    1286:	0e 94 0e 09 	call	0x121c	; 0x121c <MSPI_u8Send_Char>
		i++;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	89 83       	std	Y+1, r24	; 0x01
}

void MSPI_u8Send_String(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	fc 01       	movw	r30, r24
    129c:	e2 0f       	add	r30, r18
    129e:	f3 1f       	adc	r31, r19
    12a0:	80 81       	ld	r24, Z
    12a2:	88 23       	and	r24, r24
    12a4:	39 f7       	brne	.-50     	; 0x1274 <MSPI_u8Send_String+0x14>
	{
		MSPI_u8Send_Char(Str[i]);
		i++;
	}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <MSPI_Receive_String>:

void MSPI_Receive_String(s8 *Str)
{
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <MSPI_Receive_String+0xa>
    12bc:	0f 92       	push	r0
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	9b 83       	std	Y+3, r25	; 0x03
    12c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    12c6:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = MSPI_Receive_Char();
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	9b 81       	ldd	r25, Y+3	; 0x03
    12d2:	8c 01       	movw	r16, r24
    12d4:	02 0f       	add	r16, r18
    12d6:	13 1f       	adc	r17, r19
    12d8:	0e 94 21 09 	call	0x1242	; 0x1242 <MSPI_Receive_Char>
    12dc:	f8 01       	movw	r30, r16
    12de:	80 83       	st	Z, r24
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <MSPI_Receive_String+0x4e>
	while(Str[i] != '#')
	{
		i++;
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	8f 5f       	subi	r24, 0xFF	; 255
    12e6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = MSPI_Receive_Char();
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	8c 01       	movw	r16, r24
    12f4:	02 0f       	add	r16, r18
    12f6:	13 1f       	adc	r17, r19
    12f8:	0e 94 21 09 	call	0x1242	; 0x1242 <MSPI_Receive_Char>
    12fc:	f8 01       	movw	r30, r16
    12fe:	80 83       	st	Z, r24

void MSPI_Receive_String(s8 *Str)
{
	u8 i = 0;
	Str[i] = MSPI_Receive_Char();
	while(Str[i] != '#')
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	fc 01       	movw	r30, r24
    130c:	e2 0f       	add	r30, r18
    130e:	f3 1f       	adc	r31, r19
    1310:	80 81       	ld	r24, Z
    1312:	83 32       	cpi	r24, 0x23	; 35
    1314:	31 f7       	brne	.-52     	; 0x12e2 <MSPI_Receive_String+0x30>
	{
		i++;
		Str[i] = MSPI_Receive_Char();
	}
	Str[i] = '\0';
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	9b 81       	ldd	r25, Y+3	; 0x03
    1320:	fc 01       	movw	r30, r24
    1322:	e2 0f       	add	r30, r18
    1324:	f3 1f       	adc	r31, r19
    1326:	10 82       	st	Z, r1
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	08 95       	ret

00001338 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1340:	af e5       	ldi	r26, 0x5F	; 95
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ef e5       	ldi	r30, 0x5F	; 95
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	80 68       	ori	r24, 0x80	; 128
    134c:	8c 93       	st	X, r24
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    135c:	af e5       	ldi	r26, 0x5F	; 95
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ef e5       	ldi	r30, 0x5F	; 95
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8f 77       	andi	r24, 0x7F	; 127
    1368:	8c 93       	st	X, r24
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	81 60       	ori	r24, 0x01	; 1
    1384:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	82 60       	ori	r24, 0x02	; 2
    1392:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    1394:	ab e5       	ldi	r26, 0x5B	; 91
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e5       	ldi	r30, 0x5B	; 91
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 64       	ori	r24, 0x40	; 64
    13a0:	8c 93       	st	X, r24
}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    13b0:	a5 e5       	ldi	r26, 0x55	; 85
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e5       	ldi	r30, 0x55	; 85
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	84 60       	ori	r24, 0x04	; 4
    13bc:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    13be:	a5 e5       	ldi	r26, 0x55	; 85
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e5       	ldi	r30, 0x55	; 85
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	88 60       	ori	r24, 0x08	; 8
    13ca:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    13cc:	ab e5       	ldi	r26, 0x5B	; 91
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	eb e5       	ldi	r30, 0x5B	; 91
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 68       	ori	r24, 0x80	; 128
    13d8:	8c 93       	st	X, r24
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    13e8:	a4 e5       	ldi	r26, 0x54	; 84
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e4 e5       	ldi	r30, 0x54	; 84
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 64       	ori	r24, 0x40	; 64
    13f4:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    13f6:	ab e5       	ldi	r26, 0x5B	; 91
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	eb e5       	ldi	r30, 0x5B	; 91
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 62       	ori	r24, 0x20	; 32
    1402:	8c 93       	st	X, r24
}
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <MEXTI_VidSenseControl+0x6>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <MEXTI_VidSenseControl+0x8>
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3c 83       	std	Y+4, r19	; 0x04
    1422:	2b 83       	std	Y+3, r18	; 0x03
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <MEXTI_VidSenseControl+0x26>
    142e:	54 c0       	rjmp	.+168    	; 0x14d8 <MEXTI_VidSenseControl+0xce>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <MEXTI_VidSenseControl+0x32>
    143a:	96 c0       	rjmp	.+300    	; 0x1568 <MEXTI_VidSenseControl+0x15e>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	09 f0       	breq	.+2      	; 0x1446 <MEXTI_VidSenseControl+0x3c>
    1444:	a6 c0       	rjmp	.+332    	; 0x1592 <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	88 23       	and	r24, r24
    144a:	79 f4       	brne	.+30     	; 0x146a <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    144c:	a5 e5       	ldi	r26, 0x55	; 85
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e5 e5       	ldi	r30, 0x55	; 85
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8e 7f       	andi	r24, 0xFE	; 254
    1458:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    145a:	a5 e5       	ldi	r26, 0x55	; 85
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e5       	ldi	r30, 0x55	; 85
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8d 7f       	andi	r24, 0xFD	; 253
    1466:	8c 93       	st	X, r24
    1468:	94 c0       	rjmp	.+296    	; 0x1592 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	79 f4       	brne	.+30     	; 0x148e <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    1470:	a5 e5       	ldi	r26, 0x55	; 85
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e5       	ldi	r30, 0x55	; 85
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	81 60       	ori	r24, 0x01	; 1
    147c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8d 7f       	andi	r24, 0xFD	; 253
    148a:	8c 93       	st	X, r24
    148c:	82 c0       	rjmp	.+260    	; 0x1592 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	79 f4       	brne	.+30     	; 0x14b2 <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    1494:	a5 e5       	ldi	r26, 0x55	; 85
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e5 e5       	ldi	r30, 0x55	; 85
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    14a2:	a5 e5       	ldi	r26, 0x55	; 85
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e5 e5       	ldi	r30, 0x55	; 85
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	82 60       	ori	r24, 0x02	; 2
    14ae:	8c 93       	st	X, r24
    14b0:	70 c0       	rjmp	.+224    	; 0x1592 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	09 f0       	breq	.+2      	; 0x14ba <MEXTI_VidSenseControl+0xb0>
    14b8:	6c c0       	rjmp	.+216    	; 0x1592 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    14ba:	a5 e5       	ldi	r26, 0x55	; 85
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e5       	ldi	r30, 0x55	; 85
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	81 60       	ori	r24, 0x01	; 1
    14c6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    14c8:	a5 e5       	ldi	r26, 0x55	; 85
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e5 e5       	ldi	r30, 0x55	; 85
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	82 60       	ori	r24, 0x02	; 2
    14d4:	8c 93       	st	X, r24
    14d6:	5d c0       	rjmp	.+186    	; 0x1592 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 23       	and	r24, r24
    14dc:	79 f4       	brne	.+30     	; 0x14fc <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    14de:	a5 e5       	ldi	r26, 0x55	; 85
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e5       	ldi	r30, 0x55	; 85
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8b 7f       	andi	r24, 0xFB	; 251
    14ea:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    14ec:	a5 e5       	ldi	r26, 0x55	; 85
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e5 e5       	ldi	r30, 0x55	; 85
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	87 7f       	andi	r24, 0xF7	; 247
    14f8:	8c 93       	st	X, r24
    14fa:	4b c0       	rjmp	.+150    	; 0x1592 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	79 f4       	brne	.+30     	; 0x1520 <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    1502:	a5 e5       	ldi	r26, 0x55	; 85
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e5       	ldi	r30, 0x55	; 85
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	84 60       	ori	r24, 0x04	; 4
    150e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1510:	a5 e5       	ldi	r26, 0x55	; 85
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e5 e5       	ldi	r30, 0x55	; 85
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	87 7f       	andi	r24, 0xF7	; 247
    151c:	8c 93       	st	X, r24
    151e:	39 c0       	rjmp	.+114    	; 0x1592 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	79 f4       	brne	.+30     	; 0x1544 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8b 7f       	andi	r24, 0xFB	; 251
    1532:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1534:	a5 e5       	ldi	r26, 0x55	; 85
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e5       	ldi	r30, 0x55	; 85
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	88 60       	ori	r24, 0x08	; 8
    1540:	8c 93       	st	X, r24
    1542:	27 c0       	rjmp	.+78     	; 0x1592 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	83 30       	cpi	r24, 0x03	; 3
    1548:	21 f5       	brne	.+72     	; 0x1592 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    154a:	a5 e5       	ldi	r26, 0x55	; 85
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e5       	ldi	r30, 0x55	; 85
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	84 60       	ori	r24, 0x04	; 4
    1556:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1558:	a5 e5       	ldi	r26, 0x55	; 85
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e5       	ldi	r30, 0x55	; 85
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 60       	ori	r24, 0x08	; 8
    1564:	8c 93       	st	X, r24
    1566:	15 c0       	rjmp	.+42     	; 0x1592 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	41 f4       	brne	.+16     	; 0x157e <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    156e:	a4 e5       	ldi	r26, 0x54	; 84
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e4 e5       	ldi	r30, 0x54	; 84
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8f 7b       	andi	r24, 0xBF	; 191
    157a:	8c 93       	st	X, r24
    157c:	0a c0       	rjmp	.+20     	; 0x1592 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	39 f4       	brne	.+14     	; 0x1592 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    1584:	a4 e5       	ldi	r26, 0x54	; 84
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e4 e5       	ldi	r30, 0x54	; 84
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 64       	ori	r24, 0x40	; 64
    1590:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <MEXTI0_Set_CallBackFunction+0x6>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	90 93 8c 00 	sts	0x008C, r25
    15b6:	80 93 8b 00 	sts	0x008B, r24
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	2f 93       	push	r18
    15d0:	3f 93       	push	r19
    15d2:	4f 93       	push	r20
    15d4:	5f 93       	push	r21
    15d6:	6f 93       	push	r22
    15d8:	7f 93       	push	r23
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    15ee:	e0 91 8b 00 	lds	r30, 0x008B
    15f2:	f0 91 8c 00 	lds	r31, 0x008C
    15f6:	09 95       	icall
}
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <MDIO_Error_State_SetPinDirection+0x6>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <MDIO_Error_State_SetPinDirection+0x8>
    1626:	00 d0       	rcall	.+0      	; 0x1628 <MDIO_Error_State_SetPinDirection+0xa>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	8a 83       	std	Y+2, r24	; 0x02
    162e:	6b 83       	std	Y+3, r22	; 0x03
    1630:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	88 30       	cpi	r24, 0x08	; 8
    163a:	08 f0       	brcs	.+2      	; 0x163e <MDIO_Error_State_SetPinDirection+0x20>
    163c:	e8 c0       	rjmp	.+464    	; 0x180e <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3e 83       	std	Y+6, r19	; 0x06
    1646:	2d 83       	std	Y+5, r18	; 0x05
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <MDIO_Error_State_SetPinDirection+0x36>
    1652:	48 c0       	rjmp	.+144    	; 0x16e4 <MDIO_Error_State_SetPinDirection+0xc6>
    1654:	2d 81       	ldd	r18, Y+5	; 0x05
    1656:	3e 81       	ldd	r19, Y+6	; 0x06
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	2c f4       	brge	.+10     	; 0x1668 <MDIO_Error_State_SetPinDirection+0x4a>
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	71 f0       	breq	.+28     	; 0x1682 <MDIO_Error_State_SetPinDirection+0x64>
    1666:	d1 c0       	rjmp	.+418    	; 0x180a <MDIO_Error_State_SetPinDirection+0x1ec>
    1668:	2d 81       	ldd	r18, Y+5	; 0x05
    166a:	3e 81       	ldd	r19, Y+6	; 0x06
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <MDIO_Error_State_SetPinDirection+0x56>
    1672:	69 c0       	rjmp	.+210    	; 0x1746 <MDIO_Error_State_SetPinDirection+0x128>
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	83 30       	cpi	r24, 0x03	; 3
    167a:	91 05       	cpc	r25, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <MDIO_Error_State_SetPinDirection+0x62>
    167e:	94 c0       	rjmp	.+296    	; 0x17a8 <MDIO_Error_State_SetPinDirection+0x18a>
    1680:	c4 c0       	rjmp	.+392    	; 0x180a <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	a1 f4       	brne	.+40     	; 0x16b0 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    1688:	aa e3       	ldi	r26, 0x3A	; 58
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ea e3       	ldi	r30, 0x3A	; 58
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <MDIO_Error_State_SetPinDirection+0x88>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <MDIO_Error_State_SetPinDirection+0x84>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	b0 c0       	rjmp	.+352    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	88 23       	and	r24, r24
    16b4:	a9 f4       	brne	.+42     	; 0x16e0 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    16b6:	aa e3       	ldi	r26, 0x3A	; 58
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ea e3       	ldi	r30, 0x3A	; 58
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <MDIO_Error_State_SetPinDirection+0xb6>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <MDIO_Error_State_SetPinDirection+0xb2>
    16d8:	80 95       	com	r24
    16da:	84 23       	and	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	98 c0       	rjmp	.+304    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    16e0:	19 82       	std	Y+1, r1	; 0x01
    16e2:	96 c0       	rjmp	.+300    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	a1 f4       	brne	.+40     	; 0x1712 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    16ea:	a7 e3       	ldi	r26, 0x37	; 55
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e7 e3       	ldi	r30, 0x37	; 55
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <MDIO_Error_State_SetPinDirection+0xea>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <MDIO_Error_State_SetPinDirection+0xe6>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	7f c0       	rjmp	.+254    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	88 23       	and	r24, r24
    1716:	a9 f4       	brne	.+42     	; 0x1742 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1718:	a7 e3       	ldi	r26, 0x37	; 55
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e7 e3       	ldi	r30, 0x37	; 55
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <MDIO_Error_State_SetPinDirection+0x118>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <MDIO_Error_State_SetPinDirection+0x114>
    173a:	80 95       	com	r24
    173c:	84 23       	and	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	67 c0       	rjmp	.+206    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1742:	19 82       	std	Y+1, r1	; 0x01
    1744:	65 c0       	rjmp	.+202    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	a1 f4       	brne	.+40     	; 0x1774 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    174c:	a4 e3       	ldi	r26, 0x34	; 52
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e4 e3       	ldi	r30, 0x34	; 52
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <MDIO_Error_State_SetPinDirection+0x14c>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <MDIO_Error_State_SetPinDirection+0x148>
    176e:	84 2b       	or	r24, r20
    1770:	8c 93       	st	X, r24
    1772:	4e c0       	rjmp	.+156    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	88 23       	and	r24, r24
    1778:	a9 f4       	brne	.+42     	; 0x17a4 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    177a:	a4 e3       	ldi	r26, 0x34	; 52
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e4 e3       	ldi	r30, 0x34	; 52
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <MDIO_Error_State_SetPinDirection+0x17a>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <MDIO_Error_State_SetPinDirection+0x176>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	36 c0       	rjmp	.+108    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	34 c0       	rjmp	.+104    	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    17ae:	a1 e3       	ldi	r26, 0x31	; 49
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e1 e3       	ldi	r30, 0x31	; 49
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <MDIO_Error_State_SetPinDirection+0x1ae>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <MDIO_Error_State_SetPinDirection+0x1aa>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	1d c0       	rjmp	.+58     	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	88 23       	and	r24, r24
    17da:	a9 f4       	brne	.+42     	; 0x1806 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    17dc:	a1 e3       	ldi	r26, 0x31	; 49
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e1 e3       	ldi	r30, 0x31	; 49
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <MDIO_Error_State_SetPinDirection+0x1dc>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <MDIO_Error_State_SetPinDirection+0x1d8>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1806:	19 82       	std	Y+1, r1	; 0x01
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    180a:	19 82       	std	Y+1, r1	; 0x01
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    180e:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    1810:	89 81       	ldd	r24, Y+1	; 0x01

}
    1812:	26 96       	adiw	r28, 0x06	; 6
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <MDIO_Error_State_SetPortDirection+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <MDIO_Error_State_SetPortDirection+0x8>
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	8f 3f       	cpi	r24, 0xFF	; 255
    183e:	19 f0       	breq	.+6      	; 0x1846 <MDIO_Error_State_SetPortDirection+0x22>
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	88 23       	and	r24, r24
    1844:	a9 f5       	brne	.+106    	; 0x18b0 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3d 83       	std	Y+5, r19	; 0x05
    184e:	2c 83       	std	Y+4, r18	; 0x04
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	9d 81       	ldd	r25, Y+5	; 0x05
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	91 05       	cpc	r25, r1
    1858:	d1 f0       	breq	.+52     	; 0x188e <MDIO_Error_State_SetPortDirection+0x6a>
    185a:	2c 81       	ldd	r18, Y+4	; 0x04
    185c:	3d 81       	ldd	r19, Y+5	; 0x05
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	2c f4       	brge	.+10     	; 0x186e <MDIO_Error_State_SetPortDirection+0x4a>
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	61 f0       	breq	.+24     	; 0x1884 <MDIO_Error_State_SetPortDirection+0x60>
    186c:	1f c0       	rjmp	.+62     	; 0x18ac <MDIO_Error_State_SetPortDirection+0x88>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	81 f0       	breq	.+32     	; 0x1898 <MDIO_Error_State_SetPortDirection+0x74>
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	9d 81       	ldd	r25, Y+5	; 0x05
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	91 05       	cpc	r25, r1
    1880:	81 f0       	breq	.+32     	; 0x18a2 <MDIO_Error_State_SetPortDirection+0x7e>
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    1884:	ea e3       	ldi	r30, 0x3A	; 58
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	80 83       	st	Z, r24
    188c:	12 c0       	rjmp	.+36     	; 0x18b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    188e:	e7 e3       	ldi	r30, 0x37	; 55
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	80 83       	st	Z, r24
    1896:	0d c0       	rjmp	.+26     	; 0x18b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    1898:	e4 e3       	ldi	r30, 0x34	; 52
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	80 83       	st	Z, r24
    18a0:	08 c0       	rjmp	.+16     	; 0x18b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    18a2:	e1 e3       	ldi	r30, 0x31	; 49
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	80 83       	st	Z, r24
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    18ac:	19 82       	std	Y+1, r1	; 0x01
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    18b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <MDIO_Error_State_SetPinValue+0x6>
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <MDIO_Error_State_SetPinValue+0x8>
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <MDIO_Error_State_SetPinValue+0xa>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	6b 83       	std	Y+3, r22	; 0x03
    18d6:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	88 30       	cpi	r24, 0x08	; 8
    18e0:	08 f0       	brcs	.+2      	; 0x18e4 <MDIO_Error_State_SetPinValue+0x20>
    18e2:	e8 c0       	rjmp	.+464    	; 0x1ab4 <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3e 83       	std	Y+6, r19	; 0x06
    18ec:	2d 83       	std	Y+5, r18	; 0x05
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <MDIO_Error_State_SetPinValue+0x36>
    18f8:	48 c0       	rjmp	.+144    	; 0x198a <MDIO_Error_State_SetPinValue+0xc6>
    18fa:	2d 81       	ldd	r18, Y+5	; 0x05
    18fc:	3e 81       	ldd	r19, Y+6	; 0x06
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	2c f4       	brge	.+10     	; 0x190e <MDIO_Error_State_SetPinValue+0x4a>
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	71 f0       	breq	.+28     	; 0x1928 <MDIO_Error_State_SetPinValue+0x64>
    190c:	d1 c0       	rjmp	.+418    	; 0x1ab0 <MDIO_Error_State_SetPinValue+0x1ec>
    190e:	2d 81       	ldd	r18, Y+5	; 0x05
    1910:	3e 81       	ldd	r19, Y+6	; 0x06
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <MDIO_Error_State_SetPinValue+0x56>
    1918:	69 c0       	rjmp	.+210    	; 0x19ec <MDIO_Error_State_SetPinValue+0x128>
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	91 05       	cpc	r25, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <MDIO_Error_State_SetPinValue+0x62>
    1924:	94 c0       	rjmp	.+296    	; 0x1a4e <MDIO_Error_State_SetPinValue+0x18a>
    1926:	c4 c0       	rjmp	.+392    	; 0x1ab0 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	a1 f4       	brne	.+40     	; 0x1956 <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    192e:	ab e3       	ldi	r26, 0x3B	; 59
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	eb e3       	ldi	r30, 0x3B	; 59
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <MDIO_Error_State_SetPinValue+0x88>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <MDIO_Error_State_SetPinValue+0x84>
    1950:	84 2b       	or	r24, r20
    1952:	8c 93       	st	X, r24
    1954:	b0 c0       	rjmp	.+352    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	88 23       	and	r24, r24
    195a:	a9 f4       	brne	.+42     	; 0x1986 <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    195c:	ab e3       	ldi	r26, 0x3B	; 59
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	eb e3       	ldi	r30, 0x3B	; 59
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 2e       	mov	r0, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <MDIO_Error_State_SetPinValue+0xb6>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <MDIO_Error_State_SetPinValue+0xb2>
    197e:	80 95       	com	r24
    1980:	84 23       	and	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	98 c0       	rjmp	.+304    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1986:	19 82       	std	Y+1, r1	; 0x01
    1988:	96 c0       	rjmp	.+300    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	a1 f4       	brne	.+40     	; 0x19b8 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    1990:	a8 e3       	ldi	r26, 0x38	; 56
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e8 e3       	ldi	r30, 0x38	; 56
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <MDIO_Error_State_SetPinValue+0xea>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <MDIO_Error_State_SetPinValue+0xe6>
    19b2:	84 2b       	or	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	7f c0       	rjmp	.+254    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	88 23       	and	r24, r24
    19bc:	a9 f4       	brne	.+42     	; 0x19e8 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    19be:	a8 e3       	ldi	r26, 0x38	; 56
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e8 e3       	ldi	r30, 0x38	; 56
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <MDIO_Error_State_SetPinValue+0x118>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <MDIO_Error_State_SetPinValue+0x114>
    19e0:	80 95       	com	r24
    19e2:	84 23       	and	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	67 c0       	rjmp	.+206    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    19e8:	19 82       	std	Y+1, r1	; 0x01
    19ea:	65 c0       	rjmp	.+202    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	a1 f4       	brne	.+40     	; 0x1a1a <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    19f2:	a5 e3       	ldi	r26, 0x35	; 53
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e3       	ldi	r30, 0x35	; 53
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <MDIO_Error_State_SetPinValue+0x14c>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <MDIO_Error_State_SetPinValue+0x148>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	4e c0       	rjmp	.+156    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	88 23       	and	r24, r24
    1a1e:	a9 f4       	brne	.+42     	; 0x1a4a <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    1a20:	a5 e3       	ldi	r26, 0x35	; 53
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <MDIO_Error_State_SetPinValue+0x17a>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <MDIO_Error_State_SetPinValue+0x176>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	36 c0       	rjmp	.+108    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1a4a:	19 82       	std	Y+1, r1	; 0x01
    1a4c:	34 c0       	rjmp	.+104    	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    1a54:	a2 e3       	ldi	r26, 0x32	; 50
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e2 e3       	ldi	r30, 0x32	; 50
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <MDIO_Error_State_SetPinValue+0x1ae>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <MDIO_Error_State_SetPinValue+0x1aa>
    1a76:	84 2b       	or	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	1d c0       	rjmp	.+58     	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	88 23       	and	r24, r24
    1a80:	a9 f4       	brne	.+42     	; 0x1aac <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    1a82:	a2 e3       	ldi	r26, 0x32	; 50
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e2 e3       	ldi	r30, 0x32	; 50
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <MDIO_Error_State_SetPinValue+0x1dc>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <MDIO_Error_State_SetPinValue+0x1d8>
    1aa4:	80 95       	com	r24
    1aa6:	84 23       	and	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	05 c0       	rjmp	.+10     	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1aac:	19 82       	std	Y+1, r1	; 0x01
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ab8:	26 96       	adiw	r28, 0x06	; 6
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <MDIO_Error_State_SetPortValue+0x6>
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <MDIO_Error_State_SetPortValue+0x8>
    1ad2:	0f 92       	push	r0
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
    1ada:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	3d 83       	std	Y+5, r19	; 0x05
    1ae8:	2c 83       	std	Y+4, r18	; 0x04
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	9d 81       	ldd	r25, Y+5	; 0x05
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	91 05       	cpc	r25, r1
    1af2:	d1 f0       	breq	.+52     	; 0x1b28 <MDIO_Error_State_SetPortValue+0x5e>
    1af4:	2c 81       	ldd	r18, Y+4	; 0x04
    1af6:	3d 81       	ldd	r19, Y+5	; 0x05
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <MDIO_Error_State_SetPortValue+0x3e>
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	61 f0       	breq	.+24     	; 0x1b1e <MDIO_Error_State_SetPortValue+0x54>
    1b06:	1f c0       	rjmp	.+62     	; 0x1b46 <MDIO_Error_State_SetPortValue+0x7c>
    1b08:	2c 81       	ldd	r18, Y+4	; 0x04
    1b0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	81 f0       	breq	.+32     	; 0x1b32 <MDIO_Error_State_SetPortValue+0x68>
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	9d 81       	ldd	r25, Y+5	; 0x05
    1b16:	83 30       	cpi	r24, 0x03	; 3
    1b18:	91 05       	cpc	r25, r1
    1b1a:	81 f0       	breq	.+32     	; 0x1b3c <MDIO_Error_State_SetPortValue+0x72>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1b1e:	eb e3       	ldi	r30, 0x3B	; 59
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	80 83       	st	Z, r24
    1b26:	10 c0       	rjmp	.+32     	; 0x1b48 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    1b28:	e8 e3       	ldi	r30, 0x38	; 56
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	80 83       	st	Z, r24
    1b30:	0b c0       	rjmp	.+22     	; 0x1b48 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    1b32:	e5 e3       	ldi	r30, 0x35	; 53
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	80 83       	st	Z, r24
    1b3a:	06 c0       	rjmp	.+12     	; 0x1b48 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1b3c:	e2 e3       	ldi	r30, 0x32	; 50
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	80 83       	st	Z, r24
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    1b46:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	27 97       	sbiw	r28, 0x07	; 7
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
    1b70:	6b 83       	std	Y+3, r22	; 0x03
    1b72:	5d 83       	std	Y+5, r21	; 0x05
    1b74:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	88 30       	cpi	r24, 0x08	; 8
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <MDIO_Error_State_GetPinValue+0x28>
    1b80:	79 c0       	rjmp	.+242    	; 0x1c74 <MDIO_Error_State_GetPinValue+0x11a>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	91 05       	cpc	r25, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <MDIO_Error_State_GetPinValue+0x34>
    1b8c:	73 c0       	rjmp	.+230    	; 0x1c74 <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3f 83       	std	Y+7, r19	; 0x07
    1b96:	2e 83       	std	Y+6, r18	; 0x06
    1b98:	4e 81       	ldd	r20, Y+6	; 0x06
    1b9a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b9c:	41 30       	cpi	r20, 0x01	; 1
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	59 f1       	breq	.+86     	; 0x1bf8 <MDIO_Error_State_GetPinValue+0x9e>
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba6:	82 30       	cpi	r24, 0x02	; 2
    1ba8:	91 05       	cpc	r25, r1
    1baa:	34 f4       	brge	.+12     	; 0x1bb8 <MDIO_Error_State_GetPinValue+0x5e>
    1bac:	2e 81       	ldd	r18, Y+6	; 0x06
    1bae:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb0:	21 15       	cp	r18, r1
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	69 f0       	breq	.+26     	; 0x1bd0 <MDIO_Error_State_GetPinValue+0x76>
    1bb6:	5c c0       	rjmp	.+184    	; 0x1c70 <MDIO_Error_State_GetPinValue+0x116>
    1bb8:	4e 81       	ldd	r20, Y+6	; 0x06
    1bba:	5f 81       	ldd	r21, Y+7	; 0x07
    1bbc:	42 30       	cpi	r20, 0x02	; 2
    1bbe:	51 05       	cpc	r21, r1
    1bc0:	79 f1       	breq	.+94     	; 0x1c20 <MDIO_Error_State_GetPinValue+0xc6>
    1bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc6:	83 30       	cpi	r24, 0x03	; 3
    1bc8:	91 05       	cpc	r25, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <MDIO_Error_State_GetPinValue+0x74>
    1bcc:	3d c0       	rjmp	.+122    	; 0x1c48 <MDIO_Error_State_GetPinValue+0xee>
    1bce:	50 c0       	rjmp	.+160    	; 0x1c70 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    1bd0:	e9 e3       	ldi	r30, 0x39	; 57
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <MDIO_Error_State_GetPinValue+0x8e>
    1be4:	55 95       	asr	r21
    1be6:	47 95       	ror	r20
    1be8:	8a 95       	dec	r24
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <MDIO_Error_State_GetPinValue+0x8a>
    1bec:	ca 01       	movw	r24, r20
    1bee:	81 70       	andi	r24, 0x01	; 1
    1bf0:	ec 81       	ldd	r30, Y+4	; 0x04
    1bf2:	fd 81       	ldd	r31, Y+5	; 0x05
    1bf4:	80 83       	st	Z, r24
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1bf8:	e6 e3       	ldi	r30, 0x36	; 54
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a9 01       	movw	r20, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <MDIO_Error_State_GetPinValue+0xb6>
    1c0c:	55 95       	asr	r21
    1c0e:	47 95       	ror	r20
    1c10:	8a 95       	dec	r24
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <MDIO_Error_State_GetPinValue+0xb2>
    1c14:	ca 01       	movw	r24, r20
    1c16:	81 70       	andi	r24, 0x01	; 1
    1c18:	ec 81       	ldd	r30, Y+4	; 0x04
    1c1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c1c:	80 83       	st	Z, r24
    1c1e:	2b c0       	rjmp	.+86     	; 0x1c76 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1c20:	e3 e3       	ldi	r30, 0x33	; 51
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a9 01       	movw	r20, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <MDIO_Error_State_GetPinValue+0xde>
    1c34:	55 95       	asr	r21
    1c36:	47 95       	ror	r20
    1c38:	8a 95       	dec	r24
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <MDIO_Error_State_GetPinValue+0xda>
    1c3c:	ca 01       	movw	r24, r20
    1c3e:	81 70       	andi	r24, 0x01	; 1
    1c40:	ec 81       	ldd	r30, Y+4	; 0x04
    1c42:	fd 81       	ldd	r31, Y+5	; 0x05
    1c44:	80 83       	st	Z, r24
    1c46:	17 c0       	rjmp	.+46     	; 0x1c76 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1c48:	e0 e3       	ldi	r30, 0x30	; 48
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a9 01       	movw	r20, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <MDIO_Error_State_GetPinValue+0x106>
    1c5c:	55 95       	asr	r21
    1c5e:	47 95       	ror	r20
    1c60:	8a 95       	dec	r24
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <MDIO_Error_State_GetPinValue+0x102>
    1c64:	ca 01       	movw	r24, r20
    1c66:	81 70       	andi	r24, 0x01	; 1
    1c68:	ec 81       	ldd	r30, Y+4	; 0x04
    1c6a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c6c:	80 83       	st	Z, r24
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1c70:	19 82       	std	Y+1, r1	; 0x01
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1c74:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1c76:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c78:	27 96       	adiw	r28, 0x07	; 7
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <MDIO_Error_State_SetNippleValue+0x6>
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <MDIO_Error_State_SetNippleValue+0x8>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <MDIO_Error_State_SetNippleValue+0xa>
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	8a 83       	std	Y+2, r24	; 0x02
    1c9a:	6b 83       	std	Y+3, r22	; 0x03
    1c9c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	85 30       	cpi	r24, 0x05	; 5
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <MDIO_Error_State_SetNippleValue+0x20>
    1ca8:	c9 c0       	rjmp	.+402    	; 0x1e3c <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3e 83       	std	Y+6, r19	; 0x06
    1cb2:	2d 83       	std	Y+5, r18	; 0x05
    1cb4:	6d 81       	ldd	r22, Y+5	; 0x05
    1cb6:	7e 81       	ldd	r23, Y+6	; 0x06
    1cb8:	61 30       	cpi	r22, 0x01	; 1
    1cba:	71 05       	cpc	r23, r1
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <MDIO_Error_State_SetNippleValue+0x36>
    1cbe:	41 c0       	rjmp	.+130    	; 0x1d42 <MDIO_Error_State_SetNippleValue+0xb8>
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	82 30       	cpi	r24, 0x02	; 2
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	34 f4       	brge	.+12     	; 0x1cd6 <MDIO_Error_State_SetNippleValue+0x4c>
    1cca:	2d 81       	ldd	r18, Y+5	; 0x05
    1ccc:	3e 81       	ldd	r19, Y+6	; 0x06
    1cce:	21 15       	cp	r18, r1
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	71 f0       	breq	.+28     	; 0x1cf0 <MDIO_Error_State_SetNippleValue+0x66>
    1cd4:	b1 c0       	rjmp	.+354    	; 0x1e38 <MDIO_Error_State_SetNippleValue+0x1ae>
    1cd6:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd8:	7e 81       	ldd	r23, Y+6	; 0x06
    1cda:	62 30       	cpi	r22, 0x02	; 2
    1cdc:	71 05       	cpc	r23, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <MDIO_Error_State_SetNippleValue+0x58>
    1ce0:	59 c0       	rjmp	.+178    	; 0x1d94 <MDIO_Error_State_SetNippleValue+0x10a>
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	83 30       	cpi	r24, 0x03	; 3
    1ce8:	91 05       	cpc	r25, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <MDIO_Error_State_SetNippleValue+0x64>
    1cec:	7c c0       	rjmp	.+248    	; 0x1de6 <MDIO_Error_State_SetNippleValue+0x15c>
    1cee:	a4 c0       	rjmp	.+328    	; 0x1e38 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1cf0:	ab e3       	ldi	r26, 0x3B	; 59
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	eb e3       	ldi	r30, 0x3B	; 59
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	8f e0       	ldi	r24, 0x0F	; 15
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <MDIO_Error_State_SetNippleValue+0x82>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	2a 95       	dec	r18
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <MDIO_Error_State_SetNippleValue+0x7e>
    1d10:	80 95       	com	r24
    1d12:	84 23       	and	r24, r20
    1d14:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1d16:	ab e3       	ldi	r26, 0x3B	; 59
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	eb e3       	ldi	r30, 0x3B	; 59
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	b9 01       	movw	r22, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <MDIO_Error_State_SetNippleValue+0xac>
    1d32:	66 0f       	add	r22, r22
    1d34:	77 1f       	adc	r23, r23
    1d36:	8a 95       	dec	r24
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <MDIO_Error_State_SetNippleValue+0xa8>
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	84 2b       	or	r24, r20
    1d3e:	8c 93       	st	X, r24
    1d40:	7e c0       	rjmp	.+252    	; 0x1e3e <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1d42:	a8 e3       	ldi	r26, 0x38	; 56
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e8 e3       	ldi	r30, 0x38	; 56
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8f e0       	ldi	r24, 0x0F	; 15
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <MDIO_Error_State_SetNippleValue+0xd4>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	2a 95       	dec	r18
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <MDIO_Error_State_SetNippleValue+0xd0>
    1d62:	80 95       	com	r24
    1d64:	84 23       	and	r24, r20
    1d66:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1d68:	a8 e3       	ldi	r26, 0x38	; 56
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e8 e3       	ldi	r30, 0x38	; 56
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	88 2f       	mov	r24, r24
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	b9 01       	movw	r22, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <MDIO_Error_State_SetNippleValue+0xfe>
    1d84:	66 0f       	add	r22, r22
    1d86:	77 1f       	adc	r23, r23
    1d88:	8a 95       	dec	r24
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <MDIO_Error_State_SetNippleValue+0xfa>
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	84 2b       	or	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	55 c0       	rjmp	.+170    	; 0x1e3e <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1d94:	a5 e3       	ldi	r26, 0x35	; 53
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e5 e3       	ldi	r30, 0x35	; 53
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	8f e0       	ldi	r24, 0x0F	; 15
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <MDIO_Error_State_SetNippleValue+0x126>
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	2a 95       	dec	r18
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <MDIO_Error_State_SetNippleValue+0x122>
    1db4:	80 95       	com	r24
    1db6:	84 23       	and	r24, r20
    1db8:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1dba:	a5 e3       	ldi	r26, 0x35	; 53
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e5 e3       	ldi	r30, 0x35	; 53
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	b9 01       	movw	r22, r18
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <MDIO_Error_State_SetNippleValue+0x150>
    1dd6:	66 0f       	add	r22, r22
    1dd8:	77 1f       	adc	r23, r23
    1dda:	8a 95       	dec	r24
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <MDIO_Error_State_SetNippleValue+0x14c>
    1dde:	cb 01       	movw	r24, r22
    1de0:	84 2b       	or	r24, r20
    1de2:	8c 93       	st	X, r24
    1de4:	2c c0       	rjmp	.+88     	; 0x1e3e <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1de6:	a2 e3       	ldi	r26, 0x32	; 50
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e2 e3       	ldi	r30, 0x32	; 50
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	48 2f       	mov	r20, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	8f e0       	ldi	r24, 0x0F	; 15
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <MDIO_Error_State_SetNippleValue+0x178>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	2a 95       	dec	r18
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <MDIO_Error_State_SetNippleValue+0x174>
    1e06:	80 95       	com	r24
    1e08:	84 23       	and	r24, r20
    1e0a:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1e0c:	a2 e3       	ldi	r26, 0x32	; 50
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e2 e3       	ldi	r30, 0x32	; 50
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	b9 01       	movw	r22, r18
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <MDIO_Error_State_SetNippleValue+0x1a2>
    1e28:	66 0f       	add	r22, r22
    1e2a:	77 1f       	adc	r23, r23
    1e2c:	8a 95       	dec	r24
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <MDIO_Error_State_SetNippleValue+0x19e>
    1e30:	cb 01       	movw	r24, r22
    1e32:	84 2b       	or	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1e3c:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e40:	26 96       	adiw	r28, 0x06	; 6
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <MDIO_VidActivePullUP+0x6>
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	6a 81       	ldd	r22, Y+2	; 0x02
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>

}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1e86:	a7 e2       	ldi	r26, 0x27	; 39
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e7 e2       	ldi	r30, 0x27	; 39
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	80 64       	ori	r24, 0x40	; 64
    1e92:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1e94:	a7 e2       	ldi	r26, 0x27	; 39
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e7 e2       	ldi	r30, 0x27	; 39
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8f 77       	andi	r24, 0x7F	; 127
    1ea0:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1ea2:	a6 e2       	ldi	r26, 0x26	; 38
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e6 e2       	ldi	r30, 0x26	; 38
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 7f       	andi	r24, 0xF8	; 248
    1eae:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1eb0:	a6 e2       	ldi	r26, 0x26	; 38
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e6 e2       	ldi	r30, 0x26	; 38
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	83 60       	ori	r24, 0x03	; 3
    1ebc:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1ebe:	a7 e2       	ldi	r26, 0x27	; 39
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e7 e2       	ldi	r30, 0x27	; 39
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8f 7d       	andi	r24, 0xDF	; 223
    1eca:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1ecc:	a6 e2       	ldi	r26, 0x26	; 38
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e6 e2       	ldi	r30, 0x26	; 38
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 68       	ori	r24, 0x80	; 128
    1ed8:	8c 93       	st	X, r24
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	87 70       	andi	r24, 0x07	; 7
    1ef0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1ef2:	a7 e2       	ldi	r26, 0x27	; 39
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e7 e2       	ldi	r30, 0x27	; 39
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	80 7e       	andi	r24, 0xE0	; 224
    1efe:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1f00:	a7 e2       	ldi	r26, 0x27	; 39
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e7 e2       	ldi	r30, 0x27	; 39
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	90 81       	ld	r25, Z
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	89 2b       	or	r24, r25
    1f0e:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1f10:	a6 e2       	ldi	r26, 0x26	; 38
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e6 e2       	ldi	r30, 0x26	; 38
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 64       	ori	r24, 0x40	; 64
    1f1c:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1f1e:	e6 e2       	ldi	r30, 0x26	; 38
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	82 95       	swap	r24
    1f26:	8f 70       	andi	r24, 0x0F	; 15
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	81 70       	andi	r24, 0x01	; 1
    1f2e:	90 70       	andi	r25, 0x00	; 0
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	a9 f3       	breq	.-22     	; 0x1f1e <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1f34:	e4 e2       	ldi	r30, 0x24	; 36
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <HSWITCH_VidInit_PullUP+0x6>
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1f52:	e9 81       	ldd	r30, Y+1	; 0x01
    1f54:	fa 81       	ldd	r31, Y+2	; 0x02
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5c:	90 81       	ld	r25, Z
    1f5e:	69 2f       	mov	r22, r25
    1f60:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <MDIO_VidActivePullUP>
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <HSWITCH_u8SwitchState+0x6>
    1f74:	0f 92       	push	r0
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	9b 83       	std	Y+3, r25	; 0x03
    1f7c:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1f82:	ea 81       	ldd	r30, Y+2	; 0x02
    1f84:	fb 81       	ldd	r31, Y+3	; 0x03
    1f86:	81 81       	ldd	r24, Z+1	; 0x01
    1f88:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8c:	90 81       	ld	r25, Z
    1f8e:	69 2f       	mov	r22, r25
    1f90:	9e 01       	movw	r18, r28
    1f92:	2f 5f       	subi	r18, 0xFF	; 255
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	a9 01       	movw	r20, r18
    1f98:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <HSEVEN_SEGMENT_VidInit+0x6>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fba:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbc:	80 81       	ld	r24, Z
    1fbe:	6f ef       	ldi	r22, 0xFF	; 255
    1fc0:	0e 94 12 0c 	call	0x1824	; 0x1824 <MDIO_Error_State_SetPortDirection>
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <HSEVEN_SEGMENT_VidOff+0x6>
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe4:	81 81       	ldd	r24, Z+1	; 0x01
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	31 f4       	brne	.+12     	; 0x1ff6 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1fea:	e9 81       	ldd	r30, Y+1	; 0x01
    1fec:	fa 81       	ldd	r31, Y+2	; 0x02
    1fee:	80 81       	ld	r24, Z
    1ff0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ff2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	88 23       	and	r24, r24
    1ffe:	51 f4       	brne	.+20     	; 0x2014 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    2000:	e9 81       	ldd	r30, Y+1	; 0x01
    2002:	fa 81       	ldd	r31, Y+2	; 0x02
    2004:	20 81       	ld	r18, Z
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	98 2f       	mov	r25, r24
    200a:	90 95       	com	r25
    200c:	82 2f       	mov	r24, r18
    200e:	69 2f       	mov	r22, r25
    2010:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
	}
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	27 97       	sbiw	r28, 0x07	; 7
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    203a:	e9 81       	ldd	r30, Y+1	; 0x01
    203c:	fa 81       	ldd	r31, Y+2	; 0x02
    203e:	81 81       	ldd	r24, Z+1	; 0x01
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	09 f0       	breq	.+2      	; 0x2046 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    2044:	9b c0       	rjmp	.+310    	; 0x217c <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	3f 83       	std	Y+7, r19	; 0x07
    204e:	2e 83       	std	Y+6, r18	; 0x06
    2050:	8e 81       	ldd	r24, Y+6	; 0x06
    2052:	9f 81       	ldd	r25, Y+7	; 0x07
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	91 05       	cpc	r25, r1
    2058:	09 f4       	brne	.+2      	; 0x205c <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    205a:	5f c0       	rjmp	.+190    	; 0x211a <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    205c:	2e 81       	ldd	r18, Y+6	; 0x06
    205e:	3f 81       	ldd	r19, Y+7	; 0x07
    2060:	25 30       	cpi	r18, 0x05	; 5
    2062:	31 05       	cpc	r19, r1
    2064:	dc f4       	brge	.+54     	; 0x209c <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	91 05       	cpc	r25, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    2072:	2e 81       	ldd	r18, Y+6	; 0x06
    2074:	3f 81       	ldd	r19, Y+7	; 0x07
    2076:	22 30       	cpi	r18, 0x02	; 2
    2078:	31 05       	cpc	r19, r1
    207a:	2c f4       	brge	.+10     	; 0x2086 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    207c:	8e 81       	ldd	r24, Y+6	; 0x06
    207e:	9f 81       	ldd	r25, Y+7	; 0x07
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	79 f1       	breq	.+94     	; 0x20e2 <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    2084:	74 c0       	rjmp	.+232    	; 0x216e <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    2086:	2e 81       	ldd	r18, Y+6	; 0x06
    2088:	3f 81       	ldd	r19, Y+7	; 0x07
    208a:	22 30       	cpi	r18, 0x02	; 2
    208c:	31 05       	cpc	r19, r1
    208e:	b9 f1       	breq	.+110    	; 0x20fe <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    2090:	8e 81       	ldd	r24, Y+6	; 0x06
    2092:	9f 81       	ldd	r25, Y+7	; 0x07
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	91 05       	cpc	r25, r1
    2098:	c9 f1       	breq	.+114    	; 0x210c <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    209a:	69 c0       	rjmp	.+210    	; 0x216e <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    209c:	2e 81       	ldd	r18, Y+6	; 0x06
    209e:	3f 81       	ldd	r19, Y+7	; 0x07
    20a0:	27 30       	cpi	r18, 0x07	; 7
    20a2:	31 05       	cpc	r19, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    20a6:	4e c0       	rjmp	.+156    	; 0x2144 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    20a8:	8e 81       	ldd	r24, Y+6	; 0x06
    20aa:	9f 81       	ldd	r25, Y+7	; 0x07
    20ac:	88 30       	cpi	r24, 0x08	; 8
    20ae:	91 05       	cpc	r25, r1
    20b0:	5c f4       	brge	.+22     	; 0x20c8 <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    20b2:	2e 81       	ldd	r18, Y+6	; 0x06
    20b4:	3f 81       	ldd	r19, Y+7	; 0x07
    20b6:	25 30       	cpi	r18, 0x05	; 5
    20b8:	31 05       	cpc	r19, r1
    20ba:	b1 f1       	breq	.+108    	; 0x2128 <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    20bc:	8e 81       	ldd	r24, Y+6	; 0x06
    20be:	9f 81       	ldd	r25, Y+7	; 0x07
    20c0:	86 30       	cpi	r24, 0x06	; 6
    20c2:	91 05       	cpc	r25, r1
    20c4:	c1 f1       	breq	.+112    	; 0x2136 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    20c6:	53 c0       	rjmp	.+166    	; 0x216e <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    20c8:	2e 81       	ldd	r18, Y+6	; 0x06
    20ca:	3f 81       	ldd	r19, Y+7	; 0x07
    20cc:	28 30       	cpi	r18, 0x08	; 8
    20ce:	31 05       	cpc	r19, r1
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    20d4:	8e 81       	ldd	r24, Y+6	; 0x06
    20d6:	9f 81       	ldd	r25, Y+7	; 0x07
    20d8:	89 30       	cpi	r24, 0x09	; 9
    20da:	91 05       	cpc	r25, r1
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    20de:	40 c0       	rjmp	.+128    	; 0x2160 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    20e0:	46 c0       	rjmp	.+140    	; 0x216e <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    20e2:	e9 81       	ldd	r30, Y+1	; 0x01
    20e4:	fa 81       	ldd	r31, Y+2	; 0x02
    20e6:	80 81       	ld	r24, Z
    20e8:	6f e3       	ldi	r22, 0x3F	; 63
    20ea:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    20ee:	e6 c0       	rjmp	.+460    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    20f0:	e9 81       	ldd	r30, Y+1	; 0x01
    20f2:	fa 81       	ldd	r31, Y+2	; 0x02
    20f4:	80 81       	ld	r24, Z
    20f6:	66 e0       	ldi	r22, 0x06	; 6
    20f8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    20fc:	df c0       	rjmp	.+446    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    20fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2100:	fa 81       	ldd	r31, Y+2	; 0x02
    2102:	80 81       	ld	r24, Z
    2104:	6b e5       	ldi	r22, 0x5B	; 91
    2106:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    210a:	d8 c0       	rjmp	.+432    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    210c:	e9 81       	ldd	r30, Y+1	; 0x01
    210e:	fa 81       	ldd	r31, Y+2	; 0x02
    2110:	80 81       	ld	r24, Z
    2112:	6f e4       	ldi	r22, 0x4F	; 79
    2114:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2118:	d1 c0       	rjmp	.+418    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    211a:	e9 81       	ldd	r30, Y+1	; 0x01
    211c:	fa 81       	ldd	r31, Y+2	; 0x02
    211e:	80 81       	ld	r24, Z
    2120:	66 e6       	ldi	r22, 0x66	; 102
    2122:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2126:	ca c0       	rjmp	.+404    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    2128:	e9 81       	ldd	r30, Y+1	; 0x01
    212a:	fa 81       	ldd	r31, Y+2	; 0x02
    212c:	80 81       	ld	r24, Z
    212e:	6d e6       	ldi	r22, 0x6D	; 109
    2130:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2134:	c3 c0       	rjmp	.+390    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	80 81       	ld	r24, Z
    213c:	6d e7       	ldi	r22, 0x7D	; 125
    213e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2142:	bc c0       	rjmp	.+376    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    2144:	e9 81       	ldd	r30, Y+1	; 0x01
    2146:	fa 81       	ldd	r31, Y+2	; 0x02
    2148:	80 81       	ld	r24, Z
    214a:	67 e0       	ldi	r22, 0x07	; 7
    214c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2150:	b5 c0       	rjmp	.+362    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    2152:	e9 81       	ldd	r30, Y+1	; 0x01
    2154:	fa 81       	ldd	r31, Y+2	; 0x02
    2156:	80 81       	ld	r24, Z
    2158:	6f e7       	ldi	r22, 0x7F	; 127
    215a:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    215e:	ae c0       	rjmp	.+348    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    2160:	e9 81       	ldd	r30, Y+1	; 0x01
    2162:	fa 81       	ldd	r31, Y+2	; 0x02
    2164:	80 81       	ld	r24, Z
    2166:	6f e6       	ldi	r22, 0x6F	; 111
    2168:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    216c:	a7 c0       	rjmp	.+334    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    216e:	e9 81       	ldd	r30, Y+1	; 0x01
    2170:	fa 81       	ldd	r31, Y+2	; 0x02
    2172:	80 81       	ld	r24, Z
    2174:	69 e7       	ldi	r22, 0x79	; 121
    2176:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    217a:	a0 c0       	rjmp	.+320    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    217c:	e9 81       	ldd	r30, Y+1	; 0x01
    217e:	fa 81       	ldd	r31, Y+2	; 0x02
    2180:	81 81       	ldd	r24, Z+1	; 0x01
    2182:	88 23       	and	r24, r24
    2184:	09 f0       	breq	.+2      	; 0x2188 <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    2186:	9a c0       	rjmp	.+308    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3d 83       	std	Y+5, r19	; 0x05
    2190:	2c 83       	std	Y+4, r18	; 0x04
    2192:	8c 81       	ldd	r24, Y+4	; 0x04
    2194:	9d 81       	ldd	r25, Y+5	; 0x05
    2196:	84 30       	cpi	r24, 0x04	; 4
    2198:	91 05       	cpc	r25, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    219c:	5f c0       	rjmp	.+190    	; 0x225c <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    219e:	2c 81       	ldd	r18, Y+4	; 0x04
    21a0:	3d 81       	ldd	r19, Y+5	; 0x05
    21a2:	25 30       	cpi	r18, 0x05	; 5
    21a4:	31 05       	cpc	r19, r1
    21a6:	dc f4       	brge	.+54     	; 0x21de <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    21a8:	8c 81       	ldd	r24, Y+4	; 0x04
    21aa:	9d 81       	ldd	r25, Y+5	; 0x05
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	91 05       	cpc	r25, r1
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    21b2:	3f c0       	rjmp	.+126    	; 0x2232 <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    21b4:	2c 81       	ldd	r18, Y+4	; 0x04
    21b6:	3d 81       	ldd	r19, Y+5	; 0x05
    21b8:	22 30       	cpi	r18, 0x02	; 2
    21ba:	31 05       	cpc	r19, r1
    21bc:	2c f4       	brge	.+10     	; 0x21c8 <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	9d 81       	ldd	r25, Y+5	; 0x05
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	79 f1       	breq	.+94     	; 0x2224 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    21c6:	74 c0       	rjmp	.+232    	; 0x22b0 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    21c8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ca:	3d 81       	ldd	r19, Y+5	; 0x05
    21cc:	22 30       	cpi	r18, 0x02	; 2
    21ce:	31 05       	cpc	r19, r1
    21d0:	b9 f1       	breq	.+110    	; 0x2240 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	83 30       	cpi	r24, 0x03	; 3
    21d8:	91 05       	cpc	r25, r1
    21da:	c9 f1       	breq	.+114    	; 0x224e <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    21dc:	69 c0       	rjmp	.+210    	; 0x22b0 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    21de:	2c 81       	ldd	r18, Y+4	; 0x04
    21e0:	3d 81       	ldd	r19, Y+5	; 0x05
    21e2:	27 30       	cpi	r18, 0x07	; 7
    21e4:	31 05       	cpc	r19, r1
    21e6:	09 f4       	brne	.+2      	; 0x21ea <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    21e8:	4e c0       	rjmp	.+156    	; 0x2286 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    21ea:	8c 81       	ldd	r24, Y+4	; 0x04
    21ec:	9d 81       	ldd	r25, Y+5	; 0x05
    21ee:	88 30       	cpi	r24, 0x08	; 8
    21f0:	91 05       	cpc	r25, r1
    21f2:	5c f4       	brge	.+22     	; 0x220a <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    21f4:	2c 81       	ldd	r18, Y+4	; 0x04
    21f6:	3d 81       	ldd	r19, Y+5	; 0x05
    21f8:	25 30       	cpi	r18, 0x05	; 5
    21fa:	31 05       	cpc	r19, r1
    21fc:	b1 f1       	breq	.+108    	; 0x226a <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	86 30       	cpi	r24, 0x06	; 6
    2204:	91 05       	cpc	r25, r1
    2206:	c1 f1       	breq	.+112    	; 0x2278 <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    2208:	53 c0       	rjmp	.+166    	; 0x22b0 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    220a:	2c 81       	ldd	r18, Y+4	; 0x04
    220c:	3d 81       	ldd	r19, Y+5	; 0x05
    220e:	28 30       	cpi	r18, 0x08	; 8
    2210:	31 05       	cpc	r19, r1
    2212:	09 f4       	brne	.+2      	; 0x2216 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	9d 81       	ldd	r25, Y+5	; 0x05
    221a:	89 30       	cpi	r24, 0x09	; 9
    221c:	91 05       	cpc	r25, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    2220:	40 c0       	rjmp	.+128    	; 0x22a2 <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    2222:	46 c0       	rjmp	.+140    	; 0x22b0 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    2224:	e9 81       	ldd	r30, Y+1	; 0x01
    2226:	fa 81       	ldd	r31, Y+2	; 0x02
    2228:	80 81       	ld	r24, Z
    222a:	60 ec       	ldi	r22, 0xC0	; 192
    222c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2230:	45 c0       	rjmp	.+138    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    2232:	e9 81       	ldd	r30, Y+1	; 0x01
    2234:	fa 81       	ldd	r31, Y+2	; 0x02
    2236:	80 81       	ld	r24, Z
    2238:	69 ef       	ldi	r22, 0xF9	; 249
    223a:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    223e:	3e c0       	rjmp	.+124    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    2240:	e9 81       	ldd	r30, Y+1	; 0x01
    2242:	fa 81       	ldd	r31, Y+2	; 0x02
    2244:	80 81       	ld	r24, Z
    2246:	64 ea       	ldi	r22, 0xA4	; 164
    2248:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    224c:	37 c0       	rjmp	.+110    	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    224e:	e9 81       	ldd	r30, Y+1	; 0x01
    2250:	fa 81       	ldd	r31, Y+2	; 0x02
    2252:	80 81       	ld	r24, Z
    2254:	60 eb       	ldi	r22, 0xB0	; 176
    2256:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    225a:	30 c0       	rjmp	.+96     	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    225c:	e9 81       	ldd	r30, Y+1	; 0x01
    225e:	fa 81       	ldd	r31, Y+2	; 0x02
    2260:	80 81       	ld	r24, Z
    2262:	69 e9       	ldi	r22, 0x99	; 153
    2264:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2268:	29 c0       	rjmp	.+82     	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    226a:	e9 81       	ldd	r30, Y+1	; 0x01
    226c:	fa 81       	ldd	r31, Y+2	; 0x02
    226e:	80 81       	ld	r24, Z
    2270:	62 e9       	ldi	r22, 0x92	; 146
    2272:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2276:	22 c0       	rjmp	.+68     	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	80 81       	ld	r24, Z
    227e:	62 e8       	ldi	r22, 0x82	; 130
    2280:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2284:	1b c0       	rjmp	.+54     	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    2286:	e9 81       	ldd	r30, Y+1	; 0x01
    2288:	fa 81       	ldd	r31, Y+2	; 0x02
    228a:	80 81       	ld	r24, Z
    228c:	68 ef       	ldi	r22, 0xF8	; 248
    228e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    2294:	e9 81       	ldd	r30, Y+1	; 0x01
    2296:	fa 81       	ldd	r31, Y+2	; 0x02
    2298:	80 81       	ld	r24, Z
    229a:	60 e8       	ldi	r22, 0x80	; 128
    229c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    22a0:	0d c0       	rjmp	.+26     	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    22a2:	e9 81       	ldd	r30, Y+1	; 0x01
    22a4:	fa 81       	ldd	r31, Y+2	; 0x02
    22a6:	80 81       	ld	r24, Z
    22a8:	60 e9       	ldi	r22, 0x90	; 144
    22aa:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
    22ae:	06 c0       	rjmp	.+12     	; 0x22bc <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    22b0:	e9 81       	ldd	r30, Y+1	; 0x01
    22b2:	fa 81       	ldd	r31, Y+2	; 0x02
    22b4:	80 81       	ld	r24, Z
    22b6:	66 e8       	ldi	r22, 0x86	; 134
    22b8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
	}
}
}
    22bc:	27 96       	adiw	r28, 0x07	; 7
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <HLED_VidInit+0x6>
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    22dc:	e9 81       	ldd	r30, Y+1	; 0x01
    22de:	fa 81       	ldd	r31, Y+2	; 0x02
    22e0:	81 81       	ldd	r24, Z+1	; 0x01
    22e2:	e9 81       	ldd	r30, Y+1	; 0x01
    22e4:	fa 81       	ldd	r31, Y+2	; 0x02
    22e6:	90 81       	ld	r25, Z
    22e8:	69 2f       	mov	r22, r25
    22ea:	41 e0       	ldi	r20, 0x01	; 1
    22ec:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <HLED_VidLed_On+0x6>
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    2308:	e9 81       	ldd	r30, Y+1	; 0x01
    230a:	fa 81       	ldd	r31, Y+2	; 0x02
    230c:	81 81       	ldd	r24, Z+1	; 0x01
    230e:	e9 81       	ldd	r30, Y+1	; 0x01
    2310:	fa 81       	ldd	r31, Y+2	; 0x02
    2312:	90 81       	ld	r25, Z
    2314:	69 2f       	mov	r22, r25
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
}
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <HLED_VidLed_Off+0x6>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    2334:	e9 81       	ldd	r30, Y+1	; 0x01
    2336:	fa 81       	ldd	r31, Y+2	; 0x02
    2338:	81 81       	ldd	r24, Z+1	; 0x01
    233a:	e9 81       	ldd	r30, Y+1	; 0x01
    233c:	fa 81       	ldd	r31, Y+2	; 0x02
    233e:	90 81       	ld	r25, Z
    2340:	69 2f       	mov	r22, r25
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <HLED_VidLed_Toggle+0x6>
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    2360:	80 91 84 00 	lds	r24, 0x0084
    2364:	88 23       	and	r24, r24
    2366:	71 f4       	brne	.+28     	; 0x2384 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    2368:	e9 81       	ldd	r30, Y+1	; 0x01
    236a:	fa 81       	ldd	r31, Y+2	; 0x02
    236c:	81 81       	ldd	r24, Z+1	; 0x01
    236e:	e9 81       	ldd	r30, Y+1	; 0x01
    2370:	fa 81       	ldd	r31, Y+2	; 0x02
    2372:	90 81       	ld	r25, Z
    2374:	69 2f       	mov	r22, r25
    2376:	41 e0       	ldi	r20, 0x01	; 1
    2378:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
		Flag=1;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 84 00 	sts	0x0084, r24
    2382:	0c c0       	rjmp	.+24     	; 0x239c <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    2384:	e9 81       	ldd	r30, Y+1	; 0x01
    2386:	fa 81       	ldd	r31, Y+2	; 0x02
    2388:	81 81       	ldd	r24, Z+1	; 0x01
    238a:	e9 81       	ldd	r30, Y+1	; 0x01
    238c:	fa 81       	ldd	r31, Y+2	; 0x02
    238e:	90 81       	ld	r25, Z
    2390:	69 2f       	mov	r22, r25
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
		Flag=0;
    2398:	10 92 84 00 	sts	0x0084, r1
	}
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	62 e0       	ldi	r22, 0x02	; 2
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	62 e0       	ldi	r22, 0x02	; 2
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	62 e0       	ldi	r22, 0x02	; 2
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    23d6:	84 e0       	ldi	r24, 0x04	; 4
    23d8:	62 e0       	ldi	r22, 0x02	; 2
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    23e0:	85 e0       	ldi	r24, 0x05	; 5
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    23ea:	86 e0       	ldi	r24, 0x06	; 6
    23ec:	62 e0       	ldi	r22, 0x02	; 2
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    23f4:	87 e0       	ldi	r24, 0x07	; 7
    23f6:	62 e0       	ldi	r22, 0x02	; 2
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	62 e0       	ldi	r22, 0x02	; 2
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	62 e0       	ldi	r22, 0x02	; 2
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	62 e0       	ldi	r22, 0x02	; 2
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    2430:	85 e0       	ldi	r24, 0x05	; 5
    2432:	62 e0       	ldi	r22, 0x02	; 2
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    243a:	86 e0       	ldi	r24, 0x06	; 6
    243c:	62 e0       	ldi	r22, 0x02	; 2
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    2444:	87 e0       	ldi	r24, 0x07	; 7
    2446:	62 e0       	ldi	r22, 0x02	; 2
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>

}
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	62 97       	sbiw	r28, 0x12	; 18
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    246c:	84 e0       	ldi	r24, 0x04	; 4
    246e:	88 8b       	std	Y+16, r24	; 0x10
    2470:	b5 c0       	rjmp	.+362    	; 0x25dc <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    2472:	88 89       	ldd	r24, Y+16	; 0x10
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    247c:	19 8a       	std	Y+17, r1	; 0x11
    247e:	a2 c0       	rjmp	.+324    	; 0x25c4 <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2480:	9e 01       	movw	r18, r28
    2482:	2e 5e       	subi	r18, 0xEE	; 238
    2484:	3f 4f       	sbci	r19, 0xFF	; 255
    2486:	89 89       	ldd	r24, Y+17	; 0x11
    2488:	62 e0       	ldi	r22, 0x02	; 2
    248a:	a9 01       	movw	r20, r18
    248c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    2490:	8a 89       	ldd	r24, Y+18	; 0x12
    2492:	88 23       	and	r24, r24
    2494:	09 f0       	breq	.+2      	; 0x2498 <HKPD_U8GetKeyPressed+0x44>
    2496:	93 c0       	rjmp	.+294    	; 0x25be <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    2498:	88 89       	ldd	r24, Y+16	; 0x10
    249a:	88 2f       	mov	r24, r24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	ac 01       	movw	r20, r24
    24a0:	44 50       	subi	r20, 0x04	; 4
    24a2:	50 40       	sbci	r21, 0x00	; 0
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	ca 01       	movw	r24, r20
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	82 0f       	add	r24, r18
    24b6:	93 1f       	adc	r25, r19
    24b8:	fc 01       	movw	r30, r24
    24ba:	ed 58       	subi	r30, 0x8D	; 141
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 81       	ld	r24, Z
    24c0:	8f 87       	std	Y+15, r24	; 0x0f
    24c2:	08 c0       	rjmp	.+16     	; 0x24d4 <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    24c4:	9e 01       	movw	r18, r28
    24c6:	2e 5e       	subi	r18, 0xEE	; 238
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	89 89       	ldd	r24, Y+17	; 0x11
    24cc:	62 e0       	ldi	r22, 0x02	; 2
    24ce:	a9 01       	movw	r20, r18
    24d0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    24d4:	8a 89       	ldd	r24, Y+18	; 0x12
    24d6:	88 23       	and	r24, r24
    24d8:	a9 f3       	breq	.-22     	; 0x24c4 <HKPD_U8GetKeyPressed+0x70>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 e2       	ldi	r26, 0x20	; 32
    24e0:	b1 e4       	ldi	r27, 0x41	; 65
    24e2:	8b 87       	std	Y+11, r24	; 0x0b
    24e4:	9c 87       	std	Y+12, r25	; 0x0c
    24e6:	ad 87       	std	Y+13, r26	; 0x0d
    24e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8f 83       	std	Y+7, r24	; 0x07
    2504:	98 87       	std	Y+8, r25	; 0x08
    2506:	a9 87       	std	Y+9, r26	; 0x09
    2508:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    252c:	6f 81       	ldd	r22, Y+7	; 0x07
    252e:	78 85       	ldd	r23, Y+8	; 0x08
    2530:	89 85       	ldd	r24, Y+9	; 0x09
    2532:	9a 85       	ldd	r25, Y+10	; 0x0a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6b 85       	ldd	r22, Y+11	; 0x0b
    2546:	7c 85       	ldd	r23, Y+12	; 0x0c
    2548:	8d 85       	ldd	r24, Y+13	; 0x0d
    254a:	9e 85       	ldd	r25, Y+14	; 0x0e
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	0f c0       	rjmp	.+30     	; 0x258c <HKPD_U8GetKeyPressed+0x138>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	9c 81       	ldd	r25, Y+4	; 0x04
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <HKPD_U8GetKeyPressed+0x126>
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <HKPD_U8GetKeyPressed+0x11a>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <HKPD_U8GetKeyPressed+0x162>
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    25be:	89 89       	ldd	r24, Y+17	; 0x11
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	89 8b       	std	Y+17, r24	; 0x11
    25c4:	89 89       	ldd	r24, Y+17	; 0x11
    25c6:	84 30       	cpi	r24, 0x04	; 4
    25c8:	08 f4       	brcc	.+2      	; 0x25cc <HKPD_U8GetKeyPressed+0x178>
    25ca:	5a cf       	rjmp	.-332    	; 0x2480 <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    25cc:	88 89       	ldd	r24, Y+16	; 0x10
    25ce:	62 e0       	ldi	r22, 0x02	; 2
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    25d6:	88 89       	ldd	r24, Y+16	; 0x10
    25d8:	8f 5f       	subi	r24, 0xFF	; 255
    25da:	88 8b       	std	Y+16, r24	; 0x10
    25dc:	88 89       	ldd	r24, Y+16	; 0x10
    25de:	88 30       	cpi	r24, 0x08	; 8
    25e0:	08 f4       	brcc	.+2      	; 0x25e4 <HKPD_U8GetKeyPressed+0x190>
    25e2:	47 cf       	rjmp	.-370    	; 0x2472 <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    25e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e6:	8f 3f       	cpi	r24, 0xFF	; 255
    25e8:	09 f4       	brne	.+2      	; 0x25ec <HKPD_U8GetKeyPressed+0x198>
    25ea:	40 cf       	rjmp	.-384    	; 0x246c <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    25ec:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    25ee:	62 96       	adiw	r28, 0x12	; 18
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	6d 97       	sbiw	r28, 0x1d	; 29
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	62 e0       	ldi	r22, 0x02	; 2
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	62 e0       	ldi	r22, 0x02	; 2
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    262e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	62 e0       	ldi	r22, 0x02	; 2
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e0       	ldi	r26, 0x00	; 0
    2642:	b0 e4       	ldi	r27, 0x40	; 64
    2644:	89 8f       	std	Y+25, r24	; 0x19
    2646:	9a 8f       	std	Y+26, r25	; 0x1a
    2648:	ab 8f       	std	Y+27, r26	; 0x1b
    264a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	69 8d       	ldd	r22, Y+25	; 0x19
    264e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a ef       	ldi	r20, 0xFA	; 250
    265a:	54 e4       	ldi	r21, 0x44	; 68
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8d 8b       	std	Y+21, r24	; 0x15
    2666:	9e 8b       	std	Y+22, r25	; 0x16
    2668:	af 8b       	std	Y+23, r26	; 0x17
    266a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    266c:	6d 89       	ldd	r22, Y+21	; 0x15
    266e:	7e 89       	ldd	r23, Y+22	; 0x16
    2670:	8f 89       	ldd	r24, Y+23	; 0x17
    2672:	98 8d       	ldd	r25, Y+24	; 0x18
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e8       	ldi	r20, 0x80	; 128
    267a:	5f e3       	ldi	r21, 0x3F	; 63
    267c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2680:	88 23       	and	r24, r24
    2682:	2c f4       	brge	.+10     	; 0x268e <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
    268c:	3f c0       	rjmp	.+126    	; 0x270c <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    268e:	6d 89       	ldd	r22, Y+21	; 0x15
    2690:	7e 89       	ldd	r23, Y+22	; 0x16
    2692:	8f 89       	ldd	r24, Y+23	; 0x17
    2694:	98 8d       	ldd	r25, Y+24	; 0x18
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	3f ef       	ldi	r19, 0xFF	; 255
    269a:	4f e7       	ldi	r20, 0x7F	; 127
    269c:	57 e4       	ldi	r21, 0x47	; 71
    269e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a2:	18 16       	cp	r1, r24
    26a4:	4c f5       	brge	.+82     	; 0x26f8 <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a6:	69 8d       	ldd	r22, Y+25	; 0x19
    26a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <HCLCD_Vid8Bits_SendCommand+0xee>
    26d0:	88 ec       	ldi	r24, 0xC8	; 200
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9a 8b       	std	Y+18, r25	; 0x12
    26d6:	89 8b       	std	Y+17, r24	; 0x11
    26d8:	89 89       	ldd	r24, Y+17	; 0x11
    26da:	9a 89       	ldd	r25, Y+18	; 0x12
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <HCLCD_Vid8Bits_SendCommand+0xdc>
    26e0:	9a 8b       	std	Y+18, r25	; 0x12
    26e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8b 89       	ldd	r24, Y+19	; 0x13
    26e6:	9c 89       	ldd	r25, Y+20	; 0x14
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	9c 89       	ldd	r25, Y+20	; 0x14
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <HCLCD_Vid8Bits_SendCommand+0xd0>
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9c 8b       	std	Y+20, r25	; 0x14
    270a:	8b 8b       	std	Y+19, r24	; 0x13
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	98 8b       	std	Y+16, r25	; 0x10
    2712:	8f 87       	std	Y+15, r24	; 0x0f
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	98 89       	ldd	r25, Y+16	; 0x10
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <HCLCD_Vid8Bits_SendCommand+0x118>
    271c:	98 8b       	std	Y+16, r25	; 0x10
    271e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	62 e0       	ldi	r22, 0x02	; 2
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e0       	ldi	r26, 0x00	; 0
    2730:	b0 e4       	ldi	r27, 0x40	; 64
    2732:	8b 87       	std	Y+11, r24	; 0x0b
    2734:	9c 87       	std	Y+12, r25	; 0x0c
    2736:	ad 87       	std	Y+13, r26	; 0x0d
    2738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a ef       	ldi	r20, 0xFA	; 250
    2748:	54 e4       	ldi	r21, 0x44	; 68
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8f 83       	std	Y+7, r24	; 0x07
    2754:	98 87       	std	Y+8, r25	; 0x08
    2756:	a9 87       	std	Y+9, r26	; 0x09
    2758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276e:	88 23       	and	r24, r24
    2770:	2c f4       	brge	.+10     	; 0x277c <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9e 83       	std	Y+6, r25	; 0x06
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	4c f5       	brge	.+82     	; 0x27e6 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2794:	6b 85       	ldd	r22, Y+11	; 0x0b
    2796:	7c 85       	ldd	r23, Y+12	; 0x0c
    2798:	8d 85       	ldd	r24, Y+13	; 0x0d
    279a:	9e 85       	ldd	r25, Y+14	; 0x0e
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <HCLCD_Vid8Bits_SendCommand+0x1dc>
    27be:	88 ec       	ldi	r24, 0xC8	; 200
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <HCLCD_Vid8Bits_SendCommand+0x1ca>
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f7       	brne	.-38     	; 0x27be <HCLCD_Vid8Bits_SendCommand+0x1be>
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <HCLCD_Vid8Bits_SendCommand+0x206>
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
}
    2818:	6d 96       	adiw	r28, 0x1d	; 29
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	e8 97       	sbiw	r28, 0x38	; 56
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	6f ef       	ldi	r22, 0xFF	; 255
    2842:	0e 94 12 0c 	call	0x1824	; 0x1824 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	62 e0       	ldi	r22, 0x02	; 2
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	62 e0       	ldi	r22, 0x02	; 2
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	62 e0       	ldi	r22, 0x02	; 2
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a0 ef       	ldi	r26, 0xF0	; 240
    286a:	b1 e4       	ldi	r27, 0x41	; 65
    286c:	8d ab       	std	Y+53, r24	; 0x35
    286e:	9e ab       	std	Y+54, r25	; 0x36
    2870:	af ab       	std	Y+55, r26	; 0x37
    2872:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	6d a9       	ldd	r22, Y+53	; 0x35
    2876:	7e a9       	ldd	r23, Y+54	; 0x36
    2878:	8f a9       	ldd	r24, Y+55	; 0x37
    287a:	98 ad       	ldd	r25, Y+56	; 0x38
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a ef       	ldi	r20, 0xFA	; 250
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	89 ab       	std	Y+49, r24	; 0x31
    288e:	9a ab       	std	Y+50, r25	; 0x32
    2890:	ab ab       	std	Y+51, r26	; 0x33
    2892:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2894:	69 a9       	ldd	r22, Y+49	; 0x31
    2896:	7a a9       	ldd	r23, Y+50	; 0x32
    2898:	8b a9       	ldd	r24, Y+51	; 0x33
    289a:	9c a9       	ldd	r25, Y+52	; 0x34
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	98 ab       	std	Y+48, r25	; 0x30
    28b2:	8f a7       	std	Y+47, r24	; 0x2f
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    28b6:	69 a9       	ldd	r22, Y+49	; 0x31
    28b8:	7a a9       	ldd	r23, Y+50	; 0x32
    28ba:	8b a9       	ldd	r24, Y+51	; 0x33
    28bc:	9c a9       	ldd	r25, Y+52	; 0x34
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	57 e4       	ldi	r21, 0x47	; 71
    28c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ca:	18 16       	cp	r1, r24
    28cc:	4c f5       	brge	.+82     	; 0x2920 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	6d a9       	ldd	r22, Y+53	; 0x35
    28d0:	7e a9       	ldd	r23, Y+54	; 0x36
    28d2:	8f a9       	ldd	r24, Y+55	; 0x37
    28d4:	98 ad       	ldd	r25, Y+56	; 0x38
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	98 ab       	std	Y+48, r25	; 0x30
    28f4:	8f a7       	std	Y+47, r24	; 0x2f
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <HCLCD_Vid8Bits_Init+0xec>
    28f8:	88 ec       	ldi	r24, 0xC8	; 200
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9e a7       	std	Y+46, r25	; 0x2e
    28fe:	8d a7       	std	Y+45, r24	; 0x2d
    2900:	8d a5       	ldd	r24, Y+45	; 0x2d
    2902:	9e a5       	ldd	r25, Y+46	; 0x2e
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <HCLCD_Vid8Bits_Init+0xda>
    2908:	9e a7       	std	Y+46, r25	; 0x2e
    290a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	8f a5       	ldd	r24, Y+47	; 0x2f
    290e:	98 a9       	ldd	r25, Y+48	; 0x30
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	98 ab       	std	Y+48, r25	; 0x30
    2914:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2916:	8f a5       	ldd	r24, Y+47	; 0x2f
    2918:	98 a9       	ldd	r25, Y+48	; 0x30
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	69 f7       	brne	.-38     	; 0x28f8 <HCLCD_Vid8Bits_Init+0xce>
    291e:	14 c0       	rjmp	.+40     	; 0x2948 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2920:	69 a9       	ldd	r22, Y+49	; 0x31
    2922:	7a a9       	ldd	r23, Y+50	; 0x32
    2924:	8b a9       	ldd	r24, Y+51	; 0x33
    2926:	9c a9       	ldd	r25, Y+52	; 0x34
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	98 ab       	std	Y+48, r25	; 0x30
    2932:	8f a7       	std	Y+47, r24	; 0x2f
    2934:	8f a5       	ldd	r24, Y+47	; 0x2f
    2936:	98 a9       	ldd	r25, Y+48	; 0x30
    2938:	9c a7       	std	Y+44, r25	; 0x2c
    293a:	8b a7       	std	Y+43, r24	; 0x2b
    293c:	8b a5       	ldd	r24, Y+43	; 0x2b
    293e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <HCLCD_Vid8Bits_Init+0x116>
    2944:	9c a7       	std	Y+44, r25	; 0x2c
    2946:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    2948:	88 e2       	ldi	r24, 0x28	; 40
    294a:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e8       	ldi	r26, 0x80	; 128
    2954:	bf e3       	ldi	r27, 0x3F	; 63
    2956:	8f a3       	std	Y+39, r24	; 0x27
    2958:	98 a7       	std	Y+40, r25	; 0x28
    295a:	a9 a7       	std	Y+41, r26	; 0x29
    295c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	6f a1       	ldd	r22, Y+39	; 0x27
    2960:	78 a5       	ldd	r23, Y+40	; 0x28
    2962:	89 a5       	ldd	r24, Y+41	; 0x29
    2964:	9a a5       	ldd	r25, Y+42	; 0x2a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a ef       	ldi	r20, 0xFA	; 250
    296c:	54 e4       	ldi	r21, 0x44	; 68
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8b a3       	std	Y+35, r24	; 0x23
    2978:	9c a3       	std	Y+36, r25	; 0x24
    297a:	ad a3       	std	Y+37, r26	; 0x25
    297c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    297e:	6b a1       	ldd	r22, Y+35	; 0x23
    2980:	7c a1       	ldd	r23, Y+36	; 0x24
    2982:	8d a1       	ldd	r24, Y+37	; 0x25
    2984:	9e a1       	ldd	r25, Y+38	; 0x26
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9a a3       	std	Y+34, r25	; 0x22
    299c:	89 a3       	std	Y+33, r24	; 0x21
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    29a0:	6b a1       	ldd	r22, Y+35	; 0x23
    29a2:	7c a1       	ldd	r23, Y+36	; 0x24
    29a4:	8d a1       	ldd	r24, Y+37	; 0x25
    29a6:	9e a1       	ldd	r25, Y+38	; 0x26
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	6f a1       	ldd	r22, Y+39	; 0x27
    29ba:	78 a5       	ldd	r23, Y+40	; 0x28
    29bc:	89 a5       	ldd	r24, Y+41	; 0x29
    29be:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9a a3       	std	Y+34, r25	; 0x22
    29de:	89 a3       	std	Y+33, r24	; 0x21
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <HCLCD_Vid8Bits_Init+0x1d6>
    29e2:	88 ec       	ldi	r24, 0xC8	; 200
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	98 a3       	std	Y+32, r25	; 0x20
    29e8:	8f 8f       	std	Y+31, r24	; 0x1f
    29ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29ec:	98 a1       	ldd	r25, Y+32	; 0x20
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <HCLCD_Vid8Bits_Init+0x1c4>
    29f2:	98 a3       	std	Y+32, r25	; 0x20
    29f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	89 a1       	ldd	r24, Y+33	; 0x21
    29f8:	9a a1       	ldd	r25, Y+34	; 0x22
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9a a3       	std	Y+34, r25	; 0x22
    29fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	89 a1       	ldd	r24, Y+33	; 0x21
    2a02:	9a a1       	ldd	r25, Y+34	; 0x22
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <HCLCD_Vid8Bits_Init+0x1b8>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a10:	9e a1       	ldd	r25, Y+38	; 0x26
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9a a3       	std	Y+34, r25	; 0x22
    2a1c:	89 a3       	std	Y+33, r24	; 0x21
    2a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a20:	9a a1       	ldd	r25, Y+34	; 0x22
    2a22:	9e 8f       	std	Y+30, r25	; 0x1e
    2a24:	8d 8f       	std	Y+29, r24	; 0x1d
    2a26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <HCLCD_Vid8Bits_Init+0x200>
    2a2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a30:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    2a32:	8f e0       	ldi	r24, 0x0F	; 15
    2a34:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e8       	ldi	r26, 0x80	; 128
    2a3e:	bf e3       	ldi	r27, 0x3F	; 63
    2a40:	89 8f       	std	Y+25, r24	; 0x19
    2a42:	9a 8f       	std	Y+26, r25	; 0x1a
    2a44:	ab 8f       	std	Y+27, r26	; 0x1b
    2a46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	69 8d       	ldd	r22, Y+25	; 0x19
    2a4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4a ef       	ldi	r20, 0xFA	; 250
    2a56:	54 e4       	ldi	r21, 0x44	; 68
    2a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	8d 8b       	std	Y+21, r24	; 0x15
    2a62:	9e 8b       	std	Y+22, r25	; 0x16
    2a64:	af 8b       	std	Y+23, r26	; 0x17
    2a66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a68:	6d 89       	ldd	r22, Y+21	; 0x15
    2a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e8       	ldi	r20, 0x80	; 128
    2a76:	5f e3       	ldi	r21, 0x3F	; 63
    2a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9c 8b       	std	Y+20, r25	; 0x14
    2a86:	8b 8b       	std	Y+19, r24	; 0x13
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    2a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a90:	98 8d       	ldd	r25, Y+24	; 0x18
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	4c f5       	brge	.+82     	; 0x2af4 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9c 8b       	std	Y+20, r25	; 0x14
    2ac8:	8b 8b       	std	Y+19, r24	; 0x13
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <HCLCD_Vid8Bits_Init+0x2c0>
    2acc:	88 ec       	ldi	r24, 0xC8	; 200
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	9a 8b       	std	Y+18, r25	; 0x12
    2ad2:	89 8b       	std	Y+17, r24	; 0x11
    2ad4:	89 89       	ldd	r24, Y+17	; 0x11
    2ad6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <HCLCD_Vid8Bits_Init+0x2ae>
    2adc:	9a 8b       	std	Y+18, r25	; 0x12
    2ade:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9c 8b       	std	Y+20, r25	; 0x14
    2ae8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	8b 89       	ldd	r24, Y+19	; 0x13
    2aec:	9c 89       	ldd	r25, Y+20	; 0x14
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	69 f7       	brne	.-38     	; 0x2acc <HCLCD_Vid8Bits_Init+0x2a2>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	6d 89       	ldd	r22, Y+21	; 0x15
    2af6:	7e 89       	ldd	r23, Y+22	; 0x16
    2af8:	8f 89       	ldd	r24, Y+23	; 0x17
    2afa:	98 8d       	ldd	r25, Y+24	; 0x18
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9c 8b       	std	Y+20, r25	; 0x14
    2b06:	8b 8b       	std	Y+19, r24	; 0x13
    2b08:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0c:	98 8b       	std	Y+16, r25	; 0x10
    2b0e:	8f 87       	std	Y+15, r24	; 0x0f
    2b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b12:	98 89       	ldd	r25, Y+16	; 0x10
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <HCLCD_Vid8Bits_Init+0x2ea>
    2b18:	98 8b       	std	Y+16, r25	; 0x10
    2b1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a0 e0       	ldi	r26, 0x00	; 0
    2b28:	b0 e4       	ldi	r27, 0x40	; 64
    2b2a:	8b 87       	std	Y+11, r24	; 0x0b
    2b2c:	9c 87       	std	Y+12, r25	; 0x0c
    2b2e:	ad 87       	std	Y+13, r26	; 0x0d
    2b30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	4a ef       	ldi	r20, 0xFA	; 250
    2b40:	54 e4       	ldi	r21, 0x44	; 68
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	8f 83       	std	Y+7, r24	; 0x07
    2b4c:	98 87       	std	Y+8, r25	; 0x08
    2b4e:	a9 87       	std	Y+9, r26	; 0x09
    2b50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b52:	6f 81       	ldd	r22, Y+7	; 0x07
    2b54:	78 85       	ldd	r23, Y+8	; 0x08
    2b56:	89 85       	ldd	r24, Y+9	; 0x09
    2b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b66:	88 23       	and	r24, r24
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
    2b72:	3f c0       	rjmp	.+126    	; 0x2bf2 <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    2b74:	6f 81       	ldd	r22, Y+7	; 0x07
    2b76:	78 85       	ldd	r23, Y+8	; 0x08
    2b78:	89 85       	ldd	r24, Y+9	; 0x09
    2b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	57 e4       	ldi	r21, 0x47	; 71
    2b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	4c f5       	brge	.+82     	; 0x2bde <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	9e 83       	std	Y+6, r25	; 0x06
    2bb2:	8d 83       	std	Y+5, r24	; 0x05
    2bb4:	0f c0       	rjmp	.+30     	; 0x2bd4 <HCLCD_Vid8Bits_Init+0x3aa>
    2bb6:	88 ec       	ldi	r24, 0xC8	; 200
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9c 83       	std	Y+4, r25	; 0x04
    2bbc:	8b 83       	std	Y+3, r24	; 0x03
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <HCLCD_Vid8Bits_Init+0x398>
    2bc6:	9c 83       	std	Y+4, r25	; 0x04
    2bc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	9e 83       	std	Y+6, r25	; 0x06
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	69 f7       	brne	.-38     	; 0x2bb6 <HCLCD_Vid8Bits_Init+0x38c>
    2bdc:	14 c0       	rjmp	.+40     	; 0x2c06 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bde:	6f 81       	ldd	r22, Y+7	; 0x07
    2be0:	78 85       	ldd	r23, Y+8	; 0x08
    2be2:	89 85       	ldd	r24, Y+9	; 0x09
    2be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <HCLCD_Vid8Bits_Init+0x3d4>
    2c02:	9a 83       	std	Y+2, r25	; 0x02
    2c04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2c06:	86 e0       	ldi	r24, 0x06	; 6
    2c08:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
}
    2c0c:	e8 96       	adiw	r28, 0x38	; 56
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	08 95       	ret

00002c1e <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	6d 97       	sbiw	r28, 0x1d	; 29
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	62 e0       	ldi	r22, 0x02	; 2
    2c38:	41 e0       	ldi	r20, 0x01	; 1
    2c3a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	62 e0       	ldi	r22, 0x02	; 2
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2c48:	82 e0       	ldi	r24, 0x02	; 2
    2c4a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2c4c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	62 e0       	ldi	r22, 0x02	; 2
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	a0 e0       	ldi	r26, 0x00	; 0
    2c60:	b0 e4       	ldi	r27, 0x40	; 64
    2c62:	89 8f       	std	Y+25, r24	; 0x19
    2c64:	9a 8f       	std	Y+26, r25	; 0x1a
    2c66:	ab 8f       	std	Y+27, r26	; 0x1b
    2c68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	4a ef       	ldi	r20, 0xFA	; 250
    2c78:	54 e4       	ldi	r21, 0x44	; 68
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	8d 8b       	std	Y+21, r24	; 0x15
    2c84:	9e 8b       	std	Y+22, r25	; 0x16
    2c86:	af 8b       	std	Y+23, r26	; 0x17
    2c88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c90:	98 8d       	ldd	r25, Y+24	; 0x18
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e8       	ldi	r20, 0x80	; 128
    2c98:	5f e3       	ldi	r21, 0x3F	; 63
    2c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c9e:	88 23       	and	r24, r24
    2ca0:	2c f4       	brge	.+10     	; 0x2cac <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9c 8b       	std	Y+20, r25	; 0x14
    2ca8:	8b 8b       	std	Y+19, r24	; 0x13
    2caa:	3f c0       	rjmp	.+126    	; 0x2d2a <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2cac:	6d 89       	ldd	r22, Y+21	; 0x15
    2cae:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	57 e4       	ldi	r21, 0x47	; 71
    2cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	4c f5       	brge	.+82     	; 0x2d16 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e2       	ldi	r20, 0x20	; 32
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	8b 8b       	std	Y+19, r24	; 0x13
    2cec:	0f c0       	rjmp	.+30     	; 0x2d0c <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2cee:	88 ec       	ldi	r24, 0xC8	; 200
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9a 8b       	std	Y+18, r25	; 0x12
    2cf4:	89 8b       	std	Y+17, r24	; 0x11
    2cf6:	89 89       	ldd	r24, Y+17	; 0x11
    2cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2cfe:	9a 8b       	std	Y+18, r25	; 0x12
    2d00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d02:	8b 89       	ldd	r24, Y+19	; 0x13
    2d04:	9c 89       	ldd	r25, Y+20	; 0x14
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	9c 8b       	std	Y+20, r25	; 0x14
    2d0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	69 f7       	brne	.-38     	; 0x2cee <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2d14:	14 c0       	rjmp	.+40     	; 0x2d3e <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d16:	6d 89       	ldd	r22, Y+21	; 0x15
    2d18:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	98 8b       	std	Y+16, r25	; 0x10
    2d30:	8f 87       	std	Y+15, r24	; 0x0f
    2d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d34:	98 89       	ldd	r25, Y+16	; 0x10
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2d3a:	98 8b       	std	Y+16, r25	; 0x10
    2d3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	62 e0       	ldi	r22, 0x02	; 2
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a0 e0       	ldi	r26, 0x00	; 0
    2d4e:	b0 e4       	ldi	r27, 0x40	; 64
    2d50:	8b 87       	std	Y+11, r24	; 0x0b
    2d52:	9c 87       	std	Y+12, r25	; 0x0c
    2d54:	ad 87       	std	Y+13, r26	; 0x0d
    2d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4a ef       	ldi	r20, 0xFA	; 250
    2d66:	54 e4       	ldi	r21, 0x44	; 68
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8f 83       	std	Y+7, r24	; 0x07
    2d72:	98 87       	std	Y+8, r25	; 0x08
    2d74:	a9 87       	std	Y+9, r26	; 0x09
    2d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d78:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7a:	78 85       	ldd	r23, Y+8	; 0x08
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e8       	ldi	r20, 0x80	; 128
    2d86:	5f e3       	ldi	r21, 0x3F	; 63
    2d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8c:	88 23       	and	r24, r24
    2d8e:	2c f4       	brge	.+10     	; 0x2d9a <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	3f c0       	rjmp	.+126    	; 0x2e18 <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	4f e7       	ldi	r20, 0x7F	; 127
    2da8:	57 e4       	ldi	r21, 0x47	; 71
    2daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dae:	18 16       	cp	r1, r24
    2db0:	4c f5       	brge	.+82     	; 0x2e04 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2ddc:	88 ec       	ldi	r24, 0xC8	; 200
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	8b 83       	std	Y+3, r24	; 0x03
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	69 f7       	brne	.-38     	; 0x2ddc <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2e02:	14 c0       	rjmp	.+40     	; 0x2e2c <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e04:	6f 81       	ldd	r22, Y+7	; 0x07
    2e06:	78 85       	ldd	r23, Y+8	; 0x08
    2e08:	89 85       	ldd	r24, Y+9	; 0x09
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	9a 83       	std	Y+2, r25	; 0x02
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	62 e0       	ldi	r22, 0x02	; 2
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
}
    2e36:	6d 96       	adiw	r28, 0x1d	; 29
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <HCLCD_Vid8Bits_DisplayString+0x6>
    2e4e:	0f 92       	push	r0
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	9b 83       	std	Y+3, r25	; 0x03
    2e56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2e58:	19 82       	std	Y+1, r1	; 0x01
    2e5a:	0e c0       	rjmp	.+28     	; 0x2e78 <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	9b 81       	ldd	r25, Y+3	; 0x03
    2e66:	fc 01       	movw	r30, r24
    2e68:	e2 0f       	add	r30, r18
    2e6a:	f3 1f       	adc	r31, r19
    2e6c:	80 81       	ld	r24, Z
    2e6e:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	8f 5f       	subi	r24, 0xFF	; 255
    2e76:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	fc 01       	movw	r30, r24
    2e84:	e2 0f       	add	r30, r18
    2e86:	f3 1f       	adc	r31, r19
    2e88:	80 81       	ld	r24, Z
    2e8a:	88 23       	and	r24, r24
    2e8c:	39 f7       	brne	.-50     	; 0x2e5c <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	60 97       	sbiw	r28, 0x10	; 16
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	6d 87       	std	Y+13, r22	; 0x0d
    2eb4:	7e 87       	std	Y+14, r23	; 0x0e
    2eb6:	8f 87       	std	Y+15, r24	; 0x0f
    2eb8:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2eba:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec0:	af 85       	ldd	r26, Y+15	; 0x0f
    2ec2:	b8 89       	ldd	r27, Y+16	; 0x10
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	a1 05       	cpc	r26, r1
    2ec8:	b1 05       	cpc	r27, r1
    2eca:	09 f4       	brne	.+2      	; 0x2ece <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2ecc:	4f c0       	rjmp	.+158    	; 0x2f6c <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2ece:	2d c0       	rjmp	.+90     	; 0x2f2a <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	08 2f       	mov	r16, r24
    2ed4:	10 e0       	ldi	r17, 0x00	; 0
    2ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eda:	af 85       	ldd	r26, Y+15	; 0x0f
    2edc:	b8 89       	ldd	r27, Y+16	; 0x10
    2ede:	2a e0       	ldi	r18, 0x0A	; 10
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e0       	ldi	r20, 0x00	; 0
    2ee4:	50 e0       	ldi	r21, 0x00	; 0
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	03 96       	adiw	r24, 0x03	; 3
    2ef8:	fc 01       	movw	r30, r24
    2efa:	e0 0f       	add	r30, r16
    2efc:	f1 1f       	adc	r31, r17
    2efe:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f04:	af 85       	ldd	r26, Y+15	; 0x0f
    2f06:	b8 89       	ldd	r27, Y+16	; 0x10
    2f08:	2a e0       	ldi	r18, 0x0A	; 10
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e0       	ldi	r20, 0x00	; 0
    2f0e:	50 e0       	ldi	r21, 0x00	; 0
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
    2f18:	da 01       	movw	r26, r20
    2f1a:	c9 01       	movw	r24, r18
    2f1c:	8d 87       	std	Y+13, r24	; 0x0d
    2f1e:	9e 87       	std	Y+14, r25	; 0x0e
    2f20:	af 87       	std	Y+15, r26	; 0x0f
    2f22:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
    2f26:	8f 5f       	subi	r24, 0xFF	; 255
    2f28:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2e:	af 85       	ldd	r26, Y+15	; 0x0f
    2f30:	b8 89       	ldd	r27, Y+16	; 0x10
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	a1 05       	cpc	r26, r1
    2f36:	b1 05       	cpc	r27, r1
    2f38:	59 f6       	brne	.-106    	; 0x2ed0 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	81 50       	subi	r24, 0x01	; 1
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	11 c0       	rjmp	.+34     	; 0x2f64 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	28 2f       	mov	r18, r24
    2f46:	33 27       	eor	r19, r19
    2f48:	27 fd       	sbrc	r18, 7
    2f4a:	30 95       	com	r19
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	03 96       	adiw	r24, 0x03	; 3
    2f50:	fc 01       	movw	r30, r24
    2f52:	e2 0f       	add	r30, r18
    2f54:	f3 1f       	adc	r31, r19
    2f56:	80 81       	ld	r24, Z
    2f58:	80 5d       	subi	r24, 0xD0	; 208
    2f5a:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	81 50       	subi	r24, 0x01	; 1
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	88 23       	and	r24, r24
    2f68:	64 f7       	brge	.-40     	; 0x2f42 <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2f6a:	03 c0       	rjmp	.+6      	; 0x2f72 <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2f6c:	80 e3       	ldi	r24, 0x30	; 48
    2f6e:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2f72:	60 96       	adiw	r28, 0x10	; 16
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	08 95       	ret

00002f88 <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <HCLCD_Vid8Bits_SetPosition+0x6>
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	81 30       	cpi	r24, 0x01	; 1
    2f9a:	41 f4       	brne	.+16     	; 0x2fac <HCLCD_Vid8Bits_SetPosition+0x24>
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	80 31       	cpi	r24, 0x10	; 16
    2fa0:	28 f4       	brcc	.+10     	; 0x2fac <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa4:	80 58       	subi	r24, 0x80	; 128
    2fa6:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    2faa:	0a c0       	rjmp	.+20     	; 0x2fc0 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	82 30       	cpi	r24, 0x02	; 2
    2fb0:	39 f4       	brne	.+14     	; 0x2fc0 <HCLCD_Vid8Bits_SetPosition+0x38>
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	80 31       	cpi	r24, 0x10	; 16
    2fb6:	20 f4       	brcc	.+8      	; 0x2fc0 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	80 54       	subi	r24, 0x40	; 64
    2fbc:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	8a 83       	std	Y+2, r24	; 0x02
    2fd8:	7c 83       	std	Y+4, r23	; 0x04
    2fda:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	88 30       	cpi	r24, 0x08	; 8
    2fe0:	f8 f4       	brcc	.+62     	; 0x3020 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	08 96       	adiw	r24, 0x08	; 8
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2ffa:	19 82       	std	Y+1, r1	; 0x01
    2ffc:	0e c0       	rjmp	.+28     	; 0x301a <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	fc 01       	movw	r30, r24
    300a:	e2 0f       	add	r30, r18
    300c:	f3 1f       	adc	r31, r19
    300e:	80 81       	ld	r24, Z
    3010:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	8f 5f       	subi	r24, 0xFF	; 255
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	88 30       	cpi	r24, 0x08	; 8
    301e:	78 f3       	brcs	.-34     	; 0x2ffe <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	2e 97       	sbiw	r28, 0x0e	; 14
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	a0 e0       	ldi	r26, 0x00	; 0
    304e:	b0 e4       	ldi	r27, 0x40	; 64
    3050:	8b 87       	std	Y+11, r24	; 0x0b
    3052:	9c 87       	std	Y+12, r25	; 0x0c
    3054:	ad 87       	std	Y+13, r26	; 0x0d
    3056:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3058:	6b 85       	ldd	r22, Y+11	; 0x0b
    305a:	7c 85       	ldd	r23, Y+12	; 0x0c
    305c:	8d 85       	ldd	r24, Y+13	; 0x0d
    305e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	4a ef       	ldi	r20, 0xFA	; 250
    3066:	54 e4       	ldi	r21, 0x44	; 68
    3068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	8f 83       	std	Y+7, r24	; 0x07
    3072:	98 87       	std	Y+8, r25	; 0x08
    3074:	a9 87       	std	Y+9, r26	; 0x09
    3076:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3078:	6f 81       	ldd	r22, Y+7	; 0x07
    307a:	78 85       	ldd	r23, Y+8	; 0x08
    307c:	89 85       	ldd	r24, Y+9	; 0x09
    307e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e8       	ldi	r20, 0x80	; 128
    3086:	5f e3       	ldi	r21, 0x3F	; 63
    3088:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308c:	88 23       	and	r24, r24
    308e:	2c f4       	brge	.+10     	; 0x309a <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	9e 83       	std	Y+6, r25	; 0x06
    3096:	8d 83       	std	Y+5, r24	; 0x05
    3098:	3f c0       	rjmp	.+126    	; 0x3118 <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    309a:	6f 81       	ldd	r22, Y+7	; 0x07
    309c:	78 85       	ldd	r23, Y+8	; 0x08
    309e:	89 85       	ldd	r24, Y+9	; 0x09
    30a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	3f ef       	ldi	r19, 0xFF	; 255
    30a6:	4f e7       	ldi	r20, 0x7F	; 127
    30a8:	57 e4       	ldi	r21, 0x47	; 71
    30aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ae:	18 16       	cp	r1, r24
    30b0:	4c f5       	brge	.+82     	; 0x3104 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e2       	ldi	r20, 0x20	; 32
    30c0:	51 e4       	ldi	r21, 0x41	; 65
    30c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9e 83       	std	Y+6, r25	; 0x06
    30d8:	8d 83       	std	Y+5, r24	; 0x05
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <HCLCD_Vid8Bits_ClearScreen+0xcc>
    30dc:	88 ec       	ldi	r24, 0xC8	; 200
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9c 83       	std	Y+4, r25	; 0x04
    30e2:	8b 83       	std	Y+3, r24	; 0x03
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	9c 81       	ldd	r25, Y+4	; 0x04
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <HCLCD_Vid8Bits_ClearScreen+0xba>
    30ec:	9c 83       	std	Y+4, r25	; 0x04
    30ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f0:	8d 81       	ldd	r24, Y+5	; 0x05
    30f2:	9e 81       	ldd	r25, Y+6	; 0x06
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	9e 83       	std	Y+6, r25	; 0x06
    30f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fa:	8d 81       	ldd	r24, Y+5	; 0x05
    30fc:	9e 81       	ldd	r25, Y+6	; 0x06
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	69 f7       	brne	.-38     	; 0x30dc <HCLCD_Vid8Bits_ClearScreen+0xae>
    3102:	14 c0       	rjmp	.+40     	; 0x312c <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3104:	6f 81       	ldd	r22, Y+7	; 0x07
    3106:	78 85       	ldd	r23, Y+8	; 0x08
    3108:	89 85       	ldd	r24, Y+9	; 0x09
    310a:	9a 85       	ldd	r25, Y+10	; 0x0a
    310c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	9e 83       	std	Y+6, r25	; 0x06
    3116:	8d 83       	std	Y+5, r24	; 0x05
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	9e 81       	ldd	r25, Y+6	; 0x06
    311c:	9a 83       	std	Y+2, r25	; 0x02
    311e:	89 83       	std	Y+1, r24	; 0x01
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	9a 81       	ldd	r25, Y+2	; 0x02
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    3128:	9a 83       	std	Y+2, r25	; 0x02
    312a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    312c:	2e 96       	adiw	r28, 0x0e	; 14
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	60 97       	sbiw	r28, 0x10	; 16
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3154:	1f 86       	std	Y+15, r1	; 0x0f
    3156:	78 c0       	rjmp	.+240    	; 0x3248 <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3158:	88 e1       	ldi	r24, 0x18	; 24
    315a:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	a6 e9       	ldi	r26, 0x96	; 150
    3164:	b3 e4       	ldi	r27, 0x43	; 67
    3166:	8b 87       	std	Y+11, r24	; 0x0b
    3168:	9c 87       	std	Y+12, r25	; 0x0c
    316a:	ad 87       	std	Y+13, r26	; 0x0d
    316c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3170:	7c 85       	ldd	r23, Y+12	; 0x0c
    3172:	8d 85       	ldd	r24, Y+13	; 0x0d
    3174:	9e 85       	ldd	r25, Y+14	; 0x0e
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	4a ef       	ldi	r20, 0xFA	; 250
    317c:	54 e4       	ldi	r21, 0x44	; 68
    317e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	8f 83       	std	Y+7, r24	; 0x07
    3188:	98 87       	std	Y+8, r25	; 0x08
    318a:	a9 87       	std	Y+9, r26	; 0x09
    318c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    318e:	6f 81       	ldd	r22, Y+7	; 0x07
    3190:	78 85       	ldd	r23, Y+8	; 0x08
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e8       	ldi	r20, 0x80	; 128
    319c:	5f e3       	ldi	r21, 0x3F	; 63
    319e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a2:	88 23       	and	r24, r24
    31a4:	2c f4       	brge	.+10     	; 0x31b0 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9e 83       	std	Y+6, r25	; 0x06
    31ac:	8d 83       	std	Y+5, r24	; 0x05
    31ae:	3f c0       	rjmp	.+126    	; 0x322e <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    31b0:	6f 81       	ldd	r22, Y+7	; 0x07
    31b2:	78 85       	ldd	r23, Y+8	; 0x08
    31b4:	89 85       	ldd	r24, Y+9	; 0x09
    31b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	4f e7       	ldi	r20, 0x7F	; 127
    31be:	57 e4       	ldi	r21, 0x47	; 71
    31c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	4c f5       	brge	.+82     	; 0x321a <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    31cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e2       	ldi	r20, 0x20	; 32
    31d6:	51 e4       	ldi	r21, 0x41	; 65
    31d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	9e 83       	std	Y+6, r25	; 0x06
    31ee:	8d 83       	std	Y+5, r24	; 0x05
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    31f2:	88 ec       	ldi	r24, 0xC8	; 200
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9c 83       	std	Y+4, r25	; 0x04
    31f8:	8b 83       	std	Y+3, r24	; 0x03
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    3202:	9c 83       	std	Y+4, r25	; 0x04
    3204:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	9e 83       	std	Y+6, r25	; 0x06
    320e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3210:	8d 81       	ldd	r24, Y+5	; 0x05
    3212:	9e 81       	ldd	r25, Y+6	; 0x06
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	69 f7       	brne	.-38     	; 0x31f2 <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    3218:	14 c0       	rjmp	.+40     	; 0x3242 <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9e 83       	std	Y+6, r25	; 0x06
    322c:	8d 83       	std	Y+5, r24	; 0x05
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    323e:	9a 83       	std	Y+2, r25	; 0x02
    3240:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3242:	8f 85       	ldd	r24, Y+15	; 0x0f
    3244:	8f 5f       	subi	r24, 0xFF	; 255
    3246:	8f 87       	std	Y+15, r24	; 0x0f
    3248:	9f 85       	ldd	r25, Y+15	; 0x0f
    324a:	88 89       	ldd	r24, Y+16	; 0x10
    324c:	98 17       	cp	r25, r24
    324e:	08 f4       	brcc	.+2      	; 0x3252 <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    3250:	83 cf       	rjmp	.-250    	; 0x3158 <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    3252:	60 96       	adiw	r28, 0x10	; 16
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	60 97       	sbiw	r28, 0x10	; 16
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
    3278:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    327a:	1f 86       	std	Y+15, r1	; 0x0f
    327c:	78 c0       	rjmp	.+240    	; 0x336e <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    327e:	8c e1       	ldi	r24, 0x1C	; 28
    3280:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	a6 e9       	ldi	r26, 0x96	; 150
    328a:	b3 e4       	ldi	r27, 0x43	; 67
    328c:	8b 87       	std	Y+11, r24	; 0x0b
    328e:	9c 87       	std	Y+12, r25	; 0x0c
    3290:	ad 87       	std	Y+13, r26	; 0x0d
    3292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	6b 85       	ldd	r22, Y+11	; 0x0b
    3296:	7c 85       	ldd	r23, Y+12	; 0x0c
    3298:	8d 85       	ldd	r24, Y+13	; 0x0d
    329a:	9e 85       	ldd	r25, Y+14	; 0x0e
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	4a ef       	ldi	r20, 0xFA	; 250
    32a2:	54 e4       	ldi	r21, 0x44	; 68
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	8f 83       	std	Y+7, r24	; 0x07
    32ae:	98 87       	std	Y+8, r25	; 0x08
    32b0:	a9 87       	std	Y+9, r26	; 0x09
    32b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b4:	6f 81       	ldd	r22, Y+7	; 0x07
    32b6:	78 85       	ldd	r23, Y+8	; 0x08
    32b8:	89 85       	ldd	r24, Y+9	; 0x09
    32ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	2c f4       	brge	.+10     	; 0x32d6 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9e 83       	std	Y+6, r25	; 0x06
    32d2:	8d 83       	std	Y+5, r24	; 0x05
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    32d6:	6f 81       	ldd	r22, Y+7	; 0x07
    32d8:	78 85       	ldd	r23, Y+8	; 0x08
    32da:	89 85       	ldd	r24, Y+9	; 0x09
    32dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	4f e7       	ldi	r20, 0x7F	; 127
    32e4:	57 e4       	ldi	r21, 0x47	; 71
    32e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	4c f5       	brge	.+82     	; 0x3340 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9e 83       	std	Y+6, r25	; 0x06
    3314:	8d 83       	std	Y+5, r24	; 0x05
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    3318:	88 ec       	ldi	r24, 0xC8	; 200
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9c 83       	std	Y+4, r25	; 0x04
    331e:	8b 83       	std	Y+3, r24	; 0x03
    3320:	8b 81       	ldd	r24, Y+3	; 0x03
    3322:	9c 81       	ldd	r25, Y+4	; 0x04
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    3328:	9c 83       	std	Y+4, r25	; 0x04
    332a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	8d 81       	ldd	r24, Y+5	; 0x05
    332e:	9e 81       	ldd	r25, Y+6	; 0x06
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3336:	8d 81       	ldd	r24, Y+5	; 0x05
    3338:	9e 81       	ldd	r25, Y+6	; 0x06
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	69 f7       	brne	.-38     	; 0x3318 <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	6f 81       	ldd	r22, Y+7	; 0x07
    3342:	78 85       	ldd	r23, Y+8	; 0x08
    3344:	89 85       	ldd	r24, Y+9	; 0x09
    3346:	9a 85       	ldd	r25, Y+10	; 0x0a
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9e 83       	std	Y+6, r25	; 0x06
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	8d 81       	ldd	r24, Y+5	; 0x05
    3356:	9e 81       	ldd	r25, Y+6	; 0x06
    3358:	9a 83       	std	Y+2, r25	; 0x02
    335a:	89 83       	std	Y+1, r24	; 0x01
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	9a 81       	ldd	r25, Y+2	; 0x02
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3368:	8f 85       	ldd	r24, Y+15	; 0x0f
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	8f 87       	std	Y+15, r24	; 0x0f
    336e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3370:	88 89       	ldd	r24, Y+16	; 0x10
    3372:	98 17       	cp	r25, r24
    3374:	08 f4       	brcc	.+2      	; 0x3378 <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    3376:	83 cf       	rjmp	.-250    	; 0x327e <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3378:	60 96       	adiw	r28, 0x10	; 16
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	60 97       	sbiw	r28, 0x10	; 16
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
    339e:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    33a0:	1f 86       	std	Y+15, r1	; 0x0f
    33a2:	78 c0       	rjmp	.+240    	; 0x3494 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    33a4:	80 e1       	ldi	r24, 0x10	; 16
    33a6:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	a6 e9       	ldi	r26, 0x96	; 150
    33b0:	b3 e4       	ldi	r27, 0x43	; 67
    33b2:	8b 87       	std	Y+11, r24	; 0x0b
    33b4:	9c 87       	std	Y+12, r25	; 0x0c
    33b6:	ad 87       	std	Y+13, r26	; 0x0d
    33b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    33bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33be:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	4a ef       	ldi	r20, 0xFA	; 250
    33c8:	54 e4       	ldi	r21, 0x44	; 68
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	8f 83       	std	Y+7, r24	; 0x07
    33d4:	98 87       	std	Y+8, r25	; 0x08
    33d6:	a9 87       	std	Y+9, r26	; 0x09
    33d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e8       	ldi	r20, 0x80	; 128
    33e8:	5f e3       	ldi	r21, 0x3F	; 63
    33ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ee:	88 23       	and	r24, r24
    33f0:	2c f4       	brge	.+10     	; 0x33fc <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
    33fa:	3f c0       	rjmp	.+126    	; 0x347a <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    33fc:	6f 81       	ldd	r22, Y+7	; 0x07
    33fe:	78 85       	ldd	r23, Y+8	; 0x08
    3400:	89 85       	ldd	r24, Y+9	; 0x09
    3402:	9a 85       	ldd	r25, Y+10	; 0x0a
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	3f ef       	ldi	r19, 0xFF	; 255
    3408:	4f e7       	ldi	r20, 0x7F	; 127
    340a:	57 e4       	ldi	r21, 0x47	; 71
    340c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3410:	18 16       	cp	r1, r24
    3412:	4c f5       	brge	.+82     	; 0x3466 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3414:	6b 85       	ldd	r22, Y+11	; 0x0b
    3416:	7c 85       	ldd	r23, Y+12	; 0x0c
    3418:	8d 85       	ldd	r24, Y+13	; 0x0d
    341a:	9e 85       	ldd	r25, Y+14	; 0x0e
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e2       	ldi	r20, 0x20	; 32
    3422:	51 e4       	ldi	r21, 0x41	; 65
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	bc 01       	movw	r22, r24
    342e:	cd 01       	movw	r24, r26
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
    343c:	0f c0       	rjmp	.+30     	; 0x345c <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    343e:	88 ec       	ldi	r24, 0xC8	; 200
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9c 83       	std	Y+4, r25	; 0x04
    3444:	8b 83       	std	Y+3, r24	; 0x03
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	9c 81       	ldd	r25, Y+4	; 0x04
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    344e:	9c 83       	std	Y+4, r25	; 0x04
    3450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345c:	8d 81       	ldd	r24, Y+5	; 0x05
    345e:	9e 81       	ldd	r25, Y+6	; 0x06
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	69 f7       	brne	.-38     	; 0x343e <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    3464:	14 c0       	rjmp	.+40     	; 0x348e <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3466:	6f 81       	ldd	r22, Y+7	; 0x07
    3468:	78 85       	ldd	r23, Y+8	; 0x08
    346a:	89 85       	ldd	r24, Y+9	; 0x09
    346c:	9a 85       	ldd	r25, Y+10	; 0x0a
    346e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	9e 83       	std	Y+6, r25	; 0x06
    3478:	8d 83       	std	Y+5, r24	; 0x05
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	9e 81       	ldd	r25, Y+6	; 0x06
    347e:	9a 83       	std	Y+2, r25	; 0x02
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	9a 81       	ldd	r25, Y+2	; 0x02
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    348e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3490:	8f 5f       	subi	r24, 0xFF	; 255
    3492:	8f 87       	std	Y+15, r24	; 0x0f
    3494:	9f 85       	ldd	r25, Y+15	; 0x0f
    3496:	88 89       	ldd	r24, Y+16	; 0x10
    3498:	98 17       	cp	r25, r24
    349a:	08 f4       	brcc	.+2      	; 0x349e <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    349c:	83 cf       	rjmp	.-250    	; 0x33a4 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    349e:	60 96       	adiw	r28, 0x10	; 16
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	60 97       	sbiw	r28, 0x10	; 16
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    34c6:	1f 86       	std	Y+15, r1	; 0x0f
    34c8:	78 c0       	rjmp	.+240    	; 0x35ba <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    34ca:	84 e1       	ldi	r24, 0x14	; 20
    34cc:	0e 94 00 13 	call	0x2600	; 0x2600 <HCLCD_Vid8Bits_SendCommand>
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	a6 e9       	ldi	r26, 0x96	; 150
    34d6:	b3 e4       	ldi	r27, 0x43	; 67
    34d8:	8b 87       	std	Y+11, r24	; 0x0b
    34da:	9c 87       	std	Y+12, r25	; 0x0c
    34dc:	ad 87       	std	Y+13, r26	; 0x0d
    34de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	4a ef       	ldi	r20, 0xFA	; 250
    34ee:	54 e4       	ldi	r21, 0x44	; 68
    34f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	8f 83       	std	Y+7, r24	; 0x07
    34fa:	98 87       	std	Y+8, r25	; 0x08
    34fc:	a9 87       	std	Y+9, r26	; 0x09
    34fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3500:	6f 81       	ldd	r22, Y+7	; 0x07
    3502:	78 85       	ldd	r23, Y+8	; 0x08
    3504:	89 85       	ldd	r24, Y+9	; 0x09
    3506:	9a 85       	ldd	r25, Y+10	; 0x0a
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	40 e8       	ldi	r20, 0x80	; 128
    350e:	5f e3       	ldi	r21, 0x3F	; 63
    3510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3514:	88 23       	and	r24, r24
    3516:	2c f4       	brge	.+10     	; 0x3522 <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	9e 83       	std	Y+6, r25	; 0x06
    351e:	8d 83       	std	Y+5, r24	; 0x05
    3520:	3f c0       	rjmp	.+126    	; 0x35a0 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    3522:	6f 81       	ldd	r22, Y+7	; 0x07
    3524:	78 85       	ldd	r23, Y+8	; 0x08
    3526:	89 85       	ldd	r24, Y+9	; 0x09
    3528:	9a 85       	ldd	r25, Y+10	; 0x0a
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	3f ef       	ldi	r19, 0xFF	; 255
    352e:	4f e7       	ldi	r20, 0x7F	; 127
    3530:	57 e4       	ldi	r21, 0x47	; 71
    3532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3536:	18 16       	cp	r1, r24
    3538:	4c f5       	brge	.+82     	; 0x358c <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    353a:	6b 85       	ldd	r22, Y+11	; 0x0b
    353c:	7c 85       	ldd	r23, Y+12	; 0x0c
    353e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3540:	9e 85       	ldd	r25, Y+14	; 0x0e
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e2       	ldi	r20, 0x20	; 32
    3548:	51 e4       	ldi	r21, 0x41	; 65
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	bc 01       	movw	r22, r24
    3554:	cd 01       	movw	r24, r26
    3556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	9e 83       	std	Y+6, r25	; 0x06
    3560:	8d 83       	std	Y+5, r24	; 0x05
    3562:	0f c0       	rjmp	.+30     	; 0x3582 <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    3564:	88 ec       	ldi	r24, 0xC8	; 200
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	9c 83       	std	Y+4, r25	; 0x04
    356a:	8b 83       	std	Y+3, r24	; 0x03
    356c:	8b 81       	ldd	r24, Y+3	; 0x03
    356e:	9c 81       	ldd	r25, Y+4	; 0x04
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	f1 f7       	brne	.-4      	; 0x3570 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    3574:	9c 83       	std	Y+4, r25	; 0x04
    3576:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3578:	8d 81       	ldd	r24, Y+5	; 0x05
    357a:	9e 81       	ldd	r25, Y+6	; 0x06
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	00 97       	sbiw	r24, 0x00	; 0
    3588:	69 f7       	brne	.-38     	; 0x3564 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    358a:	14 c0       	rjmp	.+40     	; 0x35b4 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358c:	6f 81       	ldd	r22, Y+7	; 0x07
    358e:	78 85       	ldd	r23, Y+8	; 0x08
    3590:	89 85       	ldd	r24, Y+9	; 0x09
    3592:	9a 85       	ldd	r25, Y+10	; 0x0a
    3594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	9e 83       	std	Y+6, r25	; 0x06
    359e:	8d 83       	std	Y+5, r24	; 0x05
    35a0:	8d 81       	ldd	r24, Y+5	; 0x05
    35a2:	9e 81       	ldd	r25, Y+6	; 0x06
    35a4:	9a 83       	std	Y+2, r25	; 0x02
    35a6:	89 83       	std	Y+1, r24	; 0x01
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	9a 81       	ldd	r25, Y+2	; 0x02
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	f1 f7       	brne	.-4      	; 0x35ac <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    35b0:	9a 83       	std	Y+2, r25	; 0x02
    35b2:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    35b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b6:	8f 5f       	subi	r24, 0xFF	; 255
    35b8:	8f 87       	std	Y+15, r24	; 0x0f
    35ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    35bc:	88 89       	ldd	r24, Y+16	; 0x10
    35be:	98 17       	cp	r25, r24
    35c0:	08 f4       	brcc	.+2      	; 0x35c4 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    35c2:	83 cf       	rjmp	.-250    	; 0x34ca <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    35c4:	60 96       	adiw	r28, 0x10	; 16
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	f8 94       	cli
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	0f be       	out	0x3f, r0	; 63
    35ce:	cd bf       	out	0x3d, r28	; 61
    35d0:	cf 91       	pop	r28
    35d2:	df 91       	pop	r29
    35d4:	08 95       	ret

000035d6 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    35d6:	df 93       	push	r29
    35d8:	cf 93       	push	r28
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
    35de:	2f 97       	sbiw	r28, 0x0f	; 15
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	f8 94       	cli
    35e4:	de bf       	out	0x3e, r29	; 62
    35e6:	0f be       	out	0x3f, r0	; 63
    35e8:	cd bf       	out	0x3d, r28	; 61
    35ea:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	62 e0       	ldi	r22, 0x02	; 2
    35f0:	40 e0       	ldi	r20, 0x00	; 0
    35f2:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	62 e0       	ldi	r22, 0x02	; 2
    35fa:	40 e0       	ldi	r20, 0x00	; 0
    35fc:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    3600:	84 e0       	ldi	r24, 0x04	; 4
    3602:	62 e0       	ldi	r22, 0x02	; 2
    3604:	4f 85       	ldd	r20, Y+15	; 0x0f
    3606:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    360a:	82 e0       	ldi	r24, 0x02	; 2
    360c:	62 e0       	ldi	r22, 0x02	; 2
    360e:	41 e0       	ldi	r20, 0x01	; 1
    3610:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	a0 e0       	ldi	r26, 0x00	; 0
    361a:	b0 e4       	ldi	r27, 0x40	; 64
    361c:	8b 87       	std	Y+11, r24	; 0x0b
    361e:	9c 87       	std	Y+12, r25	; 0x0c
    3620:	ad 87       	std	Y+13, r26	; 0x0d
    3622:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3624:	6b 85       	ldd	r22, Y+11	; 0x0b
    3626:	7c 85       	ldd	r23, Y+12	; 0x0c
    3628:	8d 85       	ldd	r24, Y+13	; 0x0d
    362a:	9e 85       	ldd	r25, Y+14	; 0x0e
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	4a ef       	ldi	r20, 0xFA	; 250
    3632:	54 e4       	ldi	r21, 0x44	; 68
    3634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	8f 83       	std	Y+7, r24	; 0x07
    363e:	98 87       	std	Y+8, r25	; 0x08
    3640:	a9 87       	std	Y+9, r26	; 0x09
    3642:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3644:	6f 81       	ldd	r22, Y+7	; 0x07
    3646:	78 85       	ldd	r23, Y+8	; 0x08
    3648:	89 85       	ldd	r24, Y+9	; 0x09
    364a:	9a 85       	ldd	r25, Y+10	; 0x0a
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	40 e8       	ldi	r20, 0x80	; 128
    3652:	5f e3       	ldi	r21, 0x3F	; 63
    3654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3658:	88 23       	and	r24, r24
    365a:	2c f4       	brge	.+10     	; 0x3666 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
    3664:	3f c0       	rjmp	.+126    	; 0x36e4 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    3666:	6f 81       	ldd	r22, Y+7	; 0x07
    3668:	78 85       	ldd	r23, Y+8	; 0x08
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	3f ef       	ldi	r19, 0xFF	; 255
    3672:	4f e7       	ldi	r20, 0x7F	; 127
    3674:	57 e4       	ldi	r21, 0x47	; 71
    3676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    367a:	18 16       	cp	r1, r24
    367c:	4c f5       	brge	.+82     	; 0x36d0 <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3680:	7c 85       	ldd	r23, Y+12	; 0x0c
    3682:	8d 85       	ldd	r24, Y+13	; 0x0d
    3684:	9e 85       	ldd	r25, Y+14	; 0x0e
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e2       	ldi	r20, 0x20	; 32
    368c:	51 e4       	ldi	r21, 0x41	; 65
    368e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	bc 01       	movw	r22, r24
    3698:	cd 01       	movw	r24, r26
    369a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	9e 83       	std	Y+6, r25	; 0x06
    36a4:	8d 83       	std	Y+5, r24	; 0x05
    36a6:	0f c0       	rjmp	.+30     	; 0x36c6 <HCLCD_Vid4Bits_SendCommand+0xf0>
    36a8:	88 ec       	ldi	r24, 0xC8	; 200
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	9c 83       	std	Y+4, r25	; 0x04
    36ae:	8b 83       	std	Y+3, r24	; 0x03
    36b0:	8b 81       	ldd	r24, Y+3	; 0x03
    36b2:	9c 81       	ldd	r25, Y+4	; 0x04
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <HCLCD_Vid4Bits_SendCommand+0xde>
    36b8:	9c 83       	std	Y+4, r25	; 0x04
    36ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36bc:	8d 81       	ldd	r24, Y+5	; 0x05
    36be:	9e 81       	ldd	r25, Y+6	; 0x06
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	9e 83       	std	Y+6, r25	; 0x06
    36c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c6:	8d 81       	ldd	r24, Y+5	; 0x05
    36c8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	69 f7       	brne	.-38     	; 0x36a8 <HCLCD_Vid4Bits_SendCommand+0xd2>
    36ce:	14 c0       	rjmp	.+40     	; 0x36f8 <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d0:	6f 81       	ldd	r22, Y+7	; 0x07
    36d2:	78 85       	ldd	r23, Y+8	; 0x08
    36d4:	89 85       	ldd	r24, Y+9	; 0x09
    36d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	9e 83       	std	Y+6, r25	; 0x06
    36e2:	8d 83       	std	Y+5, r24	; 0x05
    36e4:	8d 81       	ldd	r24, Y+5	; 0x05
    36e6:	9e 81       	ldd	r25, Y+6	; 0x06
    36e8:	9a 83       	std	Y+2, r25	; 0x02
    36ea:	89 83       	std	Y+1, r24	; 0x01
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <HCLCD_Vid4Bits_SendCommand+0x11a>
    36f4:	9a 83       	std	Y+2, r25	; 0x02
    36f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    36f8:	82 e0       	ldi	r24, 0x02	; 2
    36fa:	62 e0       	ldi	r22, 0x02	; 2
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
}
    3702:	2f 96       	adiw	r28, 0x0f	; 15
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
    371c:	e9 97       	sbiw	r28, 0x39	; 57
    371e:	0f b6       	in	r0, 0x3f	; 63
    3720:	f8 94       	cli
    3722:	de bf       	out	0x3e, r29	; 62
    3724:	0f be       	out	0x3f, r0	; 63
    3726:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3728:	87 e0       	ldi	r24, 0x07	; 7
    372a:	89 af       	std	Y+57, r24	; 0x39
    372c:	08 c0       	rjmp	.+16     	; 0x373e <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    372e:	89 ad       	ldd	r24, Y+57	; 0x39
    3730:	62 e0       	ldi	r22, 0x02	; 2
    3732:	41 e0       	ldi	r20, 0x01	; 1
    3734:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3738:	89 ad       	ldd	r24, Y+57	; 0x39
    373a:	81 50       	subi	r24, 0x01	; 1
    373c:	89 af       	std	Y+57, r24	; 0x39
    373e:	89 ad       	ldd	r24, Y+57	; 0x39
    3740:	84 30       	cpi	r24, 0x04	; 4
    3742:	ac f7       	brge	.-22     	; 0x372e <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	62 e0       	ldi	r22, 0x02	; 2
    3748:	41 e0       	ldi	r20, 0x01	; 1
    374a:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	62 e0       	ldi	r22, 0x02	; 2
    3752:	41 e0       	ldi	r20, 0x01	; 1
    3754:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    3758:	82 e0       	ldi	r24, 0x02	; 2
    375a:	62 e0       	ldi	r22, 0x02	; 2
    375c:	41 e0       	ldi	r20, 0x01	; 1
    375e:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	a0 ef       	ldi	r26, 0xF0	; 240
    3768:	b1 e4       	ldi	r27, 0x41	; 65
    376a:	8d ab       	std	Y+53, r24	; 0x35
    376c:	9e ab       	std	Y+54, r25	; 0x36
    376e:	af ab       	std	Y+55, r26	; 0x37
    3770:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3772:	6d a9       	ldd	r22, Y+53	; 0x35
    3774:	7e a9       	ldd	r23, Y+54	; 0x36
    3776:	8f a9       	ldd	r24, Y+55	; 0x37
    3778:	98 ad       	ldd	r25, Y+56	; 0x38
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	4a ef       	ldi	r20, 0xFA	; 250
    3780:	54 e4       	ldi	r21, 0x44	; 68
    3782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	89 ab       	std	Y+49, r24	; 0x31
    378c:	9a ab       	std	Y+50, r25	; 0x32
    378e:	ab ab       	std	Y+51, r26	; 0x33
    3790:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3792:	69 a9       	ldd	r22, Y+49	; 0x31
    3794:	7a a9       	ldd	r23, Y+50	; 0x32
    3796:	8b a9       	ldd	r24, Y+51	; 0x33
    3798:	9c a9       	ldd	r25, Y+52	; 0x34
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	40 e8       	ldi	r20, 0x80	; 128
    37a0:	5f e3       	ldi	r21, 0x3F	; 63
    37a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a6:	88 23       	and	r24, r24
    37a8:	2c f4       	brge	.+10     	; 0x37b4 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	98 ab       	std	Y+48, r25	; 0x30
    37b0:	8f a7       	std	Y+47, r24	; 0x2f
    37b2:	3f c0       	rjmp	.+126    	; 0x3832 <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    37b4:	69 a9       	ldd	r22, Y+49	; 0x31
    37b6:	7a a9       	ldd	r23, Y+50	; 0x32
    37b8:	8b a9       	ldd	r24, Y+51	; 0x33
    37ba:	9c a9       	ldd	r25, Y+52	; 0x34
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	3f ef       	ldi	r19, 0xFF	; 255
    37c0:	4f e7       	ldi	r20, 0x7F	; 127
    37c2:	57 e4       	ldi	r21, 0x47	; 71
    37c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c8:	18 16       	cp	r1, r24
    37ca:	4c f5       	brge	.+82     	; 0x381e <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37cc:	6d a9       	ldd	r22, Y+53	; 0x35
    37ce:	7e a9       	ldd	r23, Y+54	; 0x36
    37d0:	8f a9       	ldd	r24, Y+55	; 0x37
    37d2:	98 ad       	ldd	r25, Y+56	; 0x38
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e2       	ldi	r20, 0x20	; 32
    37da:	51 e4       	ldi	r21, 0x41	; 65
    37dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	bc 01       	movw	r22, r24
    37e6:	cd 01       	movw	r24, r26
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	98 ab       	std	Y+48, r25	; 0x30
    37f2:	8f a7       	std	Y+47, r24	; 0x2f
    37f4:	0f c0       	rjmp	.+30     	; 0x3814 <HCLCD_Vid4Bits_Init+0x100>
    37f6:	88 ec       	ldi	r24, 0xC8	; 200
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	9e a7       	std	Y+46, r25	; 0x2e
    37fc:	8d a7       	std	Y+45, r24	; 0x2d
    37fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    3800:	9e a5       	ldd	r25, Y+46	; 0x2e
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <HCLCD_Vid4Bits_Init+0xee>
    3806:	9e a7       	std	Y+46, r25	; 0x2e
    3808:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380a:	8f a5       	ldd	r24, Y+47	; 0x2f
    380c:	98 a9       	ldd	r25, Y+48	; 0x30
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	98 ab       	std	Y+48, r25	; 0x30
    3812:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3814:	8f a5       	ldd	r24, Y+47	; 0x2f
    3816:	98 a9       	ldd	r25, Y+48	; 0x30
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	69 f7       	brne	.-38     	; 0x37f6 <HCLCD_Vid4Bits_Init+0xe2>
    381c:	14 c0       	rjmp	.+40     	; 0x3846 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381e:	69 a9       	ldd	r22, Y+49	; 0x31
    3820:	7a a9       	ldd	r23, Y+50	; 0x32
    3822:	8b a9       	ldd	r24, Y+51	; 0x33
    3824:	9c a9       	ldd	r25, Y+52	; 0x34
    3826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	98 ab       	std	Y+48, r25	; 0x30
    3830:	8f a7       	std	Y+47, r24	; 0x2f
    3832:	8f a5       	ldd	r24, Y+47	; 0x2f
    3834:	98 a9       	ldd	r25, Y+48	; 0x30
    3836:	9c a7       	std	Y+44, r25	; 0x2c
    3838:	8b a7       	std	Y+43, r24	; 0x2b
    383a:	8b a5       	ldd	r24, Y+43	; 0x2b
    383c:	9c a5       	ldd	r25, Y+44	; 0x2c
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	f1 f7       	brne	.-4      	; 0x383e <HCLCD_Vid4Bits_Init+0x12a>
    3842:	9c a7       	std	Y+44, r25	; 0x2c
    3844:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3846:	82 e0       	ldi	r24, 0x02	; 2
    3848:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    384c:	82 e0       	ldi	r24, 0x02	; 2
    384e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    3852:	88 e2       	ldi	r24, 0x28	; 40
    3854:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	a0 e8       	ldi	r26, 0x80	; 128
    385e:	bf e3       	ldi	r27, 0x3F	; 63
    3860:	8f a3       	std	Y+39, r24	; 0x27
    3862:	98 a7       	std	Y+40, r25	; 0x28
    3864:	a9 a7       	std	Y+41, r26	; 0x29
    3866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3868:	6f a1       	ldd	r22, Y+39	; 0x27
    386a:	78 a5       	ldd	r23, Y+40	; 0x28
    386c:	89 a5       	ldd	r24, Y+41	; 0x29
    386e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	4a ef       	ldi	r20, 0xFA	; 250
    3876:	54 e4       	ldi	r21, 0x44	; 68
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	8b a3       	std	Y+35, r24	; 0x23
    3882:	9c a3       	std	Y+36, r25	; 0x24
    3884:	ad a3       	std	Y+37, r26	; 0x25
    3886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3888:	6b a1       	ldd	r22, Y+35	; 0x23
    388a:	7c a1       	ldd	r23, Y+36	; 0x24
    388c:	8d a1       	ldd	r24, Y+37	; 0x25
    388e:	9e a1       	ldd	r25, Y+38	; 0x26
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e8       	ldi	r20, 0x80	; 128
    3896:	5f e3       	ldi	r21, 0x3F	; 63
    3898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    389c:	88 23       	and	r24, r24
    389e:	2c f4       	brge	.+10     	; 0x38aa <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9a a3       	std	Y+34, r25	; 0x22
    38a6:	89 a3       	std	Y+33, r24	; 0x21
    38a8:	3f c0       	rjmp	.+126    	; 0x3928 <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    38aa:	6b a1       	ldd	r22, Y+35	; 0x23
    38ac:	7c a1       	ldd	r23, Y+36	; 0x24
    38ae:	8d a1       	ldd	r24, Y+37	; 0x25
    38b0:	9e a1       	ldd	r25, Y+38	; 0x26
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	3f ef       	ldi	r19, 0xFF	; 255
    38b6:	4f e7       	ldi	r20, 0x7F	; 127
    38b8:	57 e4       	ldi	r21, 0x47	; 71
    38ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38be:	18 16       	cp	r1, r24
    38c0:	4c f5       	brge	.+82     	; 0x3914 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c2:	6f a1       	ldd	r22, Y+39	; 0x27
    38c4:	78 a5       	ldd	r23, Y+40	; 0x28
    38c6:	89 a5       	ldd	r24, Y+41	; 0x29
    38c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e2       	ldi	r20, 0x20	; 32
    38d0:	51 e4       	ldi	r21, 0x41	; 65
    38d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	9a a3       	std	Y+34, r25	; 0x22
    38e8:	89 a3       	std	Y+33, r24	; 0x21
    38ea:	0f c0       	rjmp	.+30     	; 0x390a <HCLCD_Vid4Bits_Init+0x1f6>
    38ec:	88 ec       	ldi	r24, 0xC8	; 200
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	98 a3       	std	Y+32, r25	; 0x20
    38f2:	8f 8f       	std	Y+31, r24	; 0x1f
    38f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f6:	98 a1       	ldd	r25, Y+32	; 0x20
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	f1 f7       	brne	.-4      	; 0x38f8 <HCLCD_Vid4Bits_Init+0x1e4>
    38fc:	98 a3       	std	Y+32, r25	; 0x20
    38fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3900:	89 a1       	ldd	r24, Y+33	; 0x21
    3902:	9a a1       	ldd	r25, Y+34	; 0x22
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	9a a3       	std	Y+34, r25	; 0x22
    3908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390a:	89 a1       	ldd	r24, Y+33	; 0x21
    390c:	9a a1       	ldd	r25, Y+34	; 0x22
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	69 f7       	brne	.-38     	; 0x38ec <HCLCD_Vid4Bits_Init+0x1d8>
    3912:	14 c0       	rjmp	.+40     	; 0x393c <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3914:	6b a1       	ldd	r22, Y+35	; 0x23
    3916:	7c a1       	ldd	r23, Y+36	; 0x24
    3918:	8d a1       	ldd	r24, Y+37	; 0x25
    391a:	9e a1       	ldd	r25, Y+38	; 0x26
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	9a a3       	std	Y+34, r25	; 0x22
    3926:	89 a3       	std	Y+33, r24	; 0x21
    3928:	89 a1       	ldd	r24, Y+33	; 0x21
    392a:	9a a1       	ldd	r25, Y+34	; 0x22
    392c:	9e 8f       	std	Y+30, r25	; 0x1e
    392e:	8d 8f       	std	Y+29, r24	; 0x1d
    3930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <HCLCD_Vid4Bits_Init+0x220>
    3938:	9e 8f       	std	Y+30, r25	; 0x1e
    393a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    3942:	8f e0       	ldi	r24, 0x0F	; 15
    3944:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	a0 e8       	ldi	r26, 0x80	; 128
    394e:	bf e3       	ldi	r27, 0x3F	; 63
    3950:	89 8f       	std	Y+25, r24	; 0x19
    3952:	9a 8f       	std	Y+26, r25	; 0x1a
    3954:	ab 8f       	std	Y+27, r26	; 0x1b
    3956:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3958:	69 8d       	ldd	r22, Y+25	; 0x19
    395a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    395c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    395e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	4a ef       	ldi	r20, 0xFA	; 250
    3966:	54 e4       	ldi	r21, 0x44	; 68
    3968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	8d 8b       	std	Y+21, r24	; 0x15
    3972:	9e 8b       	std	Y+22, r25	; 0x16
    3974:	af 8b       	std	Y+23, r26	; 0x17
    3976:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3978:	6d 89       	ldd	r22, Y+21	; 0x15
    397a:	7e 89       	ldd	r23, Y+22	; 0x16
    397c:	8f 89       	ldd	r24, Y+23	; 0x17
    397e:	98 8d       	ldd	r25, Y+24	; 0x18
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e8       	ldi	r20, 0x80	; 128
    3986:	5f e3       	ldi	r21, 0x3F	; 63
    3988:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    398c:	88 23       	and	r24, r24
    398e:	2c f4       	brge	.+10     	; 0x399a <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	9c 8b       	std	Y+20, r25	; 0x14
    3996:	8b 8b       	std	Y+19, r24	; 0x13
    3998:	3f c0       	rjmp	.+126    	; 0x3a18 <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    399a:	6d 89       	ldd	r22, Y+21	; 0x15
    399c:	7e 89       	ldd	r23, Y+22	; 0x16
    399e:	8f 89       	ldd	r24, Y+23	; 0x17
    39a0:	98 8d       	ldd	r25, Y+24	; 0x18
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	3f ef       	ldi	r19, 0xFF	; 255
    39a6:	4f e7       	ldi	r20, 0x7F	; 127
    39a8:	57 e4       	ldi	r21, 0x47	; 71
    39aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ae:	18 16       	cp	r1, r24
    39b0:	4c f5       	brge	.+82     	; 0x3a04 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b2:	69 8d       	ldd	r22, Y+25	; 0x19
    39b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	40 e2       	ldi	r20, 0x20	; 32
    39c0:	51 e4       	ldi	r21, 0x41	; 65
    39c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9c 8b       	std	Y+20, r25	; 0x14
    39d8:	8b 8b       	std	Y+19, r24	; 0x13
    39da:	0f c0       	rjmp	.+30     	; 0x39fa <HCLCD_Vid4Bits_Init+0x2e6>
    39dc:	88 ec       	ldi	r24, 0xC8	; 200
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	9a 8b       	std	Y+18, r25	; 0x12
    39e2:	89 8b       	std	Y+17, r24	; 0x11
    39e4:	89 89       	ldd	r24, Y+17	; 0x11
    39e6:	9a 89       	ldd	r25, Y+18	; 0x12
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <HCLCD_Vid4Bits_Init+0x2d4>
    39ec:	9a 8b       	std	Y+18, r25	; 0x12
    39ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f0:	8b 89       	ldd	r24, Y+19	; 0x13
    39f2:	9c 89       	ldd	r25, Y+20	; 0x14
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	9c 8b       	std	Y+20, r25	; 0x14
    39f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fa:	8b 89       	ldd	r24, Y+19	; 0x13
    39fc:	9c 89       	ldd	r25, Y+20	; 0x14
    39fe:	00 97       	sbiw	r24, 0x00	; 0
    3a00:	69 f7       	brne	.-38     	; 0x39dc <HCLCD_Vid4Bits_Init+0x2c8>
    3a02:	14 c0       	rjmp	.+40     	; 0x3a2c <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a04:	6d 89       	ldd	r22, Y+21	; 0x15
    3a06:	7e 89       	ldd	r23, Y+22	; 0x16
    3a08:	8f 89       	ldd	r24, Y+23	; 0x17
    3a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	9c 8b       	std	Y+20, r25	; 0x14
    3a16:	8b 8b       	std	Y+19, r24	; 0x13
    3a18:	8b 89       	ldd	r24, Y+19	; 0x13
    3a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a1c:	98 8b       	std	Y+16, r25	; 0x10
    3a1e:	8f 87       	std	Y+15, r24	; 0x0f
    3a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a22:	98 89       	ldd	r25, Y+16	; 0x10
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <HCLCD_Vid4Bits_Init+0x310>
    3a28:	98 8b       	std	Y+16, r25	; 0x10
    3a2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	a0 e0       	ldi	r26, 0x00	; 0
    3a3e:	b0 e4       	ldi	r27, 0x40	; 64
    3a40:	8b 87       	std	Y+11, r24	; 0x0b
    3a42:	9c 87       	std	Y+12, r25	; 0x0c
    3a44:	ad 87       	std	Y+13, r26	; 0x0d
    3a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	4a ef       	ldi	r20, 0xFA	; 250
    3a56:	54 e4       	ldi	r21, 0x44	; 68
    3a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	8f 83       	std	Y+7, r24	; 0x07
    3a62:	98 87       	std	Y+8, r25	; 0x08
    3a64:	a9 87       	std	Y+9, r26	; 0x09
    3a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a68:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6a:	78 85       	ldd	r23, Y+8	; 0x08
    3a6c:	89 85       	ldd	r24, Y+9	; 0x09
    3a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	40 e8       	ldi	r20, 0x80	; 128
    3a76:	5f e3       	ldi	r21, 0x3F	; 63
    3a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a7c:	88 23       	and	r24, r24
    3a7e:	2c f4       	brge	.+10     	; 0x3a8a <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	9e 83       	std	Y+6, r25	; 0x06
    3a86:	8d 83       	std	Y+5, r24	; 0x05
    3a88:	3f c0       	rjmp	.+126    	; 0x3b08 <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    3a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8c:	78 85       	ldd	r23, Y+8	; 0x08
    3a8e:	89 85       	ldd	r24, Y+9	; 0x09
    3a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	3f ef       	ldi	r19, 0xFF	; 255
    3a96:	4f e7       	ldi	r20, 0x7F	; 127
    3a98:	57 e4       	ldi	r21, 0x47	; 71
    3a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a9e:	18 16       	cp	r1, r24
    3aa0:	4c f5       	brge	.+82     	; 0x3af4 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e2       	ldi	r20, 0x20	; 32
    3ab0:	51 e4       	ldi	r21, 0x41	; 65
    3ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	bc 01       	movw	r22, r24
    3abc:	cd 01       	movw	r24, r26
    3abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	9e 83       	std	Y+6, r25	; 0x06
    3ac8:	8d 83       	std	Y+5, r24	; 0x05
    3aca:	0f c0       	rjmp	.+30     	; 0x3aea <HCLCD_Vid4Bits_Init+0x3d6>
    3acc:	88 ec       	ldi	r24, 0xC8	; 200
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	9c 83       	std	Y+4, r25	; 0x04
    3ad2:	8b 83       	std	Y+3, r24	; 0x03
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	f1 f7       	brne	.-4      	; 0x3ad8 <HCLCD_Vid4Bits_Init+0x3c4>
    3adc:	9c 83       	std	Y+4, r25	; 0x04
    3ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	9e 83       	std	Y+6, r25	; 0x06
    3ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	00 97       	sbiw	r24, 0x00	; 0
    3af0:	69 f7       	brne	.-38     	; 0x3acc <HCLCD_Vid4Bits_Init+0x3b8>
    3af2:	14 c0       	rjmp	.+40     	; 0x3b1c <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af4:	6f 81       	ldd	r22, Y+7	; 0x07
    3af6:	78 85       	ldd	r23, Y+8	; 0x08
    3af8:	89 85       	ldd	r24, Y+9	; 0x09
    3afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	9e 83       	std	Y+6, r25	; 0x06
    3b06:	8d 83       	std	Y+5, r24	; 0x05
    3b08:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b0c:	9a 83       	std	Y+2, r25	; 0x02
    3b0e:	89 83       	std	Y+1, r24	; 0x01
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	9a 81       	ldd	r25, Y+2	; 0x02
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <HCLCD_Vid4Bits_Init+0x400>
    3b18:	9a 83       	std	Y+2, r25	; 0x02
    3b1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    3b22:	86 e0       	ldi	r24, 0x06	; 6
    3b24:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
}
    3b28:	e9 96       	adiw	r28, 0x39	; 57
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	cf 91       	pop	r28
    3b36:	df 91       	pop	r29
    3b38:	08 95       	ret

00003b3a <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    3b3a:	df 93       	push	r29
    3b3c:	cf 93       	push	r28
    3b3e:	cd b7       	in	r28, 0x3d	; 61
    3b40:	de b7       	in	r29, 0x3e	; 62
    3b42:	2f 97       	sbiw	r28, 0x0f	; 15
    3b44:	0f b6       	in	r0, 0x3f	; 63
    3b46:	f8 94       	cli
    3b48:	de bf       	out	0x3e, r29	; 62
    3b4a:	0f be       	out	0x3f, r0	; 63
    3b4c:	cd bf       	out	0x3d, r28	; 61
    3b4e:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	62 e0       	ldi	r22, 0x02	; 2
    3b54:	41 e0       	ldi	r20, 0x01	; 1
    3b56:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	62 e0       	ldi	r22, 0x02	; 2
    3b5e:	40 e0       	ldi	r20, 0x00	; 0
    3b60:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    3b64:	84 e0       	ldi	r24, 0x04	; 4
    3b66:	62 e0       	ldi	r22, 0x02	; 2
    3b68:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b6a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3b6e:	82 e0       	ldi	r24, 0x02	; 2
    3b70:	62 e0       	ldi	r22, 0x02	; 2
    3b72:	41 e0       	ldi	r20, 0x01	; 1
    3b74:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	a0 e0       	ldi	r26, 0x00	; 0
    3b7e:	b0 e4       	ldi	r27, 0x40	; 64
    3b80:	8b 87       	std	Y+11, r24	; 0x0b
    3b82:	9c 87       	std	Y+12, r25	; 0x0c
    3b84:	ad 87       	std	Y+13, r26	; 0x0d
    3b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	4a ef       	ldi	r20, 0xFA	; 250
    3b96:	54 e4       	ldi	r21, 0x44	; 68
    3b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	8f 83       	std	Y+7, r24	; 0x07
    3ba2:	98 87       	std	Y+8, r25	; 0x08
    3ba4:	a9 87       	std	Y+9, r26	; 0x09
    3ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    3baa:	78 85       	ldd	r23, Y+8	; 0x08
    3bac:	89 85       	ldd	r24, Y+9	; 0x09
    3bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e8       	ldi	r20, 0x80	; 128
    3bb6:	5f e3       	ldi	r21, 0x3F	; 63
    3bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bbc:	88 23       	and	r24, r24
    3bbe:	2c f4       	brge	.+10     	; 0x3bca <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	9e 83       	std	Y+6, r25	; 0x06
    3bc6:	8d 83       	std	Y+5, r24	; 0x05
    3bc8:	3f c0       	rjmp	.+126    	; 0x3c48 <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    3bca:	6f 81       	ldd	r22, Y+7	; 0x07
    3bcc:	78 85       	ldd	r23, Y+8	; 0x08
    3bce:	89 85       	ldd	r24, Y+9	; 0x09
    3bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	3f ef       	ldi	r19, 0xFF	; 255
    3bd6:	4f e7       	ldi	r20, 0x7F	; 127
    3bd8:	57 e4       	ldi	r21, 0x47	; 71
    3bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bde:	18 16       	cp	r1, r24
    3be0:	4c f5       	brge	.+82     	; 0x3c34 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	40 e2       	ldi	r20, 0x20	; 32
    3bf0:	51 e4       	ldi	r21, 0x41	; 65
    3bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	bc 01       	movw	r22, r24
    3bfc:	cd 01       	movw	r24, r26
    3bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	9e 83       	std	Y+6, r25	; 0x06
    3c08:	8d 83       	std	Y+5, r24	; 0x05
    3c0a:	0f c0       	rjmp	.+30     	; 0x3c2a <HCLCD_VidWriteChar_4Bits+0xf0>
    3c0c:	88 ec       	ldi	r24, 0xC8	; 200
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	9c 83       	std	Y+4, r25	; 0x04
    3c12:	8b 83       	std	Y+3, r24	; 0x03
    3c14:	8b 81       	ldd	r24, Y+3	; 0x03
    3c16:	9c 81       	ldd	r25, Y+4	; 0x04
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <HCLCD_VidWriteChar_4Bits+0xde>
    3c1c:	9c 83       	std	Y+4, r25	; 0x04
    3c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c20:	8d 81       	ldd	r24, Y+5	; 0x05
    3c22:	9e 81       	ldd	r25, Y+6	; 0x06
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	9e 83       	std	Y+6, r25	; 0x06
    3c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2e:	00 97       	sbiw	r24, 0x00	; 0
    3c30:	69 f7       	brne	.-38     	; 0x3c0c <HCLCD_VidWriteChar_4Bits+0xd2>
    3c32:	14 c0       	rjmp	.+40     	; 0x3c5c <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c34:	6f 81       	ldd	r22, Y+7	; 0x07
    3c36:	78 85       	ldd	r23, Y+8	; 0x08
    3c38:	89 85       	ldd	r24, Y+9	; 0x09
    3c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	9e 83       	std	Y+6, r25	; 0x06
    3c46:	8d 83       	std	Y+5, r24	; 0x05
    3c48:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4c:	9a 83       	std	Y+2, r25	; 0x02
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	9a 81       	ldd	r25, Y+2	; 0x02
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <HCLCD_VidWriteChar_4Bits+0x11a>
    3c58:	9a 83       	std	Y+2, r25	; 0x02
    3c5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3c5c:	82 e0       	ldi	r24, 0x02	; 2
    3c5e:	62 e0       	ldi	r22, 0x02	; 2
    3c60:	40 e0       	ldi	r20, 0x00	; 0
    3c62:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <MDIO_Error_State_SetPinValue>
}
    3c66:	2f 96       	adiw	r28, 0x0f	; 15
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	cd bf       	out	0x3d, r28	; 61
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	0f 92       	push	r0
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	82 95       	swap	r24
    3c88:	8f 70       	andi	r24, 0x0F	; 15
    3c8a:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3c8e:	89 81       	ldd	r24, Y+1	; 0x01
    3c90:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <HCLCD_VidWriteChar_4Bits>
}
    3c94:	0f 90       	pop	r0
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <HCLCD_Vid4Bits_DisplayString+0x6>
    3ca2:	0f 92       	push	r0
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	9b 83       	std	Y+3, r25	; 0x03
    3caa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3cac:	19 82       	std	Y+1, r1	; 0x01
    3cae:	0e c0       	rjmp	.+28     	; 0x3ccc <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cba:	fc 01       	movw	r30, r24
    3cbc:	e2 0f       	add	r30, r18
    3cbe:	f3 1f       	adc	r31, r19
    3cc0:	80 81       	ld	r24, Z
    3cc2:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    3cc8:	8f 5f       	subi	r24, 0xFF	; 255
    3cca:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	28 2f       	mov	r18, r24
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	e2 0f       	add	r30, r18
    3cda:	f3 1f       	adc	r31, r19
    3cdc:	80 81       	ld	r24, Z
    3cde:	88 23       	and	r24, r24
    3ce0:	39 f7       	brne	.-50     	; 0x3cb0 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	cf 91       	pop	r28
    3cea:	df 91       	pop	r29
    3cec:	08 95       	ret

00003cee <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3cee:	0f 93       	push	r16
    3cf0:	1f 93       	push	r17
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	60 97       	sbiw	r28, 0x10	; 16
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	6d 87       	std	Y+13, r22	; 0x0d
    3d08:	7e 87       	std	Y+14, r23	; 0x0e
    3d0a:	8f 87       	std	Y+15, r24	; 0x0f
    3d0c:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3d0e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d14:	af 85       	ldd	r26, Y+15	; 0x0f
    3d16:	b8 89       	ldd	r27, Y+16	; 0x10
    3d18:	00 97       	sbiw	r24, 0x00	; 0
    3d1a:	a1 05       	cpc	r26, r1
    3d1c:	b1 05       	cpc	r27, r1
    3d1e:	09 f4       	brne	.+2      	; 0x3d22 <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3d20:	4f c0       	rjmp	.+158    	; 0x3dc0 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3d22:	2d c0       	rjmp	.+90     	; 0x3d7e <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3d24:	8a 81       	ldd	r24, Y+2	; 0x02
    3d26:	08 2f       	mov	r16, r24
    3d28:	10 e0       	ldi	r17, 0x00	; 0
    3d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2e:	af 85       	ldd	r26, Y+15	; 0x0f
    3d30:	b8 89       	ldd	r27, Y+16	; 0x10
    3d32:	2a e0       	ldi	r18, 0x0A	; 10
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e0       	ldi	r20, 0x00	; 0
    3d38:	50 e0       	ldi	r21, 0x00	; 0
    3d3a:	bc 01       	movw	r22, r24
    3d3c:	cd 01       	movw	r24, r26
    3d3e:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	28 2f       	mov	r18, r24
    3d48:	ce 01       	movw	r24, r28
    3d4a:	03 96       	adiw	r24, 0x03	; 3
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	e0 0f       	add	r30, r16
    3d50:	f1 1f       	adc	r31, r17
    3d52:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d58:	af 85       	ldd	r26, Y+15	; 0x0f
    3d5a:	b8 89       	ldd	r27, Y+16	; 0x10
    3d5c:	2a e0       	ldi	r18, 0x0A	; 10
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	40 e0       	ldi	r20, 0x00	; 0
    3d62:	50 e0       	ldi	r21, 0x00	; 0
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
    3d6c:	da 01       	movw	r26, r20
    3d6e:	c9 01       	movw	r24, r18
    3d70:	8d 87       	std	Y+13, r24	; 0x0d
    3d72:	9e 87       	std	Y+14, r25	; 0x0e
    3d74:	af 87       	std	Y+15, r26	; 0x0f
    3d76:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3d78:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7a:	8f 5f       	subi	r24, 0xFF	; 255
    3d7c:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d82:	af 85       	ldd	r26, Y+15	; 0x0f
    3d84:	b8 89       	ldd	r27, Y+16	; 0x10
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	a1 05       	cpc	r26, r1
    3d8a:	b1 05       	cpc	r27, r1
    3d8c:	59 f6       	brne	.-106    	; 0x3d24 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d90:	81 50       	subi	r24, 0x01	; 1
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	11 c0       	rjmp	.+34     	; 0x3db8 <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	28 2f       	mov	r18, r24
    3d9a:	33 27       	eor	r19, r19
    3d9c:	27 fd       	sbrc	r18, 7
    3d9e:	30 95       	com	r19
    3da0:	ce 01       	movw	r24, r28
    3da2:	03 96       	adiw	r24, 0x03	; 3
    3da4:	fc 01       	movw	r30, r24
    3da6:	e2 0f       	add	r30, r18
    3da8:	f3 1f       	adc	r31, r19
    3daa:	80 81       	ld	r24, Z
    3dac:	80 5d       	subi	r24, 0xD0	; 208
    3dae:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	81 50       	subi	r24, 0x01	; 1
    3db6:	89 83       	std	Y+1, r24	; 0x01
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	88 23       	and	r24, r24
    3dbc:	64 f7       	brge	.-40     	; 0x3d96 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3dbe:	03 c0       	rjmp	.+6      	; 0x3dc6 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3dc0:	80 e3       	ldi	r24, 0x30	; 48
    3dc2:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3dc6:	60 96       	adiw	r28, 0x10	; 16
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
    3dd2:	cf 91       	pop	r28
    3dd4:	df 91       	pop	r29
    3dd6:	1f 91       	pop	r17
    3dd8:	0f 91       	pop	r16
    3dda:	08 95       	ret

00003ddc <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3ddc:	df 93       	push	r29
    3dde:	cf 93       	push	r28
    3de0:	00 d0       	rcall	.+0      	; 0x3de2 <HCLCD_Vid4Bits_SetPosition+0x6>
    3de2:	cd b7       	in	r28, 0x3d	; 61
    3de4:	de b7       	in	r29, 0x3e	; 62
    3de6:	89 83       	std	Y+1, r24	; 0x01
    3de8:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	81 30       	cpi	r24, 0x01	; 1
    3dee:	b9 f4       	brne	.+46     	; 0x3e1e <HCLCD_Vid4Bits_SetPosition+0x42>
    3df0:	8a 81       	ldd	r24, Y+2	; 0x02
    3df2:	80 31       	cpi	r24, 0x10	; 16
    3df4:	a0 f4       	brcc	.+40     	; 0x3e1e <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3df6:	8a 81       	ldd	r24, Y+2	; 0x02
    3df8:	88 2f       	mov	r24, r24
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	80 58       	subi	r24, 0x80	; 128
    3dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3e00:	95 95       	asr	r25
    3e02:	87 95       	ror	r24
    3e04:	95 95       	asr	r25
    3e06:	87 95       	ror	r24
    3e08:	95 95       	asr	r25
    3e0a:	87 95       	ror	r24
    3e0c:	95 95       	asr	r25
    3e0e:	87 95       	ror	r24
    3e10:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3e14:	8a 81       	ldd	r24, Y+2	; 0x02
    3e16:	80 58       	subi	r24, 0x80	; 128
    3e18:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    3e1c:	19 c0       	rjmp	.+50     	; 0x3e50 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	82 30       	cpi	r24, 0x02	; 2
    3e22:	b1 f4       	brne	.+44     	; 0x3e50 <HCLCD_Vid4Bits_SetPosition+0x74>
    3e24:	8a 81       	ldd	r24, Y+2	; 0x02
    3e26:	80 31       	cpi	r24, 0x10	; 16
    3e28:	98 f4       	brcc	.+38     	; 0x3e50 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2c:	88 2f       	mov	r24, r24
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	80 54       	subi	r24, 0x40	; 64
    3e32:	9f 4f       	sbci	r25, 0xFF	; 255
    3e34:	95 95       	asr	r25
    3e36:	87 95       	ror	r24
    3e38:	95 95       	asr	r25
    3e3a:	87 95       	ror	r24
    3e3c:	95 95       	asr	r25
    3e3e:	87 95       	ror	r24
    3e40:	95 95       	asr	r25
    3e42:	87 95       	ror	r24
    3e44:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3e48:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4a:	80 54       	subi	r24, 0x40	; 64
    3e4c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	cf 91       	pop	r28
    3e56:	df 91       	pop	r29
    3e58:	08 95       	ret

00003e5a <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3e5a:	df 93       	push	r29
    3e5c:	cf 93       	push	r28
    3e5e:	00 d0       	rcall	.+0      	; 0x3e60 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	8a 83       	std	Y+2, r24	; 0x02
    3e68:	7c 83       	std	Y+4, r23	; 0x04
    3e6a:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6e:	88 30       	cpi	r24, 0x08	; 8
    3e70:	98 f5       	brcc	.+102    	; 0x3ed8 <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3e72:	8a 81       	ldd	r24, Y+2	; 0x02
    3e74:	88 2f       	mov	r24, r24
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	08 96       	adiw	r24, 0x08	; 8
    3e7a:	88 0f       	add	r24, r24
    3e7c:	99 1f       	adc	r25, r25
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	88 0f       	add	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	95 95       	asr	r25
    3e88:	87 95       	ror	r24
    3e8a:	95 95       	asr	r25
    3e8c:	87 95       	ror	r24
    3e8e:	95 95       	asr	r25
    3e90:	87 95       	ror	r24
    3e92:	95 95       	asr	r25
    3e94:	87 95       	ror	r24
    3e96:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9c:	88 2f       	mov	r24, r24
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	08 96       	adiw	r24, 0x08	; 8
    3ea2:	88 0f       	add	r24, r24
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	88 0f       	add	r24, r24
    3ea8:	99 1f       	adc	r25, r25
    3eaa:	88 0f       	add	r24, r24
    3eac:	99 1f       	adc	r25, r25
    3eae:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3eb2:	19 82       	std	Y+1, r1	; 0x01
    3eb4:	0e c0       	rjmp	.+28     	; 0x3ed2 <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	28 2f       	mov	r18, r24
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	e2 0f       	add	r30, r18
    3ec4:	f3 1f       	adc	r31, r19
    3ec6:	80 81       	ld	r24, Z
    3ec8:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3ecc:	89 81       	ldd	r24, Y+1	; 0x01
    3ece:	8f 5f       	subi	r24, 0xFF	; 255
    3ed0:	89 83       	std	Y+1, r24	; 0x01
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	88 30       	cpi	r24, 0x08	; 8
    3ed6:	78 f3       	brcs	.-34     	; 0x3eb6 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	cf 91       	pop	r28
    3ee2:	df 91       	pop	r29
    3ee4:	08 95       	ret

00003ee6 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3ee6:	df 93       	push	r29
    3ee8:	cf 93       	push	r28
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
    3eee:	2e 97       	sbiw	r28, 0x0e	; 14
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	a0 e0       	ldi	r26, 0x00	; 0
    3f0c:	b0 e4       	ldi	r27, 0x40	; 64
    3f0e:	8b 87       	std	Y+11, r24	; 0x0b
    3f10:	9c 87       	std	Y+12, r25	; 0x0c
    3f12:	ad 87       	std	Y+13, r26	; 0x0d
    3f14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	4a ef       	ldi	r20, 0xFA	; 250
    3f24:	54 e4       	ldi	r21, 0x44	; 68
    3f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	8f 83       	std	Y+7, r24	; 0x07
    3f30:	98 87       	std	Y+8, r25	; 0x08
    3f32:	a9 87       	std	Y+9, r26	; 0x09
    3f34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f36:	6f 81       	ldd	r22, Y+7	; 0x07
    3f38:	78 85       	ldd	r23, Y+8	; 0x08
    3f3a:	89 85       	ldd	r24, Y+9	; 0x09
    3f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	40 e8       	ldi	r20, 0x80	; 128
    3f44:	5f e3       	ldi	r21, 0x3F	; 63
    3f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f4a:	88 23       	and	r24, r24
    3f4c:	2c f4       	brge	.+10     	; 0x3f58 <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	9e 83       	std	Y+6, r25	; 0x06
    3f54:	8d 83       	std	Y+5, r24	; 0x05
    3f56:	3f c0       	rjmp	.+126    	; 0x3fd6 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3f58:	6f 81       	ldd	r22, Y+7	; 0x07
    3f5a:	78 85       	ldd	r23, Y+8	; 0x08
    3f5c:	89 85       	ldd	r24, Y+9	; 0x09
    3f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	3f ef       	ldi	r19, 0xFF	; 255
    3f64:	4f e7       	ldi	r20, 0x7F	; 127
    3f66:	57 e4       	ldi	r21, 0x47	; 71
    3f68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f6c:	18 16       	cp	r1, r24
    3f6e:	4c f5       	brge	.+82     	; 0x3fc2 <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	40 e2       	ldi	r20, 0x20	; 32
    3f7e:	51 e4       	ldi	r21, 0x41	; 65
    3f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	bc 01       	movw	r22, r24
    3f8a:	cd 01       	movw	r24, r26
    3f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	9e 83       	std	Y+6, r25	; 0x06
    3f96:	8d 83       	std	Y+5, r24	; 0x05
    3f98:	0f c0       	rjmp	.+30     	; 0x3fb8 <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3f9a:	88 ec       	ldi	r24, 0xC8	; 200
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	9c 83       	std	Y+4, r25	; 0x04
    3fa0:	8b 83       	std	Y+3, r24	; 0x03
    3fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3faa:	9c 83       	std	Y+4, r25	; 0x04
    3fac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fae:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb2:	01 97       	sbiw	r24, 0x01	; 1
    3fb4:	9e 83       	std	Y+6, r25	; 0x06
    3fb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fba:	9e 81       	ldd	r25, Y+6	; 0x06
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	69 f7       	brne	.-38     	; 0x3f9a <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3fc0:	14 c0       	rjmp	.+40     	; 0x3fea <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc4:	78 85       	ldd	r23, Y+8	; 0x08
    3fc6:	89 85       	ldd	r24, Y+9	; 0x09
    3fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	9e 83       	std	Y+6, r25	; 0x06
    3fd4:	8d 83       	std	Y+5, r24	; 0x05
    3fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fda:	9a 83       	std	Y+2, r25	; 0x02
    3fdc:	89 83       	std	Y+1, r24	; 0x01
    3fde:	89 81       	ldd	r24, Y+1	; 0x01
    3fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	f1 f7       	brne	.-4      	; 0x3fe2 <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3fe6:	9a 83       	std	Y+2, r25	; 0x02
    3fe8:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3fea:	2e 96       	adiw	r28, 0x0e	; 14
    3fec:	0f b6       	in	r0, 0x3f	; 63
    3fee:	f8 94       	cli
    3ff0:	de bf       	out	0x3e, r29	; 62
    3ff2:	0f be       	out	0x3f, r0	; 63
    3ff4:	cd bf       	out	0x3d, r28	; 61
    3ff6:	cf 91       	pop	r28
    3ff8:	df 91       	pop	r29
    3ffa:	08 95       	ret

00003ffc <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3ffc:	df 93       	push	r29
    3ffe:	cf 93       	push	r28
    4000:	cd b7       	in	r28, 0x3d	; 61
    4002:	de b7       	in	r29, 0x3e	; 62
    4004:	60 97       	sbiw	r28, 0x10	; 16
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	f8 94       	cli
    400a:	de bf       	out	0x3e, r29	; 62
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	cd bf       	out	0x3d, r28	; 61
    4010:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4012:	1f 86       	std	Y+15, r1	; 0x0f
    4014:	7b c0       	rjmp	.+246    	; 0x410c <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    401c:	88 e1       	ldi	r24, 0x18	; 24
    401e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	a6 e9       	ldi	r26, 0x96	; 150
    4028:	b3 e4       	ldi	r27, 0x43	; 67
    402a:	8b 87       	std	Y+11, r24	; 0x0b
    402c:	9c 87       	std	Y+12, r25	; 0x0c
    402e:	ad 87       	std	Y+13, r26	; 0x0d
    4030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4032:	6b 85       	ldd	r22, Y+11	; 0x0b
    4034:	7c 85       	ldd	r23, Y+12	; 0x0c
    4036:	8d 85       	ldd	r24, Y+13	; 0x0d
    4038:	9e 85       	ldd	r25, Y+14	; 0x0e
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	4a ef       	ldi	r20, 0xFA	; 250
    4040:	54 e4       	ldi	r21, 0x44	; 68
    4042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	8f 83       	std	Y+7, r24	; 0x07
    404c:	98 87       	std	Y+8, r25	; 0x08
    404e:	a9 87       	std	Y+9, r26	; 0x09
    4050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4052:	6f 81       	ldd	r22, Y+7	; 0x07
    4054:	78 85       	ldd	r23, Y+8	; 0x08
    4056:	89 85       	ldd	r24, Y+9	; 0x09
    4058:	9a 85       	ldd	r25, Y+10	; 0x0a
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	40 e8       	ldi	r20, 0x80	; 128
    4060:	5f e3       	ldi	r21, 0x3F	; 63
    4062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4066:	88 23       	and	r24, r24
    4068:	2c f4       	brge	.+10     	; 0x4074 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	9e 83       	std	Y+6, r25	; 0x06
    4070:	8d 83       	std	Y+5, r24	; 0x05
    4072:	3f c0       	rjmp	.+126    	; 0x40f2 <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    4074:	6f 81       	ldd	r22, Y+7	; 0x07
    4076:	78 85       	ldd	r23, Y+8	; 0x08
    4078:	89 85       	ldd	r24, Y+9	; 0x09
    407a:	9a 85       	ldd	r25, Y+10	; 0x0a
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	3f ef       	ldi	r19, 0xFF	; 255
    4080:	4f e7       	ldi	r20, 0x7F	; 127
    4082:	57 e4       	ldi	r21, 0x47	; 71
    4084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4088:	18 16       	cp	r1, r24
    408a:	4c f5       	brge	.+82     	; 0x40de <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408c:	6b 85       	ldd	r22, Y+11	; 0x0b
    408e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4090:	8d 85       	ldd	r24, Y+13	; 0x0d
    4092:	9e 85       	ldd	r25, Y+14	; 0x0e
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e2       	ldi	r20, 0x20	; 32
    409a:	51 e4       	ldi	r21, 0x41	; 65
    409c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	bc 01       	movw	r22, r24
    40a6:	cd 01       	movw	r24, r26
    40a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9e 83       	std	Y+6, r25	; 0x06
    40b2:	8d 83       	std	Y+5, r24	; 0x05
    40b4:	0f c0       	rjmp	.+30     	; 0x40d4 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    40b6:	88 ec       	ldi	r24, 0xC8	; 200
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	9c 83       	std	Y+4, r25	; 0x04
    40bc:	8b 83       	std	Y+3, r24	; 0x03
    40be:	8b 81       	ldd	r24, Y+3	; 0x03
    40c0:	9c 81       	ldd	r25, Y+4	; 0x04
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    40c6:	9c 83       	std	Y+4, r25	; 0x04
    40c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ca:	8d 81       	ldd	r24, Y+5	; 0x05
    40cc:	9e 81       	ldd	r25, Y+6	; 0x06
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	9e 83       	std	Y+6, r25	; 0x06
    40d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d4:	8d 81       	ldd	r24, Y+5	; 0x05
    40d6:	9e 81       	ldd	r25, Y+6	; 0x06
    40d8:	00 97       	sbiw	r24, 0x00	; 0
    40da:	69 f7       	brne	.-38     	; 0x40b6 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    40dc:	14 c0       	rjmp	.+40     	; 0x4106 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40de:	6f 81       	ldd	r22, Y+7	; 0x07
    40e0:	78 85       	ldd	r23, Y+8	; 0x08
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	9e 83       	std	Y+6, r25	; 0x06
    40f0:	8d 83       	std	Y+5, r24	; 0x05
    40f2:	8d 81       	ldd	r24, Y+5	; 0x05
    40f4:	9e 81       	ldd	r25, Y+6	; 0x06
    40f6:	9a 83       	std	Y+2, r25	; 0x02
    40f8:	89 83       	std	Y+1, r24	; 0x01
    40fa:	89 81       	ldd	r24, Y+1	; 0x01
    40fc:	9a 81       	ldd	r25, Y+2	; 0x02
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	f1 f7       	brne	.-4      	; 0x40fe <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    4102:	9a 83       	std	Y+2, r25	; 0x02
    4104:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4106:	8f 85       	ldd	r24, Y+15	; 0x0f
    4108:	8f 5f       	subi	r24, 0xFF	; 255
    410a:	8f 87       	std	Y+15, r24	; 0x0f
    410c:	9f 85       	ldd	r25, Y+15	; 0x0f
    410e:	88 89       	ldd	r24, Y+16	; 0x10
    4110:	98 17       	cp	r25, r24
    4112:	08 f4       	brcc	.+2      	; 0x4116 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    4114:	80 cf       	rjmp	.-256    	; 0x4016 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    4116:	60 96       	adiw	r28, 0x10	; 16
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	cf 91       	pop	r28
    4124:	df 91       	pop	r29
    4126:	08 95       	ret

00004128 <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    4128:	df 93       	push	r29
    412a:	cf 93       	push	r28
    412c:	cd b7       	in	r28, 0x3d	; 61
    412e:	de b7       	in	r29, 0x3e	; 62
    4130:	60 97       	sbiw	r28, 0x10	; 16
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61
    413c:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    413e:	1f 86       	std	Y+15, r1	; 0x0f
    4140:	7b c0       	rjmp	.+246    	; 0x4238 <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    4148:	8c e1       	ldi	r24, 0x1C	; 28
    414a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a6 e9       	ldi	r26, 0x96	; 150
    4154:	b3 e4       	ldi	r27, 0x43	; 67
    4156:	8b 87       	std	Y+11, r24	; 0x0b
    4158:	9c 87       	std	Y+12, r25	; 0x0c
    415a:	ad 87       	std	Y+13, r26	; 0x0d
    415c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4160:	7c 85       	ldd	r23, Y+12	; 0x0c
    4162:	8d 85       	ldd	r24, Y+13	; 0x0d
    4164:	9e 85       	ldd	r25, Y+14	; 0x0e
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a ef       	ldi	r20, 0xFA	; 250
    416c:	54 e4       	ldi	r21, 0x44	; 68
    416e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	8f 83       	std	Y+7, r24	; 0x07
    4178:	98 87       	std	Y+8, r25	; 0x08
    417a:	a9 87       	std	Y+9, r26	; 0x09
    417c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    417e:	6f 81       	ldd	r22, Y+7	; 0x07
    4180:	78 85       	ldd	r23, Y+8	; 0x08
    4182:	89 85       	ldd	r24, Y+9	; 0x09
    4184:	9a 85       	ldd	r25, Y+10	; 0x0a
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e8       	ldi	r20, 0x80	; 128
    418c:	5f e3       	ldi	r21, 0x3F	; 63
    418e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4192:	88 23       	and	r24, r24
    4194:	2c f4       	brge	.+10     	; 0x41a0 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
    419e:	3f c0       	rjmp	.+126    	; 0x421e <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    41a0:	6f 81       	ldd	r22, Y+7	; 0x07
    41a2:	78 85       	ldd	r23, Y+8	; 0x08
    41a4:	89 85       	ldd	r24, Y+9	; 0x09
    41a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	3f ef       	ldi	r19, 0xFF	; 255
    41ac:	4f e7       	ldi	r20, 0x7F	; 127
    41ae:	57 e4       	ldi	r21, 0x47	; 71
    41b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41b4:	18 16       	cp	r1, r24
    41b6:	4c f5       	brge	.+82     	; 0x420a <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    41bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41be:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e2       	ldi	r20, 0x20	; 32
    41c6:	51 e4       	ldi	r21, 0x41	; 65
    41c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
    41e0:	0f c0       	rjmp	.+30     	; 0x4200 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    41e2:	88 ec       	ldi	r24, 0xC8	; 200
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
    41ea:	8b 81       	ldd	r24, Y+3	; 0x03
    41ec:	9c 81       	ldd	r25, Y+4	; 0x04
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	f1 f7       	brne	.-4      	; 0x41ee <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    41f2:	9c 83       	std	Y+4, r25	; 0x04
    41f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f6:	8d 81       	ldd	r24, Y+5	; 0x05
    41f8:	9e 81       	ldd	r25, Y+6	; 0x06
    41fa:	01 97       	sbiw	r24, 0x01	; 1
    41fc:	9e 83       	std	Y+6, r25	; 0x06
    41fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	69 f7       	brne	.-38     	; 0x41e2 <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    4208:	14 c0       	rjmp	.+40     	; 0x4232 <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420a:	6f 81       	ldd	r22, Y+7	; 0x07
    420c:	78 85       	ldd	r23, Y+8	; 0x08
    420e:	89 85       	ldd	r24, Y+9	; 0x09
    4210:	9a 85       	ldd	r25, Y+10	; 0x0a
    4212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	9e 83       	std	Y+6, r25	; 0x06
    421c:	8d 83       	std	Y+5, r24	; 0x05
    421e:	8d 81       	ldd	r24, Y+5	; 0x05
    4220:	9e 81       	ldd	r25, Y+6	; 0x06
    4222:	9a 83       	std	Y+2, r25	; 0x02
    4224:	89 83       	std	Y+1, r24	; 0x01
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	9a 81       	ldd	r25, Y+2	; 0x02
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    422e:	9a 83       	std	Y+2, r25	; 0x02
    4230:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4232:	8f 85       	ldd	r24, Y+15	; 0x0f
    4234:	8f 5f       	subi	r24, 0xFF	; 255
    4236:	8f 87       	std	Y+15, r24	; 0x0f
    4238:	9f 85       	ldd	r25, Y+15	; 0x0f
    423a:	88 89       	ldd	r24, Y+16	; 0x10
    423c:	98 17       	cp	r25, r24
    423e:	08 f4       	brcc	.+2      	; 0x4242 <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    4240:	80 cf       	rjmp	.-256    	; 0x4142 <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    4242:	60 96       	adiw	r28, 0x10	; 16
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	cd bf       	out	0x3d, r28	; 61
    424e:	cf 91       	pop	r28
    4250:	df 91       	pop	r29
    4252:	08 95       	ret

00004254 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    4254:	df 93       	push	r29
    4256:	cf 93       	push	r28
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
    425c:	60 97       	sbiw	r28, 0x10	; 16
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
    4268:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    426a:	1f 86       	std	Y+15, r1	; 0x0f
    426c:	7b c0       	rjmp	.+246    	; 0x4364 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    4274:	80 e1       	ldi	r24, 0x10	; 16
    4276:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	a6 e9       	ldi	r26, 0x96	; 150
    4280:	b3 e4       	ldi	r27, 0x43	; 67
    4282:	8b 87       	std	Y+11, r24	; 0x0b
    4284:	9c 87       	std	Y+12, r25	; 0x0c
    4286:	ad 87       	std	Y+13, r26	; 0x0d
    4288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428a:	6b 85       	ldd	r22, Y+11	; 0x0b
    428c:	7c 85       	ldd	r23, Y+12	; 0x0c
    428e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4290:	9e 85       	ldd	r25, Y+14	; 0x0e
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	4a ef       	ldi	r20, 0xFA	; 250
    4298:	54 e4       	ldi	r21, 0x44	; 68
    429a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	8f 83       	std	Y+7, r24	; 0x07
    42a4:	98 87       	std	Y+8, r25	; 0x08
    42a6:	a9 87       	std	Y+9, r26	; 0x09
    42a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42aa:	6f 81       	ldd	r22, Y+7	; 0x07
    42ac:	78 85       	ldd	r23, Y+8	; 0x08
    42ae:	89 85       	ldd	r24, Y+9	; 0x09
    42b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 e8       	ldi	r20, 0x80	; 128
    42b8:	5f e3       	ldi	r21, 0x3F	; 63
    42ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42be:	88 23       	and	r24, r24
    42c0:	2c f4       	brge	.+10     	; 0x42cc <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	9e 83       	std	Y+6, r25	; 0x06
    42c8:	8d 83       	std	Y+5, r24	; 0x05
    42ca:	3f c0       	rjmp	.+126    	; 0x434a <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    42cc:	6f 81       	ldd	r22, Y+7	; 0x07
    42ce:	78 85       	ldd	r23, Y+8	; 0x08
    42d0:	89 85       	ldd	r24, Y+9	; 0x09
    42d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	3f ef       	ldi	r19, 0xFF	; 255
    42d8:	4f e7       	ldi	r20, 0x7F	; 127
    42da:	57 e4       	ldi	r21, 0x47	; 71
    42dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42e0:	18 16       	cp	r1, r24
    42e2:	4c f5       	brge	.+82     	; 0x4336 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	40 e2       	ldi	r20, 0x20	; 32
    42f2:	51 e4       	ldi	r21, 0x41	; 65
    42f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	bc 01       	movw	r22, r24
    42fe:	cd 01       	movw	r24, r26
    4300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	9e 83       	std	Y+6, r25	; 0x06
    430a:	8d 83       	std	Y+5, r24	; 0x05
    430c:	0f c0       	rjmp	.+30     	; 0x432c <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    430e:	88 ec       	ldi	r24, 0xC8	; 200
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	9c 83       	std	Y+4, r25	; 0x04
    4314:	8b 83       	std	Y+3, r24	; 0x03
    4316:	8b 81       	ldd	r24, Y+3	; 0x03
    4318:	9c 81       	ldd	r25, Y+4	; 0x04
    431a:	01 97       	sbiw	r24, 0x01	; 1
    431c:	f1 f7       	brne	.-4      	; 0x431a <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    431e:	9c 83       	std	Y+4, r25	; 0x04
    4320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4322:	8d 81       	ldd	r24, Y+5	; 0x05
    4324:	9e 81       	ldd	r25, Y+6	; 0x06
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	9e 83       	std	Y+6, r25	; 0x06
    432a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432c:	8d 81       	ldd	r24, Y+5	; 0x05
    432e:	9e 81       	ldd	r25, Y+6	; 0x06
    4330:	00 97       	sbiw	r24, 0x00	; 0
    4332:	69 f7       	brne	.-38     	; 0x430e <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    4334:	14 c0       	rjmp	.+40     	; 0x435e <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4336:	6f 81       	ldd	r22, Y+7	; 0x07
    4338:	78 85       	ldd	r23, Y+8	; 0x08
    433a:	89 85       	ldd	r24, Y+9	; 0x09
    433c:	9a 85       	ldd	r25, Y+10	; 0x0a
    433e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	9e 83       	std	Y+6, r25	; 0x06
    4348:	8d 83       	std	Y+5, r24	; 0x05
    434a:	8d 81       	ldd	r24, Y+5	; 0x05
    434c:	9e 81       	ldd	r25, Y+6	; 0x06
    434e:	9a 83       	std	Y+2, r25	; 0x02
    4350:	89 83       	std	Y+1, r24	; 0x01
    4352:	89 81       	ldd	r24, Y+1	; 0x01
    4354:	9a 81       	ldd	r25, Y+2	; 0x02
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	f1 f7       	brne	.-4      	; 0x4356 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    435a:	9a 83       	std	Y+2, r25	; 0x02
    435c:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    435e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4360:	8f 5f       	subi	r24, 0xFF	; 255
    4362:	8f 87       	std	Y+15, r24	; 0x0f
    4364:	9f 85       	ldd	r25, Y+15	; 0x0f
    4366:	88 89       	ldd	r24, Y+16	; 0x10
    4368:	98 17       	cp	r25, r24
    436a:	08 f4       	brcc	.+2      	; 0x436e <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    436c:	80 cf       	rjmp	.-256    	; 0x426e <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    436e:	60 96       	adiw	r28, 0x10	; 16
    4370:	0f b6       	in	r0, 0x3f	; 63
    4372:	f8 94       	cli
    4374:	de bf       	out	0x3e, r29	; 62
    4376:	0f be       	out	0x3f, r0	; 63
    4378:	cd bf       	out	0x3d, r28	; 61
    437a:	cf 91       	pop	r28
    437c:	df 91       	pop	r29
    437e:	08 95       	ret

00004380 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    4380:	df 93       	push	r29
    4382:	cf 93       	push	r28
    4384:	cd b7       	in	r28, 0x3d	; 61
    4386:	de b7       	in	r29, 0x3e	; 62
    4388:	60 97       	sbiw	r28, 0x10	; 16
    438a:	0f b6       	in	r0, 0x3f	; 63
    438c:	f8 94       	cli
    438e:	de bf       	out	0x3e, r29	; 62
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	cd bf       	out	0x3d, r28	; 61
    4394:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4396:	1f 86       	std	Y+15, r1	; 0x0f
    4398:	7b c0       	rjmp	.+246    	; 0x4490 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    43a0:	84 e1       	ldi	r24, 0x14	; 20
    43a2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <HCLCD_Vid4Bits_SendCommand>
    43a6:	80 e0       	ldi	r24, 0x00	; 0
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	a6 e9       	ldi	r26, 0x96	; 150
    43ac:	b3 e4       	ldi	r27, 0x43	; 67
    43ae:	8b 87       	std	Y+11, r24	; 0x0b
    43b0:	9c 87       	std	Y+12, r25	; 0x0c
    43b2:	ad 87       	std	Y+13, r26	; 0x0d
    43b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    43b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    43ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    43bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	4a ef       	ldi	r20, 0xFA	; 250
    43c4:	54 e4       	ldi	r21, 0x44	; 68
    43c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	8f 83       	std	Y+7, r24	; 0x07
    43d0:	98 87       	std	Y+8, r25	; 0x08
    43d2:	a9 87       	std	Y+9, r26	; 0x09
    43d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43d6:	6f 81       	ldd	r22, Y+7	; 0x07
    43d8:	78 85       	ldd	r23, Y+8	; 0x08
    43da:	89 85       	ldd	r24, Y+9	; 0x09
    43dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43de:	20 e0       	ldi	r18, 0x00	; 0
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	40 e8       	ldi	r20, 0x80	; 128
    43e4:	5f e3       	ldi	r21, 0x3F	; 63
    43e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43ea:	88 23       	and	r24, r24
    43ec:	2c f4       	brge	.+10     	; 0x43f8 <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	9e 83       	std	Y+6, r25	; 0x06
    43f4:	8d 83       	std	Y+5, r24	; 0x05
    43f6:	3f c0       	rjmp	.+126    	; 0x4476 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    43f8:	6f 81       	ldd	r22, Y+7	; 0x07
    43fa:	78 85       	ldd	r23, Y+8	; 0x08
    43fc:	89 85       	ldd	r24, Y+9	; 0x09
    43fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	3f ef       	ldi	r19, 0xFF	; 255
    4404:	4f e7       	ldi	r20, 0x7F	; 127
    4406:	57 e4       	ldi	r21, 0x47	; 71
    4408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    440c:	18 16       	cp	r1, r24
    440e:	4c f5       	brge	.+82     	; 0x4462 <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4410:	6b 85       	ldd	r22, Y+11	; 0x0b
    4412:	7c 85       	ldd	r23, Y+12	; 0x0c
    4414:	8d 85       	ldd	r24, Y+13	; 0x0d
    4416:	9e 85       	ldd	r25, Y+14	; 0x0e
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	40 e2       	ldi	r20, 0x20	; 32
    441e:	51 e4       	ldi	r21, 0x41	; 65
    4420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	bc 01       	movw	r22, r24
    442a:	cd 01       	movw	r24, r26
    442c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	9e 83       	std	Y+6, r25	; 0x06
    4436:	8d 83       	std	Y+5, r24	; 0x05
    4438:	0f c0       	rjmp	.+30     	; 0x4458 <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    443a:	88 ec       	ldi	r24, 0xC8	; 200
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	9c 83       	std	Y+4, r25	; 0x04
    4440:	8b 83       	std	Y+3, r24	; 0x03
    4442:	8b 81       	ldd	r24, Y+3	; 0x03
    4444:	9c 81       	ldd	r25, Y+4	; 0x04
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	f1 f7       	brne	.-4      	; 0x4446 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    444a:	9c 83       	std	Y+4, r25	; 0x04
    444c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    444e:	8d 81       	ldd	r24, Y+5	; 0x05
    4450:	9e 81       	ldd	r25, Y+6	; 0x06
    4452:	01 97       	sbiw	r24, 0x01	; 1
    4454:	9e 83       	std	Y+6, r25	; 0x06
    4456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4458:	8d 81       	ldd	r24, Y+5	; 0x05
    445a:	9e 81       	ldd	r25, Y+6	; 0x06
    445c:	00 97       	sbiw	r24, 0x00	; 0
    445e:	69 f7       	brne	.-38     	; 0x443a <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    4460:	14 c0       	rjmp	.+40     	; 0x448a <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4462:	6f 81       	ldd	r22, Y+7	; 0x07
    4464:	78 85       	ldd	r23, Y+8	; 0x08
    4466:	89 85       	ldd	r24, Y+9	; 0x09
    4468:	9a 85       	ldd	r25, Y+10	; 0x0a
    446a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	9e 83       	std	Y+6, r25	; 0x06
    4474:	8d 83       	std	Y+5, r24	; 0x05
    4476:	8d 81       	ldd	r24, Y+5	; 0x05
    4478:	9e 81       	ldd	r25, Y+6	; 0x06
    447a:	9a 83       	std	Y+2, r25	; 0x02
    447c:	89 83       	std	Y+1, r24	; 0x01
    447e:	89 81       	ldd	r24, Y+1	; 0x01
    4480:	9a 81       	ldd	r25, Y+2	; 0x02
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	f1 f7       	brne	.-4      	; 0x4482 <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    4486:	9a 83       	std	Y+2, r25	; 0x02
    4488:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    448a:	8f 85       	ldd	r24, Y+15	; 0x0f
    448c:	8f 5f       	subi	r24, 0xFF	; 255
    448e:	8f 87       	std	Y+15, r24	; 0x0f
    4490:	9f 85       	ldd	r25, Y+15	; 0x0f
    4492:	88 89       	ldd	r24, Y+16	; 0x10
    4494:	98 17       	cp	r25, r24
    4496:	08 f4       	brcc	.+2      	; 0x449a <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    4498:	80 cf       	rjmp	.-256    	; 0x439a <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    449a:	60 96       	adiw	r28, 0x10	; 16
    449c:	0f b6       	in	r0, 0x3f	; 63
    449e:	f8 94       	cli
    44a0:	de bf       	out	0x3e, r29	; 62
    44a2:	0f be       	out	0x3f, r0	; 63
    44a4:	cd bf       	out	0x3d, r28	; 61
    44a6:	cf 91       	pop	r28
    44a8:	df 91       	pop	r29
    44aa:	08 95       	ret

000044ac <main>:
#define F_CPU 8000000
#define M2_READY 0x10

#include<util\delay.h>
int main(void)
{
    44ac:	df 93       	push	r29
    44ae:	cf 93       	push	r28
    44b0:	cd b7       	in	r28, 0x3d	; 61
    44b2:	de b7       	in	r29, 0x3e	; 62
    44b4:	c1 54       	subi	r28, 0x41	; 65
    44b6:	d0 40       	sbci	r29, 0x00	; 0
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	f8 94       	cli
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	cd bf       	out	0x3d, r28	; 61
	u8 bufer[20];
	LED_t LED1={MDIO_PORTA,PIN0};
    44c2:	fe 01       	movw	r30, r28
    44c4:	e0 5c       	subi	r30, 0xC0	; 192
    44c6:	ff 4f       	sbci	r31, 0xFF	; 255
    44c8:	10 82       	st	Z, r1
    44ca:	fe 01       	movw	r30, r28
    44cc:	e0 5c       	subi	r30, 0xC0	; 192
    44ce:	ff 4f       	sbci	r31, 0xFF	; 255
    44d0:	11 82       	std	Z+1, r1	; 0x01
	/*Set MOSI Pin --> PINB5 as an Input*/
	MDIO_Error_State_SetPinDirection(PIN5,MDIO_PORTB,PIN_INPUT);
    44d2:	85 e0       	ldi	r24, 0x05	; 5
    44d4:	61 e0       	ldi	r22, 0x01	; 1
    44d6:	40 e0       	ldi	r20, 0x00	; 0
    44d8:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	/*Set MISO Pin --> PINB6 as an Output*/
	MDIO_Error_State_SetPinDirection(PIN6,MDIO_PORTB,PIN_OUTPUT);
    44dc:	86 e0       	ldi	r24, 0x06	; 6
    44de:	61 e0       	ldi	r22, 0x01	; 1
    44e0:	41 e0       	ldi	r20, 0x01	; 1
    44e2:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>
	/*Set SCK  Pin --> PINB7 as an Input*/
	MDIO_Error_State_SetPinDirection(PIN7,MDIO_PORTB,PIN_INPUT);
    44e6:	87 e0       	ldi	r24, 0x07	; 7
    44e8:	61 e0       	ldi	r22, 0x01	; 1
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	0e 94 0f 0b 	call	0x161e	; 0x161e <MDIO_Error_State_SetPinDirection>

	HLED_VidInit(&LED1);
    44f0:	ce 01       	movw	r24, r28
    44f2:	80 5c       	subi	r24, 0xC0	; 192
    44f4:	9f 4f       	sbci	r25, 0xFF	; 255
    44f6:	0e 94 67 11 	call	0x22ce	; 0x22ce <HLED_VidInit>

	MSPI_VidSlave_Init();
    44fa:	0e 94 c7 08 	call	0x118e	; 0x118e <MSPI_VidSlave_Init>
	/*CLCD Initialization*/
	HCLCD_Vid4Bits_Init();
    44fe:	0e 94 8a 1b 	call	0x3714	; 0x3714 <HCLCD_Vid4Bits_Init>
	HCLCD_Vid4Bits_DisplayString((u8*)"Welcome...");
    4502:	80 e6       	ldi	r24, 0x60	; 96
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <HCLCD_Vid4Bits_DisplayString>
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	a8 ec       	ldi	r26, 0xC8	; 200
    4510:	b2 e4       	ldi	r27, 0x42	; 66
    4512:	8f a3       	std	Y+39, r24	; 0x27
    4514:	98 a7       	std	Y+40, r25	; 0x28
    4516:	a9 a7       	std	Y+41, r26	; 0x29
    4518:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451a:	6f a1       	ldd	r22, Y+39	; 0x27
    451c:	78 a5       	ldd	r23, Y+40	; 0x28
    451e:	89 a5       	ldd	r24, Y+41	; 0x29
    4520:	9a a5       	ldd	r25, Y+42	; 0x2a
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	4a ef       	ldi	r20, 0xFA	; 250
    4528:	54 e4       	ldi	r21, 0x44	; 68
    452a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	8b a3       	std	Y+35, r24	; 0x23
    4534:	9c a3       	std	Y+36, r25	; 0x24
    4536:	ad a3       	std	Y+37, r26	; 0x25
    4538:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    453a:	6b a1       	ldd	r22, Y+35	; 0x23
    453c:	7c a1       	ldd	r23, Y+36	; 0x24
    453e:	8d a1       	ldd	r24, Y+37	; 0x25
    4540:	9e a1       	ldd	r25, Y+38	; 0x26
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	40 e8       	ldi	r20, 0x80	; 128
    4548:	5f e3       	ldi	r21, 0x3F	; 63
    454a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    454e:	88 23       	and	r24, r24
    4550:	2c f4       	brge	.+10     	; 0x455c <main+0xb0>
		__ticks = 1;
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	9a a3       	std	Y+34, r25	; 0x22
    4558:	89 a3       	std	Y+33, r24	; 0x21
    455a:	3f c0       	rjmp	.+126    	; 0x45da <main+0x12e>
	else if (__tmp > 65535)
    455c:	6b a1       	ldd	r22, Y+35	; 0x23
    455e:	7c a1       	ldd	r23, Y+36	; 0x24
    4560:	8d a1       	ldd	r24, Y+37	; 0x25
    4562:	9e a1       	ldd	r25, Y+38	; 0x26
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	3f ef       	ldi	r19, 0xFF	; 255
    4568:	4f e7       	ldi	r20, 0x7F	; 127
    456a:	57 e4       	ldi	r21, 0x47	; 71
    456c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4570:	18 16       	cp	r1, r24
    4572:	4c f5       	brge	.+82     	; 0x45c6 <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4574:	6f a1       	ldd	r22, Y+39	; 0x27
    4576:	78 a5       	ldd	r23, Y+40	; 0x28
    4578:	89 a5       	ldd	r24, Y+41	; 0x29
    457a:	9a a5       	ldd	r25, Y+42	; 0x2a
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	40 e2       	ldi	r20, 0x20	; 32
    4582:	51 e4       	ldi	r21, 0x41	; 65
    4584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	bc 01       	movw	r22, r24
    458e:	cd 01       	movw	r24, r26
    4590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	9a a3       	std	Y+34, r25	; 0x22
    459a:	89 a3       	std	Y+33, r24	; 0x21
    459c:	0f c0       	rjmp	.+30     	; 0x45bc <main+0x110>
    459e:	88 ec       	ldi	r24, 0xC8	; 200
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	98 a3       	std	Y+32, r25	; 0x20
    45a4:	8f 8f       	std	Y+31, r24	; 0x1f
    45a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45a8:	98 a1       	ldd	r25, Y+32	; 0x20
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	f1 f7       	brne	.-4      	; 0x45aa <main+0xfe>
    45ae:	98 a3       	std	Y+32, r25	; 0x20
    45b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b2:	89 a1       	ldd	r24, Y+33	; 0x21
    45b4:	9a a1       	ldd	r25, Y+34	; 0x22
    45b6:	01 97       	sbiw	r24, 0x01	; 1
    45b8:	9a a3       	std	Y+34, r25	; 0x22
    45ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45bc:	89 a1       	ldd	r24, Y+33	; 0x21
    45be:	9a a1       	ldd	r25, Y+34	; 0x22
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	69 f7       	brne	.-38     	; 0x459e <main+0xf2>
    45c4:	14 c0       	rjmp	.+40     	; 0x45ee <main+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c6:	6b a1       	ldd	r22, Y+35	; 0x23
    45c8:	7c a1       	ldd	r23, Y+36	; 0x24
    45ca:	8d a1       	ldd	r24, Y+37	; 0x25
    45cc:	9e a1       	ldd	r25, Y+38	; 0x26
    45ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	9a a3       	std	Y+34, r25	; 0x22
    45d8:	89 a3       	std	Y+33, r24	; 0x21
    45da:	89 a1       	ldd	r24, Y+33	; 0x21
    45dc:	9a a1       	ldd	r25, Y+34	; 0x22
    45de:	9e 8f       	std	Y+30, r25	; 0x1e
    45e0:	8d 8f       	std	Y+29, r24	; 0x1d
    45e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45e6:	01 97       	sbiw	r24, 0x01	; 1
    45e8:	f1 f7       	brne	.-4      	; 0x45e6 <main+0x13a>
    45ea:	9e 8f       	std	Y+30, r25	; 0x1e
    45ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	HCLCD_Vid4Bits_ClearScreen();
    45ee:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <HCLCD_Vid4Bits_ClearScreen>
	MSPI_u8Send_Receive_Char(M2_READY);
    45f2:	80 e1       	ldi	r24, 0x10	; 16
    45f4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <MSPI_u8Send_Receive_Char>
	MSPI_Receive_String(bufer);
    45f8:	ce 01       	movw	r24, r28
    45fa:	8c 96       	adiw	r24, 0x2c	; 44
    45fc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <MSPI_Receive_String>
	HCLCD_Vid4Bits_DisplayString(bufer);
    4600:	ce 01       	movw	r24, r28
    4602:	8c 96       	adiw	r24, 0x2c	; 44
    4604:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <HCLCD_Vid4Bits_DisplayString>
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	aa e7       	ldi	r26, 0x7A	; 122
    460e:	b4 e4       	ldi	r27, 0x44	; 68
    4610:	89 8f       	std	Y+25, r24	; 0x19
    4612:	9a 8f       	std	Y+26, r25	; 0x1a
    4614:	ab 8f       	std	Y+27, r26	; 0x1b
    4616:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4618:	69 8d       	ldd	r22, Y+25	; 0x19
    461a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    461c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    461e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	4a ef       	ldi	r20, 0xFA	; 250
    4626:	54 e4       	ldi	r21, 0x44	; 68
    4628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	8d 8b       	std	Y+21, r24	; 0x15
    4632:	9e 8b       	std	Y+22, r25	; 0x16
    4634:	af 8b       	std	Y+23, r26	; 0x17
    4636:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4638:	6d 89       	ldd	r22, Y+21	; 0x15
    463a:	7e 89       	ldd	r23, Y+22	; 0x16
    463c:	8f 89       	ldd	r24, Y+23	; 0x17
    463e:	98 8d       	ldd	r25, Y+24	; 0x18
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	40 e8       	ldi	r20, 0x80	; 128
    4646:	5f e3       	ldi	r21, 0x3F	; 63
    4648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    464c:	88 23       	and	r24, r24
    464e:	2c f4       	brge	.+10     	; 0x465a <main+0x1ae>
		__ticks = 1;
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	9c 8b       	std	Y+20, r25	; 0x14
    4656:	8b 8b       	std	Y+19, r24	; 0x13
    4658:	3f c0       	rjmp	.+126    	; 0x46d8 <main+0x22c>
	else if (__tmp > 65535)
    465a:	6d 89       	ldd	r22, Y+21	; 0x15
    465c:	7e 89       	ldd	r23, Y+22	; 0x16
    465e:	8f 89       	ldd	r24, Y+23	; 0x17
    4660:	98 8d       	ldd	r25, Y+24	; 0x18
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	3f ef       	ldi	r19, 0xFF	; 255
    4666:	4f e7       	ldi	r20, 0x7F	; 127
    4668:	57 e4       	ldi	r21, 0x47	; 71
    466a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    466e:	18 16       	cp	r1, r24
    4670:	4c f5       	brge	.+82     	; 0x46c4 <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4672:	69 8d       	ldd	r22, Y+25	; 0x19
    4674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	40 e2       	ldi	r20, 0x20	; 32
    4680:	51 e4       	ldi	r21, 0x41	; 65
    4682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	bc 01       	movw	r22, r24
    468c:	cd 01       	movw	r24, r26
    468e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	9c 8b       	std	Y+20, r25	; 0x14
    4698:	8b 8b       	std	Y+19, r24	; 0x13
    469a:	0f c0       	rjmp	.+30     	; 0x46ba <main+0x20e>
    469c:	88 ec       	ldi	r24, 0xC8	; 200
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	9a 8b       	std	Y+18, r25	; 0x12
    46a2:	89 8b       	std	Y+17, r24	; 0x11
    46a4:	89 89       	ldd	r24, Y+17	; 0x11
    46a6:	9a 89       	ldd	r25, Y+18	; 0x12
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	f1 f7       	brne	.-4      	; 0x46a8 <main+0x1fc>
    46ac:	9a 8b       	std	Y+18, r25	; 0x12
    46ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b0:	8b 89       	ldd	r24, Y+19	; 0x13
    46b2:	9c 89       	ldd	r25, Y+20	; 0x14
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	9c 8b       	std	Y+20, r25	; 0x14
    46b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ba:	8b 89       	ldd	r24, Y+19	; 0x13
    46bc:	9c 89       	ldd	r25, Y+20	; 0x14
    46be:	00 97       	sbiw	r24, 0x00	; 0
    46c0:	69 f7       	brne	.-38     	; 0x469c <main+0x1f0>
    46c2:	14 c0       	rjmp	.+40     	; 0x46ec <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46c4:	6d 89       	ldd	r22, Y+21	; 0x15
    46c6:	7e 89       	ldd	r23, Y+22	; 0x16
    46c8:	8f 89       	ldd	r24, Y+23	; 0x17
    46ca:	98 8d       	ldd	r25, Y+24	; 0x18
    46cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	9c 8b       	std	Y+20, r25	; 0x14
    46d6:	8b 8b       	std	Y+19, r24	; 0x13
    46d8:	8b 89       	ldd	r24, Y+19	; 0x13
    46da:	9c 89       	ldd	r25, Y+20	; 0x14
    46dc:	98 8b       	std	Y+16, r25	; 0x10
    46de:	8f 87       	std	Y+15, r24	; 0x0f
    46e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    46e2:	98 89       	ldd	r25, Y+16	; 0x10
    46e4:	01 97       	sbiw	r24, 0x01	; 1
    46e6:	f1 f7       	brne	.-4      	; 0x46e4 <main+0x238>
    46e8:	98 8b       	std	Y+16, r25	; 0x10
    46ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    46ec:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <HCLCD_Vid4Bits_ClearScreen>

	u8 LOC_u8SPIReceivechar;
	while(1)
	{
		// MSPI_u8Send_Receive_Char(M2_READY);
		 LOC_u8SPIReceivechar = MSPI_u8Send_Receive_Char(0);
    46f0:	80 e0       	ldi	r24, 0x00	; 0
    46f2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <MSPI_u8Send_Receive_Char>
    46f6:	8b a7       	std	Y+43, r24	; 0x2b
						if((LOC_u8SPIReceivechar!='#')&&(LOC_u8SPIReceivechar!='*'))
    46f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    46fa:	83 32       	cpi	r24, 0x23	; 35
    46fc:	39 f0       	breq	.+14     	; 0x470c <main+0x260>
    46fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    4700:	8a 32       	cpi	r24, 0x2A	; 42
    4702:	21 f0       	breq	.+8      	; 0x470c <main+0x260>
						{
							HCLCD_Vid4Bits_DisplayCharacter(LOC_u8SPIReceivechar);
    4704:	8b a5       	ldd	r24, Y+43	; 0x2b
    4706:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <HCLCD_Vid4Bits_DisplayCharacter>
    470a:	f2 cf       	rjmp	.-28     	; 0x46f0 <main+0x244>
						}
						else if(LOC_u8SPIReceivechar =='#')
    470c:	8b a5       	ldd	r24, Y+43	; 0x2b
    470e:	83 32       	cpi	r24, 0x23	; 35
    4710:	21 f4       	brne	.+8      	; 0x471a <main+0x26e>
						{
							HCLCD_Vid4Bits_DisplayCharacter(' ');
    4712:	80 e2       	ldi	r24, 0x20	; 32
    4714:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <HCLCD_Vid4Bits_DisplayCharacter>
    4718:	eb cf       	rjmp	.-42     	; 0x46f0 <main+0x244>

						}
						else if(LOC_u8SPIReceivechar =='*')
    471a:	8b a5       	ldd	r24, Y+43	; 0x2b
    471c:	8a 32       	cpi	r24, 0x2A	; 42
    471e:	41 f7       	brne	.-48     	; 0x46f0 <main+0x244>
						{
							HLED_VidLed_Toggle(&LED1);
    4720:	ce 01       	movw	r24, r28
    4722:	80 5c       	subi	r24, 0xC0	; 192
    4724:	9f 4f       	sbci	r25, 0xFF	; 255
    4726:	0e 94 a9 11 	call	0x2352	; 0x2352 <HLED_VidLed_Toggle>
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	aa e7       	ldi	r26, 0x7A	; 122
    4730:	b4 e4       	ldi	r27, 0x44	; 68
    4732:	8b 87       	std	Y+11, r24	; 0x0b
    4734:	9c 87       	std	Y+12, r25	; 0x0c
    4736:	ad 87       	std	Y+13, r26	; 0x0d
    4738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    473a:	6b 85       	ldd	r22, Y+11	; 0x0b
    473c:	7c 85       	ldd	r23, Y+12	; 0x0c
    473e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4740:	9e 85       	ldd	r25, Y+14	; 0x0e
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	4a ef       	ldi	r20, 0xFA	; 250
    4748:	54 e4       	ldi	r21, 0x44	; 68
    474a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	8f 83       	std	Y+7, r24	; 0x07
    4754:	98 87       	std	Y+8, r25	; 0x08
    4756:	a9 87       	std	Y+9, r26	; 0x09
    4758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    475a:	6f 81       	ldd	r22, Y+7	; 0x07
    475c:	78 85       	ldd	r23, Y+8	; 0x08
    475e:	89 85       	ldd	r24, Y+9	; 0x09
    4760:	9a 85       	ldd	r25, Y+10	; 0x0a
    4762:	20 e0       	ldi	r18, 0x00	; 0
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	40 e8       	ldi	r20, 0x80	; 128
    4768:	5f e3       	ldi	r21, 0x3F	; 63
    476a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    476e:	88 23       	and	r24, r24
    4770:	2c f4       	brge	.+10     	; 0x477c <main+0x2d0>
		__ticks = 1;
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	9e 83       	std	Y+6, r25	; 0x06
    4778:	8d 83       	std	Y+5, r24	; 0x05
    477a:	3f c0       	rjmp	.+126    	; 0x47fa <main+0x34e>
	else if (__tmp > 65535)
    477c:	6f 81       	ldd	r22, Y+7	; 0x07
    477e:	78 85       	ldd	r23, Y+8	; 0x08
    4780:	89 85       	ldd	r24, Y+9	; 0x09
    4782:	9a 85       	ldd	r25, Y+10	; 0x0a
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	3f ef       	ldi	r19, 0xFF	; 255
    4788:	4f e7       	ldi	r20, 0x7F	; 127
    478a:	57 e4       	ldi	r21, 0x47	; 71
    478c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4790:	18 16       	cp	r1, r24
    4792:	4c f5       	brge	.+82     	; 0x47e6 <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4794:	6b 85       	ldd	r22, Y+11	; 0x0b
    4796:	7c 85       	ldd	r23, Y+12	; 0x0c
    4798:	8d 85       	ldd	r24, Y+13	; 0x0d
    479a:	9e 85       	ldd	r25, Y+14	; 0x0e
    479c:	20 e0       	ldi	r18, 0x00	; 0
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	40 e2       	ldi	r20, 0x20	; 32
    47a2:	51 e4       	ldi	r21, 0x41	; 65
    47a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a8:	dc 01       	movw	r26, r24
    47aa:	cb 01       	movw	r24, r22
    47ac:	bc 01       	movw	r22, r24
    47ae:	cd 01       	movw	r24, r26
    47b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	9e 83       	std	Y+6, r25	; 0x06
    47ba:	8d 83       	std	Y+5, r24	; 0x05
    47bc:	0f c0       	rjmp	.+30     	; 0x47dc <main+0x330>
    47be:	88 ec       	ldi	r24, 0xC8	; 200
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	9c 83       	std	Y+4, r25	; 0x04
    47c4:	8b 83       	std	Y+3, r24	; 0x03
    47c6:	8b 81       	ldd	r24, Y+3	; 0x03
    47c8:	9c 81       	ldd	r25, Y+4	; 0x04
    47ca:	01 97       	sbiw	r24, 0x01	; 1
    47cc:	f1 f7       	brne	.-4      	; 0x47ca <main+0x31e>
    47ce:	9c 83       	std	Y+4, r25	; 0x04
    47d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47d2:	8d 81       	ldd	r24, Y+5	; 0x05
    47d4:	9e 81       	ldd	r25, Y+6	; 0x06
    47d6:	01 97       	sbiw	r24, 0x01	; 1
    47d8:	9e 83       	std	Y+6, r25	; 0x06
    47da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47dc:	8d 81       	ldd	r24, Y+5	; 0x05
    47de:	9e 81       	ldd	r25, Y+6	; 0x06
    47e0:	00 97       	sbiw	r24, 0x00	; 0
    47e2:	69 f7       	brne	.-38     	; 0x47be <main+0x312>
    47e4:	14 c0       	rjmp	.+40     	; 0x480e <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47e6:	6f 81       	ldd	r22, Y+7	; 0x07
    47e8:	78 85       	ldd	r23, Y+8	; 0x08
    47ea:	89 85       	ldd	r24, Y+9	; 0x09
    47ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	9e 83       	std	Y+6, r25	; 0x06
    47f8:	8d 83       	std	Y+5, r24	; 0x05
    47fa:	8d 81       	ldd	r24, Y+5	; 0x05
    47fc:	9e 81       	ldd	r25, Y+6	; 0x06
    47fe:	9a 83       	std	Y+2, r25	; 0x02
    4800:	89 83       	std	Y+1, r24	; 0x01
    4802:	89 81       	ldd	r24, Y+1	; 0x01
    4804:	9a 81       	ldd	r25, Y+2	; 0x02
    4806:	01 97       	sbiw	r24, 0x01	; 1
    4808:	f1 f7       	brne	.-4      	; 0x4806 <main+0x35a>
    480a:	9a 83       	std	Y+2, r25	; 0x02
    480c:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(1000);
							HCLCD_Vid4Bits_ClearScreen();
    480e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <HCLCD_Vid4Bits_ClearScreen>
    4812:	6e cf       	rjmp	.-292    	; 0x46f0 <main+0x244>

00004814 <__udivmodsi4>:
    4814:	a1 e2       	ldi	r26, 0x21	; 33
    4816:	1a 2e       	mov	r1, r26
    4818:	aa 1b       	sub	r26, r26
    481a:	bb 1b       	sub	r27, r27
    481c:	fd 01       	movw	r30, r26
    481e:	0d c0       	rjmp	.+26     	; 0x483a <__udivmodsi4_ep>

00004820 <__udivmodsi4_loop>:
    4820:	aa 1f       	adc	r26, r26
    4822:	bb 1f       	adc	r27, r27
    4824:	ee 1f       	adc	r30, r30
    4826:	ff 1f       	adc	r31, r31
    4828:	a2 17       	cp	r26, r18
    482a:	b3 07       	cpc	r27, r19
    482c:	e4 07       	cpc	r30, r20
    482e:	f5 07       	cpc	r31, r21
    4830:	20 f0       	brcs	.+8      	; 0x483a <__udivmodsi4_ep>
    4832:	a2 1b       	sub	r26, r18
    4834:	b3 0b       	sbc	r27, r19
    4836:	e4 0b       	sbc	r30, r20
    4838:	f5 0b       	sbc	r31, r21

0000483a <__udivmodsi4_ep>:
    483a:	66 1f       	adc	r22, r22
    483c:	77 1f       	adc	r23, r23
    483e:	88 1f       	adc	r24, r24
    4840:	99 1f       	adc	r25, r25
    4842:	1a 94       	dec	r1
    4844:	69 f7       	brne	.-38     	; 0x4820 <__udivmodsi4_loop>
    4846:	60 95       	com	r22
    4848:	70 95       	com	r23
    484a:	80 95       	com	r24
    484c:	90 95       	com	r25
    484e:	9b 01       	movw	r18, r22
    4850:	ac 01       	movw	r20, r24
    4852:	bd 01       	movw	r22, r26
    4854:	cf 01       	movw	r24, r30
    4856:	08 95       	ret

00004858 <__prologue_saves__>:
    4858:	2f 92       	push	r2
    485a:	3f 92       	push	r3
    485c:	4f 92       	push	r4
    485e:	5f 92       	push	r5
    4860:	6f 92       	push	r6
    4862:	7f 92       	push	r7
    4864:	8f 92       	push	r8
    4866:	9f 92       	push	r9
    4868:	af 92       	push	r10
    486a:	bf 92       	push	r11
    486c:	cf 92       	push	r12
    486e:	df 92       	push	r13
    4870:	ef 92       	push	r14
    4872:	ff 92       	push	r15
    4874:	0f 93       	push	r16
    4876:	1f 93       	push	r17
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62
    4880:	ca 1b       	sub	r28, r26
    4882:	db 0b       	sbc	r29, r27
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	09 94       	ijmp

00004890 <__epilogue_restores__>:
    4890:	2a 88       	ldd	r2, Y+18	; 0x12
    4892:	39 88       	ldd	r3, Y+17	; 0x11
    4894:	48 88       	ldd	r4, Y+16	; 0x10
    4896:	5f 84       	ldd	r5, Y+15	; 0x0f
    4898:	6e 84       	ldd	r6, Y+14	; 0x0e
    489a:	7d 84       	ldd	r7, Y+13	; 0x0d
    489c:	8c 84       	ldd	r8, Y+12	; 0x0c
    489e:	9b 84       	ldd	r9, Y+11	; 0x0b
    48a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    48a2:	b9 84       	ldd	r11, Y+9	; 0x09
    48a4:	c8 84       	ldd	r12, Y+8	; 0x08
    48a6:	df 80       	ldd	r13, Y+7	; 0x07
    48a8:	ee 80       	ldd	r14, Y+6	; 0x06
    48aa:	fd 80       	ldd	r15, Y+5	; 0x05
    48ac:	0c 81       	ldd	r16, Y+4	; 0x04
    48ae:	1b 81       	ldd	r17, Y+3	; 0x03
    48b0:	aa 81       	ldd	r26, Y+2	; 0x02
    48b2:	b9 81       	ldd	r27, Y+1	; 0x01
    48b4:	ce 0f       	add	r28, r30
    48b6:	d1 1d       	adc	r29, r1
    48b8:	0f b6       	in	r0, 0x3f	; 63
    48ba:	f8 94       	cli
    48bc:	de bf       	out	0x3e, r29	; 62
    48be:	0f be       	out	0x3f, r0	; 63
    48c0:	cd bf       	out	0x3d, r28	; 61
    48c2:	ed 01       	movw	r28, r26
    48c4:	08 95       	ret

000048c6 <_exit>:
    48c6:	f8 94       	cli

000048c8 <__stop_program>:
    48c8:	ff cf       	rjmp	.-2      	; 0x48c8 <__stop_program>
